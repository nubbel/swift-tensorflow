/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/protobuf/worker_service.proto
 *
 */

/*
 *
 * Copyright 2017, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
public enum Tensorflow_Grpc_WorkerServiceServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Tensorflow_Grpc_WorkerServiceProvider {
  func getstatus(request : Tensorflow_GetStatusRequest, session : Tensorflow_Grpc_WorkerServiceGetStatusSession) throws -> Tensorflow_GetStatusResponse
  func createworkersession(request : Tensorflow_CreateWorkerSessionRequest, session : Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession) throws -> Tensorflow_CreateWorkerSessionResponse
  func registergraph(request : Tensorflow_RegisterGraphRequest, session : Tensorflow_Grpc_WorkerServiceRegisterGraphSession) throws -> Tensorflow_RegisterGraphResponse
  func deregistergraph(request : Tensorflow_DeregisterGraphRequest, session : Tensorflow_Grpc_WorkerServiceDeregisterGraphSession) throws -> Tensorflow_DeregisterGraphResponse
  func rungraph(request : Tensorflow_RunGraphRequest, session : Tensorflow_Grpc_WorkerServiceRunGraphSession) throws -> Tensorflow_RunGraphResponse
  func cleanupgraph(request : Tensorflow_CleanupGraphRequest, session : Tensorflow_Grpc_WorkerServiceCleanupGraphSession) throws -> Tensorflow_CleanupGraphResponse
  func cleanupall(request : Tensorflow_CleanupAllRequest, session : Tensorflow_Grpc_WorkerServiceCleanupAllSession) throws -> Tensorflow_CleanupAllResponse
  func recvtensor(request : Tensorflow_RecvTensorRequest, session : Tensorflow_Grpc_WorkerServiceRecvTensorSession) throws -> Tensorflow_RecvTensorResponse
  func logging(request : Tensorflow_LoggingRequest, session : Tensorflow_Grpc_WorkerServiceLoggingSession) throws -> Tensorflow_LoggingResponse
  func tracing(request : Tensorflow_TracingRequest, session : Tensorflow_Grpc_WorkerServiceTracingSession) throws -> Tensorflow_TracingResponse
}

/// Common properties available in each service session.
public class Tensorflow_Grpc_WorkerServiceSession {
  fileprivate var handler : gRPC.Handler
  public var requestMetadata : Metadata { return handler.requestMetadata }

  public var statusCode : Int = 0
  public var statusMessage : String = "OK"
  public var initialMetadata : Metadata = Metadata()
  public var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GetStatus (Unary)
public class Tensorflow_Grpc_WorkerServiceGetStatusSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_GetStatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.getstatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CreateWorkerSession (Unary)
public class Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CreateWorkerSessionRequest(serializedData:requestData)
        let replyMessage = try self.provider.createworkersession(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RegisterGraph (Unary)
public class Tensorflow_Grpc_WorkerServiceRegisterGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RegisterGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.registergraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DeregisterGraph (Unary)
public class Tensorflow_Grpc_WorkerServiceDeregisterGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_DeregisterGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.deregistergraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RunGraph (Unary)
public class Tensorflow_Grpc_WorkerServiceRunGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RunGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.rungraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CleanupGraph (Unary)
public class Tensorflow_Grpc_WorkerServiceCleanupGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CleanupGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.cleanupgraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CleanupAll (Unary)
public class Tensorflow_Grpc_WorkerServiceCleanupAllSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CleanupAllRequest(serializedData:requestData)
        let replyMessage = try self.provider.cleanupall(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RecvTensor (Unary)
public class Tensorflow_Grpc_WorkerServiceRecvTensorSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RecvTensorRequest(serializedData:requestData)
        let replyMessage = try self.provider.recvtensor(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Logging (Unary)
public class Tensorflow_Grpc_WorkerServiceLoggingSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_LoggingRequest(serializedData:requestData)
        let replyMessage = try self.provider.logging(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Tracing (Unary)
public class Tensorflow_Grpc_WorkerServiceTracingSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_TracingRequest(serializedData:requestData)
        let replyMessage = try self.provider.tracing(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
public class Tensorflow_Grpc_WorkerServiceServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Tensorflow_Grpc_WorkerServiceProvider?

  /// Create a server that accepts insecure connections.
  public init(address:String,
              provider:Tensorflow_Grpc_WorkerServiceProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  public init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Tensorflow_Grpc_WorkerServiceProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  public func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/tensorflow.grpc.WorkerService/GetStatus":
          try Tensorflow_Grpc_WorkerServiceGetStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CreateWorkerSession":
          try Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RegisterGraph":
          try Tensorflow_Grpc_WorkerServiceRegisterGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/DeregisterGraph":
          try Tensorflow_Grpc_WorkerServiceDeregisterGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RunGraph":
          try Tensorflow_Grpc_WorkerServiceRunGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CleanupGraph":
          try Tensorflow_Grpc_WorkerServiceCleanupGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CleanupAll":
          try Tensorflow_Grpc_WorkerServiceCleanupAllSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RecvTensor":
          try Tensorflow_Grpc_WorkerServiceRecvTensorSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/Logging":
          try Tensorflow_Grpc_WorkerServiceLoggingSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/Tracing":
          try Tensorflow_Grpc_WorkerServiceTracingSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
