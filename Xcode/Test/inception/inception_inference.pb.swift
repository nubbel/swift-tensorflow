/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/examples/inception_inference.proto
 *
 */

// Protobuf definition of inception v3 model inference server.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

public struct Tensorflow_Serving_InceptionRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".InceptionRequest"

  /// JPEG encoded stream of the image to be classified.
  public var jpegEncoded: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.jpegEncoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jpegEncoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.jpegEncoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Serving_InceptionResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".InceptionResponse"

  /// Human readable descriptions of the classes, in scores descending order.
  public var classes: [String] = []

  /// Scores of top matches, in same order as classes.
  public var scores: [Float] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedFloatField(value: &self.scores)
      case 3: try decoder.decodeRepeatedStringField(value: &self.classes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scores.isEmpty {
      try visitor.visitPackedFloatField(value: self.scores, fieldNumber: 2)
    }
    if !self.classes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.classes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_InceptionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "jpeg_encoded"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_InceptionRequest) -> Bool {
    if self.jpegEncoded != other.jpegEncoded {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_InceptionResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "classes"),
    2: .same(proto: "scores"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_InceptionResponse) -> Bool {
    if self.classes != other.classes {return false}
    if self.scores != other.scores {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
