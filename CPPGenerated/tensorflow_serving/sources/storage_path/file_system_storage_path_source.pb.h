// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace serving {
class FileSystemStoragePathSourceConfig;
class FileSystemStoragePathSourceConfigDefaultTypeInternal;
extern FileSystemStoragePathSourceConfigDefaultTypeInternal _FileSystemStoragePathSourceConfig_default_instance_;
class FileSystemStoragePathSourceConfig_ServableToMonitor;
class FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
}  // namespace serving
}  // namespace tensorflow

namespace tensorflow {
namespace serving {

namespace protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto

enum FileSystemStoragePathSourceConfig_VersionPolicy {
  FileSystemStoragePathSourceConfig_VersionPolicy_LATEST_VERSION = 0,
  FileSystemStoragePathSourceConfig_VersionPolicy_ALL_VERSIONS = 1,
  FileSystemStoragePathSourceConfig_VersionPolicy_FileSystemStoragePathSourceConfig_VersionPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileSystemStoragePathSourceConfig_VersionPolicy_FileSystemStoragePathSourceConfig_VersionPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileSystemStoragePathSourceConfig_VersionPolicy_IsValid(int value);
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_MIN = FileSystemStoragePathSourceConfig_VersionPolicy_LATEST_VERSION;
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_MAX = FileSystemStoragePathSourceConfig_VersionPolicy_ALL_VERSIONS;
const int FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_ARRAYSIZE = FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileSystemStoragePathSourceConfig_VersionPolicy_descriptor();
inline const ::std::string& FileSystemStoragePathSourceConfig_VersionPolicy_Name(FileSystemStoragePathSourceConfig_VersionPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileSystemStoragePathSourceConfig_VersionPolicy_descriptor(), value);
}
inline bool FileSystemStoragePathSourceConfig_VersionPolicy_Parse(
    const ::std::string& name, FileSystemStoragePathSourceConfig_VersionPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileSystemStoragePathSourceConfig_VersionPolicy>(
    FileSystemStoragePathSourceConfig_VersionPolicy_descriptor(), name, value);
}
// ===================================================================

class FileSystemStoragePathSourceConfig_ServableToMonitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableToMonitor();
  virtual ~FileSystemStoragePathSourceConfig_ServableToMonitor();

  FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);

  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableToMonitor& default_instance();

  static inline const FileSystemStoragePathSourceConfig_ServableToMonitor* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableToMonitor*>(
               &_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_);
  }

  void Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableToMonitor* New() const PROTOBUF_FINAL { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableToMonitor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string servable_name = 1;
  void clear_servable_name();
  static const int kServableNameFieldNumber = 1;
  const ::std::string& servable_name() const;
  void set_servable_name(const ::std::string& value);
  #if LANG_CXX11
  void set_servable_name(::std::string&& value);
  #endif
  void set_servable_name(const char* value);
  void set_servable_name(const char* value, size_t size);
  ::std::string* mutable_servable_name();
  ::std::string* release_servable_name();
  void set_allocated_servable_name(::std::string* servable_name);

  // string base_path = 2;
  void clear_base_path();
  static const int kBasePathFieldNumber = 2;
  const ::std::string& base_path() const;
  void set_base_path(const ::std::string& value);
  #if LANG_CXX11
  void set_base_path(::std::string&& value);
  #endif
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  ::std::string* mutable_base_path();
  ::std::string* release_base_path();
  void set_allocated_base_path(::std::string* base_path);

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
  void clear_version_policy();
  static const int kVersionPolicyFieldNumber = 3;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy version_policy() const;
  void set_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servable_name_;
  ::google::protobuf::internal::ArenaStringPtr base_path_;
  int version_policy_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig) */ {
 public:
  FileSystemStoragePathSourceConfig();
  virtual ~FileSystemStoragePathSourceConfig();

  FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from);

  inline FileSystemStoragePathSourceConfig& operator=(const FileSystemStoragePathSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig& default_instance();

  static inline const FileSystemStoragePathSourceConfig* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig*>(
               &_FileSystemStoragePathSourceConfig_default_instance_);
  }

  void Swap(FileSystemStoragePathSourceConfig* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  FileSystemStoragePathSourceConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileSystemStoragePathSourceConfig& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileSystemStoragePathSourceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FileSystemStoragePathSourceConfig_ServableToMonitor ServableToMonitor;

  typedef FileSystemStoragePathSourceConfig_VersionPolicy VersionPolicy;
  static const VersionPolicy LATEST_VERSION =
    FileSystemStoragePathSourceConfig_VersionPolicy_LATEST_VERSION;
  static const VersionPolicy ALL_VERSIONS =
    FileSystemStoragePathSourceConfig_VersionPolicy_ALL_VERSIONS;
  static inline bool VersionPolicy_IsValid(int value) {
    return FileSystemStoragePathSourceConfig_VersionPolicy_IsValid(value);
  }
  static const VersionPolicy VersionPolicy_MIN =
    FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_MIN;
  static const VersionPolicy VersionPolicy_MAX =
    FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_MAX;
  static const int VersionPolicy_ARRAYSIZE =
    FileSystemStoragePathSourceConfig_VersionPolicy_VersionPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionPolicy_descriptor() {
    return FileSystemStoragePathSourceConfig_VersionPolicy_descriptor();
  }
  static inline const ::std::string& VersionPolicy_Name(VersionPolicy value) {
    return FileSystemStoragePathSourceConfig_VersionPolicy_Name(value);
  }
  static inline bool VersionPolicy_Parse(const ::std::string& name,
      VersionPolicy* value) {
    return FileSystemStoragePathSourceConfig_VersionPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  int servables_size() const;
  void clear_servables();
  static const int kServablesFieldNumber = 5;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& servables(int index) const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* mutable_servables(int index);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* add_servables();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
      mutable_servables();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
      servables() const;

  // string servable_name = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kServableNameFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& servable_name() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_servable_name(::std::string* servable_name);

  // string base_path = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kBasePathFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& base_path() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_base_path(::std::string* base_path);

  // int64 file_system_poll_wait_seconds = 3;
  void clear_file_system_poll_wait_seconds();
  static const int kFileSystemPollWaitSecondsFieldNumber = 3;
  ::google::protobuf::int64 file_system_poll_wait_seconds() const;
  void set_file_system_poll_wait_seconds(::google::protobuf::int64 value);

  // bool fail_if_zero_versions_at_startup = 4;
  void clear_fail_if_zero_versions_at_startup();
  static const int kFailIfZeroVersionsAtStartupFieldNumber = 4;
  bool fail_if_zero_versions_at_startup() const;
  void set_fail_if_zero_versions_at_startup(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor > servables_;
  ::google::protobuf::internal::ArenaStringPtr servable_name_;
  ::google::protobuf::internal::ArenaStringPtr base_path_;
  ::google::protobuf::int64 file_system_poll_wait_seconds_;
  bool fail_if_zero_versions_at_startup_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSystemStoragePathSourceConfig_ServableToMonitor

// string servable_name = 1;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.GetNoArena();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
#if LANG_CXX11
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(::std::string&& value) {
  
  servable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
#endif
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// string base_path = 2;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.GetNoArena();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
#if LANG_CXX11
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(::std::string&& value) {
  
  base_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
#endif
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_version_policy() {
  version_policy_ = 0;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig_ServableToMonitor::version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.version_policy)
  return static_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy >(version_policy_);
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy value) {
  
  version_policy_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.version_policy)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
inline int FileSystemStoragePathSourceConfig::servables_size() const {
  return servables_.size();
}
inline void FileSystemStoragePathSourceConfig::clear_servables() {
  servables_.Clear();
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Get(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Mutable(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
FileSystemStoragePathSourceConfig::mutable_servables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return &servables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
FileSystemStoragePathSourceConfig::servables() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_;
}

// string servable_name = 1 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.GetNoArena();
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
#if LANG_CXX11
inline void FileSystemStoragePathSourceConfig::set_servable_name(::std::string&& value) {
  
  servable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
#endif
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline ::std::string* FileSystemStoragePathSourceConfig::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}

// string base_path = 2 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.GetNoArena();
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
#if LANG_CXX11
inline void FileSystemStoragePathSourceConfig::set_base_path(::std::string&& value) {
  
  base_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
#endif
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline ::std::string* FileSystemStoragePathSourceConfig::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}

// int64 file_system_poll_wait_seconds = 3;
inline void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  file_system_poll_wait_seconds_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return file_system_poll_wait_seconds_;
}
inline void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::google::protobuf::int64 value) {
  
  file_system_poll_wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}

// bool fail_if_zero_versions_at_startup = 4;
inline void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  fail_if_zero_versions_at_startup_ = false;
}
inline bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return fail_if_zero_versions_at_startup_;
}
inline void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  
  fail_if_zero_versions_at_startup_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serving
}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy>() {
  return ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED
