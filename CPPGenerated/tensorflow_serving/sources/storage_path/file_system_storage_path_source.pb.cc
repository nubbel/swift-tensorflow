// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/sources/storage_path/file_system_storage_path_source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
class FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableToMonitor> {
} _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
class FileSystemStoragePathSourceConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig> {
} _FileSystemStoragePathSourceConfig_default_instance_;

namespace protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, servable_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, base_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, version_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servable_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, base_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, file_system_poll_wait_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, fail_if_zero_versions_at_startup_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FileSystemStoragePathSourceConfig_ServableToMonitor)},
  { 7, -1, sizeof(FileSystemStoragePathSourceConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileSystemStoragePathSourceConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FileSystemStoragePathSourceConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_.DefaultConstruct();
  _FileSystemStoragePathSourceConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nMtensorflow_serving/sources/storage_pat"
      "h/file_system_storage_path_source.proto\022"
      "\022tensorflow.serving\"\326\003\n!FileSystemStorag"
      "ePathSourceConfig\022Z\n\tservables\030\005 \003(\0132G.t"
      "ensorflow.serving.FileSystemStoragePathS"
      "ourceConfig.ServableToMonitor\022\031\n\rservabl"
      "e_name\030\001 \001(\tB\002\030\001\022\025\n\tbase_path\030\002 \001(\tB\002\030\001\022"
      "%\n\035file_system_poll_wait_seconds\030\003 \001(\003\022("
      "\n fail_if_zero_versions_at_startup\030\004 \001(\010"
      "\032\232\001\n\021ServableToMonitor\022\025\n\rservable_name\030"
      "\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\022[\n\016version_poli"
      "cy\030\003 \001(\0162C.tensorflow.serving.FileSystem"
      "StoragePathSourceConfig.VersionPolicy\"5\n"
      "\rVersionPolicy\022\022\n\016LATEST_VERSION\020\000\022\020\n\014AL"
      "L_VERSIONS\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto

const ::google::protobuf::EnumDescriptor* FileSystemStoragePathSourceConfig_VersionPolicy_descriptor() {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::file_level_enum_descriptors[0];
}
bool FileSystemStoragePathSourceConfig_VersionPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig::LATEST_VERSION;
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig::ALL_VERSIONS;
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig::VersionPolicy_MIN;
const FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig::VersionPolicy_MAX;
const int FileSystemStoragePathSourceConfig::VersionPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kServableNameFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kBasePathFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kVersionPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}
FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servable_name().size() > 0) {
    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.base_path().size() > 0) {
    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  version_policy_ = from.version_policy_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedCtor() {
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_policy_ = 0;
  _cached_size_ = 0;
}

FileSystemStoragePathSourceConfig_ServableToMonitor::~FileSystemStoragePathSourceConfig_ServableToMonitor() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedDtor() {
  servable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableToMonitor::descriptor() {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::file_level_metadata[0].descriptor;
}

const FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance() {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig_ServableToMonitor::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableToMonitor* n = new FileSystemStoragePathSourceConfig_ServableToMonitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_policy_ = 0;
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string servable_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servable_name().data(), this->servable_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string base_path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version_policy(static_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  // string servable_name = 1;
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servable_name(), output);
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_path(), output);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
  if (this->version_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->version_policy(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  // string servable_name = 1;
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servable_name(), target);
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
  if (this->version_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->version_policy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableToMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  size_t total_size = 0;

  // string servable_name = 1;
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servable_name());
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_path());
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
  if (this->version_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableToMonitor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableToMonitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.servable_name().size() > 0) {

    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  if (from.base_path().size() > 0) {

    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  if (from.version_policy() != 0) {
    set_version_policy(from.version_policy());
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  servable_name_.Swap(&other->servable_name_);
  base_path_.Swap(&other->base_path_);
  std::swap(version_policy_, other->version_policy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableToMonitor::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSystemStoragePathSourceConfig_ServableToMonitor

// string servable_name = 1;
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.GetNoArena();
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
#if LANG_CXX11
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(::std::string&& value) {
  
  servable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
#endif
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// string base_path = 2;
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.GetNoArena();
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
#if LANG_CXX11
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(::std::string&& value) {
  
  base_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
#endif
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.VersionPolicy version_policy = 3;
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_version_policy() {
  version_policy_ = 0;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy FileSystemStoragePathSourceConfig_ServableToMonitor::version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.version_policy)
  return static_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy >(version_policy_);
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_VersionPolicy value) {
  
  version_policy_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.version_policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig::kServablesFieldNumber;
const int FileSystemStoragePathSourceConfig::kServableNameFieldNumber;
const int FileSystemStoragePathSourceConfig::kBasePathFieldNumber;
const int FileSystemStoragePathSourceConfig::kFileSystemPollWaitSecondsFieldNumber;
const int FileSystemStoragePathSourceConfig::kFailIfZeroVersionsAtStartupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}
FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servables_(from.servables_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servable_name().size() > 0) {
    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.base_path().size() > 0) {
    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  ::memcpy(&file_system_poll_wait_seconds_, &from.file_system_poll_wait_seconds_,
    reinterpret_cast<char*>(&fail_if_zero_versions_at_startup_) -
    reinterpret_cast<char*>(&file_system_poll_wait_seconds_) + sizeof(fail_if_zero_versions_at_startup_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

void FileSystemStoragePathSourceConfig::SharedCtor() {
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_system_poll_wait_seconds_, 0, reinterpret_cast<char*>(&fail_if_zero_versions_at_startup_) -
    reinterpret_cast<char*>(&file_system_poll_wait_seconds_) + sizeof(fail_if_zero_versions_at_startup_));
  _cached_size_ = 0;
}

FileSystemStoragePathSourceConfig::~FileSystemStoragePathSourceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig::SharedDtor() {
  servable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileSystemStoragePathSourceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig::descriptor() {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::file_level_metadata[1].descriptor;
}

const FileSystemStoragePathSourceConfig& FileSystemStoragePathSourceConfig::default_instance() {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileSystemStoragePathSourceConfig* FileSystemStoragePathSourceConfig::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig* n = new FileSystemStoragePathSourceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  servables_.Clear();
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_system_poll_wait_seconds_, 0, reinterpret_cast<char*>(&fail_if_zero_versions_at_startup_) -
    reinterpret_cast<char*>(&file_system_poll_wait_seconds_) + sizeof(fail_if_zero_versions_at_startup_));
}

bool FileSystemStoragePathSourceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string servable_name = 1 [deprecated = true];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servable_name().data(), this->servable_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string base_path = 2 [deprecated = true];
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_system_poll_wait_seconds = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_system_poll_wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fail_if_zero_versions_at_startup = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_if_zero_versions_at_startup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_servables()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  // string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servable_name(), output);
  }

  // string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_path(), output);
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_system_poll_wait_seconds(), output);
  }

  // bool fail_if_zero_versions_at_startup = 4;
  if (this->fail_if_zero_versions_at_startup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fail_if_zero_versions_at_startup(), output);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned int i = 0, n = this->servables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->servables(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  // string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servable_name(), target);
  }

  // string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_system_poll_wait_seconds(), target);
  }

  // bool fail_if_zero_versions_at_startup = 4;
  if (this->fail_if_zero_versions_at_startup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fail_if_zero_versions_at_startup(), target);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned int i = 0, n = this->servables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->servables(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return target;
}

size_t FileSystemStoragePathSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  size_t total_size = 0;

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  {
    unsigned int count = this->servables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servables(i));
    }
  }

  // string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servable_name());
  }

  // string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_path());
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_system_poll_wait_seconds());
  }

  // bool fail_if_zero_versions_at_startup = 4;
  if (this->fail_if_zero_versions_at_startup() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig::MergeFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servables_.MergeFrom(from.servables_);
  if (from.servable_name().size() > 0) {

    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  if (from.base_path().size() > 0) {

    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  if (from.file_system_poll_wait_seconds() != 0) {
    set_file_system_poll_wait_seconds(from.file_system_poll_wait_seconds());
  }
  if (from.fail_if_zero_versions_at_startup() != 0) {
    set_fail_if_zero_versions_at_startup(from.fail_if_zero_versions_at_startup());
  }
}

void FileSystemStoragePathSourceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig::CopyFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig::Swap(FileSystemStoragePathSourceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig::InternalSwap(FileSystemStoragePathSourceConfig* other) {
  servables_.UnsafeArenaSwap(&other->servables_);
  servable_name_.Swap(&other->servable_name_);
  base_path_.Swap(&other->base_path_);
  std::swap(file_system_poll_wait_seconds_, other->file_system_poll_wait_seconds_);
  std::swap(fail_if_zero_versions_at_startup_, other->fail_if_zero_versions_at_startup_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
int FileSystemStoragePathSourceConfig::servables_size() const {
  return servables_.size();
}
void FileSystemStoragePathSourceConfig::clear_servables() {
  servables_.Clear();
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Get(index);
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Mutable(index);
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
FileSystemStoragePathSourceConfig::mutable_servables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return &servables_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
FileSystemStoragePathSourceConfig::servables() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_;
}

// string servable_name = 1 [deprecated = true];
void FileSystemStoragePathSourceConfig::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileSystemStoragePathSourceConfig::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.GetNoArena();
}
void FileSystemStoragePathSourceConfig::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
#if LANG_CXX11
void FileSystemStoragePathSourceConfig::set_servable_name(::std::string&& value) {
  
  servable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
#endif
void FileSystemStoragePathSourceConfig::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
void FileSystemStoragePathSourceConfig::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
::std::string* FileSystemStoragePathSourceConfig::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileSystemStoragePathSourceConfig::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileSystemStoragePathSourceConfig::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}

// string base_path = 2 [deprecated = true];
void FileSystemStoragePathSourceConfig::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileSystemStoragePathSourceConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.GetNoArena();
}
void FileSystemStoragePathSourceConfig::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
#if LANG_CXX11
void FileSystemStoragePathSourceConfig::set_base_path(::std::string&& value) {
  
  base_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
#endif
void FileSystemStoragePathSourceConfig::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
void FileSystemStoragePathSourceConfig::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
::std::string* FileSystemStoragePathSourceConfig::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileSystemStoragePathSourceConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileSystemStoragePathSourceConfig::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}

// int64 file_system_poll_wait_seconds = 3;
void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  file_system_poll_wait_seconds_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return file_system_poll_wait_seconds_;
}
void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::google::protobuf::int64 value) {
  
  file_system_poll_wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}

// bool fail_if_zero_versions_at_startup = 4;
void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  fail_if_zero_versions_at_startup_ = false;
}
bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return fail_if_zero_versions_at_startup_;
}
void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  
  fail_if_zero_versions_at_startup_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
