// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/servables/tensorflow/session_bundle_config.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "tensorflow/core/protobuf/config.pb.h"
#include "tensorflow/core/protobuf/named_tensor.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
class ConfigProto;
class ConfigProtoDefaultTypeInternal;
extern ConfigProtoDefaultTypeInternal _ConfigProto_default_instance_;
class GPUOptions;
class GPUOptionsDefaultTypeInternal;
extern GPUOptionsDefaultTypeInternal _GPUOptions_default_instance_;
class GraphOptions;
class GraphOptionsDefaultTypeInternal;
extern GraphOptionsDefaultTypeInternal _GraphOptions_default_instance_;
class NamedTensorProto;
class NamedTensorProtoDefaultTypeInternal;
extern NamedTensorProtoDefaultTypeInternal _NamedTensorProto_default_instance_;
class OptimizerOptions;
class OptimizerOptionsDefaultTypeInternal;
extern OptimizerOptionsDefaultTypeInternal _OptimizerOptions_default_instance_;
class RPCOptions;
class RPCOptionsDefaultTypeInternal;
extern RPCOptionsDefaultTypeInternal _RPCOptions_default_instance_;
class RunMetadata;
class RunMetadataDefaultTypeInternal;
extern RunMetadataDefaultTypeInternal _RunMetadata_default_instance_;
class RunOptions;
class RunOptionsDefaultTypeInternal;
extern RunOptionsDefaultTypeInternal _RunOptions_default_instance_;
class ThreadPoolOptionProto;
class ThreadPoolOptionProtoDefaultTypeInternal;
extern ThreadPoolOptionProtoDefaultTypeInternal _ThreadPoolOptionProto_default_instance_;
namespace serving {
class BatchingParameters;
class BatchingParametersDefaultTypeInternal;
extern BatchingParametersDefaultTypeInternal _BatchingParameters_default_instance_;
class SessionBundleConfig;
class SessionBundleConfigDefaultTypeInternal;
extern SessionBundleConfigDefaultTypeInternal _SessionBundleConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow

namespace tensorflow {
namespace serving {

namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto

// ===================================================================

class SessionBundleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionBundleConfig) */ {
 public:
  SessionBundleConfig();
  virtual ~SessionBundleConfig();

  SessionBundleConfig(const SessionBundleConfig& from);

  inline SessionBundleConfig& operator=(const SessionBundleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionBundleConfig& default_instance();

  static inline const SessionBundleConfig* internal_default_instance() {
    return reinterpret_cast<const SessionBundleConfig*>(
               &_SessionBundleConfig_default_instance_);
  }

  void Swap(SessionBundleConfig* other);

  // implements Message ----------------------------------------------

  inline SessionBundleConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionBundleConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionBundleConfig& from);
  void MergeFrom(const SessionBundleConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionBundleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.NamedTensorProto experimental_fixed_input_tensors = 778;
  int experimental_fixed_input_tensors_size() const;
  void clear_experimental_fixed_input_tensors();
  static const int kExperimentalFixedInputTensorsFieldNumber = 778;
  const ::tensorflow::NamedTensorProto& experimental_fixed_input_tensors(int index) const;
  ::tensorflow::NamedTensorProto* mutable_experimental_fixed_input_tensors(int index);
  ::tensorflow::NamedTensorProto* add_experimental_fixed_input_tensors();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
      mutable_experimental_fixed_input_tensors();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
      experimental_fixed_input_tensors() const;

  // string session_target = 1;
  void clear_session_target();
  static const int kSessionTargetFieldNumber = 1;
  const ::std::string& session_target() const;
  void set_session_target(const ::std::string& value);
  #if LANG_CXX11
  void set_session_target(::std::string&& value);
  #endif
  void set_session_target(const char* value);
  void set_session_target(const char* value, size_t size);
  ::std::string* mutable_session_target();
  ::std::string* release_session_target();
  void set_allocated_session_target(::std::string* session_target);

  // .tensorflow.ConfigProto session_config = 2;
  bool has_session_config() const;
  void clear_session_config();
  static const int kSessionConfigFieldNumber = 2;
  const ::tensorflow::ConfigProto& session_config() const;
  ::tensorflow::ConfigProto* mutable_session_config();
  ::tensorflow::ConfigProto* release_session_config();
  void set_allocated_session_config(::tensorflow::ConfigProto* session_config);

  // .tensorflow.serving.BatchingParameters batching_parameters = 3;
  bool has_batching_parameters() const;
  void clear_batching_parameters();
  static const int kBatchingParametersFieldNumber = 3;
  const ::tensorflow::serving::BatchingParameters& batching_parameters() const;
  ::tensorflow::serving::BatchingParameters* mutable_batching_parameters();
  ::tensorflow::serving::BatchingParameters* release_batching_parameters();
  void set_allocated_batching_parameters(::tensorflow::serving::BatchingParameters* batching_parameters);

  // .google.protobuf.Int32Value session_run_load_threadpool_index = 4;
  bool has_session_run_load_threadpool_index() const;
  void clear_session_run_load_threadpool_index();
  static const int kSessionRunLoadThreadpoolIndexFieldNumber = 4;
  const ::google::protobuf::Int32Value& session_run_load_threadpool_index() const;
  ::google::protobuf::Int32Value* mutable_session_run_load_threadpool_index();
  ::google::protobuf::Int32Value* release_session_run_load_threadpool_index();
  void set_allocated_session_run_load_threadpool_index(::google::protobuf::Int32Value* session_run_load_threadpool_index);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionBundleConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto > experimental_fixed_input_tensors_;
  ::google::protobuf::internal::ArenaStringPtr session_target_;
  ::tensorflow::ConfigProto* session_config_;
  ::tensorflow::serving::BatchingParameters* batching_parameters_;
  ::google::protobuf::Int32Value* session_run_load_threadpool_index_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchingParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.BatchingParameters) */ {
 public:
  BatchingParameters();
  virtual ~BatchingParameters();

  BatchingParameters(const BatchingParameters& from);

  inline BatchingParameters& operator=(const BatchingParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchingParameters& default_instance();

  static inline const BatchingParameters* internal_default_instance() {
    return reinterpret_cast<const BatchingParameters*>(
               &_BatchingParameters_default_instance_);
  }

  void Swap(BatchingParameters* other);

  // implements Message ----------------------------------------------

  inline BatchingParameters* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchingParameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchingParameters& from);
  void MergeFrom(const BatchingParameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchingParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 allowed_batch_sizes = 6;
  int allowed_batch_sizes_size() const;
  void clear_allowed_batch_sizes();
  static const int kAllowedBatchSizesFieldNumber = 6;
  ::google::protobuf::int64 allowed_batch_sizes(int index) const;
  void set_allowed_batch_sizes(int index, ::google::protobuf::int64 value);
  void add_allowed_batch_sizes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      allowed_batch_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_allowed_batch_sizes();

  // .google.protobuf.Int64Value max_batch_size = 1;
  bool has_max_batch_size() const;
  void clear_max_batch_size();
  static const int kMaxBatchSizeFieldNumber = 1;
  const ::google::protobuf::Int64Value& max_batch_size() const;
  ::google::protobuf::Int64Value* mutable_max_batch_size();
  ::google::protobuf::Int64Value* release_max_batch_size();
  void set_allocated_max_batch_size(::google::protobuf::Int64Value* max_batch_size);

  // .google.protobuf.Int64Value batch_timeout_micros = 2;
  bool has_batch_timeout_micros() const;
  void clear_batch_timeout_micros();
  static const int kBatchTimeoutMicrosFieldNumber = 2;
  const ::google::protobuf::Int64Value& batch_timeout_micros() const;
  ::google::protobuf::Int64Value* mutable_batch_timeout_micros();
  ::google::protobuf::Int64Value* release_batch_timeout_micros();
  void set_allocated_batch_timeout_micros(::google::protobuf::Int64Value* batch_timeout_micros);

  // .google.protobuf.Int64Value max_enqueued_batches = 3;
  bool has_max_enqueued_batches() const;
  void clear_max_enqueued_batches();
  static const int kMaxEnqueuedBatchesFieldNumber = 3;
  const ::google::protobuf::Int64Value& max_enqueued_batches() const;
  ::google::protobuf::Int64Value* mutable_max_enqueued_batches();
  ::google::protobuf::Int64Value* release_max_enqueued_batches();
  void set_allocated_max_enqueued_batches(::google::protobuf::Int64Value* max_enqueued_batches);

  // .google.protobuf.Int64Value num_batch_threads = 4;
  bool has_num_batch_threads() const;
  void clear_num_batch_threads();
  static const int kNumBatchThreadsFieldNumber = 4;
  const ::google::protobuf::Int64Value& num_batch_threads() const;
  ::google::protobuf::Int64Value* mutable_num_batch_threads();
  ::google::protobuf::Int64Value* release_num_batch_threads();
  void set_allocated_num_batch_threads(::google::protobuf::Int64Value* num_batch_threads);

  // .google.protobuf.StringValue thread_pool_name = 5;
  bool has_thread_pool_name() const;
  void clear_thread_pool_name();
  static const int kThreadPoolNameFieldNumber = 5;
  const ::google::protobuf::StringValue& thread_pool_name() const;
  ::google::protobuf::StringValue* mutable_thread_pool_name();
  ::google::protobuf::StringValue* release_thread_pool_name();
  void set_allocated_thread_pool_name(::google::protobuf::StringValue* thread_pool_name);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.BatchingParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > allowed_batch_sizes_;
  mutable int _allowed_batch_sizes_cached_byte_size_;
  ::google::protobuf::Int64Value* max_batch_size_;
  ::google::protobuf::Int64Value* batch_timeout_micros_;
  ::google::protobuf::Int64Value* max_enqueued_batches_;
  ::google::protobuf::Int64Value* num_batch_threads_;
  ::google::protobuf::StringValue* thread_pool_name_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionBundleConfig

// string session_target = 1;
inline void SessionBundleConfig::clear_session_target() {
  session_target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionBundleConfig::session_target() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleConfig.session_target)
  return session_target_.GetNoArena();
}
inline void SessionBundleConfig::set_session_target(const ::std::string& value) {
  
  session_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionBundleConfig.session_target)
}
#if LANG_CXX11
inline void SessionBundleConfig::set_session_target(::std::string&& value) {
  
  session_target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.SessionBundleConfig.session_target)
}
#endif
inline void SessionBundleConfig::set_session_target(const char* value) {
  
  session_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SessionBundleConfig.session_target)
}
inline void SessionBundleConfig::set_session_target(const char* value, size_t size) {
  
  session_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SessionBundleConfig.session_target)
}
inline ::std::string* SessionBundleConfig::mutable_session_target() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleConfig.session_target)
  return session_target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionBundleConfig::release_session_target() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionBundleConfig.session_target)
  
  return session_target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionBundleConfig::set_allocated_session_target(::std::string* session_target) {
  if (session_target != NULL) {
    
  } else {
    
  }
  session_target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_target);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionBundleConfig.session_target)
}

// .tensorflow.ConfigProto session_config = 2;
inline bool SessionBundleConfig::has_session_config() const {
  return this != internal_default_instance() && session_config_ != NULL;
}
inline void SessionBundleConfig::clear_session_config() {
  if (GetArenaNoVirtual() == NULL && session_config_ != NULL) delete session_config_;
  session_config_ = NULL;
}
inline const ::tensorflow::ConfigProto& SessionBundleConfig::session_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleConfig.session_config)
  return session_config_ != NULL ? *session_config_
                         : *::tensorflow::ConfigProto::internal_default_instance();
}
inline ::tensorflow::ConfigProto* SessionBundleConfig::mutable_session_config() {
  
  if (session_config_ == NULL) {
    session_config_ = new ::tensorflow::ConfigProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleConfig.session_config)
  return session_config_;
}
inline ::tensorflow::ConfigProto* SessionBundleConfig::release_session_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionBundleConfig.session_config)
  
  ::tensorflow::ConfigProto* temp = session_config_;
  session_config_ = NULL;
  return temp;
}
inline void SessionBundleConfig::set_allocated_session_config(::tensorflow::ConfigProto* session_config) {
  delete session_config_;
  if (session_config != NULL && session_config->GetArena() != NULL) {
    ::tensorflow::ConfigProto* new_session_config = new ::tensorflow::ConfigProto;
    new_session_config->CopyFrom(*session_config);
    session_config = new_session_config;
  }
  session_config_ = session_config;
  if (session_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionBundleConfig.session_config)
}

// .tensorflow.serving.BatchingParameters batching_parameters = 3;
inline bool SessionBundleConfig::has_batching_parameters() const {
  return this != internal_default_instance() && batching_parameters_ != NULL;
}
inline void SessionBundleConfig::clear_batching_parameters() {
  if (GetArenaNoVirtual() == NULL && batching_parameters_ != NULL) delete batching_parameters_;
  batching_parameters_ = NULL;
}
inline const ::tensorflow::serving::BatchingParameters& SessionBundleConfig::batching_parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleConfig.batching_parameters)
  return batching_parameters_ != NULL ? *batching_parameters_
                         : *::tensorflow::serving::BatchingParameters::internal_default_instance();
}
inline ::tensorflow::serving::BatchingParameters* SessionBundleConfig::mutable_batching_parameters() {
  
  if (batching_parameters_ == NULL) {
    batching_parameters_ = new ::tensorflow::serving::BatchingParameters;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleConfig.batching_parameters)
  return batching_parameters_;
}
inline ::tensorflow::serving::BatchingParameters* SessionBundleConfig::release_batching_parameters() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionBundleConfig.batching_parameters)
  
  ::tensorflow::serving::BatchingParameters* temp = batching_parameters_;
  batching_parameters_ = NULL;
  return temp;
}
inline void SessionBundleConfig::set_allocated_batching_parameters(::tensorflow::serving::BatchingParameters* batching_parameters) {
  delete batching_parameters_;
  batching_parameters_ = batching_parameters;
  if (batching_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionBundleConfig.batching_parameters)
}

// .google.protobuf.Int32Value session_run_load_threadpool_index = 4;
inline bool SessionBundleConfig::has_session_run_load_threadpool_index() const {
  return this != internal_default_instance() && session_run_load_threadpool_index_ != NULL;
}
inline void SessionBundleConfig::clear_session_run_load_threadpool_index() {
  if (GetArenaNoVirtual() == NULL && session_run_load_threadpool_index_ != NULL) delete session_run_load_threadpool_index_;
  session_run_load_threadpool_index_ = NULL;
}
inline const ::google::protobuf::Int32Value& SessionBundleConfig::session_run_load_threadpool_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleConfig.session_run_load_threadpool_index)
  return session_run_load_threadpool_index_ != NULL ? *session_run_load_threadpool_index_
                         : *::google::protobuf::Int32Value::internal_default_instance();
}
inline ::google::protobuf::Int32Value* SessionBundleConfig::mutable_session_run_load_threadpool_index() {
  
  if (session_run_load_threadpool_index_ == NULL) {
    session_run_load_threadpool_index_ = new ::google::protobuf::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleConfig.session_run_load_threadpool_index)
  return session_run_load_threadpool_index_;
}
inline ::google::protobuf::Int32Value* SessionBundleConfig::release_session_run_load_threadpool_index() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionBundleConfig.session_run_load_threadpool_index)
  
  ::google::protobuf::Int32Value* temp = session_run_load_threadpool_index_;
  session_run_load_threadpool_index_ = NULL;
  return temp;
}
inline void SessionBundleConfig::set_allocated_session_run_load_threadpool_index(::google::protobuf::Int32Value* session_run_load_threadpool_index) {
  delete session_run_load_threadpool_index_;
  if (session_run_load_threadpool_index != NULL && session_run_load_threadpool_index->GetArena() != NULL) {
    ::google::protobuf::Int32Value* new_session_run_load_threadpool_index = new ::google::protobuf::Int32Value;
    new_session_run_load_threadpool_index->CopyFrom(*session_run_load_threadpool_index);
    session_run_load_threadpool_index = new_session_run_load_threadpool_index;
  }
  session_run_load_threadpool_index_ = session_run_load_threadpool_index;
  if (session_run_load_threadpool_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionBundleConfig.session_run_load_threadpool_index)
}

// repeated .tensorflow.NamedTensorProto experimental_fixed_input_tensors = 778;
inline int SessionBundleConfig::experimental_fixed_input_tensors_size() const {
  return experimental_fixed_input_tensors_.size();
}
inline void SessionBundleConfig::clear_experimental_fixed_input_tensors() {
  experimental_fixed_input_tensors_.Clear();
}
inline const ::tensorflow::NamedTensorProto& SessionBundleConfig::experimental_fixed_input_tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors)
  return experimental_fixed_input_tensors_.Get(index);
}
inline ::tensorflow::NamedTensorProto* SessionBundleConfig::mutable_experimental_fixed_input_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors)
  return experimental_fixed_input_tensors_.Mutable(index);
}
inline ::tensorflow::NamedTensorProto* SessionBundleConfig::add_experimental_fixed_input_tensors() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors)
  return experimental_fixed_input_tensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
SessionBundleConfig::mutable_experimental_fixed_input_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors)
  return &experimental_fixed_input_tensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
SessionBundleConfig::experimental_fixed_input_tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors)
  return experimental_fixed_input_tensors_;
}

// -------------------------------------------------------------------

// BatchingParameters

// .google.protobuf.Int64Value max_batch_size = 1;
inline bool BatchingParameters::has_max_batch_size() const {
  return this != internal_default_instance() && max_batch_size_ != NULL;
}
inline void BatchingParameters::clear_max_batch_size() {
  if (GetArenaNoVirtual() == NULL && max_batch_size_ != NULL) delete max_batch_size_;
  max_batch_size_ = NULL;
}
inline const ::google::protobuf::Int64Value& BatchingParameters::max_batch_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.max_batch_size)
  return max_batch_size_ != NULL ? *max_batch_size_
                         : *::google::protobuf::Int64Value::internal_default_instance();
}
inline ::google::protobuf::Int64Value* BatchingParameters::mutable_max_batch_size() {
  
  if (max_batch_size_ == NULL) {
    max_batch_size_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.BatchingParameters.max_batch_size)
  return max_batch_size_;
}
inline ::google::protobuf::Int64Value* BatchingParameters::release_max_batch_size() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.BatchingParameters.max_batch_size)
  
  ::google::protobuf::Int64Value* temp = max_batch_size_;
  max_batch_size_ = NULL;
  return temp;
}
inline void BatchingParameters::set_allocated_max_batch_size(::google::protobuf::Int64Value* max_batch_size) {
  delete max_batch_size_;
  if (max_batch_size != NULL && max_batch_size->GetArena() != NULL) {
    ::google::protobuf::Int64Value* new_max_batch_size = new ::google::protobuf::Int64Value;
    new_max_batch_size->CopyFrom(*max_batch_size);
    max_batch_size = new_max_batch_size;
  }
  max_batch_size_ = max_batch_size;
  if (max_batch_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.BatchingParameters.max_batch_size)
}

// .google.protobuf.Int64Value batch_timeout_micros = 2;
inline bool BatchingParameters::has_batch_timeout_micros() const {
  return this != internal_default_instance() && batch_timeout_micros_ != NULL;
}
inline void BatchingParameters::clear_batch_timeout_micros() {
  if (GetArenaNoVirtual() == NULL && batch_timeout_micros_ != NULL) delete batch_timeout_micros_;
  batch_timeout_micros_ = NULL;
}
inline const ::google::protobuf::Int64Value& BatchingParameters::batch_timeout_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.batch_timeout_micros)
  return batch_timeout_micros_ != NULL ? *batch_timeout_micros_
                         : *::google::protobuf::Int64Value::internal_default_instance();
}
inline ::google::protobuf::Int64Value* BatchingParameters::mutable_batch_timeout_micros() {
  
  if (batch_timeout_micros_ == NULL) {
    batch_timeout_micros_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.BatchingParameters.batch_timeout_micros)
  return batch_timeout_micros_;
}
inline ::google::protobuf::Int64Value* BatchingParameters::release_batch_timeout_micros() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.BatchingParameters.batch_timeout_micros)
  
  ::google::protobuf::Int64Value* temp = batch_timeout_micros_;
  batch_timeout_micros_ = NULL;
  return temp;
}
inline void BatchingParameters::set_allocated_batch_timeout_micros(::google::protobuf::Int64Value* batch_timeout_micros) {
  delete batch_timeout_micros_;
  if (batch_timeout_micros != NULL && batch_timeout_micros->GetArena() != NULL) {
    ::google::protobuf::Int64Value* new_batch_timeout_micros = new ::google::protobuf::Int64Value;
    new_batch_timeout_micros->CopyFrom(*batch_timeout_micros);
    batch_timeout_micros = new_batch_timeout_micros;
  }
  batch_timeout_micros_ = batch_timeout_micros;
  if (batch_timeout_micros) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.BatchingParameters.batch_timeout_micros)
}

// .google.protobuf.Int64Value max_enqueued_batches = 3;
inline bool BatchingParameters::has_max_enqueued_batches() const {
  return this != internal_default_instance() && max_enqueued_batches_ != NULL;
}
inline void BatchingParameters::clear_max_enqueued_batches() {
  if (GetArenaNoVirtual() == NULL && max_enqueued_batches_ != NULL) delete max_enqueued_batches_;
  max_enqueued_batches_ = NULL;
}
inline const ::google::protobuf::Int64Value& BatchingParameters::max_enqueued_batches() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.max_enqueued_batches)
  return max_enqueued_batches_ != NULL ? *max_enqueued_batches_
                         : *::google::protobuf::Int64Value::internal_default_instance();
}
inline ::google::protobuf::Int64Value* BatchingParameters::mutable_max_enqueued_batches() {
  
  if (max_enqueued_batches_ == NULL) {
    max_enqueued_batches_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.BatchingParameters.max_enqueued_batches)
  return max_enqueued_batches_;
}
inline ::google::protobuf::Int64Value* BatchingParameters::release_max_enqueued_batches() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.BatchingParameters.max_enqueued_batches)
  
  ::google::protobuf::Int64Value* temp = max_enqueued_batches_;
  max_enqueued_batches_ = NULL;
  return temp;
}
inline void BatchingParameters::set_allocated_max_enqueued_batches(::google::protobuf::Int64Value* max_enqueued_batches) {
  delete max_enqueued_batches_;
  if (max_enqueued_batches != NULL && max_enqueued_batches->GetArena() != NULL) {
    ::google::protobuf::Int64Value* new_max_enqueued_batches = new ::google::protobuf::Int64Value;
    new_max_enqueued_batches->CopyFrom(*max_enqueued_batches);
    max_enqueued_batches = new_max_enqueued_batches;
  }
  max_enqueued_batches_ = max_enqueued_batches;
  if (max_enqueued_batches) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.BatchingParameters.max_enqueued_batches)
}

// .google.protobuf.Int64Value num_batch_threads = 4;
inline bool BatchingParameters::has_num_batch_threads() const {
  return this != internal_default_instance() && num_batch_threads_ != NULL;
}
inline void BatchingParameters::clear_num_batch_threads() {
  if (GetArenaNoVirtual() == NULL && num_batch_threads_ != NULL) delete num_batch_threads_;
  num_batch_threads_ = NULL;
}
inline const ::google::protobuf::Int64Value& BatchingParameters::num_batch_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.num_batch_threads)
  return num_batch_threads_ != NULL ? *num_batch_threads_
                         : *::google::protobuf::Int64Value::internal_default_instance();
}
inline ::google::protobuf::Int64Value* BatchingParameters::mutable_num_batch_threads() {
  
  if (num_batch_threads_ == NULL) {
    num_batch_threads_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.BatchingParameters.num_batch_threads)
  return num_batch_threads_;
}
inline ::google::protobuf::Int64Value* BatchingParameters::release_num_batch_threads() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.BatchingParameters.num_batch_threads)
  
  ::google::protobuf::Int64Value* temp = num_batch_threads_;
  num_batch_threads_ = NULL;
  return temp;
}
inline void BatchingParameters::set_allocated_num_batch_threads(::google::protobuf::Int64Value* num_batch_threads) {
  delete num_batch_threads_;
  if (num_batch_threads != NULL && num_batch_threads->GetArena() != NULL) {
    ::google::protobuf::Int64Value* new_num_batch_threads = new ::google::protobuf::Int64Value;
    new_num_batch_threads->CopyFrom(*num_batch_threads);
    num_batch_threads = new_num_batch_threads;
  }
  num_batch_threads_ = num_batch_threads;
  if (num_batch_threads) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.BatchingParameters.num_batch_threads)
}

// .google.protobuf.StringValue thread_pool_name = 5;
inline bool BatchingParameters::has_thread_pool_name() const {
  return this != internal_default_instance() && thread_pool_name_ != NULL;
}
inline void BatchingParameters::clear_thread_pool_name() {
  if (GetArenaNoVirtual() == NULL && thread_pool_name_ != NULL) delete thread_pool_name_;
  thread_pool_name_ = NULL;
}
inline const ::google::protobuf::StringValue& BatchingParameters::thread_pool_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.thread_pool_name)
  return thread_pool_name_ != NULL ? *thread_pool_name_
                         : *::google::protobuf::StringValue::internal_default_instance();
}
inline ::google::protobuf::StringValue* BatchingParameters::mutable_thread_pool_name() {
  
  if (thread_pool_name_ == NULL) {
    thread_pool_name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.BatchingParameters.thread_pool_name)
  return thread_pool_name_;
}
inline ::google::protobuf::StringValue* BatchingParameters::release_thread_pool_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.BatchingParameters.thread_pool_name)
  
  ::google::protobuf::StringValue* temp = thread_pool_name_;
  thread_pool_name_ = NULL;
  return temp;
}
inline void BatchingParameters::set_allocated_thread_pool_name(::google::protobuf::StringValue* thread_pool_name) {
  delete thread_pool_name_;
  if (thread_pool_name != NULL && thread_pool_name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_thread_pool_name = new ::google::protobuf::StringValue;
    new_thread_pool_name->CopyFrom(*thread_pool_name);
    thread_pool_name = new_thread_pool_name;
  }
  thread_pool_name_ = thread_pool_name;
  if (thread_pool_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.BatchingParameters.thread_pool_name)
}

// repeated int64 allowed_batch_sizes = 6;
inline int BatchingParameters::allowed_batch_sizes_size() const {
  return allowed_batch_sizes_.size();
}
inline void BatchingParameters::clear_allowed_batch_sizes() {
  allowed_batch_sizes_.Clear();
}
inline ::google::protobuf::int64 BatchingParameters::allowed_batch_sizes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.BatchingParameters.allowed_batch_sizes)
  return allowed_batch_sizes_.Get(index);
}
inline void BatchingParameters::set_allowed_batch_sizes(int index, ::google::protobuf::int64 value) {
  allowed_batch_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.BatchingParameters.allowed_batch_sizes)
}
inline void BatchingParameters::add_allowed_batch_sizes(::google::protobuf::int64 value) {
  allowed_batch_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.BatchingParameters.allowed_batch_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BatchingParameters::allowed_batch_sizes() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.BatchingParameters.allowed_batch_sizes)
  return allowed_batch_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BatchingParameters::mutable_allowed_batch_sizes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.BatchingParameters.allowed_batch_sizes)
  return &allowed_batch_sizes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto__INCLUDED
