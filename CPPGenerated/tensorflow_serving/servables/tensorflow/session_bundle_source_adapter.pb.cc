// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/servables/tensorflow/session_bundle_source_adapter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/servables/tensorflow/session_bundle_source_adapter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
class SessionBundleSourceAdapterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionBundleSourceAdapterConfig> {
} _SessionBundleSourceAdapterConfig_default_instance_;

namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionBundleSourceAdapterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionBundleSourceAdapterConfig, config_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SessionBundleSourceAdapterConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionBundleSourceAdapterConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow_serving/servables/tensorflow/session_bundle_source_adapter.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _SessionBundleSourceAdapterConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto::InitDefaults();
  _SessionBundleSourceAdapterConfig_default_instance_.DefaultConstruct();
  _SessionBundleSourceAdapterConfig_default_instance_.get_mutable()->config_ = const_cast< ::tensorflow::serving::SessionBundleConfig*>(
      ::tensorflow::serving::SessionBundleConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nKtensorflow_serving/servables/tensorflo"
      "w/session_bundle_source_adapter.proto\022\022t"
      "ensorflow.serving\032Ctensorflow_serving/se"
      "rvables/tensorflow/session_bundle_config"
      ".proto\"[\n SessionBundleSourceAdapterConf"
      "ig\0227\n\006config\030\001 \001(\0132\'.tensorflow.serving."
      "SessionBundleConfigb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/servables/tensorflow/session_bundle_source_adapter.proto", &protobuf_RegisterTypes);
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionBundleSourceAdapterConfig::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionBundleSourceAdapterConfig::SessionBundleSourceAdapterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.SessionBundleSourceAdapterConfig)
}
SessionBundleSourceAdapterConfig::SessionBundleSourceAdapterConfig(const SessionBundleSourceAdapterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::tensorflow::serving::SessionBundleConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SessionBundleSourceAdapterConfig)
}

void SessionBundleSourceAdapterConfig::SharedCtor() {
  config_ = NULL;
  _cached_size_ = 0;
}

SessionBundleSourceAdapterConfig::~SessionBundleSourceAdapterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SessionBundleSourceAdapterConfig)
  SharedDtor();
}

void SessionBundleSourceAdapterConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void SessionBundleSourceAdapterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionBundleSourceAdapterConfig::descriptor() {
  protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::file_level_metadata[0].descriptor;
}

const SessionBundleSourceAdapterConfig& SessionBundleSourceAdapterConfig::default_instance() {
  protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionBundleSourceAdapterConfig* SessionBundleSourceAdapterConfig::New(::google::protobuf::Arena* arena) const {
  SessionBundleSourceAdapterConfig* n = new SessionBundleSourceAdapterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionBundleSourceAdapterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}

bool SessionBundleSourceAdapterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.SessionBundleConfig config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.SessionBundleSourceAdapterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.SessionBundleSourceAdapterConfig)
  return false;
#undef DO_
}

void SessionBundleSourceAdapterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  // .tensorflow.serving.SessionBundleConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.SessionBundleSourceAdapterConfig)
}

::google::protobuf::uint8* SessionBundleSourceAdapterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  // .tensorflow.serving.SessionBundleConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SessionBundleSourceAdapterConfig)
  return target;
}

size_t SessionBundleSourceAdapterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  size_t total_size = 0;

  // .tensorflow.serving.SessionBundleConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionBundleSourceAdapterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionBundleSourceAdapterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionBundleSourceAdapterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.SessionBundleSourceAdapterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.SessionBundleSourceAdapterConfig)
    MergeFrom(*source);
  }
}

void SessionBundleSourceAdapterConfig::MergeFrom(const SessionBundleSourceAdapterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    mutable_config()->::tensorflow::serving::SessionBundleConfig::MergeFrom(from.config());
  }
}

void SessionBundleSourceAdapterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionBundleSourceAdapterConfig::CopyFrom(const SessionBundleSourceAdapterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SessionBundleSourceAdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionBundleSourceAdapterConfig::IsInitialized() const {
  return true;
}

void SessionBundleSourceAdapterConfig::Swap(SessionBundleSourceAdapterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionBundleSourceAdapterConfig::InternalSwap(SessionBundleSourceAdapterConfig* other) {
  std::swap(config_, other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionBundleSourceAdapterConfig::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fsession_5fbundle_5fsource_5fadapter_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionBundleSourceAdapterConfig

// .tensorflow.serving.SessionBundleConfig config = 1;
bool SessionBundleSourceAdapterConfig::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void SessionBundleSourceAdapterConfig::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::tensorflow::serving::SessionBundleConfig& SessionBundleSourceAdapterConfig::config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionBundleSourceAdapterConfig.config)
  return config_ != NULL ? *config_
                         : *::tensorflow::serving::SessionBundleConfig::internal_default_instance();
}
::tensorflow::serving::SessionBundleConfig* SessionBundleSourceAdapterConfig::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::tensorflow::serving::SessionBundleConfig;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionBundleSourceAdapterConfig.config)
  return config_;
}
::tensorflow::serving::SessionBundleConfig* SessionBundleSourceAdapterConfig::release_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionBundleSourceAdapterConfig.config)
  
  ::tensorflow::serving::SessionBundleConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void SessionBundleSourceAdapterConfig::set_allocated_config(::tensorflow::serving::SessionBundleConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionBundleSourceAdapterConfig.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
