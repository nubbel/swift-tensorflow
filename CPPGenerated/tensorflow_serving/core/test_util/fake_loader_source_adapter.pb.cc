// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/core/test_util/fake_loader_source_adapter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/core/test_util/fake_loader_source_adapter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
namespace test_util {
class FakeLoaderSourceAdapterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FakeLoaderSourceAdapterConfig> {
} _FakeLoaderSourceAdapterConfig_default_instance_;

namespace protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FakeLoaderSourceAdapterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FakeLoaderSourceAdapterConfig, suffix_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FakeLoaderSourceAdapterConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FakeLoaderSourceAdapterConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow_serving/core/test_util/fake_loader_source_adapter.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _FakeLoaderSourceAdapterConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FakeLoaderSourceAdapterConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nBtensorflow_serving/core/test_util/fake"
      "_loader_source_adapter.proto\022\034tensorflow"
      ".serving.test_util\"/\n\035FakeLoaderSourceAd"
      "apterConfig\022\016\n\006suffix\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/core/test_util/fake_loader_source_adapter.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FakeLoaderSourceAdapterConfig::kSuffixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FakeLoaderSourceAdapterConfig::FakeLoaderSourceAdapterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
}
FakeLoaderSourceAdapterConfig::FakeLoaderSourceAdapterConfig(const FakeLoaderSourceAdapterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.suffix().size() > 0) {
    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
}

void FakeLoaderSourceAdapterConfig::SharedCtor() {
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FakeLoaderSourceAdapterConfig::~FakeLoaderSourceAdapterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  SharedDtor();
}

void FakeLoaderSourceAdapterConfig::SharedDtor() {
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FakeLoaderSourceAdapterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FakeLoaderSourceAdapterConfig::descriptor() {
  protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::file_level_metadata[0].descriptor;
}

const FakeLoaderSourceAdapterConfig& FakeLoaderSourceAdapterConfig::default_instance() {
  protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::InitDefaults();
  return *internal_default_instance();
}

FakeLoaderSourceAdapterConfig* FakeLoaderSourceAdapterConfig::New(::google::protobuf::Arena* arena) const {
  FakeLoaderSourceAdapterConfig* n = new FakeLoaderSourceAdapterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FakeLoaderSourceAdapterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FakeLoaderSourceAdapterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string suffix = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  return false;
#undef DO_
}

void FakeLoaderSourceAdapterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  // string suffix = 1;
  if (this->suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suffix(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
}

::google::protobuf::uint8* FakeLoaderSourceAdapterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  // string suffix = 1;
  if (this->suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->suffix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  return target;
}

size_t FakeLoaderSourceAdapterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  size_t total_size = 0;

  // string suffix = 1;
  if (this->suffix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suffix());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FakeLoaderSourceAdapterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FakeLoaderSourceAdapterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FakeLoaderSourceAdapterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
    MergeFrom(*source);
  }
}

void FakeLoaderSourceAdapterConfig::MergeFrom(const FakeLoaderSourceAdapterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.suffix().size() > 0) {

    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
}

void FakeLoaderSourceAdapterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FakeLoaderSourceAdapterConfig::CopyFrom(const FakeLoaderSourceAdapterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FakeLoaderSourceAdapterConfig::IsInitialized() const {
  return true;
}

void FakeLoaderSourceAdapterConfig::Swap(FakeLoaderSourceAdapterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FakeLoaderSourceAdapterConfig::InternalSwap(FakeLoaderSourceAdapterConfig* other) {
  suffix_.Swap(&other->suffix_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FakeLoaderSourceAdapterConfig::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fcore_2ftest_5futil_2ffake_5floader_5fsource_5fadapter_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FakeLoaderSourceAdapterConfig

// string suffix = 1;
void FakeLoaderSourceAdapterConfig::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FakeLoaderSourceAdapterConfig::suffix() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
  return suffix_.GetNoArena();
}
void FakeLoaderSourceAdapterConfig::set_suffix(const ::std::string& value) {
  
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
}
#if LANG_CXX11
void FakeLoaderSourceAdapterConfig::set_suffix(::std::string&& value) {
  
  suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
}
#endif
void FakeLoaderSourceAdapterConfig::set_suffix(const char* value) {
  
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
}
void FakeLoaderSourceAdapterConfig::set_suffix(const char* value, size_t size) {
  
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
}
::std::string* FakeLoaderSourceAdapterConfig::mutable_suffix() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
  return suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FakeLoaderSourceAdapterConfig::release_suffix() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
  
  return suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FakeLoaderSourceAdapterConfig::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    
  } else {
    
  }
  suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.test_util.FakeLoaderSourceAdapterConfig.suffix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test_util
}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
