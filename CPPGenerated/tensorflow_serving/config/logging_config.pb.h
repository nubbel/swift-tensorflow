// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/logging_config.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/config/log_collector_config.pb.h"
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace serving {
class LogCollectorConfig;
class LogCollectorConfigDefaultTypeInternal;
extern LogCollectorConfigDefaultTypeInternal _LogCollectorConfig_default_instance_;
class LoggingConfig;
class LoggingConfigDefaultTypeInternal;
extern LoggingConfigDefaultTypeInternal _LoggingConfig_default_instance_;
class SamplingConfig;
class SamplingConfigDefaultTypeInternal;
extern SamplingConfigDefaultTypeInternal _SamplingConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow

namespace tensorflow {
namespace serving {

namespace protobuf_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto

// ===================================================================

class SamplingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SamplingConfig) */ {
 public:
  SamplingConfig();
  virtual ~SamplingConfig();

  SamplingConfig(const SamplingConfig& from);

  inline SamplingConfig& operator=(const SamplingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SamplingConfig& default_instance();

  static inline const SamplingConfig* internal_default_instance() {
    return reinterpret_cast<const SamplingConfig*>(
               &_SamplingConfig_default_instance_);
  }

  void UnsafeArenaSwap(SamplingConfig* other);
  void Swap(SamplingConfig* other);

  // implements Message ----------------------------------------------

  inline SamplingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SamplingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SamplingConfig& from);
  void MergeFrom(const SamplingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SamplingConfig* other);
  protected:
  explicit SamplingConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double sampling_rate = 1;
  void clear_sampling_rate();
  static const int kSamplingRateFieldNumber = 1;
  double sampling_rate() const;
  void set_sampling_rate(double value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SamplingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double sampling_rate_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoggingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.LoggingConfig) */ {
 public:
  LoggingConfig();
  virtual ~LoggingConfig();

  LoggingConfig(const LoggingConfig& from);

  inline LoggingConfig& operator=(const LoggingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggingConfig& default_instance();

  static inline const LoggingConfig* internal_default_instance() {
    return reinterpret_cast<const LoggingConfig*>(
               &_LoggingConfig_default_instance_);
  }

  void UnsafeArenaSwap(LoggingConfig* other);
  void Swap(LoggingConfig* other);

  // implements Message ----------------------------------------------

  inline LoggingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LoggingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoggingConfig& from);
  void MergeFrom(const LoggingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoggingConfig* other);
  protected:
  explicit LoggingConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
  bool has_log_collector_config() const;
  void clear_log_collector_config();
  static const int kLogCollectorConfigFieldNumber = 1;
  private:
  void _slow_mutable_log_collector_config();
  void _slow_set_allocated_log_collector_config(
      ::google::protobuf::Arena* message_arena, ::tensorflow::serving::LogCollectorConfig** log_collector_config);
  ::tensorflow::serving::LogCollectorConfig* _slow_release_log_collector_config();
  public:
  const ::tensorflow::serving::LogCollectorConfig& log_collector_config() const;
  ::tensorflow::serving::LogCollectorConfig* mutable_log_collector_config();
  ::tensorflow::serving::LogCollectorConfig* release_log_collector_config();
  void set_allocated_log_collector_config(::tensorflow::serving::LogCollectorConfig* log_collector_config);
  ::tensorflow::serving::LogCollectorConfig* unsafe_arena_release_log_collector_config();
  void unsafe_arena_set_allocated_log_collector_config(
      ::tensorflow::serving::LogCollectorConfig* log_collector_config);

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  bool has_sampling_config() const;
  void clear_sampling_config();
  static const int kSamplingConfigFieldNumber = 2;
  private:
  void _slow_mutable_sampling_config();
  void _slow_set_allocated_sampling_config(
      ::google::protobuf::Arena* message_arena, ::tensorflow::serving::SamplingConfig** sampling_config);
  ::tensorflow::serving::SamplingConfig* _slow_release_sampling_config();
  public:
  const ::tensorflow::serving::SamplingConfig& sampling_config() const;
  ::tensorflow::serving::SamplingConfig* mutable_sampling_config();
  ::tensorflow::serving::SamplingConfig* release_sampling_config();
  void set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config);
  ::tensorflow::serving::SamplingConfig* unsafe_arena_release_sampling_config();
  void unsafe_arena_set_allocated_sampling_config(
      ::tensorflow::serving::SamplingConfig* sampling_config);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.LoggingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::LogCollectorConfig* log_collector_config_;
  ::tensorflow::serving::SamplingConfig* sampling_config_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SamplingConfig

// double sampling_rate = 1;
inline void SamplingConfig::clear_sampling_rate() {
  sampling_rate_ = 0;
}
inline double SamplingConfig::sampling_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SamplingConfig.sampling_rate)
  return sampling_rate_;
}
inline void SamplingConfig::set_sampling_rate(double value) {
  
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.SamplingConfig.sampling_rate)
}

// -------------------------------------------------------------------

// LoggingConfig

// .tensorflow.serving.LogCollectorConfig log_collector_config = 1;
inline bool LoggingConfig::has_log_collector_config() const {
  return this != internal_default_instance() && log_collector_config_ != NULL;
}
inline void LoggingConfig::clear_log_collector_config() {
  if (GetArenaNoVirtual() == NULL && log_collector_config_ != NULL) delete log_collector_config_;
  log_collector_config_ = NULL;
}
inline const ::tensorflow::serving::LogCollectorConfig& LoggingConfig::log_collector_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LoggingConfig.log_collector_config)
  return log_collector_config_ != NULL ? *log_collector_config_
                         : *::tensorflow::serving::LogCollectorConfig::internal_default_instance();
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::mutable_log_collector_config() {
  
  if (log_collector_config_ == NULL) {
    _slow_mutable_log_collector_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LoggingConfig.log_collector_config)
  return log_collector_config_;
}
inline ::tensorflow::serving::LogCollectorConfig* LoggingConfig::release_log_collector_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LoggingConfig.log_collector_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_log_collector_config();
  } else {
    ::tensorflow::serving::LogCollectorConfig* temp = log_collector_config_;
    log_collector_config_ = NULL;
    return temp;
  }
}
inline  void LoggingConfig::set_allocated_log_collector_config(::tensorflow::serving::LogCollectorConfig* log_collector_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_collector_config_;
  }
  if (log_collector_config != NULL) {
    _slow_set_allocated_log_collector_config(message_arena, &log_collector_config);
  }
  log_collector_config_ = log_collector_config;
  if (log_collector_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LoggingConfig.log_collector_config)
}

// .tensorflow.serving.SamplingConfig sampling_config = 2;
inline bool LoggingConfig::has_sampling_config() const {
  return this != internal_default_instance() && sampling_config_ != NULL;
}
inline void LoggingConfig::clear_sampling_config() {
  if (GetArenaNoVirtual() == NULL && sampling_config_ != NULL) delete sampling_config_;
  sampling_config_ = NULL;
}
inline const ::tensorflow::serving::SamplingConfig& LoggingConfig::sampling_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LoggingConfig.sampling_config)
  return sampling_config_ != NULL ? *sampling_config_
                         : *::tensorflow::serving::SamplingConfig::internal_default_instance();
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::mutable_sampling_config() {
  
  if (sampling_config_ == NULL) {
    _slow_mutable_sampling_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LoggingConfig.sampling_config)
  return sampling_config_;
}
inline ::tensorflow::serving::SamplingConfig* LoggingConfig::release_sampling_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LoggingConfig.sampling_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sampling_config();
  } else {
    ::tensorflow::serving::SamplingConfig* temp = sampling_config_;
    sampling_config_ = NULL;
    return temp;
  }
}
inline  void LoggingConfig::set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sampling_config_;
  }
  if (sampling_config != NULL) {
    _slow_set_allocated_sampling_config(message_arena, &sampling_config);
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LoggingConfig.sampling_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto__INCLUDED
