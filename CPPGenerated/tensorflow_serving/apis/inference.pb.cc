// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/inference.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/apis/inference.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
class InferenceTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InferenceTask> {
} _InferenceTask_default_instance_;
class InferenceResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InferenceResult> {
  public:
  const ::tensorflow::serving::ClassificationResult* classification_result_;
  const ::tensorflow::serving::RegressionResult* regression_result_;
} _InferenceResult_default_instance_;
class MultiInferenceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiInferenceRequest> {
} _MultiInferenceRequest_default_instance_;
class MultiInferenceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiInferenceResponse> {
} _MultiInferenceResponse_default_instance_;

namespace protobuf_tensorflow_5fserving_2fapis_2finference_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceTask, model_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceTask, method_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceResult, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceResult, model_spec_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InferenceResult_default_instance_), classification_result_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InferenceResult_default_instance_), regression_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InferenceResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiInferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiInferenceRequest, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiInferenceRequest, input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiInferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiInferenceResponse, results_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(InferenceTask)},
  { 6, -1, sizeof(InferenceResult)},
  { 14, -1, sizeof(MultiInferenceRequest)},
  { 20, -1, sizeof(MultiInferenceResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InferenceTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InferenceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiInferenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiInferenceResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow_serving/apis/inference.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _InferenceTask_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _InferenceResult_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MultiInferenceRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MultiInferenceResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::InitDefaults();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2finput_2eproto::InitDefaults();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::InitDefaults();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fregression_2eproto::InitDefaults();
  _InferenceTask_default_instance_.DefaultConstruct();
  _InferenceResult_default_instance_.DefaultConstruct();
  _MultiInferenceRequest_default_instance_.DefaultConstruct();
  _MultiInferenceResponse_default_instance_.DefaultConstruct();
  _InferenceTask_default_instance_.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
  _InferenceResult_default_instance_.get_mutable()->model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
  _InferenceResult_default_instance_.classification_result_ = const_cast< ::tensorflow::serving::ClassificationResult*>(
      ::tensorflow::serving::ClassificationResult::internal_default_instance());
  _InferenceResult_default_instance_.regression_result_ = const_cast< ::tensorflow::serving::RegressionResult*>(
      ::tensorflow::serving::RegressionResult::internal_default_instance());
  _MultiInferenceRequest_default_instance_.get_mutable()->input_ = const_cast< ::tensorflow::serving::Input*>(
      ::tensorflow::serving::Input::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'tensorflow_serving/apis/inference.prot"
      "o\022\022tensorflow.serving\032,tensorflow_servin"
      "g/apis/classification.proto\032#tensorflow_"
      "serving/apis/input.proto\032#tensorflow_ser"
      "ving/apis/model.proto\032(tensorflow_servin"
      "g/apis/regression.proto\"W\n\rInferenceTask"
      "\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorflow.servin"
      "g.ModelSpec\022\023\n\013method_name\030\002 \001(\t\"\334\001\n\017Inf"
      "erenceResult\0221\n\nmodel_spec\030\001 \001(\0132\035.tenso"
      "rflow.serving.ModelSpec\022I\n\025classificatio"
      "n_result\030\002 \001(\0132(.tensorflow.serving.Clas"
      "sificationResultH\000\022A\n\021regression_result\030"
      "\003 \001(\0132$.tensorflow.serving.RegressionRes"
      "ultH\000B\010\n\006result\"s\n\025MultiInferenceRequest"
      "\0220\n\005tasks\030\001 \003(\0132!.tensorflow.serving.Inf"
      "erenceTask\022(\n\005input\030\002 \001(\0132\031.tensorflow.s"
      "erving.Input\"N\n\026MultiInferenceResponse\0224"
      "\n\007results\030\001 \003(\0132#.tensorflow.serving.Inf"
      "erenceResultB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 745);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/apis/inference.proto", &protobuf_RegisterTypes);
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::AddDescriptors();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2finput_2eproto::AddDescriptors();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::AddDescriptors();
  ::tensorflow::serving::protobuf_tensorflow_5fserving_2fapis_2fregression_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_5fserving_2fapis_2finference_2eproto


// ===================================================================

void InferenceTask::_slow_mutable_model_spec() {
  model_spec_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
      GetArenaNoVirtual());
}
::tensorflow::serving::ModelSpec* InferenceTask::_slow_release_model_spec() {
  if (model_spec_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::ModelSpec* temp = new ::tensorflow::serving::ModelSpec(*model_spec_);
    model_spec_ = NULL;
    return temp;
  }
}
::tensorflow::serving::ModelSpec* InferenceTask::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceTask.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
void InferenceTask::_slow_set_allocated_model_spec(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*model_spec) == NULL) {
      message_arena->Own(*model_spec);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*model_spec)) {
      ::tensorflow::serving::ModelSpec* new_model_spec = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
            message_arena);
      new_model_spec->CopyFrom(**model_spec);
      *model_spec = new_model_spec;
    }
}
void InferenceTask::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == NULL) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceTask.model_spec)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InferenceTask::kModelSpecFieldNumber;
const int InferenceTask::kMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InferenceTask::InferenceTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.InferenceTask)
}
InferenceTask::InferenceTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.InferenceTask)
}
InferenceTask::InferenceTask(const InferenceTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name(),
      GetArenaNoVirtual());
  }
  if (from.has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.InferenceTask)
}

void InferenceTask::SharedCtor() {
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_spec_ = NULL;
  _cached_size_ = 0;
}

InferenceTask::~InferenceTask() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.InferenceTask)
  SharedDtor();
}

void InferenceTask::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  method_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete model_spec_;
  }
}

void InferenceTask::ArenaDtor(void* object) {
  InferenceTask* _this = reinterpret_cast< InferenceTask* >(object);
  (void)_this;
}
void InferenceTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InferenceTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InferenceTask::descriptor() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[0].descriptor;
}

const InferenceTask& InferenceTask::default_instance() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  return *internal_default_instance();
}

InferenceTask* InferenceTask::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<InferenceTask>(arena);
}

void InferenceTask::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.InferenceTask)
  method_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) {
    delete model_spec_;
  }
  model_spec_ = NULL;
}

bool InferenceTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.InferenceTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.InferenceTask.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.InferenceTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.InferenceTask)
  return false;
#undef DO_
}

void InferenceTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.InferenceTask)
  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_spec_, output);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.InferenceTask.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.InferenceTask)
}

::google::protobuf::uint8* InferenceTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.InferenceTask)
  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->model_spec_, false, target);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.InferenceTask.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.InferenceTask)
  return target;
}

size_t InferenceTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.InferenceTask)
  size_t total_size = 0;

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InferenceTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.InferenceTask)
  GOOGLE_DCHECK_NE(&from, this);
  const InferenceTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InferenceTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.InferenceTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.InferenceTask)
    MergeFrom(*source);
  }
}

void InferenceTask::MergeFrom(const InferenceTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.InferenceTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.method_name().size() > 0) {
    set_method_name(from.method_name());
  }
  if (from.has_model_spec()) {
    mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from.model_spec());
  }
}

void InferenceTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.InferenceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferenceTask::CopyFrom(const InferenceTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.InferenceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceTask::IsInitialized() const {
  return true;
}

void InferenceTask::Swap(InferenceTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InferenceTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InferenceTask::UnsafeArenaSwap(InferenceTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InferenceTask::InternalSwap(InferenceTask* other) {
  method_name_.Swap(&other->method_name_);
  std::swap(model_spec_, other->model_spec_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InferenceTask::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InferenceTask

// .tensorflow.serving.ModelSpec model_spec = 1;
bool InferenceTask::has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != NULL;
}
void InferenceTask::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
const ::tensorflow::serving::ModelSpec& InferenceTask::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceTask.model_spec)
  return model_spec_ != NULL ? *model_spec_
                         : *::tensorflow::serving::ModelSpec::internal_default_instance();
}
::tensorflow::serving::ModelSpec* InferenceTask::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceTask.model_spec)
  return model_spec_;
}
::tensorflow::serving::ModelSpec* InferenceTask::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceTask.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
 void InferenceTask::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceTask.model_spec)
}

// string method_name = 2;
void InferenceTask::clear_method_name() {
  method_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& InferenceTask::method_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceTask.method_name)
  return method_name_.Get();
}
void InferenceTask::set_method_name(const ::std::string& value) {
  
  method_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.InferenceTask.method_name)
}
void InferenceTask::set_method_name(const char* value) {
  
  method_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.InferenceTask.method_name)
}
void InferenceTask::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.InferenceTask.method_name)
}
::std::string* InferenceTask::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceTask.method_name)
  return method_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InferenceTask::release_method_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceTask.method_name)
  
  return method_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InferenceTask::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceTask.method_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return method_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void InferenceTask::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceTask.method_name)
}
void InferenceTask::unsafe_arena_set_allocated_method_name(
    ::std::string* method_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceTask.method_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void InferenceResult::_slow_mutable_model_spec() {
  model_spec_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
      GetArenaNoVirtual());
}
::tensorflow::serving::ModelSpec* InferenceResult::_slow_release_model_spec() {
  if (model_spec_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::ModelSpec* temp = new ::tensorflow::serving::ModelSpec(*model_spec_);
    model_spec_ = NULL;
    return temp;
  }
}
::tensorflow::serving::ModelSpec* InferenceResult::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceResult.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
void InferenceResult::_slow_set_allocated_model_spec(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*model_spec) == NULL) {
      message_arena->Own(*model_spec);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*model_spec)) {
      ::tensorflow::serving::ModelSpec* new_model_spec = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
            message_arena);
      new_model_spec->CopyFrom(**model_spec);
      *model_spec = new_model_spec;
    }
}
void InferenceResult::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == NULL) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceResult.model_spec)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InferenceResult::kModelSpecFieldNumber;
const int InferenceResult::kClassificationResultFieldNumber;
const int InferenceResult::kRegressionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InferenceResult::InferenceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.InferenceResult)
}
InferenceResult::InferenceResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.InferenceResult)
}
InferenceResult::InferenceResult(const InferenceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_spec()) {
    model_spec_ = new ::tensorflow::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = NULL;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kClassificationResult: {
      mutable_classification_result()->::tensorflow::serving::ClassificationResult::MergeFrom(from.classification_result());
      break;
    }
    case kRegressionResult: {
      mutable_regression_result()->::tensorflow::serving::RegressionResult::MergeFrom(from.regression_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.InferenceResult)
}

void InferenceResult::SharedCtor() {
  model_spec_ = NULL;
  clear_has_result();
  _cached_size_ = 0;
}

InferenceResult::~InferenceResult() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.InferenceResult)
  SharedDtor();
}

void InferenceResult::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete model_spec_;
  }
  if (has_result()) {
    clear_result();
  }
}

void InferenceResult::ArenaDtor(void* object) {
  InferenceResult* _this = reinterpret_cast< InferenceResult* >(object);
  (void)_this;
}
void InferenceResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InferenceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InferenceResult::descriptor() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[1].descriptor;
}

const InferenceResult& InferenceResult::default_instance() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  return *internal_default_instance();
}

InferenceResult* InferenceResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<InferenceResult>(arena);
}

void InferenceResult::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.InferenceResult)
  switch (result_case()) {
    case kClassificationResult: {
      if (GetArenaNoVirtual() == NULL) {
        delete result_.classification_result_;
      }
      break;
    }
    case kRegressionResult: {
      if (GetArenaNoVirtual() == NULL) {
        delete result_.regression_result_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void InferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.InferenceResult)
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) {
    delete model_spec_;
  }
  model_spec_ = NULL;
  clear_result();
}

bool InferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.InferenceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.ModelSpec model_spec = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.ClassificationResult classification_result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.RegressionResult regression_result = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regression_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.InferenceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.InferenceResult)
  return false;
#undef DO_
}

void InferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.InferenceResult)
  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_spec_, output);
  }

  // .tensorflow.serving.ClassificationResult classification_result = 2;
  if (has_classification_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *result_.classification_result_, output);
  }

  // .tensorflow.serving.RegressionResult regression_result = 3;
  if (has_regression_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *result_.regression_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.InferenceResult)
}

::google::protobuf::uint8* InferenceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.InferenceResult)
  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->model_spec_, false, target);
  }

  // .tensorflow.serving.ClassificationResult classification_result = 2;
  if (has_classification_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *result_.classification_result_, false, target);
  }

  // .tensorflow.serving.RegressionResult regression_result = 3;
  if (has_regression_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *result_.regression_result_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.InferenceResult)
  return target;
}

size_t InferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.InferenceResult)
  size_t total_size = 0;

  // .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_spec_);
  }

  switch (result_case()) {
    // .tensorflow.serving.ClassificationResult classification_result = 2;
    case kClassificationResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *result_.classification_result_);
      break;
    }
    // .tensorflow.serving.RegressionResult regression_result = 3;
    case kRegressionResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *result_.regression_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.InferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InferenceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InferenceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.InferenceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.InferenceResult)
    MergeFrom(*source);
  }
}

void InferenceResult::MergeFrom(const InferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.InferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_spec()) {
    mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from.model_spec());
  }
  switch (from.result_case()) {
    case kClassificationResult: {
      mutable_classification_result()->::tensorflow::serving::ClassificationResult::MergeFrom(from.classification_result());
      break;
    }
    case kRegressionResult: {
      mutable_regression_result()->::tensorflow::serving::RegressionResult::MergeFrom(from.regression_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void InferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.InferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferenceResult::CopyFrom(const InferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.InferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceResult::IsInitialized() const {
  return true;
}

void InferenceResult::Swap(InferenceResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InferenceResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InferenceResult::UnsafeArenaSwap(InferenceResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InferenceResult::InternalSwap(InferenceResult* other) {
  std::swap(model_spec_, other->model_spec_);
  std::swap(result_, other->result_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InferenceResult::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InferenceResult

// .tensorflow.serving.ModelSpec model_spec = 1;
bool InferenceResult::has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != NULL;
}
void InferenceResult::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
const ::tensorflow::serving::ModelSpec& InferenceResult::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.model_spec)
  return model_spec_ != NULL ? *model_spec_
                         : *::tensorflow::serving::ModelSpec::internal_default_instance();
}
::tensorflow::serving::ModelSpec* InferenceResult::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.model_spec)
  return model_spec_;
}
::tensorflow::serving::ModelSpec* InferenceResult::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
 void InferenceResult::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceResult.model_spec)
}

// .tensorflow.serving.ClassificationResult classification_result = 2;
bool InferenceResult::has_classification_result() const {
  return result_case() == kClassificationResult;
}
void InferenceResult::set_has_classification_result() {
  _oneof_case_[0] = kClassificationResult;
}
void InferenceResult::clear_classification_result() {
  if (has_classification_result()) {
    if (GetArenaNoVirtual() == NULL) {
      delete result_.classification_result_;
    }
    clear_has_result();
  }
}
 const ::tensorflow::serving::ClassificationResult& InferenceResult::classification_result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.classification_result)
  return has_classification_result()
      ? *result_.classification_result_
      : ::tensorflow::serving::ClassificationResult::default_instance();
}
::tensorflow::serving::ClassificationResult* InferenceResult::mutable_classification_result() {
  if (!has_classification_result()) {
    clear_result();
    set_has_classification_result();
    result_.classification_result_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ClassificationResult >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.classification_result)
  return result_.classification_result_;
}
::tensorflow::serving::ClassificationResult* InferenceResult::release_classification_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.classification_result)
  if (has_classification_result()) {
    clear_has_result();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::serving::ClassificationResult* temp = new ::tensorflow::serving::ClassificationResult(*result_.classification_result_);
      result_.classification_result_ = NULL;
      return temp;
    } else {
      ::tensorflow::serving::ClassificationResult* temp = result_.classification_result_;
      result_.classification_result_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void InferenceResult::set_allocated_classification_result(::tensorflow::serving::ClassificationResult* classification_result) {
  clear_result();
  if (classification_result) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(classification_result) == NULL) {
      GetArenaNoVirtual()->Own(classification_result);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(classification_result)) {
      ::tensorflow::serving::ClassificationResult* new_classification_result = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ClassificationResult >(
          GetArenaNoVirtual());
      new_classification_result->CopyFrom(*classification_result);
      classification_result = new_classification_result;
    }
    set_has_classification_result();
    result_.classification_result_ = classification_result;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceResult.classification_result)
}
 ::tensorflow::serving::ClassificationResult* InferenceResult::unsafe_arena_release_classification_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceResult.classification_result)
  if (has_classification_result()) {
    clear_has_result();
    ::tensorflow::serving::ClassificationResult* temp = result_.classification_result_;
    result_.classification_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InferenceResult::unsafe_arena_set_allocated_classification_result(::tensorflow::serving::ClassificationResult* classification_result) {
  clear_result();
  if (classification_result) {
    set_has_classification_result();
    result_.classification_result_ = classification_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceResult.classification_result)
}

// .tensorflow.serving.RegressionResult regression_result = 3;
bool InferenceResult::has_regression_result() const {
  return result_case() == kRegressionResult;
}
void InferenceResult::set_has_regression_result() {
  _oneof_case_[0] = kRegressionResult;
}
void InferenceResult::clear_regression_result() {
  if (has_regression_result()) {
    if (GetArenaNoVirtual() == NULL) {
      delete result_.regression_result_;
    }
    clear_has_result();
  }
}
 const ::tensorflow::serving::RegressionResult& InferenceResult::regression_result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InferenceResult.regression_result)
  return has_regression_result()
      ? *result_.regression_result_
      : ::tensorflow::serving::RegressionResult::default_instance();
}
::tensorflow::serving::RegressionResult* InferenceResult::mutable_regression_result() {
  if (!has_regression_result()) {
    clear_result();
    set_has_regression_result();
    result_.regression_result_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::RegressionResult >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InferenceResult.regression_result)
  return result_.regression_result_;
}
::tensorflow::serving::RegressionResult* InferenceResult::release_regression_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.InferenceResult.regression_result)
  if (has_regression_result()) {
    clear_has_result();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::serving::RegressionResult* temp = new ::tensorflow::serving::RegressionResult(*result_.regression_result_);
      result_.regression_result_ = NULL;
      return temp;
    } else {
      ::tensorflow::serving::RegressionResult* temp = result_.regression_result_;
      result_.regression_result_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void InferenceResult::set_allocated_regression_result(::tensorflow::serving::RegressionResult* regression_result) {
  clear_result();
  if (regression_result) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(regression_result) == NULL) {
      GetArenaNoVirtual()->Own(regression_result);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(regression_result)) {
      ::tensorflow::serving::RegressionResult* new_regression_result = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::RegressionResult >(
          GetArenaNoVirtual());
      new_regression_result->CopyFrom(*regression_result);
      regression_result = new_regression_result;
    }
    set_has_regression_result();
    result_.regression_result_ = regression_result;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InferenceResult.regression_result)
}
 ::tensorflow::serving::RegressionResult* InferenceResult::unsafe_arena_release_regression_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.InferenceResult.regression_result)
  if (has_regression_result()) {
    clear_has_result();
    ::tensorflow::serving::RegressionResult* temp = result_.regression_result_;
    result_.regression_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InferenceResult::unsafe_arena_set_allocated_regression_result(::tensorflow::serving::RegressionResult* regression_result) {
  clear_result();
  if (regression_result) {
    set_has_regression_result();
    result_.regression_result_ = regression_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.InferenceResult.regression_result)
}

bool InferenceResult::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
void InferenceResult::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
InferenceResult::ResultCase InferenceResult::result_case() const {
  return InferenceResult::ResultCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MultiInferenceRequest::_slow_mutable_input() {
  input_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::Input >(
      GetArenaNoVirtual());
}
::tensorflow::serving::Input* MultiInferenceRequest::_slow_release_input() {
  if (input_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::Input* temp = new ::tensorflow::serving::Input(*input_);
    input_ = NULL;
    return temp;
  }
}
::tensorflow::serving::Input* MultiInferenceRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.MultiInferenceRequest.input)
  
  ::tensorflow::serving::Input* temp = input_;
  input_ = NULL;
  return temp;
}
void MultiInferenceRequest::_slow_set_allocated_input(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::Input** input) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*input) == NULL) {
      message_arena->Own(*input);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*input)) {
      ::tensorflow::serving::Input* new_input = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::Input >(
            message_arena);
      new_input->CopyFrom(**input);
      *input = new_input;
    }
}
void MultiInferenceRequest::unsafe_arena_set_allocated_input(
    ::tensorflow::serving::Input* input) {
  if (GetArenaNoVirtual() == NULL) {
    delete input_;
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.MultiInferenceRequest.input)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiInferenceRequest::kTasksFieldNumber;
const int MultiInferenceRequest::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiInferenceRequest::MultiInferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.MultiInferenceRequest)
}
MultiInferenceRequest::MultiInferenceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tasks_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.MultiInferenceRequest)
}
MultiInferenceRequest::MultiInferenceRequest(const MultiInferenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::tensorflow::serving::Input(*from.input_);
  } else {
    input_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.MultiInferenceRequest)
}

void MultiInferenceRequest::SharedCtor() {
  input_ = NULL;
  _cached_size_ = 0;
}

MultiInferenceRequest::~MultiInferenceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.MultiInferenceRequest)
  SharedDtor();
}

void MultiInferenceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete input_;
  }
}

void MultiInferenceRequest::ArenaDtor(void* object) {
  MultiInferenceRequest* _this = reinterpret_cast< MultiInferenceRequest* >(object);
  (void)_this;
}
void MultiInferenceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiInferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiInferenceRequest::descriptor() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[2].descriptor;
}

const MultiInferenceRequest& MultiInferenceRequest::default_instance() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiInferenceRequest* MultiInferenceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MultiInferenceRequest>(arena);
}

void MultiInferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.MultiInferenceRequest)
  tasks_.Clear();
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}

bool MultiInferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.MultiInferenceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.serving.InferenceTask tasks = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .tensorflow.serving.Input input = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.MultiInferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.MultiInferenceRequest)
  return false;
#undef DO_
}

void MultiInferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.MultiInferenceRequest)
  // repeated .tensorflow.serving.InferenceTask tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  // .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.MultiInferenceRequest)
}

::google::protobuf::uint8* MultiInferenceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.MultiInferenceRequest)
  // repeated .tensorflow.serving.InferenceTask tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tasks(i), false, target);
  }

  // .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->input_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.MultiInferenceRequest)
  return target;
}

size_t MultiInferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.MultiInferenceRequest)
  size_t total_size = 0;

  // repeated .tensorflow.serving.InferenceTask tasks = 1;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  // .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiInferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.MultiInferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInferenceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiInferenceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.MultiInferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.MultiInferenceRequest)
    MergeFrom(*source);
  }
}

void MultiInferenceRequest::MergeFrom(const MultiInferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.MultiInferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tasks_.MergeFrom(from.tasks_);
  if (from.has_input()) {
    mutable_input()->::tensorflow::serving::Input::MergeFrom(from.input());
  }
}

void MultiInferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.MultiInferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInferenceRequest::CopyFrom(const MultiInferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.MultiInferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInferenceRequest::IsInitialized() const {
  return true;
}

void MultiInferenceRequest::Swap(MultiInferenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiInferenceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiInferenceRequest::UnsafeArenaSwap(MultiInferenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiInferenceRequest::InternalSwap(MultiInferenceRequest* other) {
  tasks_.UnsafeArenaSwap(&other->tasks_);
  std::swap(input_, other->input_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiInferenceRequest::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiInferenceRequest

// repeated .tensorflow.serving.InferenceTask tasks = 1;
int MultiInferenceRequest::tasks_size() const {
  return tasks_.size();
}
void MultiInferenceRequest::clear_tasks() {
  tasks_.Clear();
}
const ::tensorflow::serving::InferenceTask& MultiInferenceRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_.Get(index);
}
::tensorflow::serving::InferenceTask* MultiInferenceRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_.Mutable(index);
}
::tensorflow::serving::InferenceTask* MultiInferenceRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::InferenceTask >*
MultiInferenceRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.MultiInferenceRequest.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::InferenceTask >&
MultiInferenceRequest::tasks() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.MultiInferenceRequest.tasks)
  return tasks_;
}

// .tensorflow.serving.Input input = 2;
bool MultiInferenceRequest::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
void MultiInferenceRequest::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::tensorflow::serving::Input& MultiInferenceRequest::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceRequest.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::Input::internal_default_instance();
}
::tensorflow::serving::Input* MultiInferenceRequest::mutable_input() {
  
  if (input_ == NULL) {
    _slow_mutable_input();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceRequest.input)
  return input_;
}
::tensorflow::serving::Input* MultiInferenceRequest::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MultiInferenceRequest.input)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_input();
  } else {
    ::tensorflow::serving::Input* temp = input_;
    input_ = NULL;
    return temp;
  }
}
 void MultiInferenceRequest::set_allocated_input(::tensorflow::serving::Input* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input != NULL) {
    _slow_set_allocated_input(message_arena, &input);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MultiInferenceRequest.input)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiInferenceResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiInferenceResponse::MultiInferenceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.MultiInferenceResponse)
}
MultiInferenceResponse::MultiInferenceResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.MultiInferenceResponse)
}
MultiInferenceResponse::MultiInferenceResponse(const MultiInferenceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.MultiInferenceResponse)
}

void MultiInferenceResponse::SharedCtor() {
  _cached_size_ = 0;
}

MultiInferenceResponse::~MultiInferenceResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.MultiInferenceResponse)
  SharedDtor();
}

void MultiInferenceResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MultiInferenceResponse::ArenaDtor(void* object) {
  MultiInferenceResponse* _this = reinterpret_cast< MultiInferenceResponse* >(object);
  (void)_this;
}
void MultiInferenceResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiInferenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiInferenceResponse::descriptor() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[3].descriptor;
}

const MultiInferenceResponse& MultiInferenceResponse::default_instance() {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiInferenceResponse* MultiInferenceResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MultiInferenceResponse>(arena);
}

void MultiInferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.MultiInferenceResponse)
  results_.Clear();
}

bool MultiInferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.MultiInferenceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.serving.InferenceResult results = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.MultiInferenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.MultiInferenceResponse)
  return false;
#undef DO_
}

void MultiInferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.MultiInferenceResponse)
  // repeated .tensorflow.serving.InferenceResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.MultiInferenceResponse)
}

::google::protobuf::uint8* MultiInferenceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.MultiInferenceResponse)
  // repeated .tensorflow.serving.InferenceResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.MultiInferenceResponse)
  return target;
}

size_t MultiInferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.MultiInferenceResponse)
  size_t total_size = 0;

  // repeated .tensorflow.serving.InferenceResult results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiInferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.MultiInferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInferenceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiInferenceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.MultiInferenceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.MultiInferenceResponse)
    MergeFrom(*source);
  }
}

void MultiInferenceResponse::MergeFrom(const MultiInferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.MultiInferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
}

void MultiInferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.MultiInferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInferenceResponse::CopyFrom(const MultiInferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.MultiInferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInferenceResponse::IsInitialized() const {
  return true;
}

void MultiInferenceResponse::Swap(MultiInferenceResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiInferenceResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiInferenceResponse::UnsafeArenaSwap(MultiInferenceResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiInferenceResponse::InternalSwap(MultiInferenceResponse* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiInferenceResponse::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_5fserving_2fapis_2finference_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiInferenceResponse

// repeated .tensorflow.serving.InferenceResult results = 1;
int MultiInferenceResponse::results_size() const {
  return results_.size();
}
void MultiInferenceResponse::clear_results() {
  results_.Clear();
}
const ::tensorflow::serving::InferenceResult& MultiInferenceResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceResponse.results)
  return results_.Get(index);
}
::tensorflow::serving::InferenceResult* MultiInferenceResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceResponse.results)
  return results_.Mutable(index);
}
::tensorflow::serving::InferenceResult* MultiInferenceResponse::add_results() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.MultiInferenceResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::InferenceResult >*
MultiInferenceResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.MultiInferenceResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::InferenceResult >&
MultiInferenceResponse::results() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.MultiInferenceResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
