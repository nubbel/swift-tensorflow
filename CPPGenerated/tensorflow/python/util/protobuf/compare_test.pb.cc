// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/util/protobuf/compare_test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/python/util/protobuf/compare_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace compare_test {
class SmallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Small> {
} _Small_default_instance_;
class Medium_GroupA_GroupBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Medium_GroupA_GroupB> {
} _Medium_GroupA_GroupB_default_instance_;
class Medium_GroupADefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Medium_GroupA> {
} _Medium_GroupA_default_instance_;
class MediumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Medium> {
} _Medium_default_instance_;
class LargeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Large> {
} _Large_default_instance_;
class LabeledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Labeled> {
} _Labeled_default_instance_;
class WithMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WithMap> {
} _WithMap_default_instance_;

namespace protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Small, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Small, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Small, strings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA_GroupB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA_GroupB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA_GroupB, strings_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium_GroupA, groupb_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, int32s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, smalls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, groupa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Medium, floats_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, string__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, int64__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, float__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, bool__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, enum__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, int64s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, medium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, small_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, double__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Large, with_map_),
  0,
  4,
  5,
  6,
  8,
  ~0u,
  1,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labeled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labeled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labeled, required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labeled, optional_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithMap, value_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithMap, value_string_),
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(Small)},
  { 6, 11, sizeof(Medium_GroupA_GroupB)},
  { 12, 17, sizeof(Medium_GroupA)},
  { 18, 26, sizeof(Medium)},
  { 30, 44, sizeof(Large)},
  { 54, 60, sizeof(Labeled)},
  { 62, 68, sizeof(WithMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Small_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Medium_GroupA_GroupB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Medium_GroupA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Medium_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Large_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Labeled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WithMap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/python/util/protobuf/compare_test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
  const ::google::protobuf::Descriptor* WithMap_ValueMessageEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[6].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WithMap_ValueMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::compare_test::Small,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                WithMap_ValueMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* WithMap_ValueStringEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[7].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        WithMap_ValueStringEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                WithMap_ValueStringEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _Small_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Medium_GroupA_GroupB_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Medium_GroupA_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Medium_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Large_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Labeled_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _WithMap_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Small_default_instance_.DefaultConstruct();
  _Medium_GroupA_GroupB_default_instance_.DefaultConstruct();
  _Medium_GroupA_default_instance_.DefaultConstruct();
  _Medium_default_instance_.DefaultConstruct();
  _Large_default_instance_.DefaultConstruct();
  _Labeled_default_instance_.DefaultConstruct();
  _WithMap_default_instance_.DefaultConstruct();
  _Large_default_instance_.get_mutable()->medium_ = const_cast< ::compare_test::Medium*>(
      ::compare_test::Medium::internal_default_instance());
  _Large_default_instance_.get_mutable()->small_ = const_cast< ::compare_test::Small*>(
      ::compare_test::Small::internal_default_instance());
  _Large_default_instance_.get_mutable()->with_map_ = const_cast< ::compare_test::WithMap*>(
      ::compare_test::WithMap::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n2tensorflow/python/util/protobuf/compar"
      "e_test.proto\022\014compare_test\"\030\n\005Small\022\017\n\007s"
      "trings\030\001 \003(\t\"\323\001\n\006Medium\022\016\n\006int32s\030\001 \003(\005\022"
      "#\n\006smalls\030\002 \003(\0132\023.compare_test.Small\022+\n\006"
      "groupa\030\003 \003(\n2\033.compare_test.Medium.Group"
      "A\022\016\n\006floats\030\006 \003(\002\032W\n\006GroupA\0222\n\006groupb\030\004 "
      "\003(\n2\".compare_test.Medium.GroupA.GroupB\032"
      "\031\n\006GroupB\022\017\n\007strings\030\005 \002(\t\"\376\001\n\005Large\022\017\n\007"
      "string_\030\001 \001(\t\022\016\n\006int64_\030\002 \001(\003\022\016\n\006float_\030"
      "\003 \001(\002\022\r\n\005bool_\030\004 \001(\010\022!\n\005enum_\030\005 \001(\0162\022.co"
      "mpare_test.Enum\022\016\n\006int64s\030\006 \003(\003\022$\n\006mediu"
      "m\030\007 \001(\0132\024.compare_test.Medium\022\"\n\005small\030\010"
      " \001(\0132\023.compare_test.Small\022\017\n\007double_\030\t \001"
      "(\001\022\'\n\010with_map\030\n \001(\0132\025.compare_test.With"
      "Map\"-\n\007Labeled\022\020\n\010required\030\001 \002(\005\022\020\n\010opti"
      "onal\030\002 \001(\005\"\205\002\n\007WithMap\022>\n\rvalue_message\030"
      "\001 \003(\0132\'.compare_test.WithMap.ValueMessag"
      "eEntry\022<\n\014value_string\030\002 \003(\0132&.compare_t"
      "est.WithMap.ValueStringEntry\032H\n\021ValueMes"
      "sageEntry\022\013\n\003key\030\001 \001(\005\022\"\n\005value\030\002 \001(\0132\023."
      "compare_test.Small:\0028\001\0322\n\020ValueStringEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\033\n\004En"
      "um\022\005\n\001A\020\000\022\005\n\001B\020\001\022\005\n\001C\020\002B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/python/util/protobuf/compare_test.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto

const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_enum_descriptors[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Small::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Small::Small()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Small)
}
Small::Small(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  strings_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Small)
}
Small::Small(const Small& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:compare_test.Small)
}

void Small::SharedCtor() {
  _cached_size_ = 0;
}

Small::~Small() {
  // @@protoc_insertion_point(destructor:compare_test.Small)
  SharedDtor();
}

void Small::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Small::ArenaDtor(void* object) {
  Small* _this = reinterpret_cast< Small* >(object);
  (void)_this;
}
void Small::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Small::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Small::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[0].descriptor;
}

const Small& Small::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Small* Small::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Small>(arena);
}

void Small::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Small)
  strings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Small::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Small)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string strings = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compare_test.Small.strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Small)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Small)
  return false;
#undef DO_
}

void Small::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Small)
  // repeated string strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Small.strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Small)
}

::google::protobuf::uint8* Small::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Small)
  // repeated string strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Small.strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Small)
  return target;
}

size_t Small::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Small)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string strings = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Small::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Small)
  GOOGLE_DCHECK_NE(&from, this);
  const Small* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Small>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Small)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Small)
    MergeFrom(*source);
  }
}

void Small::MergeFrom(const Small& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Small)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strings_.MergeFrom(from.strings_);
}

void Small::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Small)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Small::CopyFrom(const Small& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Small)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Small::IsInitialized() const {
  return true;
}

void Small::Swap(Small* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Small* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Small::UnsafeArenaSwap(Small* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Small::InternalSwap(Small* other) {
  strings_.UnsafeArenaSwap(&other->strings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Small::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Small

// repeated string strings = 1;
int Small::strings_size() const {
  return strings_.size();
}
void Small::clear_strings() {
  strings_.Clear();
}
const ::std::string& Small::strings(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Small.strings)
  return strings_.Get(index);
}
::std::string* Small::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Small.strings)
  return strings_.Mutable(index);
}
void Small::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:compare_test.Small.strings)
  strings_.Mutable(index)->assign(value);
}
void Small::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:compare_test.Small.strings)
}
void Small::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:compare_test.Small.strings)
}
::std::string* Small::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:compare_test.Small.strings)
  return strings_.Add();
}
void Small::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:compare_test.Small.strings)
}
void Small::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:compare_test.Small.strings)
}
void Small::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:compare_test.Small.strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Small::strings() const {
  // @@protoc_insertion_point(field_list:compare_test.Small.strings)
  return strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Small::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Small.strings)
  return &strings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Medium_GroupA_GroupB::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Medium_GroupA_GroupB::Medium_GroupA_GroupB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Medium.GroupA.GroupB)
}
Medium_GroupA_GroupB::Medium_GroupA_GroupB(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Medium.GroupA.GroupB)
}
Medium_GroupA_GroupB::Medium_GroupA_GroupB(const Medium_GroupA_GroupB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strings()) {
    strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strings(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:compare_test.Medium.GroupA.GroupB)
}

void Medium_GroupA_GroupB::SharedCtor() {
  _cached_size_ = 0;
  strings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Medium_GroupA_GroupB::~Medium_GroupA_GroupB() {
  // @@protoc_insertion_point(destructor:compare_test.Medium.GroupA.GroupB)
  SharedDtor();
}

void Medium_GroupA_GroupB::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  strings_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Medium_GroupA_GroupB::ArenaDtor(void* object) {
  Medium_GroupA_GroupB* _this = reinterpret_cast< Medium_GroupA_GroupB* >(object);
  (void)_this;
}
void Medium_GroupA_GroupB::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Medium_GroupA_GroupB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Medium_GroupA_GroupB::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[1].descriptor;
}

const Medium_GroupA_GroupB& Medium_GroupA_GroupB::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Medium_GroupA_GroupB* Medium_GroupA_GroupB::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Medium_GroupA_GroupB>(arena);
}

void Medium_GroupA_GroupB::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Medium.GroupA.GroupB)
  if (has_strings()) {
    GOOGLE_DCHECK(!strings_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    strings_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Medium_GroupA_GroupB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Medium.GroupA.GroupB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strings = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings().data(), this->strings().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compare_test.Medium.GroupA.GroupB.strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Medium.GroupA.GroupB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Medium.GroupA.GroupB)
  return false;
#undef DO_
}

void Medium_GroupA_GroupB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Medium.GroupA.GroupB)
  // required string strings = 5;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings().data(), this->strings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Medium.GroupA.GroupB.strings");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Medium.GroupA.GroupB)
}

::google::protobuf::uint8* Medium_GroupA_GroupB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Medium.GroupA.GroupB)
  // required string strings = 5;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings().data(), this->strings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Medium.GroupA.GroupB.strings");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Medium.GroupA.GroupB)
  return target;
}

size_t Medium_GroupA_GroupB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Medium.GroupA.GroupB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string strings = 5;
  if (has_strings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strings());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Medium_GroupA_GroupB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Medium.GroupA.GroupB)
  GOOGLE_DCHECK_NE(&from, this);
  const Medium_GroupA_GroupB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Medium_GroupA_GroupB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Medium.GroupA.GroupB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Medium.GroupA.GroupB)
    MergeFrom(*source);
  }
}

void Medium_GroupA_GroupB::MergeFrom(const Medium_GroupA_GroupB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Medium.GroupA.GroupB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_strings()) {
    set_strings(from.strings());
  }
}

void Medium_GroupA_GroupB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Medium.GroupA.GroupB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Medium_GroupA_GroupB::CopyFrom(const Medium_GroupA_GroupB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Medium.GroupA.GroupB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Medium_GroupA_GroupB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Medium_GroupA_GroupB::Swap(Medium_GroupA_GroupB* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Medium_GroupA_GroupB* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Medium_GroupA_GroupB::UnsafeArenaSwap(Medium_GroupA_GroupB* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Medium_GroupA_GroupB::InternalSwap(Medium_GroupA_GroupB* other) {
  strings_.Swap(&other->strings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Medium_GroupA_GroupB::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Medium_GroupA_GroupB

// required string strings = 5;
bool Medium_GroupA_GroupB::has_strings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Medium_GroupA_GroupB::set_has_strings() {
  _has_bits_[0] |= 0x00000001u;
}
void Medium_GroupA_GroupB::clear_has_strings() {
  _has_bits_[0] &= ~0x00000001u;
}
void Medium_GroupA_GroupB::clear_strings() {
  strings_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_strings();
}
const ::std::string& Medium_GroupA_GroupB::strings() const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.GroupA.GroupB.strings)
  return strings_.Get();
}
void Medium_GroupA_GroupB::set_strings(const ::std::string& value) {
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:compare_test.Medium.GroupA.GroupB.strings)
}
void Medium_GroupA_GroupB::set_strings(const char* value) {
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:compare_test.Medium.GroupA.GroupB.strings)
}
void Medium_GroupA_GroupB::set_strings(const char* value,
    size_t size) {
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:compare_test.Medium.GroupA.GroupB.strings)
}
::std::string* Medium_GroupA_GroupB::mutable_strings() {
  set_has_strings();
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.GroupA.GroupB.strings)
  return strings_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Medium_GroupA_GroupB::release_strings() {
  // @@protoc_insertion_point(field_release:compare_test.Medium.GroupA.GroupB.strings)
  clear_has_strings();
  return strings_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Medium_GroupA_GroupB::unsafe_arena_release_strings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Medium.GroupA.GroupB.strings)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_strings();
  return strings_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Medium_GroupA_GroupB::set_allocated_strings(::std::string* strings) {
  if (strings != NULL) {
    set_has_strings();
  } else {
    clear_has_strings();
  }
  strings_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strings,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:compare_test.Medium.GroupA.GroupB.strings)
}
void Medium_GroupA_GroupB::unsafe_arena_set_allocated_strings(
    ::std::string* strings) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (strings != NULL) {
    set_has_strings();
  } else {
    clear_has_strings();
  }
  strings_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      strings, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Medium.GroupA.GroupB.strings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Medium_GroupA::kGroupbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Medium_GroupA::Medium_GroupA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Medium.GroupA)
}
Medium_GroupA::Medium_GroupA(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  groupb_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Medium.GroupA)
}
Medium_GroupA::Medium_GroupA(const Medium_GroupA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      groupb_(from.groupb_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:compare_test.Medium.GroupA)
}

void Medium_GroupA::SharedCtor() {
  _cached_size_ = 0;
}

Medium_GroupA::~Medium_GroupA() {
  // @@protoc_insertion_point(destructor:compare_test.Medium.GroupA)
  SharedDtor();
}

void Medium_GroupA::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Medium_GroupA::ArenaDtor(void* object) {
  Medium_GroupA* _this = reinterpret_cast< Medium_GroupA* >(object);
  (void)_this;
}
void Medium_GroupA::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Medium_GroupA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Medium_GroupA::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[2].descriptor;
}

const Medium_GroupA& Medium_GroupA::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Medium_GroupA* Medium_GroupA::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Medium_GroupA>(arena);
}

void Medium_GroupA::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Medium.GroupA)
  groupb_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Medium_GroupA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Medium.GroupA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group GroupB = 4 { ... };
      case 4: {
        if (tag == 35u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                4, input, add_groupb()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Medium.GroupA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Medium.GroupA)
  return false;
#undef DO_
}

void Medium_GroupA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Medium.GroupA)
  // repeated group GroupB = 4 { ... };
  for (unsigned int i = 0, n = this->groupb_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      4, this->groupb(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Medium.GroupA)
}

::google::protobuf::uint8* Medium_GroupA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Medium.GroupA)
  // repeated group GroupB = 4 { ... };
  for (unsigned int i = 0, n = this->groupb_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        4, this->groupb(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Medium.GroupA)
  return target;
}

size_t Medium_GroupA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Medium.GroupA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated group GroupB = 4 { ... };
  {
    unsigned int count = this->groupb_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->groupb(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Medium_GroupA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Medium.GroupA)
  GOOGLE_DCHECK_NE(&from, this);
  const Medium_GroupA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Medium_GroupA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Medium.GroupA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Medium.GroupA)
    MergeFrom(*source);
  }
}

void Medium_GroupA::MergeFrom(const Medium_GroupA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Medium.GroupA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupb_.MergeFrom(from.groupb_);
}

void Medium_GroupA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Medium.GroupA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Medium_GroupA::CopyFrom(const Medium_GroupA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Medium.GroupA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Medium_GroupA::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->groupb())) return false;
  return true;
}

void Medium_GroupA::Swap(Medium_GroupA* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Medium_GroupA* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Medium_GroupA::UnsafeArenaSwap(Medium_GroupA* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Medium_GroupA::InternalSwap(Medium_GroupA* other) {
  groupb_.UnsafeArenaSwap(&other->groupb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Medium_GroupA::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Medium_GroupA

// repeated group GroupB = 4 { ... };
int Medium_GroupA::groupb_size() const {
  return groupb_.size();
}
void Medium_GroupA::clear_groupb() {
  groupb_.Clear();
}
const ::compare_test::Medium_GroupA_GroupB& Medium_GroupA::groupb(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.GroupA.groupb)
  return groupb_.Get(index);
}
::compare_test::Medium_GroupA_GroupB* Medium_GroupA::mutable_groupb(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.GroupA.groupb)
  return groupb_.Mutable(index);
}
::compare_test::Medium_GroupA_GroupB* Medium_GroupA::add_groupb() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.GroupA.groupb)
  return groupb_.Add();
}
::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >*
Medium_GroupA::mutable_groupb() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.GroupA.groupb)
  return &groupb_;
}
const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >&
Medium_GroupA::groupb() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.GroupA.groupb)
  return groupb_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Medium::kInt32SFieldNumber;
const int Medium::kSmallsFieldNumber;
const int Medium::kGroupaFieldNumber;
const int Medium::kFloatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Medium::Medium()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Medium)
}
Medium::Medium(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  int32s_(arena),
  smalls_(arena),
  groupa_(arena),
  floats_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Medium)
}
Medium::Medium(const Medium& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      int32s_(from.int32s_),
      smalls_(from.smalls_),
      groupa_(from.groupa_),
      floats_(from.floats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:compare_test.Medium)
}

void Medium::SharedCtor() {
  _cached_size_ = 0;
}

Medium::~Medium() {
  // @@protoc_insertion_point(destructor:compare_test.Medium)
  SharedDtor();
}

void Medium::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Medium::ArenaDtor(void* object) {
  Medium* _this = reinterpret_cast< Medium* >(object);
  (void)_this;
}
void Medium::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Medium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Medium::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[3].descriptor;
}

const Medium& Medium::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Medium* Medium::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Medium>(arena);
}

void Medium::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Medium)
  int32s_.Clear();
  smalls_.Clear();
  groupa_.Clear();
  floats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Medium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Medium)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 int32s = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_int32s())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .compare_test.Small smalls = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_smalls()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated group GroupA = 3 { ... };
      case 3: {
        if (tag == 27u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                3, input, add_groupa()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated float floats = 6;
      case 6: {
        if (tag == 53u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_floats())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Medium)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Medium)
  return false;
#undef DO_
}

void Medium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Medium)
  // repeated int32 int32s = 1;
  for (int i = 0; i < this->int32s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->int32s(i), output);
  }

  // repeated .compare_test.Small smalls = 2;
  for (unsigned int i = 0, n = this->smalls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->smalls(i), output);
  }

  // repeated group GroupA = 3 { ... };
  for (unsigned int i = 0, n = this->groupa_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3, this->groupa(i), output);
  }

  // repeated float floats = 6;
  for (int i = 0; i < this->floats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->floats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Medium)
}

::google::protobuf::uint8* Medium::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Medium)
  // repeated int32 int32s = 1;
  for (int i = 0; i < this->int32s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->int32s(i), target);
  }

  // repeated .compare_test.Small smalls = 2;
  for (unsigned int i = 0, n = this->smalls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->smalls(i), false, target);
  }

  // repeated group GroupA = 3 { ... };
  for (unsigned int i = 0, n = this->groupa_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        3, this->groupa(i), false, target);
  }

  // repeated float floats = 6;
  for (int i = 0; i < this->floats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->floats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Medium)
  return target;
}

size_t Medium::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Medium)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 int32s = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int32s_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->int32s_size());
    total_size += data_size;
  }

  // repeated .compare_test.Small smalls = 2;
  {
    unsigned int count = this->smalls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smalls(i));
    }
  }

  // repeated group GroupA = 3 { ... };
  {
    unsigned int count = this->groupa_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->groupa(i));
    }
  }

  // repeated float floats = 6;
  {
    unsigned int count = this->floats_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->floats_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Medium::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Medium)
  GOOGLE_DCHECK_NE(&from, this);
  const Medium* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Medium>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Medium)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Medium)
    MergeFrom(*source);
  }
}

void Medium::MergeFrom(const Medium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Medium)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  int32s_.MergeFrom(from.int32s_);
  smalls_.MergeFrom(from.smalls_);
  groupa_.MergeFrom(from.groupa_);
  floats_.MergeFrom(from.floats_);
}

void Medium::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Medium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Medium::CopyFrom(const Medium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Medium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Medium::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->groupa())) return false;
  return true;
}

void Medium::Swap(Medium* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Medium* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Medium::UnsafeArenaSwap(Medium* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Medium::InternalSwap(Medium* other) {
  int32s_.UnsafeArenaSwap(&other->int32s_);
  smalls_.UnsafeArenaSwap(&other->smalls_);
  groupa_.UnsafeArenaSwap(&other->groupa_);
  floats_.UnsafeArenaSwap(&other->floats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Medium::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Medium

// repeated int32 int32s = 1;
int Medium::int32s_size() const {
  return int32s_.size();
}
void Medium::clear_int32s() {
  int32s_.Clear();
}
::google::protobuf::int32 Medium::int32s(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.int32s)
  return int32s_.Get(index);
}
void Medium::set_int32s(int index, ::google::protobuf::int32 value) {
  int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Medium.int32s)
}
void Medium::add_int32s(::google::protobuf::int32 value) {
  int32s_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Medium.int32s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Medium::int32s() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.int32s)
  return int32s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Medium::mutable_int32s() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.int32s)
  return &int32s_;
}

// repeated .compare_test.Small smalls = 2;
int Medium::smalls_size() const {
  return smalls_.size();
}
void Medium::clear_smalls() {
  smalls_.Clear();
}
const ::compare_test::Small& Medium::smalls(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.smalls)
  return smalls_.Get(index);
}
::compare_test::Small* Medium::mutable_smalls(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.smalls)
  return smalls_.Mutable(index);
}
::compare_test::Small* Medium::add_smalls() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.smalls)
  return smalls_.Add();
}
::google::protobuf::RepeatedPtrField< ::compare_test::Small >*
Medium::mutable_smalls() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.smalls)
  return &smalls_;
}
const ::google::protobuf::RepeatedPtrField< ::compare_test::Small >&
Medium::smalls() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.smalls)
  return smalls_;
}

// repeated group GroupA = 3 { ... };
int Medium::groupa_size() const {
  return groupa_.size();
}
void Medium::clear_groupa() {
  groupa_.Clear();
}
const ::compare_test::Medium_GroupA& Medium::groupa(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.groupa)
  return groupa_.Get(index);
}
::compare_test::Medium_GroupA* Medium::mutable_groupa(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.groupa)
  return groupa_.Mutable(index);
}
::compare_test::Medium_GroupA* Medium::add_groupa() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.groupa)
  return groupa_.Add();
}
::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >*
Medium::mutable_groupa() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.groupa)
  return &groupa_;
}
const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >&
Medium::groupa() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.groupa)
  return groupa_;
}

// repeated float floats = 6;
int Medium::floats_size() const {
  return floats_.size();
}
void Medium::clear_floats() {
  floats_.Clear();
}
float Medium::floats(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.floats)
  return floats_.Get(index);
}
void Medium::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Medium.floats)
}
void Medium::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Medium.floats)
}
const ::google::protobuf::RepeatedField< float >&
Medium::floats() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.floats)
  return floats_;
}
::google::protobuf::RepeatedField< float >*
Medium::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.floats)
  return &floats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Large::_slow_mutable_medium() {
  medium_ = ::google::protobuf::Arena::CreateMessage< ::compare_test::Medium >(
      GetArenaNoVirtual());
}
::compare_test::Medium* Large::_slow_release_medium() {
  if (medium_ == NULL) {
    return NULL;
  } else {
    ::compare_test::Medium* temp = new ::compare_test::Medium(*medium_);
    medium_ = NULL;
    return temp;
  }
}
::compare_test::Medium* Large::unsafe_arena_release_medium() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.medium)
  clear_has_medium();
  ::compare_test::Medium* temp = medium_;
  medium_ = NULL;
  return temp;
}
void Large::_slow_set_allocated_medium(
    ::google::protobuf::Arena* message_arena, ::compare_test::Medium** medium) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*medium) == NULL) {
      message_arena->Own(*medium);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*medium)) {
      ::compare_test::Medium* new_medium = 
            ::google::protobuf::Arena::CreateMessage< ::compare_test::Medium >(
            message_arena);
      new_medium->CopyFrom(**medium);
      *medium = new_medium;
    }
}
void Large::unsafe_arena_set_allocated_medium(
    ::compare_test::Medium* medium) {
  if (GetArenaNoVirtual() == NULL) {
    delete medium_;
  }
  medium_ = medium;
  if (medium) {
    set_has_medium();
  } else {
    clear_has_medium();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Large.medium)
}
void Large::_slow_mutable_small() {
  small_ = ::google::protobuf::Arena::CreateMessage< ::compare_test::Small >(
      GetArenaNoVirtual());
}
::compare_test::Small* Large::_slow_release_small() {
  if (small_ == NULL) {
    return NULL;
  } else {
    ::compare_test::Small* temp = new ::compare_test::Small(*small_);
    small_ = NULL;
    return temp;
  }
}
::compare_test::Small* Large::unsafe_arena_release_small() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.small)
  clear_has_small();
  ::compare_test::Small* temp = small_;
  small_ = NULL;
  return temp;
}
void Large::_slow_set_allocated_small(
    ::google::protobuf::Arena* message_arena, ::compare_test::Small** small) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*small) == NULL) {
      message_arena->Own(*small);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*small)) {
      ::compare_test::Small* new_small = 
            ::google::protobuf::Arena::CreateMessage< ::compare_test::Small >(
            message_arena);
      new_small->CopyFrom(**small);
      *small = new_small;
    }
}
void Large::unsafe_arena_set_allocated_small(
    ::compare_test::Small* small) {
  if (GetArenaNoVirtual() == NULL) {
    delete small_;
  }
  small_ = small;
  if (small) {
    set_has_small();
  } else {
    clear_has_small();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Large.small)
}
void Large::_slow_mutable_with_map() {
  with_map_ = ::google::protobuf::Arena::CreateMessage< ::compare_test::WithMap >(
      GetArenaNoVirtual());
}
::compare_test::WithMap* Large::_slow_release_with_map() {
  if (with_map_ == NULL) {
    return NULL;
  } else {
    ::compare_test::WithMap* temp = new ::compare_test::WithMap(*with_map_);
    with_map_ = NULL;
    return temp;
  }
}
::compare_test::WithMap* Large::unsafe_arena_release_with_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.with_map)
  clear_has_with_map();
  ::compare_test::WithMap* temp = with_map_;
  with_map_ = NULL;
  return temp;
}
void Large::_slow_set_allocated_with_map(
    ::google::protobuf::Arena* message_arena, ::compare_test::WithMap** with_map) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*with_map) == NULL) {
      message_arena->Own(*with_map);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*with_map)) {
      ::compare_test::WithMap* new_with_map = 
            ::google::protobuf::Arena::CreateMessage< ::compare_test::WithMap >(
            message_arena);
      new_with_map->CopyFrom(**with_map);
      *with_map = new_with_map;
    }
}
void Large::unsafe_arena_set_allocated_with_map(
    ::compare_test::WithMap* with_map) {
  if (GetArenaNoVirtual() == NULL) {
    delete with_map_;
  }
  with_map_ = with_map;
  if (with_map) {
    set_has_with_map();
  } else {
    clear_has_with_map();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Large.with_map)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Large::kStringFieldNumber;
const int Large::kInt64FieldNumber;
const int Large::kFloatFieldNumber;
const int Large::kBoolFieldNumber;
const int Large::kEnumFieldNumber;
const int Large::kInt64SFieldNumber;
const int Large::kMediumFieldNumber;
const int Large::kSmallFieldNumber;
const int Large::kDoubleFieldNumber;
const int Large::kWithMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Large::Large()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Large)
}
Large::Large(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  int64s_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Large)
}
Large::Large(const Large& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      int64s_(from.int64s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_()) {
    string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_(),
      GetArenaNoVirtual());
  }
  if (from.has_medium()) {
    medium_ = new ::compare_test::Medium(*from.medium_);
  } else {
    medium_ = NULL;
  }
  if (from.has_small()) {
    small_ = new ::compare_test::Small(*from.small_);
  } else {
    small_ = NULL;
  }
  if (from.has_with_map()) {
    with_map_ = new ::compare_test::WithMap(*from.with_map_);
  } else {
    with_map_ = NULL;
  }
  ::memcpy(&int64__, &from.int64__,
    reinterpret_cast<char*>(&enum__) -
    reinterpret_cast<char*>(&int64__) + sizeof(enum__));
  // @@protoc_insertion_point(copy_constructor:compare_test.Large)
}

void Large::SharedCtor() {
  _cached_size_ = 0;
  string__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&medium_, 0, reinterpret_cast<char*>(&enum__) -
    reinterpret_cast<char*>(&medium_) + sizeof(enum__));
}

Large::~Large() {
  // @@protoc_insertion_point(destructor:compare_test.Large)
  SharedDtor();
}

void Large::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  string__.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete medium_;
  }
  if (this != internal_default_instance()) {
    delete small_;
  }
  if (this != internal_default_instance()) {
    delete with_map_;
  }
}

void Large::ArenaDtor(void* object) {
  Large* _this = reinterpret_cast< Large* >(object);
  (void)_this;
}
void Large::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Large::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Large::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[4].descriptor;
}

const Large& Large::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Large* Large::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Large>(arena);
}

void Large::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Large)
  int64s_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_string_()) {
      GOOGLE_DCHECK(!string__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      string__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (has_medium()) {
      GOOGLE_DCHECK(medium_ != NULL);
      medium_->::compare_test::Medium::Clear();
    }
    if (has_small()) {
      GOOGLE_DCHECK(small_ != NULL);
      small_->::compare_test::Small::Clear();
    }
    if (has_with_map()) {
      GOOGLE_DCHECK(with_map_ != NULL);
      with_map_->::compare_test::WithMap::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&int64__, 0, reinterpret_cast<char*>(&double__) -
      reinterpret_cast<char*>(&int64__) + sizeof(double__));
  }
  enum__ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Large::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Large)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_ = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_().data(), this->string_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compare_test.Large.string_");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int64_ = 2;
      case 2: {
        if (tag == 16u) {
          set_has_int64_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_ = 3;
      case 3: {
        if (tag == 29u) {
          set_has_float_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_ = 4;
      case 4: {
        if (tag == 32u) {
          set_has_bool_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .compare_test.Enum enum_ = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::compare_test::Enum_IsValid(value)) {
            set_enum_(static_cast< ::compare_test::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 int64s = 6;
      case 6: {
        if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_int64s())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .compare_test.Medium medium = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .compare_test.Small small = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_small()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_ = 9;
      case 9: {
        if (tag == 73u) {
          set_has_double_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .compare_test.WithMap with_map = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_with_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Large)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Large)
  return false;
#undef DO_
}

void Large::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Large)
  // optional string string_ = 1;
  if (has_string_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_().data(), this->string_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Large.string_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_(), output);
  }

  // optional int64 int64_ = 2;
  if (has_int64_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64_(), output);
  }

  // optional float float_ = 3;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_(), output);
  }

  // optional bool bool_ = 4;
  if (has_bool_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_(), output);
  }

  // optional .compare_test.Enum enum_ = 5;
  if (has_enum_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->enum_(), output);
  }

  // repeated int64 int64s = 6;
  for (int i = 0; i < this->int64s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->int64s(i), output);
  }

  // optional .compare_test.Medium medium = 7;
  if (has_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->medium_, output);
  }

  // optional .compare_test.Small small = 8;
  if (has_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->small_, output);
  }

  // optional double double_ = 9;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->double_(), output);
  }

  // optional .compare_test.WithMap with_map = 10;
  if (has_with_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->with_map_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Large)
}

::google::protobuf::uint8* Large::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Large)
  // optional string string_ = 1;
  if (has_string_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_().data(), this->string_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compare_test.Large.string_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_(), target);
  }

  // optional int64 int64_ = 2;
  if (has_int64_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64_(), target);
  }

  // optional float float_ = 3;
  if (has_float_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_(), target);
  }

  // optional bool bool_ = 4;
  if (has_bool_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bool_(), target);
  }

  // optional .compare_test.Enum enum_ = 5;
  if (has_enum_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->enum_(), target);
  }

  // repeated int64 int64s = 6;
  for (int i = 0; i < this->int64s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->int64s(i), target);
  }

  // optional .compare_test.Medium medium = 7;
  if (has_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->medium_, false, target);
  }

  // optional .compare_test.Small small = 8;
  if (has_small()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->small_, false, target);
  }

  // optional double double_ = 9;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->double_(), target);
  }

  // optional .compare_test.WithMap with_map = 10;
  if (has_with_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->with_map_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Large)
  return target;
}

size_t Large::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Large)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 int64s = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->int64s_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->int64s_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string string_ = 1;
    if (has_string_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_());
    }

    // optional .compare_test.Medium medium = 7;
    if (has_medium()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->medium_);
    }

    // optional .compare_test.Small small = 8;
    if (has_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->small_);
    }

    // optional .compare_test.WithMap with_map = 10;
    if (has_with_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->with_map_);
    }

    // optional int64 int64_ = 2;
    if (has_int64_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_());
    }

    // optional float float_ = 3;
    if (has_float_()) {
      total_size += 1 + 4;
    }

    // optional bool bool_ = 4;
    if (has_bool_()) {
      total_size += 1 + 1;
    }

    // optional double double_ = 9;
    if (has_double_()) {
      total_size += 1 + 8;
    }

  }
  // optional .compare_test.Enum enum_ = 5;
  if (has_enum_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Large::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Large)
  GOOGLE_DCHECK_NE(&from, this);
  const Large* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Large>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Large)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Large)
    MergeFrom(*source);
  }
}

void Large::MergeFrom(const Large& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Large)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  int64s_.MergeFrom(from.int64s_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_string_()) {
      set_string_(from.string_());
    }
    if (from.has_medium()) {
      mutable_medium()->::compare_test::Medium::MergeFrom(from.medium());
    }
    if (from.has_small()) {
      mutable_small()->::compare_test::Small::MergeFrom(from.small());
    }
    if (from.has_with_map()) {
      mutable_with_map()->::compare_test::WithMap::MergeFrom(from.with_map());
    }
    if (from.has_int64_()) {
      set_int64_(from.int64_());
    }
    if (from.has_float_()) {
      set_float_(from.float_());
    }
    if (from.has_bool_()) {
      set_bool_(from.bool_());
    }
    if (from.has_double_()) {
      set_double_(from.double_());
    }
  }
  if (from.has_enum_()) {
    set_enum_(from.enum_());
  }
}

void Large::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Large)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Large::CopyFrom(const Large& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Large)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Large::IsInitialized() const {
  if (has_medium()) {
    if (!this->medium_->IsInitialized()) return false;
  }
  return true;
}

void Large::Swap(Large* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Large* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Large::UnsafeArenaSwap(Large* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Large::InternalSwap(Large* other) {
  int64s_.UnsafeArenaSwap(&other->int64s_);
  string__.Swap(&other->string__);
  std::swap(medium_, other->medium_);
  std::swap(small_, other->small_);
  std::swap(with_map_, other->with_map_);
  std::swap(int64__, other->int64__);
  std::swap(float__, other->float__);
  std::swap(bool__, other->bool__);
  std::swap(double__, other->double__);
  std::swap(enum__, other->enum__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Large::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Large

// optional string string_ = 1;
bool Large::has_string_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Large::set_has_string_() {
  _has_bits_[0] |= 0x00000001u;
}
void Large::clear_has_string_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Large::clear_string_() {
  string__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_string_();
}
const ::std::string& Large::string_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.string_)
  return string__.Get();
}
void Large::set_string_(const ::std::string& value) {
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:compare_test.Large.string_)
}
void Large::set_string_(const char* value) {
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:compare_test.Large.string_)
}
void Large::set_string_(const char* value,
    size_t size) {
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:compare_test.Large.string_)
}
::std::string* Large::mutable_string_() {
  set_has_string_();
  // @@protoc_insertion_point(field_mutable:compare_test.Large.string_)
  return string__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Large::release_string_() {
  // @@protoc_insertion_point(field_release:compare_test.Large.string_)
  clear_has_string_();
  return string__.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Large::unsafe_arena_release_string_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.string_)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_string_();
  return string__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Large::set_allocated_string_(::std::string* string_) {
  if (string_ != NULL) {
    set_has_string_();
  } else {
    clear_has_string_();
  }
  string__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.string_)
}
void Large::unsafe_arena_set_allocated_string_(
    ::std::string* string_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (string_ != NULL) {
    set_has_string_();
  } else {
    clear_has_string_();
  }
  string__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      string_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Large.string_)
}

// optional int64 int64_ = 2;
bool Large::has_int64_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Large::set_has_int64_() {
  _has_bits_[0] |= 0x00000010u;
}
void Large::clear_has_int64_() {
  _has_bits_[0] &= ~0x00000010u;
}
void Large::clear_int64_() {
  int64__ = GOOGLE_LONGLONG(0);
  clear_has_int64_();
}
::google::protobuf::int64 Large::int64_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.int64_)
  return int64__;
}
void Large::set_int64_(::google::protobuf::int64 value) {
  set_has_int64_();
  int64__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.int64_)
}

// optional float float_ = 3;
bool Large::has_float_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Large::set_has_float_() {
  _has_bits_[0] |= 0x00000020u;
}
void Large::clear_has_float_() {
  _has_bits_[0] &= ~0x00000020u;
}
void Large::clear_float_() {
  float__ = 0;
  clear_has_float_();
}
float Large::float_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.float_)
  return float__;
}
void Large::set_float_(float value) {
  set_has_float_();
  float__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.float_)
}

// optional bool bool_ = 4;
bool Large::has_bool_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Large::set_has_bool_() {
  _has_bits_[0] |= 0x00000040u;
}
void Large::clear_has_bool_() {
  _has_bits_[0] &= ~0x00000040u;
}
void Large::clear_bool_() {
  bool__ = false;
  clear_has_bool_();
}
bool Large::bool_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.bool_)
  return bool__;
}
void Large::set_bool_(bool value) {
  set_has_bool_();
  bool__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.bool_)
}

// optional .compare_test.Enum enum_ = 5;
bool Large::has_enum_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Large::set_has_enum_() {
  _has_bits_[0] |= 0x00000100u;
}
void Large::clear_has_enum_() {
  _has_bits_[0] &= ~0x00000100u;
}
void Large::clear_enum_() {
  enum__ = 0;
  clear_has_enum_();
}
::compare_test::Enum Large::enum_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.enum_)
  return static_cast< ::compare_test::Enum >(enum__);
}
void Large::set_enum_(::compare_test::Enum value) {
  assert(::compare_test::Enum_IsValid(value));
  set_has_enum_();
  enum__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.enum_)
}

// repeated int64 int64s = 6;
int Large::int64s_size() const {
  return int64s_.size();
}
void Large::clear_int64s() {
  int64s_.Clear();
}
::google::protobuf::int64 Large::int64s(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Large.int64s)
  return int64s_.Get(index);
}
void Large::set_int64s(int index, ::google::protobuf::int64 value) {
  int64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Large.int64s)
}
void Large::add_int64s(::google::protobuf::int64 value) {
  int64s_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Large.int64s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Large::int64s() const {
  // @@protoc_insertion_point(field_list:compare_test.Large.int64s)
  return int64s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Large::mutable_int64s() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Large.int64s)
  return &int64s_;
}

// optional .compare_test.Medium medium = 7;
bool Large::has_medium() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Large::set_has_medium() {
  _has_bits_[0] |= 0x00000002u;
}
void Large::clear_has_medium() {
  _has_bits_[0] &= ~0x00000002u;
}
void Large::clear_medium() {
  if (medium_ != NULL) medium_->::compare_test::Medium::Clear();
  clear_has_medium();
}
const ::compare_test::Medium& Large::medium() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.medium)
  return medium_ != NULL ? *medium_
                         : *::compare_test::Medium::internal_default_instance();
}
::compare_test::Medium* Large::mutable_medium() {
  set_has_medium();
  if (medium_ == NULL) {
    _slow_mutable_medium();
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.medium)
  return medium_;
}
::compare_test::Medium* Large::release_medium() {
  // @@protoc_insertion_point(field_release:compare_test.Large.medium)
  clear_has_medium();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_medium();
  } else {
    ::compare_test::Medium* temp = medium_;
    medium_ = NULL;
    return temp;
  }
}
 void Large::set_allocated_medium(::compare_test::Medium* medium) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete medium_;
  }
  if (medium != NULL) {
    _slow_set_allocated_medium(message_arena, &medium);
  }
  medium_ = medium;
  if (medium) {
    set_has_medium();
  } else {
    clear_has_medium();
  }
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.medium)
}

// optional .compare_test.Small small = 8;
bool Large::has_small() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Large::set_has_small() {
  _has_bits_[0] |= 0x00000004u;
}
void Large::clear_has_small() {
  _has_bits_[0] &= ~0x00000004u;
}
void Large::clear_small() {
  if (small_ != NULL) small_->::compare_test::Small::Clear();
  clear_has_small();
}
const ::compare_test::Small& Large::small() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.small)
  return small_ != NULL ? *small_
                         : *::compare_test::Small::internal_default_instance();
}
::compare_test::Small* Large::mutable_small() {
  set_has_small();
  if (small_ == NULL) {
    _slow_mutable_small();
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.small)
  return small_;
}
::compare_test::Small* Large::release_small() {
  // @@protoc_insertion_point(field_release:compare_test.Large.small)
  clear_has_small();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_small();
  } else {
    ::compare_test::Small* temp = small_;
    small_ = NULL;
    return temp;
  }
}
 void Large::set_allocated_small(::compare_test::Small* small) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete small_;
  }
  if (small != NULL) {
    _slow_set_allocated_small(message_arena, &small);
  }
  small_ = small;
  if (small) {
    set_has_small();
  } else {
    clear_has_small();
  }
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.small)
}

// optional double double_ = 9;
bool Large::has_double_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Large::set_has_double_() {
  _has_bits_[0] |= 0x00000080u;
}
void Large::clear_has_double_() {
  _has_bits_[0] &= ~0x00000080u;
}
void Large::clear_double_() {
  double__ = 0;
  clear_has_double_();
}
double Large::double_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.double_)
  return double__;
}
void Large::set_double_(double value) {
  set_has_double_();
  double__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.double_)
}

// optional .compare_test.WithMap with_map = 10;
bool Large::has_with_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Large::set_has_with_map() {
  _has_bits_[0] |= 0x00000008u;
}
void Large::clear_has_with_map() {
  _has_bits_[0] &= ~0x00000008u;
}
void Large::clear_with_map() {
  if (with_map_ != NULL) with_map_->::compare_test::WithMap::Clear();
  clear_has_with_map();
}
const ::compare_test::WithMap& Large::with_map() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.with_map)
  return with_map_ != NULL ? *with_map_
                         : *::compare_test::WithMap::internal_default_instance();
}
::compare_test::WithMap* Large::mutable_with_map() {
  set_has_with_map();
  if (with_map_ == NULL) {
    _slow_mutable_with_map();
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.with_map)
  return with_map_;
}
::compare_test::WithMap* Large::release_with_map() {
  // @@protoc_insertion_point(field_release:compare_test.Large.with_map)
  clear_has_with_map();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_with_map();
  } else {
    ::compare_test::WithMap* temp = with_map_;
    with_map_ = NULL;
    return temp;
  }
}
 void Large::set_allocated_with_map(::compare_test::WithMap* with_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_map_;
  }
  if (with_map != NULL) {
    _slow_set_allocated_with_map(message_arena, &with_map);
  }
  with_map_ = with_map;
  if (with_map) {
    set_has_with_map();
  } else {
    clear_has_with_map();
  }
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.with_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Labeled::kRequiredFieldNumber;
const int Labeled::kOptionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Labeled::Labeled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.Labeled)
}
Labeled::Labeled(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.Labeled)
}
Labeled::Labeled(const Labeled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&required_, &from.required_,
    reinterpret_cast<char*>(&optional_) -
    reinterpret_cast<char*>(&required_) + sizeof(optional_));
  // @@protoc_insertion_point(copy_constructor:compare_test.Labeled)
}

void Labeled::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&required_, 0, reinterpret_cast<char*>(&optional_) -
    reinterpret_cast<char*>(&required_) + sizeof(optional_));
}

Labeled::~Labeled() {
  // @@protoc_insertion_point(destructor:compare_test.Labeled)
  SharedDtor();
}

void Labeled::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Labeled::ArenaDtor(void* object) {
  Labeled* _this = reinterpret_cast< Labeled* >(object);
  (void)_this;
}
void Labeled::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Labeled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Labeled::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[5].descriptor;
}

const Labeled& Labeled::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Labeled* Labeled::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Labeled>(arena);
}

void Labeled::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.Labeled)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&required_, 0, reinterpret_cast<char*>(&optional_) -
      reinterpret_cast<char*>(&required_) + sizeof(optional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Labeled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.Labeled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 required = 1;
      case 1: {
        if (tag == 8u) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 optional = 2;
      case 2: {
        if (tag == 16u) {
          set_has_optional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.Labeled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.Labeled)
  return false;
#undef DO_
}

void Labeled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.Labeled)
  // required int32 required = 1;
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->required(), output);
  }

  // optional int32 optional = 2;
  if (has_optional()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.Labeled)
}

::google::protobuf::uint8* Labeled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.Labeled)
  // required int32 required = 1;
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->required(), target);
  }

  // optional int32 optional = 2;
  if (has_optional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optional(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.Labeled)
  return target;
}

size_t Labeled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.Labeled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 required = 1;
  if (has_required()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->required());
  }
  // optional int32 optional = 2;
  if (has_optional()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Labeled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.Labeled)
  GOOGLE_DCHECK_NE(&from, this);
  const Labeled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Labeled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.Labeled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.Labeled)
    MergeFrom(*source);
  }
}

void Labeled::MergeFrom(const Labeled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.Labeled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_required()) {
      set_required(from.required());
    }
    if (from.has_optional()) {
      set_optional(from.optional());
    }
  }
}

void Labeled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.Labeled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labeled::CopyFrom(const Labeled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.Labeled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labeled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Labeled::Swap(Labeled* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Labeled* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Labeled::UnsafeArenaSwap(Labeled* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Labeled::InternalSwap(Labeled* other) {
  std::swap(required_, other->required_);
  std::swap(optional_, other->optional_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Labeled::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Labeled

// required int32 required = 1;
bool Labeled::has_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Labeled::set_has_required() {
  _has_bits_[0] |= 0x00000001u;
}
void Labeled::clear_has_required() {
  _has_bits_[0] &= ~0x00000001u;
}
void Labeled::clear_required() {
  required_ = 0;
  clear_has_required();
}
::google::protobuf::int32 Labeled::required() const {
  // @@protoc_insertion_point(field_get:compare_test.Labeled.required)
  return required_;
}
void Labeled::set_required(::google::protobuf::int32 value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:compare_test.Labeled.required)
}

// optional int32 optional = 2;
bool Labeled::has_optional() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Labeled::set_has_optional() {
  _has_bits_[0] |= 0x00000002u;
}
void Labeled::clear_has_optional() {
  _has_bits_[0] &= ~0x00000002u;
}
void Labeled::clear_optional() {
  optional_ = 0;
  clear_has_optional();
}
::google::protobuf::int32 Labeled::optional() const {
  // @@protoc_insertion_point(field_get:compare_test.Labeled.optional)
  return optional_;
}
void Labeled::set_optional(::google::protobuf::int32 value) {
  set_has_optional();
  optional_ = value;
  // @@protoc_insertion_point(field_set:compare_test.Labeled.optional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WithMap::kValueMessageFieldNumber;
const int WithMap::kValueStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WithMap::WithMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:compare_test.WithMap)
}
WithMap::WithMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_message_(arena),
  value_string_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:compare_test.WithMap)
}
WithMap::WithMap(const WithMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& WithMap_ValueMessageEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[6].descriptor;
  const ::google::protobuf::Descriptor*& WithMap_ValueStringEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[7].descriptor;
  value_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce);
  value_message_.SetEntryDescriptor(
      &WithMap_ValueMessageEntry_descriptor);
  value_message_.MergeFrom(from.value_message_);
  value_string_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce);
  value_string_.SetEntryDescriptor(
      &WithMap_ValueStringEntry_descriptor);
  value_string_.MergeFrom(from.value_string_);
  // @@protoc_insertion_point(copy_constructor:compare_test.WithMap)
}

void WithMap::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& WithMap_ValueMessageEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[6].descriptor;
  const ::google::protobuf::Descriptor*& WithMap_ValueStringEntry_descriptor = protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[7].descriptor;
  value_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce);
  value_message_.SetEntryDescriptor(
      &WithMap_ValueMessageEntry_descriptor);
  value_string_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce);
  value_string_.SetEntryDescriptor(
      &WithMap_ValueStringEntry_descriptor);
}

WithMap::~WithMap() {
  // @@protoc_insertion_point(destructor:compare_test.WithMap)
  SharedDtor();
}

void WithMap::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void WithMap::ArenaDtor(void* object) {
  WithMap* _this = reinterpret_cast< WithMap* >(object);
  (void)_this;
}
void WithMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WithMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithMap::descriptor() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[8].descriptor;
}

const WithMap& WithMap::default_instance() {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

WithMap* WithMap::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WithMap>(arena);
}

void WithMap::Clear() {
// @@protoc_insertion_point(message_clear_start:compare_test.WithMap)
  value_message_.Clear();
  value_string_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WithMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compare_test.WithMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .compare_test.Small> value_message = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          WithMap_ValueMessageEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::compare_test::Small,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small > > parser(&value_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> value_string = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          WithMap_ValueStringEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&value_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compare_test.WithMap.ValueStringEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compare_test.WithMap.ValueStringEntry.value");
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compare_test.WithMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compare_test.WithMap)
  return false;
#undef DO_
}

void WithMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compare_test.WithMap)
  // map<int32, .compare_test.Small> value_message = 1;
  if (!this->value_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->value_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_iterator
          it = this->value_message().begin();
          it != this->value_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<WithMap_ValueMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<WithMap_ValueMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_iterator
          it = this->value_message().begin();
          it != this->value_message().end(); ++it) {
        entry.reset(value_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<string, string> value_string = 2;
  if (!this->value_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "compare_test.WithMap.ValueStringEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "compare_test.WithMap.ValueStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->value_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->value_string().begin();
          it != this->value_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<WithMap_ValueStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<WithMap_ValueStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->value_string().begin();
          it != this->value_string().end(); ++it) {
        entry.reset(value_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compare_test.WithMap)
}

::google::protobuf::uint8* WithMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:compare_test.WithMap)
  // map<int32, .compare_test.Small> value_message = 1;
  if (!this->value_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->value_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_iterator
          it = this->value_message().begin();
          it != this->value_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<WithMap_ValueMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<WithMap_ValueMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_iterator
          it = this->value_message().begin();
          it != this->value_message().end(); ++it) {
        entry.reset(value_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<string, string> value_string = 2;
  if (!this->value_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "compare_test.WithMap.ValueStringEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "compare_test.WithMap.ValueStringEntry.value");
      }
    };

    if (deterministic &&
        this->value_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->value_string().begin();
          it != this->value_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<WithMap_ValueStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<WithMap_ValueStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->value_string().begin();
          it != this->value_string().end(); ++it) {
        entry.reset(value_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compare_test.WithMap)
  return target;
}

size_t WithMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:compare_test.WithMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .compare_test.Small> value_message = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_message_size());
  {
    ::google::protobuf::scoped_ptr<WithMap_ValueMessageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >::const_iterator
        it = this->value_message().begin();
        it != this->value_message().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(value_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, string> value_string = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_string_size());
  {
    ::google::protobuf::scoped_ptr<WithMap_ValueStringEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->value_string().begin();
        it != this->value_string().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(value_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:compare_test.WithMap)
  GOOGLE_DCHECK_NE(&from, this);
  const WithMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WithMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:compare_test.WithMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:compare_test.WithMap)
    MergeFrom(*source);
  }
}

void WithMap::MergeFrom(const WithMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:compare_test.WithMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_message_.MergeFrom(from.value_message_);
  value_string_.MergeFrom(from.value_string_);
}

void WithMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:compare_test.WithMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithMap::CopyFrom(const WithMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:compare_test.WithMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithMap::IsInitialized() const {
  return true;
}

void WithMap::Swap(WithMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WithMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WithMap::UnsafeArenaSwap(WithMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WithMap::InternalSwap(WithMap* other) {
  value_message_.Swap(&other->value_message_);
  value_string_.Swap(&other->value_string_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WithMap::GetMetadata() const {
  protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WithMap

// map<int32, .compare_test.Small> value_message = 1;
int WithMap::value_message_size() const {
  return value_message_.size();
}
void WithMap::clear_value_message() {
  value_message_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >&
WithMap::value_message() const {
  // @@protoc_insertion_point(field_map:compare_test.WithMap.value_message)
  return value_message_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >*
WithMap::mutable_value_message() {
  // @@protoc_insertion_point(field_mutable_map:compare_test.WithMap.value_message)
  return value_message_.MutableMap();
}

// map<string, string> value_string = 2;
int WithMap::value_string_size() const {
  return value_string_.size();
}
void WithMap::clear_value_string() {
  value_string_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
WithMap::value_string() const {
  // @@protoc_insertion_point(field_map:compare_test.WithMap.value_string)
  return value_string_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
WithMap::mutable_value_string() {
  // @@protoc_insertion_point(field_mutable_map:compare_test.WithMap.value_string)
  return value_string_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace compare_test

// @@protoc_insertion_point(global_scope)
