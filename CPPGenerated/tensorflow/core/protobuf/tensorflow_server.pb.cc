// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tensorflow_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/tensorflow_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class JobDefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobDef> {
} _JobDef_default_instance_;
class ClusterDefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterDef> {
} _ClusterDef_default_instance_;
class ServerDefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerDef> {
} _ServerDef_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDef, tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDef, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, task_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, default_session_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDef, protocol_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(JobDef)},
  { 6, -1, sizeof(ClusterDef)},
  { 11, -1, sizeof(ServerDef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerDef_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/protobuf/tensorflow_server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
  const ::google::protobuf::Descriptor* JobDef_TasksEntry_descriptor = protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        JobDef_TasksEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                JobDef_TasksEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _JobDef_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ClusterDef_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ServerDef_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::InitDefaults();
  _JobDef_default_instance_.DefaultConstruct();
  _ClusterDef_default_instance_.DefaultConstruct();
  _ServerDef_default_instance_.DefaultConstruct();
  _ServerDef_default_instance_.get_mutable()->cluster_ = const_cast< ::tensorflow::ClusterDef*>(
      ::tensorflow::ClusterDef::internal_default_instance());
  _ServerDef_default_instance_.get_mutable()->default_session_config_ = const_cast< ::tensorflow::ConfigProto*>(
      ::tensorflow::ConfigProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n0tensorflow/core/protobuf/tensorflow_se"
      "rver.proto\022\ntensorflow\032%tensorflow/core/"
      "protobuf/config.proto\"r\n\006JobDef\022\014\n\004name\030"
      "\001 \001(\t\022,\n\005tasks\030\002 \003(\0132\035.tensorflow.JobDef"
      ".TasksEntry\032,\n\nTasksEntry\022\013\n\003key\030\001 \001(\005\022\r"
      "\n\005value\030\002 \001(\t:\0028\001\"-\n\nClusterDef\022\037\n\003job\030\001"
      " \003(\0132\022.tensorflow.JobDef\"\245\001\n\tServerDef\022\'"
      "\n\007cluster\030\001 \001(\0132\026.tensorflow.ClusterDef\022"
      "\020\n\010job_name\030\002 \001(\t\022\022\n\ntask_index\030\003 \001(\005\0227\n"
      "\026default_session_config\030\004 \001(\0132\027.tensorfl"
      "ow.ConfigProto\022\020\n\010protocol\030\005 \001(\tB/\n\032org."
      "tensorflow.distruntimeB\014ServerProtosP\001\370\001"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/tensorflow_server.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobDef::kNameFieldNumber;
const int JobDef::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobDef::JobDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.JobDef)
}
JobDef::JobDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tasks_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.JobDef)
}
JobDef::JobDef(const JobDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& JobDef_TasksEntry_descriptor = protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[0].descriptor;
  tasks_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce);
  tasks_.SetEntryDescriptor(
      &JobDef_TasksEntry_descriptor);
  tasks_.MergeFrom(from.tasks_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.JobDef)
}

void JobDef::SharedCtor() {
  const ::google::protobuf::Descriptor*& JobDef_TasksEntry_descriptor = protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[0].descriptor;
  tasks_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce);
  tasks_.SetEntryDescriptor(
      &JobDef_TasksEntry_descriptor);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JobDef::~JobDef() {
  // @@protoc_insertion_point(destructor:tensorflow.JobDef)
  SharedDtor();
}

void JobDef::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void JobDef::ArenaDtor(void* object) {
  JobDef* _this = reinterpret_cast< JobDef* >(object);
  (void)_this;
}
void JobDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JobDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDef::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[1].descriptor;
}

const JobDef& JobDef::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobDef* JobDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JobDef>(arena);
}

void JobDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.JobDef)
  tasks_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool JobDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.JobDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.JobDef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> tasks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          JobDef_TasksEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&tasks_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.JobDef.TasksEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.JobDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.JobDef)
  return false;
#undef DO_
}

void JobDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.JobDef)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<int32, string> tasks = 2;
  if (!this->tasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.JobDef.TasksEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tasks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<JobDef_TasksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tasks_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<JobDef_TasksEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it) {
        entry.reset(tasks_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.JobDef)
}

::google::protobuf::uint8* JobDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.JobDef)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<int32, string> tasks = 2;
  if (!this->tasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.JobDef.TasksEntry.value");
      }
    };

    if (deterministic &&
        this->tasks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<JobDef_TasksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tasks_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<JobDef_TasksEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it) {
        entry.reset(tasks_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.JobDef)
  return target;
}

size_t JobDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.JobDef)
  size_t total_size = 0;

  // map<int32, string> tasks = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tasks_size());
  {
    ::google::protobuf::scoped_ptr<JobDef_TasksEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->tasks().begin();
        it != this->tasks().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(tasks_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.JobDef)
  GOOGLE_DCHECK_NE(&from, this);
  const JobDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.JobDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.JobDef)
    MergeFrom(*source);
  }
}

void JobDef::MergeFrom(const JobDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.JobDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tasks_.MergeFrom(from.tasks_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void JobDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.JobDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDef::CopyFrom(const JobDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.JobDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDef::IsInitialized() const {
  return true;
}

void JobDef::Swap(JobDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JobDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JobDef::UnsafeArenaSwap(JobDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JobDef::InternalSwap(JobDef* other) {
  tasks_.Swap(&other->tasks_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobDef

// string name = 1;
void JobDef::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JobDef::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.JobDef.name)
  return name_.Get();
}
void JobDef::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.JobDef.name)
}
void JobDef::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.JobDef.name)
}
void JobDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.JobDef.name)
}
::std::string* JobDef::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.JobDef.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JobDef::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.JobDef.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JobDef::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.JobDef.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JobDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.JobDef.name)
}
void JobDef::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.JobDef.name)
}

// map<int32, string> tasks = 2;
int JobDef::tasks_size() const {
  return tasks_.size();
}
void JobDef::clear_tasks() {
  tasks_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
JobDef::tasks() const {
  // @@protoc_insertion_point(field_map:tensorflow.JobDef.tasks)
  return tasks_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
JobDef::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.JobDef.tasks)
  return tasks_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterDef::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterDef::ClusterDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ClusterDef)
}
ClusterDef::ClusterDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  job_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ClusterDef)
}
ClusterDef::ClusterDef(const ClusterDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      job_(from.job_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ClusterDef)
}

void ClusterDef::SharedCtor() {
  _cached_size_ = 0;
}

ClusterDef::~ClusterDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ClusterDef)
  SharedDtor();
}

void ClusterDef::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ClusterDef::ArenaDtor(void* object) {
  ClusterDef* _this = reinterpret_cast< ClusterDef* >(object);
  (void)_this;
}
void ClusterDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClusterDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterDef::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[2].descriptor;
}

const ClusterDef& ClusterDef::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterDef* ClusterDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClusterDef>(arena);
}

void ClusterDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ClusterDef)
  job_.Clear();
}

bool ClusterDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ClusterDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.JobDef job = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_job()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ClusterDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ClusterDef)
  return false;
#undef DO_
}

void ClusterDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ClusterDef)
  // repeated .tensorflow.JobDef job = 1;
  for (unsigned int i = 0, n = this->job_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->job(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ClusterDef)
}

::google::protobuf::uint8* ClusterDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ClusterDef)
  // repeated .tensorflow.JobDef job = 1;
  for (unsigned int i = 0, n = this->job_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->job(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ClusterDef)
  return target;
}

size_t ClusterDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ClusterDef)
  size_t total_size = 0;

  // repeated .tensorflow.JobDef job = 1;
  {
    unsigned int count = this->job_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ClusterDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ClusterDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ClusterDef)
    MergeFrom(*source);
  }
}

void ClusterDef::MergeFrom(const ClusterDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ClusterDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_.MergeFrom(from.job_);
}

void ClusterDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ClusterDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterDef::CopyFrom(const ClusterDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ClusterDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterDef::IsInitialized() const {
  return true;
}

void ClusterDef::Swap(ClusterDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClusterDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClusterDef::UnsafeArenaSwap(ClusterDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClusterDef::InternalSwap(ClusterDef* other) {
  job_.UnsafeArenaSwap(&other->job_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterDef

// repeated .tensorflow.JobDef job = 1;
int ClusterDef::job_size() const {
  return job_.size();
}
void ClusterDef::clear_job() {
  job_.Clear();
}
const ::tensorflow::JobDef& ClusterDef::job(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ClusterDef.job)
  return job_.Get(index);
}
::tensorflow::JobDef* ClusterDef::mutable_job(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ClusterDef.job)
  return job_.Mutable(index);
}
::tensorflow::JobDef* ClusterDef::add_job() {
  // @@protoc_insertion_point(field_add:tensorflow.ClusterDef.job)
  return job_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::JobDef >*
ClusterDef::mutable_job() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ClusterDef.job)
  return &job_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDef >&
ClusterDef::job() const {
  // @@protoc_insertion_point(field_list:tensorflow.ClusterDef.job)
  return job_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServerDef::_slow_mutable_cluster() {
  cluster_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ClusterDef >(
      GetArenaNoVirtual());
}
::tensorflow::ClusterDef* ServerDef::_slow_release_cluster() {
  if (cluster_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ClusterDef* temp = new ::tensorflow::ClusterDef(*cluster_);
    cluster_ = NULL;
    return temp;
  }
}
::tensorflow::ClusterDef* ServerDef::unsafe_arena_release_cluster() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ServerDef.cluster)
  
  ::tensorflow::ClusterDef* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void ServerDef::_slow_set_allocated_cluster(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ClusterDef** cluster) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cluster) == NULL) {
      message_arena->Own(*cluster);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cluster)) {
      ::tensorflow::ClusterDef* new_cluster = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ClusterDef >(
            message_arena);
      new_cluster->CopyFrom(**cluster);
      *cluster = new_cluster;
    }
}
void ServerDef::unsafe_arena_set_allocated_cluster(
    ::tensorflow::ClusterDef* cluster) {
  if (GetArenaNoVirtual() == NULL) {
    delete cluster_;
  }
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ServerDef.cluster)
}
void ServerDef::_slow_mutable_default_session_config() {
  default_session_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
      GetArenaNoVirtual());
}
::tensorflow::ConfigProto* ServerDef::_slow_release_default_session_config() {
  if (default_session_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ConfigProto* temp = new ::tensorflow::ConfigProto(*default_session_config_);
    default_session_config_ = NULL;
    return temp;
  }
}
::tensorflow::ConfigProto* ServerDef::unsafe_arena_release_default_session_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ServerDef.default_session_config)
  
  ::tensorflow::ConfigProto* temp = default_session_config_;
  default_session_config_ = NULL;
  return temp;
}
void ServerDef::_slow_set_allocated_default_session_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto** default_session_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*default_session_config) == NULL) {
      message_arena->Own(*default_session_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*default_session_config)) {
      ::tensorflow::ConfigProto* new_default_session_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
            message_arena);
      new_default_session_config->CopyFrom(**default_session_config);
      *default_session_config = new_default_session_config;
    }
}
void ServerDef::unsafe_arena_set_allocated_default_session_config(
    ::tensorflow::ConfigProto* default_session_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete default_session_config_;
  }
  default_session_config_ = default_session_config;
  if (default_session_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ServerDef.default_session_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerDef::kClusterFieldNumber;
const int ServerDef::kJobNameFieldNumber;
const int ServerDef::kTaskIndexFieldNumber;
const int ServerDef::kDefaultSessionConfigFieldNumber;
const int ServerDef::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerDef::ServerDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ServerDef)
}
ServerDef::ServerDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ServerDef)
}
ServerDef::ServerDef(const ServerDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_name().size() > 0) {
    job_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_name(),
      GetArenaNoVirtual());
  }
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol(),
      GetArenaNoVirtual());
  }
  if (from.has_cluster()) {
    cluster_ = new ::tensorflow::ClusterDef(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  if (from.has_default_session_config()) {
    default_session_config_ = new ::tensorflow::ConfigProto(*from.default_session_config_);
  } else {
    default_session_config_ = NULL;
  }
  task_index_ = from.task_index_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ServerDef)
}

void ServerDef::SharedCtor() {
  job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_, 0, reinterpret_cast<char*>(&task_index_) -
    reinterpret_cast<char*>(&cluster_) + sizeof(task_index_));
  _cached_size_ = 0;
}

ServerDef::~ServerDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ServerDef)
  SharedDtor();
}

void ServerDef::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  job_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  protocol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete cluster_;
  }
  if (this != internal_default_instance()) {
    delete default_session_config_;
  }
}

void ServerDef::ArenaDtor(void* object) {
  ServerDef* _this = reinterpret_cast< ServerDef* >(object);
  (void)_this;
}
void ServerDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServerDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDef::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[3].descriptor;
}

const ServerDef& ServerDef::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerDef* ServerDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServerDef>(arena);
}

void ServerDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ServerDef)
  job_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  protocol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_session_config_ != NULL) {
    delete default_session_config_;
  }
  default_session_config_ = NULL;
  task_index_ = 0;
}

bool ServerDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ServerDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.ClusterDef cluster = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_name().data(), this->job_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ServerDef.job_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_index = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ConfigProto default_session_config = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_session_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ServerDef.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ServerDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ServerDef)
  return false;
#undef DO_
}

void ServerDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ServerDef)
  // .tensorflow.ClusterDef cluster = 1;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cluster_, output);
  }

  // string job_name = 2;
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ServerDef.job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job_name(), output);
  }

  // int32 task_index = 3;
  if (this->task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_index(), output);
  }

  // .tensorflow.ConfigProto default_session_config = 4;
  if (this->has_default_session_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->default_session_config_, output);
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ServerDef.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->protocol(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ServerDef)
}

::google::protobuf::uint8* ServerDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ServerDef)
  // .tensorflow.ClusterDef cluster = 1;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cluster_, false, target);
  }

  // string job_name = 2;
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ServerDef.job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job_name(), target);
  }

  // int32 task_index = 3;
  if (this->task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_index(), target);
  }

  // .tensorflow.ConfigProto default_session_config = 4;
  if (this->has_default_session_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->default_session_config_, false, target);
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ServerDef.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->protocol(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ServerDef)
  return target;
}

size_t ServerDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ServerDef)
  size_t total_size = 0;

  // string job_name = 2;
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_name());
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // .tensorflow.ClusterDef cluster = 1;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  // .tensorflow.ConfigProto default_session_config = 4;
  if (this->has_default_session_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_session_config_);
  }

  // int32 task_index = 3;
  if (this->task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ServerDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ServerDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ServerDef)
    MergeFrom(*source);
  }
}

void ServerDef::MergeFrom(const ServerDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ServerDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.job_name().size() > 0) {
    set_job_name(from.job_name());
  }
  if (from.protocol().size() > 0) {
    set_protocol(from.protocol());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::tensorflow::ClusterDef::MergeFrom(from.cluster());
  }
  if (from.has_default_session_config()) {
    mutable_default_session_config()->::tensorflow::ConfigProto::MergeFrom(from.default_session_config());
  }
  if (from.task_index() != 0) {
    set_task_index(from.task_index());
  }
}

void ServerDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ServerDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDef::CopyFrom(const ServerDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ServerDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDef::IsInitialized() const {
  return true;
}

void ServerDef::Swap(ServerDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServerDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServerDef::UnsafeArenaSwap(ServerDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServerDef::InternalSwap(ServerDef* other) {
  job_name_.Swap(&other->job_name_);
  protocol_.Swap(&other->protocol_);
  std::swap(cluster_, other->cluster_);
  std::swap(default_session_config_, other->default_session_config_);
  std::swap(task_index_, other->task_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerDef

// .tensorflow.ClusterDef cluster = 1;
bool ServerDef::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void ServerDef::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::tensorflow::ClusterDef& ServerDef::cluster() const {
  // @@protoc_insertion_point(field_get:tensorflow.ServerDef.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::tensorflow::ClusterDef::internal_default_instance();
}
::tensorflow::ClusterDef* ServerDef::mutable_cluster() {
  
  if (cluster_ == NULL) {
    _slow_mutable_cluster();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ServerDef.cluster)
  return cluster_;
}
::tensorflow::ClusterDef* ServerDef::release_cluster() {
  // @@protoc_insertion_point(field_release:tensorflow.ServerDef.cluster)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cluster();
  } else {
    ::tensorflow::ClusterDef* temp = cluster_;
    cluster_ = NULL;
    return temp;
  }
}
 void ServerDef::set_allocated_cluster(::tensorflow::ClusterDef* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_;
  }
  if (cluster != NULL) {
    _slow_set_allocated_cluster(message_arena, &cluster);
  }
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ServerDef.cluster)
}

// string job_name = 2;
void ServerDef::clear_job_name() {
  job_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServerDef::job_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.ServerDef.job_name)
  return job_name_.Get();
}
void ServerDef::set_job_name(const ::std::string& value) {
  
  job_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ServerDef.job_name)
}
void ServerDef::set_job_name(const char* value) {
  
  job_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ServerDef.job_name)
}
void ServerDef::set_job_name(const char* value,
    size_t size) {
  
  job_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ServerDef.job_name)
}
::std::string* ServerDef::mutable_job_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ServerDef.job_name)
  return job_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServerDef::release_job_name() {
  // @@protoc_insertion_point(field_release:tensorflow.ServerDef.job_name)
  
  return job_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServerDef::unsafe_arena_release_job_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ServerDef.job_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return job_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServerDef::set_allocated_job_name(::std::string* job_name) {
  if (job_name != NULL) {
    
  } else {
    
  }
  job_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ServerDef.job_name)
}
void ServerDef::unsafe_arena_set_allocated_job_name(
    ::std::string* job_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (job_name != NULL) {
    
  } else {
    
  }
  job_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      job_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ServerDef.job_name)
}

// int32 task_index = 3;
void ServerDef::clear_task_index() {
  task_index_ = 0;
}
::google::protobuf::int32 ServerDef::task_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.ServerDef.task_index)
  return task_index_;
}
void ServerDef::set_task_index(::google::protobuf::int32 value) {
  
  task_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ServerDef.task_index)
}

// .tensorflow.ConfigProto default_session_config = 4;
bool ServerDef::has_default_session_config() const {
  return this != internal_default_instance() && default_session_config_ != NULL;
}
void ServerDef::clear_default_session_config() {
  if (GetArenaNoVirtual() == NULL && default_session_config_ != NULL) delete default_session_config_;
  default_session_config_ = NULL;
}
const ::tensorflow::ConfigProto& ServerDef::default_session_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.ServerDef.default_session_config)
  return default_session_config_ != NULL ? *default_session_config_
                         : *::tensorflow::ConfigProto::internal_default_instance();
}
::tensorflow::ConfigProto* ServerDef::mutable_default_session_config() {
  
  if (default_session_config_ == NULL) {
    _slow_mutable_default_session_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ServerDef.default_session_config)
  return default_session_config_;
}
::tensorflow::ConfigProto* ServerDef::release_default_session_config() {
  // @@protoc_insertion_point(field_release:tensorflow.ServerDef.default_session_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_default_session_config();
  } else {
    ::tensorflow::ConfigProto* temp = default_session_config_;
    default_session_config_ = NULL;
    return temp;
  }
}
 void ServerDef::set_allocated_default_session_config(::tensorflow::ConfigProto* default_session_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_session_config_;
  }
  if (default_session_config != NULL) {
    _slow_set_allocated_default_session_config(message_arena, &default_session_config);
  }
  default_session_config_ = default_session_config;
  if (default_session_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ServerDef.default_session_config)
}

// string protocol = 5;
void ServerDef::clear_protocol() {
  protocol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServerDef::protocol() const {
  // @@protoc_insertion_point(field_get:tensorflow.ServerDef.protocol)
  return protocol_.Get();
}
void ServerDef::set_protocol(const ::std::string& value) {
  
  protocol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ServerDef.protocol)
}
void ServerDef::set_protocol(const char* value) {
  
  protocol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ServerDef.protocol)
}
void ServerDef::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ServerDef.protocol)
}
::std::string* ServerDef::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ServerDef.protocol)
  return protocol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServerDef::release_protocol() {
  // @@protoc_insertion_point(field_release:tensorflow.ServerDef.protocol)
  
  return protocol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServerDef::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ServerDef.protocol)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServerDef::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ServerDef.protocol)
}
void ServerDef::unsafe_arena_set_allocated_protocol(
    ::std::string* protocol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ServerDef.protocol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
