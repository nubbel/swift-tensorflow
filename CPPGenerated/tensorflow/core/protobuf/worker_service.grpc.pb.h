// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/worker_service.proto
// Original file comments:
// Copyright 2016 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED
#define GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED

#include "tensorflow/core/protobuf/worker_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tensorflow {
namespace grpc {

// //////////////////////////////////////////////////////////////////////////////
//
// WorkerService defines a TensorFlow service that executes dataflow
// graphs on a set of local devices, on behalf of a MasterService.
//
// A worker service keeps track of multiple "registered graphs". Each
// registered graph is a subgraph of a client's graph, corresponding to
// only the nodes that should execute on this worker (and any
// additional nodes necessary for inter-process communication using
// the `RecvTensor` method).
//
// //////////////////////////////////////////////////////////////////////////////
//
class WorkerService final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // See worker.proto for details.
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>> AsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>>(AsyncCreateWorkerSessionRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>> AsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>>(AsyncRegisterGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>> AsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>>(AsyncDeregisterGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>> AsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>>(AsyncRunGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>> AsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>>(AsyncCleanupGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>> AsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>>(AsyncCleanupAllRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>> AsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>>(AsyncRecvTensorRaw(context, request, cq));
    }
    // RecvTensor Method
    // See worker.proto for details.
    virtual ::grpc::Status Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>> AsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>>(AsyncLoggingRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>> AsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>>(AsyncTracingRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>* AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>* AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>* AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>* AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>* AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>* AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>* AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>* AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>* AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>> AsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>>(AsyncCreateWorkerSessionRaw(context, request, cq));
    }
    ::grpc::Status RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>> AsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>>(AsyncRegisterGraphRaw(context, request, cq));
    }
    ::grpc::Status DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>> AsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>>(AsyncDeregisterGraphRaw(context, request, cq));
    }
    ::grpc::Status RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>> AsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>>(AsyncRunGraphRaw(context, request, cq));
    }
    ::grpc::Status CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>> AsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>>(AsyncCleanupGraphRaw(context, request, cq));
    }
    ::grpc::Status CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>> AsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>>(AsyncCleanupAllRaw(context, request, cq));
    }
    ::grpc::Status RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>> AsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>>(AsyncRecvTensorRaw(context, request, cq));
    }
    ::grpc::Status Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>> AsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>>(AsyncLoggingRaw(context, request, cq));
    }
    ::grpc::Status Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>> AsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>>(AsyncTracingRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::RpcMethod rpcmethod_CreateWorkerSession_;
    const ::grpc::RpcMethod rpcmethod_RegisterGraph_;
    const ::grpc::RpcMethod rpcmethod_DeregisterGraph_;
    const ::grpc::RpcMethod rpcmethod_RunGraph_;
    const ::grpc::RpcMethod rpcmethod_CleanupGraph_;
    const ::grpc::RpcMethod rpcmethod_CleanupAll_;
    const ::grpc::RpcMethod rpcmethod_RecvTensor_;
    const ::grpc::RpcMethod rpcmethod_Logging_;
    const ::grpc::RpcMethod rpcmethod_Tracing_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // See worker.proto for details.
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response);
    // RecvTensor Method
    // See worker.proto for details.
    virtual ::grpc::Status Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::tensorflow::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorkerSession(::grpc::ServerContext* context, ::tensorflow::CreateWorkerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CreateWorkerSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGraph(::grpc::ServerContext* context, ::tensorflow::RegisterGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RegisterGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterGraph(::grpc::ServerContext* context, ::tensorflow::DeregisterGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::DeregisterGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunGraph() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunGraph(::grpc::ServerContext* context, ::tensorflow::RunGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RunGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupGraph(::grpc::ServerContext* context, ::tensorflow::CleanupGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CleanupGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CleanupAll() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupAll(::grpc::ServerContext* context, ::tensorflow::CleanupAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CleanupAllResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecvTensor() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvTensor(::grpc::ServerContext* context, ::tensorflow::RecvTensorRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RecvTensorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Logging() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogging(::grpc::ServerContext* context, ::tensorflow::LoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::LoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Tracing() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTracing(::grpc::ServerContext* context, ::tensorflow::TracingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::TracingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_CreateWorkerSession<WithAsyncMethod_RegisterGraph<WithAsyncMethod_DeregisterGraph<WithAsyncMethod_RunGraph<WithAsyncMethod_CleanupGraph<WithAsyncMethod_CleanupAll<WithAsyncMethod_RecvTensor<WithAsyncMethod_Logging<WithAsyncMethod_Tracing<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunGraph() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CleanupAll() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecvTensor() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Logging() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Tracing() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>(std::bind(&WithStreamedUnaryMethod_GetStatus<BaseClass>::StreamedGetStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::GetStatusRequest,::tensorflow::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>(std::bind(&WithStreamedUnaryMethod_CreateWorkerSession<BaseClass>::StreamedCreateWorkerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWorkerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CreateWorkerSessionRequest,::tensorflow::CreateWorkerSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>(std::bind(&WithStreamedUnaryMethod_RegisterGraph<BaseClass>::StreamedRegisterGraph, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RegisterGraphRequest,::tensorflow::RegisterGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>(std::bind(&WithStreamedUnaryMethod_DeregisterGraph<BaseClass>::StreamedDeregisterGraph, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregisterGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::DeregisterGraphRequest,::tensorflow::DeregisterGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunGraph() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>(std::bind(&WithStreamedUnaryMethod_RunGraph<BaseClass>::StreamedRunGraph, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RunGraphRequest,::tensorflow::RunGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>(std::bind(&WithStreamedUnaryMethod_CleanupGraph<BaseClass>::StreamedCleanupGraph, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CleanupGraphRequest,::tensorflow::CleanupGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CleanupAll() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>(std::bind(&WithStreamedUnaryMethod_CleanupAll<BaseClass>::StreamedCleanupAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CleanupAllRequest,::tensorflow::CleanupAllResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RecvTensor() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>(std::bind(&WithStreamedUnaryMethod_RecvTensor<BaseClass>::StreamedRecvTensor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecvTensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RecvTensorRequest,::tensorflow::RecvTensorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Logging() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>(std::bind(&WithStreamedUnaryMethod_Logging<BaseClass>::StreamedLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::LoggingRequest,::tensorflow::LoggingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Tracing() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>(std::bind(&WithStreamedUnaryMethod_Tracing<BaseClass>::StreamedTracing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTracing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::TracingRequest,::tensorflow::TracingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_CreateWorkerSession<WithStreamedUnaryMethod_RegisterGraph<WithStreamedUnaryMethod_DeregisterGraph<WithStreamedUnaryMethod_RunGraph<WithStreamedUnaryMethod_CleanupGraph<WithStreamedUnaryMethod_CleanupAll<WithStreamedUnaryMethod_RecvTensor<WithStreamedUnaryMethod_Logging<WithStreamedUnaryMethod_Tracing<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_CreateWorkerSession<WithStreamedUnaryMethod_RegisterGraph<WithStreamedUnaryMethod_DeregisterGraph<WithStreamedUnaryMethod_RunGraph<WithStreamedUnaryMethod_CleanupGraph<WithStreamedUnaryMethod_CleanupAll<WithStreamedUnaryMethod_RecvTensor<WithStreamedUnaryMethod_Logging<WithStreamedUnaryMethod_Tracing<Service > > > > > > > > > > StreamedService;
};

}  // namespace grpc
}  // namespace tensorflow


#endif  // GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED
