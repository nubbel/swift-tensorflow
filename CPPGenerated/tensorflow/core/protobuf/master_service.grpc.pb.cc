// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/master_service.proto

#include "tensorflow/core/protobuf/master_service.pb.h"
#include "tensorflow/core/protobuf/master_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tensorflow {
namespace grpc {

static const char* MasterService_method_names[] = {
  "/tensorflow.grpc.MasterService/CreateSession",
  "/tensorflow.grpc.MasterService/ExtendSession",
  "/tensorflow.grpc.MasterService/PartialRunSetup",
  "/tensorflow.grpc.MasterService/RunStep",
  "/tensorflow.grpc.MasterService/CloseSession",
  "/tensorflow.grpc.MasterService/ListDevices",
  "/tensorflow.grpc.MasterService/Reset",
};

std::unique_ptr< MasterService::Stub> MasterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MasterService::Stub> stub(new MasterService::Stub(channel));
  return stub;
}

MasterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSession_(MasterService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExtendSession_(MasterService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PartialRunSetup_(MasterService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunStep_(MasterService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseSession_(MasterService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDevices_(MasterService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(MasterService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MasterService::Stub::CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::tensorflow::CreateSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>* MasterService::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>(channel_.get(), cq, rpcmethod_CreateSession_, context, request);
}

::grpc::Status MasterService::Stub::ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::tensorflow::ExtendSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ExtendSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>* MasterService::Stub::AsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>(channel_.get(), cq, rpcmethod_ExtendSession_, context, request);
}

::grpc::Status MasterService::Stub::PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::tensorflow::PartialRunSetupResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PartialRunSetup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>* MasterService::Stub::AsyncPartialRunSetupRaw(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>(channel_.get(), cq, rpcmethod_PartialRunSetup_, context, request);
}

::grpc::Status MasterService::Stub::RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::tensorflow::RunStepResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RunStep_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>* MasterService::Stub::AsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>(channel_.get(), cq, rpcmethod_RunStep_, context, request);
}

::grpc::Status MasterService::Stub::CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::tensorflow::CloseSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CloseSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>* MasterService::Stub::AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>(channel_.get(), cq, rpcmethod_CloseSession_, context, request);
}

::grpc::Status MasterService::Stub::ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::tensorflow::ListDevicesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListDevices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>* MasterService::Stub::AsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>(channel_.get(), cq, rpcmethod_ListDevices_, context, request);
}

::grpc::Status MasterService::Stub::Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::tensorflow::ResetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>* MasterService::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

MasterService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>(
          std::mem_fn(&MasterService::Service::CreateSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>(
          std::mem_fn(&MasterService::Service::ExtendSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>(
          std::mem_fn(&MasterService::Service::PartialRunSetup), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>(
          std::mem_fn(&MasterService::Service::RunStep), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>(
          std::mem_fn(&MasterService::Service::CloseSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>(
          std::mem_fn(&MasterService::Service::ListDevices), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MasterService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MasterService::Service, ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>(
          std::mem_fn(&MasterService::Service::Reset), this)));
}

MasterService::Service::~Service() {
}

::grpc::Status MasterService::Service::CreateSession(::grpc::ServerContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::ExtendSession(::grpc::ServerContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::PartialRunSetup(::grpc::ServerContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::RunStep(::grpc::ServerContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::CloseSession(::grpc::ServerContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::ListDevices(::grpc::ServerContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterService::Service::Reset(::grpc::ServerContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace grpc

