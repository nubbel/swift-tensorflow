// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/master.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class CreateSessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionRequest> {
} _CreateSessionRequest_default_instance_;
class CreateSessionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionResponse> {
} _CreateSessionResponse_default_instance_;
class ExtendSessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtendSessionRequest> {
} _ExtendSessionRequest_default_instance_;
class ExtendSessionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtendSessionResponse> {
} _ExtendSessionResponse_default_instance_;
class RunStepRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunStepRequest> {
} _RunStepRequest_default_instance_;
class RunStepResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunStepResponse> {
} _RunStepResponse_default_instance_;
class PartialRunSetupRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartialRunSetupRequest> {
} _PartialRunSetupRequest_default_instance_;
class PartialRunSetupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartialRunSetupResponse> {
} _PartialRunSetupResponse_default_instance_;
class CloseSessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloseSessionRequest> {
} _CloseSessionRequest_default_instance_;
class CloseSessionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloseSessionResponse> {
} _CloseSessionResponse_default_instance_;
class ResetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetRequest> {
} _ResetRequest_default_instance_;
class ResetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetResponse> {
} _ResetResponse_default_instance_;
class ListDevicesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDevicesRequest> {
} _ListDevicesRequest_default_instance_;
class ListDevicesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDevicesResponse> {
} _ListDevicesResponse_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, graph_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, graph_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, graph_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, current_graph_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionResponse, new_graph_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, feed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, fetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, partial_run_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, tensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, feed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, fetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupResponse, partial_run_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionRequest, session_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, container_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, device_filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, local_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, remote_device_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CreateSessionRequest)},
  { 6, -1, sizeof(CreateSessionResponse)},
  { 12, -1, sizeof(ExtendSessionRequest)},
  { 19, -1, sizeof(ExtendSessionResponse)},
  { 24, -1, sizeof(RunStepRequest)},
  { 34, -1, sizeof(RunStepResponse)},
  { 40, -1, sizeof(PartialRunSetupRequest)},
  { 48, -1, sizeof(PartialRunSetupResponse)},
  { 53, -1, sizeof(CloseSessionRequest)},
  { 58, -1, sizeof(CloseSessionResponse)},
  { 62, -1, sizeof(ResetRequest)},
  { 68, -1, sizeof(ResetResponse)},
  { 72, -1, sizeof(ListDevicesRequest)},
  { 76, -1, sizeof(ListDevicesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExtendSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExtendSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunStepRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunStepResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartialRunSetupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartialRunSetupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloseSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloseSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDevicesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDevicesResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/protobuf/master.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _CreateSessionRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CreateSessionResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ExtendSessionRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ExtendSessionResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RunStepRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RunStepResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PartialRunSetupRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PartialRunSetupResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CloseSessionRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CloseSessionResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ResetRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ResetResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ListDevicesRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ListDevicesResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto::InitDefaults();
  _CreateSessionRequest_default_instance_.DefaultConstruct();
  _CreateSessionResponse_default_instance_.DefaultConstruct();
  _ExtendSessionRequest_default_instance_.DefaultConstruct();
  _ExtendSessionResponse_default_instance_.DefaultConstruct();
  _RunStepRequest_default_instance_.DefaultConstruct();
  _RunStepResponse_default_instance_.DefaultConstruct();
  _PartialRunSetupRequest_default_instance_.DefaultConstruct();
  _PartialRunSetupResponse_default_instance_.DefaultConstruct();
  _CloseSessionRequest_default_instance_.DefaultConstruct();
  _CloseSessionResponse_default_instance_.DefaultConstruct();
  _ResetRequest_default_instance_.DefaultConstruct();
  _ResetResponse_default_instance_.DefaultConstruct();
  _ListDevicesRequest_default_instance_.DefaultConstruct();
  _ListDevicesResponse_default_instance_.DefaultConstruct();
  _CreateSessionRequest_default_instance_.get_mutable()->graph_def_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
  _CreateSessionRequest_default_instance_.get_mutable()->config_ = const_cast< ::tensorflow::ConfigProto*>(
      ::tensorflow::ConfigProto::internal_default_instance());
  _ExtendSessionRequest_default_instance_.get_mutable()->graph_def_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
  _RunStepRequest_default_instance_.get_mutable()->options_ = const_cast< ::tensorflow::RunOptions*>(
      ::tensorflow::RunOptions::internal_default_instance());
  _RunStepResponse_default_instance_.get_mutable()->metadata_ = const_cast< ::tensorflow::RunMetadata*>(
      ::tensorflow::RunMetadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%tensorflow/core/protobuf/master.proto\022"
      "\ntensorflow\0321tensorflow/core/framework/d"
      "evice_attributes.proto\032%tensorflow/core/"
      "framework/graph.proto\032%tensorflow/core/p"
      "rotobuf/config.proto\032+tensorflow/core/pr"
      "otobuf/named_tensor.proto\"h\n\024CreateSessi"
      "onRequest\022\'\n\tgraph_def\030\001 \001(\0132\024.tensorflo"
      "w.GraphDef\022\'\n\006config\030\002 \001(\0132\027.tensorflow."
      "ConfigProto\"F\n\025CreateSessionResponse\022\026\n\016"
      "session_handle\030\001 \001(\t\022\025\n\rgraph_version\030\002 "
      "\001(\003\"v\n\024ExtendSessionRequest\022\026\n\016session_h"
      "andle\030\001 \001(\t\022\'\n\tgraph_def\030\002 \001(\0132\024.tensorf"
      "low.GraphDef\022\035\n\025current_graph_version\030\003 "
      "\001(\003\"2\n\025ExtendSessionResponse\022\031\n\021new_grap"
      "h_version\030\004 \001(\003\"\270\001\n\016RunStepRequest\022\026\n\016se"
      "ssion_handle\030\001 \001(\t\022*\n\004feed\030\002 \003(\0132\034.tenso"
      "rflow.NamedTensorProto\022\r\n\005fetch\030\003 \003(\t\022\016\n"
      "\006target\030\004 \003(\t\022\'\n\007options\030\005 \001(\0132\026.tensorf"
      "low.RunOptions\022\032\n\022partial_run_handle\030\006 \001"
      "(\t\"j\n\017RunStepResponse\022,\n\006tensor\030\001 \003(\0132\034."
      "tensorflow.NamedTensorProto\022)\n\010metadata\030"
      "\002 \001(\0132\027.tensorflow.RunMetadata\"]\n\026Partia"
      "lRunSetupRequest\022\026\n\016session_handle\030\001 \001(\t"
      "\022\014\n\004feed\030\002 \003(\t\022\r\n\005fetch\030\003 \003(\t\022\016\n\006target\030"
      "\004 \003(\t\"5\n\027PartialRunSetupResponse\022\032\n\022part"
      "ial_run_handle\030\001 \001(\t\"-\n\023CloseSessionRequ"
      "est\022\026\n\016session_handle\030\001 \001(\t\"\026\n\024CloseSess"
      "ionResponse\"9\n\014ResetRequest\022\021\n\tcontainer"
      "\030\001 \003(\t\022\026\n\016device_filters\030\002 \003(\t\"\017\n\rResetR"
      "esponse\"\024\n\022ListDevicesRequest\"~\n\023ListDev"
      "icesResponse\0222\n\014local_device\030\001 \003(\0132\034.ten"
      "sorflow.DeviceAttributes\0223\n\rremote_devic"
      "e\030\002 \003(\0132\034.tensorflow.DeviceAttributesB;\n"
      "\032org.tensorflow.distruntimeB\030Distributed"
      "RuntimeProtosP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/master.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto


// ===================================================================

void CreateSessionRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* CreateSessionRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* CreateSessionRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void CreateSessionRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void CreateSessionRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionRequest.graph_def)
}
void CreateSessionRequest::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
      GetArenaNoVirtual());
}
::tensorflow::ConfigProto* CreateSessionRequest::_slow_release_config() {
  if (config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ConfigProto* temp = new ::tensorflow::ConfigProto(*config_);
    config_ = NULL;
    return temp;
  }
}
::tensorflow::ConfigProto* CreateSessionRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionRequest.config)
  
  ::tensorflow::ConfigProto* temp = config_;
  config_ = NULL;
  return temp;
}
void CreateSessionRequest::_slow_set_allocated_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto** config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*config) == NULL) {
      message_arena->Own(*config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*config)) {
      ::tensorflow::ConfigProto* new_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
            message_arena);
      new_config->CopyFrom(**config);
      *config = new_config;
    }
}
void CreateSessionRequest::unsafe_arena_set_allocated_config(
    ::tensorflow::ConfigProto* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionRequest.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionRequest::kGraphDefFieldNumber;
const int CreateSessionRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_graph_def()) {
    graph_def_ = new ::tensorflow::GraphDef(*from.graph_def_);
  } else {
    graph_def_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::tensorflow::ConfigProto(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionRequest)
}

void CreateSessionRequest::SharedCtor() {
  ::memset(&graph_def_, 0, reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&graph_def_) + sizeof(config_));
  _cached_size_ = 0;
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionRequest)
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete graph_def_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void CreateSessionRequest::ArenaDtor(void* object) {
  CreateSessionRequest* _this = reinterpret_cast< CreateSessionRequest* >(object);
  (void)_this;
}
void CreateSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[0].descriptor;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSessionRequest* CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSessionRequest>(arena);
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionRequest)
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) {
    delete graph_def_;
  }
  graph_def_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.GraphDef graph_def = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ConfigProto config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateSessionRequest)
  return false;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateSessionRequest)
  // .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->graph_def_, output);
  }

  // .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CreateSessionRequest)
}

::google::protobuf::uint8* CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionRequest)
  // .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->graph_def_, false, target);
  }

  // .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionRequest)
  return target;
}

size_t CreateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionRequest)
  size_t total_size = 0;

  // .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_config()) {
    mutable_config()->::tensorflow::ConfigProto::MergeFrom(from.config());
  }
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateSessionRequest::UnsafeArenaSwap(CreateSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  std::swap(graph_def_, other->graph_def_);
  std::swap(config_, other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionRequest

// .tensorflow.GraphDef graph_def = 1;
bool CreateSessionRequest::has_graph_def() const {
  return this != internal_default_instance() && graph_def_ != NULL;
}
void CreateSessionRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& CreateSessionRequest::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionRequest.graph_def)
  return graph_def_ != NULL ? *graph_def_
                         : *::tensorflow::GraphDef::internal_default_instance();
}
::tensorflow::GraphDef* CreateSessionRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* CreateSessionRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void CreateSessionRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionRequest.graph_def)
}

// .tensorflow.ConfigProto config = 2;
bool CreateSessionRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void CreateSessionRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::tensorflow::ConfigProto& CreateSessionRequest::config() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionRequest.config)
  return config_ != NULL ? *config_
                         : *::tensorflow::ConfigProto::internal_default_instance();
}
::tensorflow::ConfigProto* CreateSessionRequest::mutable_config() {
  
  if (config_ == NULL) {
    _slow_mutable_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionRequest.config)
  return config_;
}
::tensorflow::ConfigProto* CreateSessionRequest::release_config() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionRequest.config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_config();
  } else {
    ::tensorflow::ConfigProto* temp = config_;
    config_ = NULL;
    return temp;
  }
}
 void CreateSessionRequest::set_allocated_config(::tensorflow::ConfigProto* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config != NULL) {
    _slow_set_allocated_config(message_arena, &config);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionRequest.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionResponse::kSessionHandleFieldNumber;
const int CreateSessionResponse::kGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionResponse::CreateSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateSessionResponse)
}
CreateSessionResponse::CreateSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionResponse)
}
CreateSessionResponse::CreateSessionResponse(const CreateSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  graph_version_ = from.graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionResponse)
}

void CreateSessionResponse::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_version_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CreateSessionResponse::~CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionResponse)
  SharedDtor();
}

void CreateSessionResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CreateSessionResponse::ArenaDtor(void* object) {
  CreateSessionResponse* _this = reinterpret_cast< CreateSessionResponse* >(object);
  (void)_this;
}
void CreateSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[1].descriptor;
}

const CreateSessionResponse& CreateSessionResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSessionResponse* CreateSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSessionResponse>(arena);
}

void CreateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionResponse)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_version_ = GOOGLE_LONGLONG(0);
}

bool CreateSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CreateSessionResponse.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 graph_version = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &graph_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateSessionResponse)
  return false;
#undef DO_
}

void CreateSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateSessionResponse)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionResponse.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // int64 graph_version = 2;
  if (this->graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CreateSessionResponse)
}

::google::protobuf::uint8* CreateSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionResponse)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionResponse.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // int64 graph_version = 2;
  if (this->graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionResponse)
  return target;
}

size_t CreateSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionResponse)
  size_t total_size = 0;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // int64 graph_version = 2;
  if (this->graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->graph_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateSessionResponse)
    MergeFrom(*source);
  }
}

void CreateSessionResponse::MergeFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.graph_version() != 0) {
    set_graph_version(from.graph_version());
  }
}

void CreateSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionResponse::CopyFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionResponse::IsInitialized() const {
  return true;
}

void CreateSessionResponse::Swap(CreateSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateSessionResponse::UnsafeArenaSwap(CreateSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSessionResponse::InternalSwap(CreateSessionResponse* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(graph_version_, other->graph_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionResponse

// string session_handle = 1;
void CreateSessionResponse::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateSessionResponse::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionResponse.session_handle)
  return session_handle_.Get();
}
void CreateSessionResponse::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CreateSessionResponse.session_handle)
}
void CreateSessionResponse::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CreateSessionResponse.session_handle)
}
void CreateSessionResponse::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CreateSessionResponse.session_handle)
}
::std::string* CreateSessionResponse::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionResponse.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionResponse::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionResponse.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionResponse::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionResponse.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateSessionResponse::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionResponse.session_handle)
}
void CreateSessionResponse::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionResponse.session_handle)
}

// int64 graph_version = 2;
void CreateSessionResponse::clear_graph_version() {
  graph_version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CreateSessionResponse::graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionResponse.graph_version)
  return graph_version_;
}
void CreateSessionResponse::set_graph_version(::google::protobuf::int64 value) {
  
  graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CreateSessionResponse.graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ExtendSessionRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* ExtendSessionRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* ExtendSessionRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ExtendSessionRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void ExtendSessionRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void ExtendSessionRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ExtendSessionRequest.graph_def)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtendSessionRequest::kSessionHandleFieldNumber;
const int ExtendSessionRequest::kGraphDefFieldNumber;
const int ExtendSessionRequest::kCurrentGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtendSessionRequest::ExtendSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExtendSessionRequest)
}
ExtendSessionRequest::ExtendSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionRequest)
}
ExtendSessionRequest::ExtendSessionRequest(const ExtendSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_graph_def()) {
    graph_def_ = new ::tensorflow::GraphDef(*from.graph_def_);
  } else {
    graph_def_ = NULL;
  }
  current_graph_version_ = from.current_graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionRequest)
}

void ExtendSessionRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&graph_def_, 0, reinterpret_cast<char*>(&current_graph_version_) -
    reinterpret_cast<char*>(&graph_def_) + sizeof(current_graph_version_));
  _cached_size_ = 0;
}

ExtendSessionRequest::~ExtendSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionRequest)
  SharedDtor();
}

void ExtendSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete graph_def_;
  }
}

void ExtendSessionRequest::ArenaDtor(void* object) {
  ExtendSessionRequest* _this = reinterpret_cast< ExtendSessionRequest* >(object);
  (void)_this;
}
void ExtendSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExtendSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendSessionRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[2].descriptor;
}

const ExtendSessionRequest& ExtendSessionRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtendSessionRequest* ExtendSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExtendSessionRequest>(arena);
}

void ExtendSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) {
    delete graph_def_;
  }
  graph_def_ = NULL;
  current_graph_version_ = GOOGLE_LONGLONG(0);
}

bool ExtendSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExtendSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ExtendSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 current_graph_version = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_graph_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExtendSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExtendSessionRequest)
  return false;
#undef DO_
}

void ExtendSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExtendSessionRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ExtendSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->graph_def_, output);
  }

  // int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->current_graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExtendSessionRequest)
}

::google::protobuf::uint8* ExtendSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ExtendSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->graph_def_, false, target);
  }

  // int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->current_graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionRequest)
  return target;
}

size_t ExtendSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionRequest)
  size_t total_size = 0;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_graph_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExtendSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtendSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExtendSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExtendSessionRequest)
    MergeFrom(*source);
  }
}

void ExtendSessionRequest::MergeFrom(const ExtendSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.current_graph_version() != 0) {
    set_current_graph_version(from.current_graph_version());
  }
}

void ExtendSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExtendSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendSessionRequest::CopyFrom(const ExtendSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionRequest::IsInitialized() const {
  return true;
}

void ExtendSessionRequest::Swap(ExtendSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExtendSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExtendSessionRequest::UnsafeArenaSwap(ExtendSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExtendSessionRequest::InternalSwap(ExtendSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(graph_def_, other->graph_def_);
  std::swap(current_graph_version_, other->current_graph_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendSessionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendSessionRequest

// string session_handle = 1;
void ExtendSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExtendSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.session_handle)
  return session_handle_.Get();
}
void ExtendSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionRequest.session_handle)
}
void ExtendSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ExtendSessionRequest.session_handle)
}
void ExtendSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ExtendSessionRequest.session_handle)
}
::std::string* ExtendSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ExtendSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExtendSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.ExtendSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExtendSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ExtendSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExtendSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ExtendSessionRequest.session_handle)
}
void ExtendSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ExtendSessionRequest.session_handle)
}

// .tensorflow.GraphDef graph_def = 2;
bool ExtendSessionRequest::has_graph_def() const {
  return this != internal_default_instance() && graph_def_ != NULL;
}
void ExtendSessionRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& ExtendSessionRequest::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.graph_def)
  return graph_def_ != NULL ? *graph_def_
                         : *::tensorflow::GraphDef::internal_default_instance();
}
::tensorflow::GraphDef* ExtendSessionRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ExtendSessionRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* ExtendSessionRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.ExtendSessionRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void ExtendSessionRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ExtendSessionRequest.graph_def)
}

// int64 current_graph_version = 3;
void ExtendSessionRequest::clear_current_graph_version() {
  current_graph_version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExtendSessionRequest::current_graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.current_graph_version)
  return current_graph_version_;
}
void ExtendSessionRequest::set_current_graph_version(::google::protobuf::int64 value) {
  
  current_graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionRequest.current_graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtendSessionResponse::kNewGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtendSessionResponse::ExtendSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExtendSessionResponse)
}
ExtendSessionResponse::ExtendSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionResponse)
}
ExtendSessionResponse::ExtendSessionResponse(const ExtendSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_graph_version_ = from.new_graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionResponse)
}

void ExtendSessionResponse::SharedCtor() {
  new_graph_version_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ExtendSessionResponse::~ExtendSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionResponse)
  SharedDtor();
}

void ExtendSessionResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ExtendSessionResponse::ArenaDtor(void* object) {
  ExtendSessionResponse* _this = reinterpret_cast< ExtendSessionResponse* >(object);
  (void)_this;
}
void ExtendSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExtendSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendSessionResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[3].descriptor;
}

const ExtendSessionResponse& ExtendSessionResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtendSessionResponse* ExtendSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExtendSessionResponse>(arena);
}

void ExtendSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionResponse)
  new_graph_version_ = GOOGLE_LONGLONG(0);
}

bool ExtendSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExtendSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 new_graph_version = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_graph_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExtendSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExtendSessionResponse)
  return false;
#undef DO_
}

void ExtendSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExtendSessionResponse)
  // int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->new_graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExtendSessionResponse)
}

::google::protobuf::uint8* ExtendSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionResponse)
  // int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->new_graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionResponse)
  return target;
}

size_t ExtendSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionResponse)
  size_t total_size = 0;

  // int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_graph_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExtendSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtendSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExtendSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExtendSessionResponse)
    MergeFrom(*source);
  }
}

void ExtendSessionResponse::MergeFrom(const ExtendSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.new_graph_version() != 0) {
    set_new_graph_version(from.new_graph_version());
  }
}

void ExtendSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExtendSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendSessionResponse::CopyFrom(const ExtendSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionResponse::IsInitialized() const {
  return true;
}

void ExtendSessionResponse::Swap(ExtendSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExtendSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExtendSessionResponse::UnsafeArenaSwap(ExtendSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExtendSessionResponse::InternalSwap(ExtendSessionResponse* other) {
  std::swap(new_graph_version_, other->new_graph_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendSessionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendSessionResponse

// int64 new_graph_version = 4;
void ExtendSessionResponse::clear_new_graph_version() {
  new_graph_version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExtendSessionResponse::new_graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionResponse.new_graph_version)
  return new_graph_version_;
}
void ExtendSessionResponse::set_new_graph_version(::google::protobuf::int64 value) {
  
  new_graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionResponse.new_graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunStepRequest::_slow_mutable_options() {
  options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
      GetArenaNoVirtual());
}
::tensorflow::RunOptions* RunStepRequest::_slow_release_options() {
  if (options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunOptions* temp = new ::tensorflow::RunOptions(*options_);
    options_ = NULL;
    return temp;
  }
}
::tensorflow::RunOptions* RunStepRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.options)
  
  ::tensorflow::RunOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void RunStepRequest::_slow_set_allocated_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions** options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*options) == NULL) {
      message_arena->Own(*options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*options)) {
      ::tensorflow::RunOptions* new_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
            message_arena);
      new_options->CopyFrom(**options);
      *options = new_options;
    }
}
void RunStepRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::RunOptions* options) {
  if (GetArenaNoVirtual() == NULL) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunStepRequest::kSessionHandleFieldNumber;
const int RunStepRequest::kFeedFieldNumber;
const int RunStepRequest::kFetchFieldNumber;
const int RunStepRequest::kTargetFieldNumber;
const int RunStepRequest::kOptionsFieldNumber;
const int RunStepRequest::kPartialRunHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunStepRequest::RunStepRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunStepRequest)
}
RunStepRequest::RunStepRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena),
  target_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepRequest)
}
RunStepRequest::RunStepRequest(const RunStepRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feed_(from.feed_),
      fetch_(from.fetch_),
      target_(from.target_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partial_run_handle().size() > 0) {
    partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partial_run_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_options()) {
    options_ = new ::tensorflow::RunOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepRequest)
}

void RunStepRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
  _cached_size_ = 0;
}

RunStepRequest::~RunStepRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepRequest)
  SharedDtor();
}

void RunStepRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  partial_run_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete options_;
  }
}

void RunStepRequest::ArenaDtor(void* object) {
  RunStepRequest* _this = reinterpret_cast< RunStepRequest* >(object);
  (void)_this;
}
void RunStepRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunStepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStepRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[4].descriptor;
}

const RunStepRequest& RunStepRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunStepRequest* RunStepRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunStepRequest>(arena);
}

void RunStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepRequest)
  feed_.Clear();
  fetch_.Clear();
  target_.Clear();
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
}

bool RunStepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunStepRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.NamedTensorProto feed = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string fetch = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fetch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fetch(this->fetch_size() - 1).data(),
            this->fetch(this->fetch_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.fetch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target(this->target_size() - 1).data(),
            this->target(this->target_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RunOptions options = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partial_run_handle = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partial_run_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partial_run_handle().data(), this->partial_run_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.partial_run_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunStepRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunStepRequest)
  return false;
#undef DO_
}

void RunStepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunStepRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feed(i), output);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.fetch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fetch(i), output);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(i), output);
  }

  // .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->options_, output);
  }

  // string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.partial_run_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->partial_run_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunStepRequest)
}

::google::protobuf::uint8* RunStepRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->feed(i), false, target);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.fetch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fetch(i), target);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.target");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->target(i), target);
  }

  // .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->options_, false, target);
  }

  // string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.partial_run_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->partial_run_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepRequest)
  return target;
}

size_t RunStepRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepRequest)
  size_t total_size = 0;

  // repeated .tensorflow.NamedTensorProto feed = 2;
  {
    unsigned int count = this->feed_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feed(i));
    }
  }

  // repeated string fetch = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fetch_size());
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fetch(i));
  }

  // repeated string target = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->target_size());
  for (int i = 0; i < this->target_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target(i));
  }

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partial_run_handle());
  }

  // .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStepRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunStepRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunStepRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunStepRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunStepRequest)
    MergeFrom(*source);
  }
}

void RunStepRequest::MergeFrom(const RunStepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
  target_.MergeFrom(from.target_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.partial_run_handle().size() > 0) {
    set_partial_run_handle(from.partial_run_handle());
  }
  if (from.has_options()) {
    mutable_options()->::tensorflow::RunOptions::MergeFrom(from.options());
  }
}

void RunStepRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStepRequest::CopyFrom(const RunStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepRequest::IsInitialized() const {
  return true;
}

void RunStepRequest::Swap(RunStepRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunStepRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RunStepRequest::UnsafeArenaSwap(RunStepRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunStepRequest::InternalSwap(RunStepRequest* other) {
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  target_.UnsafeArenaSwap(&other->target_);
  session_handle_.Swap(&other->session_handle_);
  partial_run_handle_.Swap(&other->partial_run_handle_);
  std::swap(options_, other->options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunStepRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunStepRequest

// string session_handle = 1;
void RunStepRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunStepRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.session_handle)
  return session_handle_.Get();
}
void RunStepRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.session_handle)
}
void RunStepRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.session_handle)
}
void RunStepRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.session_handle)
}
::std::string* RunStepRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunStepRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunStepRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunStepRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.session_handle)
}
void RunStepRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.session_handle)
}

// repeated .tensorflow.NamedTensorProto feed = 2;
int RunStepRequest::feed_size() const {
  return feed_.size();
}
void RunStepRequest::clear_feed() {
  feed_.Clear();
}
const ::tensorflow::NamedTensorProto& RunStepRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.feed)
  return feed_.Get(index);
}
::tensorflow::NamedTensorProto* RunStepRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.feed)
  return feed_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunStepRequest::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.feed)
  return feed_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunStepRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.feed)
  return &feed_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunStepRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.feed)
  return feed_;
}

// repeated string fetch = 3;
int RunStepRequest::fetch_size() const {
  return fetch_.size();
}
void RunStepRequest::clear_fetch() {
  fetch_.Clear();
}
const ::std::string& RunStepRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.fetch)
  return fetch_.Get(index);
}
::std::string* RunStepRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.fetch)
  return fetch_.Mutable(index);
}
void RunStepRequest::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
void RunStepRequest::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.fetch)
}
void RunStepRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.fetch)
}
::std::string* RunStepRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunStepRequest.fetch)
  return fetch_.Add();
}
void RunStepRequest::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.fetch)
}
void RunStepRequest::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunStepRequest.fetch)
}
void RunStepRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunStepRequest.fetch)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunStepRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.fetch)
  return fetch_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RunStepRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
int RunStepRequest::target_size() const {
  return target_.size();
}
void RunStepRequest::clear_target() {
  target_.Clear();
}
const ::std::string& RunStepRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.target)
  return target_.Get(index);
}
::std::string* RunStepRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.target)
  return target_.Mutable(index);
}
void RunStepRequest::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.target)
  target_.Mutable(index)->assign(value);
}
void RunStepRequest::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.target)
}
void RunStepRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.target)
}
::std::string* RunStepRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunStepRequest.target)
  return target_.Add();
}
void RunStepRequest::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.target)
}
void RunStepRequest::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunStepRequest.target)
}
void RunStepRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunStepRequest.target)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunStepRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.target)
  return target_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RunStepRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.target)
  return &target_;
}

// .tensorflow.RunOptions options = 5;
bool RunStepRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
void RunStepRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::tensorflow::RunOptions& RunStepRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.options)
  return options_ != NULL ? *options_
                         : *::tensorflow::RunOptions::internal_default_instance();
}
::tensorflow::RunOptions* RunStepRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.options)
  return options_;
}
::tensorflow::RunOptions* RunStepRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::RunOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
 void RunStepRequest::set_allocated_options(::tensorflow::RunOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.options)
}

// string partial_run_handle = 6;
void RunStepRequest::clear_partial_run_handle() {
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunStepRequest::partial_run_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.partial_run_handle)
  return partial_run_handle_.Get();
}
void RunStepRequest::set_partial_run_handle(const ::std::string& value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.partial_run_handle)
}
void RunStepRequest::set_partial_run_handle(const char* value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.partial_run_handle)
}
void RunStepRequest::set_partial_run_handle(const char* value,
    size_t size) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.partial_run_handle)
}
::std::string* RunStepRequest::mutable_partial_run_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.partial_run_handle)
  return partial_run_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunStepRequest::release_partial_run_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.partial_run_handle)
  
  return partial_run_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunStepRequest::unsafe_arena_release_partial_run_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.partial_run_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return partial_run_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunStepRequest::set_allocated_partial_run_handle(::std::string* partial_run_handle) {
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partial_run_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.partial_run_handle)
}
void RunStepRequest::unsafe_arena_set_allocated_partial_run_handle(
    ::std::string* partial_run_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      partial_run_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.partial_run_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunStepResponse::_slow_mutable_metadata() {
  metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::RunMetadata* RunStepResponse::_slow_release_metadata() {
  if (metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunMetadata* temp = new ::tensorflow::RunMetadata(*metadata_);
    metadata_ = NULL;
    return temp;
  }
}
::tensorflow::RunMetadata* RunStepResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepResponse.metadata)
  
  ::tensorflow::RunMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void RunStepResponse::_slow_set_allocated_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunMetadata** metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metadata) == NULL) {
      message_arena->Own(*metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metadata)) {
      ::tensorflow::RunMetadata* new_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
            message_arena);
      new_metadata->CopyFrom(**metadata);
      *metadata = new_metadata;
    }
}
void RunStepResponse::unsafe_arena_set_allocated_metadata(
    ::tensorflow::RunMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepResponse.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunStepResponse::kTensorFieldNumber;
const int RunStepResponse::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunStepResponse::RunStepResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunStepResponse)
}
RunStepResponse::RunStepResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tensor_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepResponse)
}
RunStepResponse::RunStepResponse(const RunStepResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tensor_(from.tensor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::tensorflow::RunMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepResponse)
}

void RunStepResponse::SharedCtor() {
  metadata_ = NULL;
  _cached_size_ = 0;
}

RunStepResponse::~RunStepResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepResponse)
  SharedDtor();
}

void RunStepResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete metadata_;
  }
}

void RunStepResponse::ArenaDtor(void* object) {
  RunStepResponse* _this = reinterpret_cast< RunStepResponse* >(object);
  (void)_this;
}
void RunStepResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunStepResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStepResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[5].descriptor;
}

const RunStepResponse& RunStepResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunStepResponse* RunStepResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunStepResponse>(arena);
}

void RunStepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepResponse)
  tensor_.Clear();
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}

bool RunStepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunStepResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.NamedTensorProto tensor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .tensorflow.RunMetadata metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunStepResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunStepResponse)
  return false;
#undef DO_
}

void RunStepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunStepResponse)
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tensor(i), output);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunStepResponse)
}

::google::protobuf::uint8* RunStepResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepResponse)
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tensor(i), false, target);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepResponse)
  return target;
}

size_t RunStepResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepResponse)
  size_t total_size = 0;

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  {
    unsigned int count = this->tensor_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tensor(i));
    }
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStepResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunStepResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunStepResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunStepResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunStepResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunStepResponse)
    MergeFrom(*source);
  }
}

void RunStepResponse::MergeFrom(const RunStepResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_.MergeFrom(from.tensor_);
  if (from.has_metadata()) {
    mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(from.metadata());
  }
}

void RunStepResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStepResponse::CopyFrom(const RunStepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepResponse::IsInitialized() const {
  return true;
}

void RunStepResponse::Swap(RunStepResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunStepResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RunStepResponse::UnsafeArenaSwap(RunStepResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunStepResponse::InternalSwap(RunStepResponse* other) {
  tensor_.UnsafeArenaSwap(&other->tensor_);
  std::swap(metadata_, other->metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunStepResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunStepResponse

// repeated .tensorflow.NamedTensorProto tensor = 1;
int RunStepResponse::tensor_size() const {
  return tensor_.size();
}
void RunStepResponse::clear_tensor() {
  tensor_.Clear();
}
const ::tensorflow::NamedTensorProto& RunStepResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.tensor)
  return tensor_.Get(index);
}
::tensorflow::NamedTensorProto* RunStepResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepResponse.tensor)
  return tensor_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunStepResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.RunStepResponse.tensor)
  return tensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunStepResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepResponse.tensor)
  return &tensor_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunStepResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepResponse.tensor)
  return tensor_;
}

// .tensorflow.RunMetadata metadata = 2;
bool RunStepResponse::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void RunStepResponse::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::tensorflow::RunMetadata& RunStepResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::tensorflow::RunMetadata::internal_default_instance();
}
::tensorflow::RunMetadata* RunStepResponse::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepResponse.metadata)
  return metadata_;
}
::tensorflow::RunMetadata* RunStepResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepResponse.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::RunMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
 void RunStepResponse::set_allocated_metadata(::tensorflow::RunMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepResponse.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialRunSetupRequest::kSessionHandleFieldNumber;
const int PartialRunSetupRequest::kFeedFieldNumber;
const int PartialRunSetupRequest::kFetchFieldNumber;
const int PartialRunSetupRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialRunSetupRequest::PartialRunSetupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PartialRunSetupRequest)
}
PartialRunSetupRequest::PartialRunSetupRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena),
  target_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupRequest)
}
PartialRunSetupRequest::PartialRunSetupRequest(const PartialRunSetupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feed_(from.feed_),
      fetch_(from.fetch_),
      target_(from.target_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupRequest)
}

void PartialRunSetupRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PartialRunSetupRequest::~PartialRunSetupRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupRequest)
  SharedDtor();
}

void PartialRunSetupRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PartialRunSetupRequest::ArenaDtor(void* object) {
  PartialRunSetupRequest* _this = reinterpret_cast< PartialRunSetupRequest* >(object);
  (void)_this;
}
void PartialRunSetupRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PartialRunSetupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialRunSetupRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[6].descriptor;
}

const PartialRunSetupRequest& PartialRunSetupRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartialRunSetupRequest* PartialRunSetupRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PartialRunSetupRequest>(arena);
}

void PartialRunSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupRequest)
  feed_.Clear();
  fetch_.Clear();
  target_.Clear();
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PartialRunSetupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.PartialRunSetupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string feed = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feed(this->feed_size() - 1).data(),
            this->feed(this->feed_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.feed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fetch = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fetch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fetch(this->fetch_size() - 1).data(),
            this->fetch(this->fetch_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.fetch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target(this->target_size() - 1).data(),
            this->target(this->target_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.PartialRunSetupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.PartialRunSetupRequest)
  return false;
#undef DO_
}

void PartialRunSetupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.PartialRunSetupRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // repeated string feed = 2;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.feed");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->feed(i), output);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.fetch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fetch(i), output);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.PartialRunSetupRequest)
}

::google::protobuf::uint8* PartialRunSetupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // repeated string feed = 2;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.feed");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->feed(i), target);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.fetch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fetch(i), target);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.target");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->target(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupRequest)
  return target;
}

size_t PartialRunSetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupRequest)
  size_t total_size = 0;

  // repeated string feed = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feed_size());
  for (int i = 0; i < this->feed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feed(i));
  }

  // repeated string fetch = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fetch_size());
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fetch(i));
  }

  // repeated string target = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->target_size());
  for (int i = 0; i < this->target_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target(i));
  }

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialRunSetupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PartialRunSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialRunSetupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialRunSetupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PartialRunSetupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PartialRunSetupRequest)
    MergeFrom(*source);
  }
}

void PartialRunSetupRequest::MergeFrom(const PartialRunSetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
  target_.MergeFrom(from.target_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void PartialRunSetupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PartialRunSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialRunSetupRequest::CopyFrom(const PartialRunSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupRequest::IsInitialized() const {
  return true;
}

void PartialRunSetupRequest::Swap(PartialRunSetupRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PartialRunSetupRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PartialRunSetupRequest::UnsafeArenaSwap(PartialRunSetupRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PartialRunSetupRequest::InternalSwap(PartialRunSetupRequest* other) {
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  target_.UnsafeArenaSwap(&other->target_);
  session_handle_.Swap(&other->session_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialRunSetupRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialRunSetupRequest

// string session_handle = 1;
void PartialRunSetupRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PartialRunSetupRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.session_handle)
  return session_handle_.Get();
}
void PartialRunSetupRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.session_handle)
}
void PartialRunSetupRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.session_handle)
}
void PartialRunSetupRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.session_handle)
}
::std::string* PartialRunSetupRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PartialRunSetupRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.PartialRunSetupRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PartialRunSetupRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PartialRunSetupRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PartialRunSetupRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PartialRunSetupRequest.session_handle)
}
void PartialRunSetupRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PartialRunSetupRequest.session_handle)
}

// repeated string feed = 2;
int PartialRunSetupRequest::feed_size() const {
  return feed_.size();
}
void PartialRunSetupRequest::clear_feed() {
  feed_.Clear();
}
const ::std::string& PartialRunSetupRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Get(index);
}
::std::string* PartialRunSetupRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Mutable(index);
}
void PartialRunSetupRequest::set_feed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.feed)
  feed_.Mutable(index)->assign(value);
}
void PartialRunSetupRequest::set_feed(int index, const char* value) {
  feed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.feed)
}
void PartialRunSetupRequest::set_feed(int index, const char* value, size_t size) {
  feed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.feed)
}
::std::string* PartialRunSetupRequest::add_feed() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Add();
}
void PartialRunSetupRequest::add_feed(const ::std::string& value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.feed)
}
void PartialRunSetupRequest::add_feed(const char* value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.feed)
}
void PartialRunSetupRequest::add_feed(const char* value, size_t size) {
  feed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.feed)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.feed)
  return feed_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.feed)
  return &feed_;
}

// repeated string fetch = 3;
int PartialRunSetupRequest::fetch_size() const {
  return fetch_.size();
}
void PartialRunSetupRequest::clear_fetch() {
  fetch_.Clear();
}
const ::std::string& PartialRunSetupRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Get(index);
}
::std::string* PartialRunSetupRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Mutable(index);
}
void PartialRunSetupRequest::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
void PartialRunSetupRequest::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.fetch)
}
void PartialRunSetupRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.fetch)
}
::std::string* PartialRunSetupRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Add();
}
void PartialRunSetupRequest::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.fetch)
}
void PartialRunSetupRequest::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.fetch)
}
void PartialRunSetupRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.fetch)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
int PartialRunSetupRequest::target_size() const {
  return target_.size();
}
void PartialRunSetupRequest::clear_target() {
  target_.Clear();
}
const ::std::string& PartialRunSetupRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.target)
  return target_.Get(index);
}
::std::string* PartialRunSetupRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.target)
  return target_.Mutable(index);
}
void PartialRunSetupRequest::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.target)
  target_.Mutable(index)->assign(value);
}
void PartialRunSetupRequest::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.target)
}
void PartialRunSetupRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.target)
}
::std::string* PartialRunSetupRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.target)
  return target_.Add();
}
void PartialRunSetupRequest::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.target)
}
void PartialRunSetupRequest::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.target)
}
void PartialRunSetupRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.target)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.target)
  return target_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.target)
  return &target_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialRunSetupResponse::kPartialRunHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialRunSetupResponse::PartialRunSetupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PartialRunSetupResponse)
}
PartialRunSetupResponse::PartialRunSetupResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupResponse)
}
PartialRunSetupResponse::PartialRunSetupResponse(const PartialRunSetupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partial_run_handle().size() > 0) {
    partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partial_run_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupResponse)
}

void PartialRunSetupResponse::SharedCtor() {
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PartialRunSetupResponse::~PartialRunSetupResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupResponse)
  SharedDtor();
}

void PartialRunSetupResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  partial_run_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PartialRunSetupResponse::ArenaDtor(void* object) {
  PartialRunSetupResponse* _this = reinterpret_cast< PartialRunSetupResponse* >(object);
  (void)_this;
}
void PartialRunSetupResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PartialRunSetupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialRunSetupResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[7].descriptor;
}

const PartialRunSetupResponse& PartialRunSetupResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartialRunSetupResponse* PartialRunSetupResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PartialRunSetupResponse>(arena);
}

void PartialRunSetupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupResponse)
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PartialRunSetupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.PartialRunSetupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partial_run_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partial_run_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partial_run_handle().data(), this->partial_run_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupResponse.partial_run_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.PartialRunSetupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.PartialRunSetupResponse)
  return false;
#undef DO_
}

void PartialRunSetupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.PartialRunSetupResponse)
  // string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupResponse.partial_run_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partial_run_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.PartialRunSetupResponse)
}

::google::protobuf::uint8* PartialRunSetupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupResponse)
  // string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupResponse.partial_run_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partial_run_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupResponse)
  return target;
}

size_t PartialRunSetupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupResponse)
  size_t total_size = 0;

  // string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partial_run_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialRunSetupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PartialRunSetupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialRunSetupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialRunSetupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PartialRunSetupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PartialRunSetupResponse)
    MergeFrom(*source);
  }
}

void PartialRunSetupResponse::MergeFrom(const PartialRunSetupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.partial_run_handle().size() > 0) {
    set_partial_run_handle(from.partial_run_handle());
  }
}

void PartialRunSetupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PartialRunSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialRunSetupResponse::CopyFrom(const PartialRunSetupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupResponse::IsInitialized() const {
  return true;
}

void PartialRunSetupResponse::Swap(PartialRunSetupResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PartialRunSetupResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PartialRunSetupResponse::UnsafeArenaSwap(PartialRunSetupResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PartialRunSetupResponse::InternalSwap(PartialRunSetupResponse* other) {
  partial_run_handle_.Swap(&other->partial_run_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialRunSetupResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialRunSetupResponse

// string partial_run_handle = 1;
void PartialRunSetupResponse::clear_partial_run_handle() {
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PartialRunSetupResponse::partial_run_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupResponse.partial_run_handle)
  return partial_run_handle_.Get();
}
void PartialRunSetupResponse::set_partial_run_handle(const ::std::string& value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
void PartialRunSetupResponse::set_partial_run_handle(const char* value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
void PartialRunSetupResponse::set_partial_run_handle(const char* value,
    size_t size) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
::std::string* PartialRunSetupResponse::mutable_partial_run_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupResponse.partial_run_handle)
  return partial_run_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PartialRunSetupResponse::release_partial_run_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.PartialRunSetupResponse.partial_run_handle)
  
  return partial_run_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PartialRunSetupResponse::unsafe_arena_release_partial_run_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PartialRunSetupResponse.partial_run_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return partial_run_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PartialRunSetupResponse::set_allocated_partial_run_handle(::std::string* partial_run_handle) {
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partial_run_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
void PartialRunSetupResponse::unsafe_arena_set_allocated_partial_run_handle(
    ::std::string* partial_run_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      partial_run_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PartialRunSetupResponse.partial_run_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseSessionRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionRequest::CloseSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CloseSessionRequest)
}
CloseSessionRequest::CloseSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionRequest)
}
CloseSessionRequest::CloseSessionRequest(const CloseSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionRequest)
}

void CloseSessionRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CloseSessionRequest::~CloseSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CloseSessionRequest)
  SharedDtor();
}

void CloseSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CloseSessionRequest::ArenaDtor(void* object) {
  CloseSessionRequest* _this = reinterpret_cast< CloseSessionRequest* >(object);
  (void)_this;
}
void CloseSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CloseSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSessionRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[8].descriptor;
}

const CloseSessionRequest& CloseSessionRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloseSessionRequest* CloseSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CloseSessionRequest>(arena);
}

void CloseSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CloseSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CloseSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CloseSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CloseSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CloseSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CloseSessionRequest)
  return false;
#undef DO_
}

void CloseSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CloseSessionRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CloseSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CloseSessionRequest)
}

::google::protobuf::uint8* CloseSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CloseSessionRequest)
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CloseSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CloseSessionRequest)
  return target;
}

size_t CloseSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CloseSessionRequest)
  size_t total_size = 0;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CloseSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CloseSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CloseSessionRequest)
    MergeFrom(*source);
  }
}

void CloseSessionRequest::MergeFrom(const CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CloseSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void CloseSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionRequest::CopyFrom(const CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionRequest::IsInitialized() const {
  return true;
}

void CloseSessionRequest::Swap(CloseSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CloseSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CloseSessionRequest::UnsafeArenaSwap(CloseSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CloseSessionRequest::InternalSwap(CloseSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseSessionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseSessionRequest

// string session_handle = 1;
void CloseSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CloseSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CloseSessionRequest.session_handle)
  return session_handle_.Get();
}
void CloseSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CloseSessionRequest.session_handle)
}
void CloseSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CloseSessionRequest.session_handle)
}
void CloseSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CloseSessionRequest.session_handle)
}
::std::string* CloseSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CloseSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CloseSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CloseSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CloseSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CloseSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CloseSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CloseSessionRequest.session_handle)
}
void CloseSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CloseSessionRequest.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionResponse::CloseSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CloseSessionResponse)
}
CloseSessionResponse::CloseSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionResponse)
}
CloseSessionResponse::CloseSessionResponse(const CloseSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionResponse)
}

void CloseSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

CloseSessionResponse::~CloseSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CloseSessionResponse)
  SharedDtor();
}

void CloseSessionResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void CloseSessionResponse::ArenaDtor(void* object) {
  CloseSessionResponse* _this = reinterpret_cast< CloseSessionResponse* >(object);
  (void)_this;
}
void CloseSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CloseSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSessionResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[9].descriptor;
}

const CloseSessionResponse& CloseSessionResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloseSessionResponse* CloseSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CloseSessionResponse>(arena);
}

void CloseSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CloseSessionResponse)
}

bool CloseSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CloseSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CloseSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CloseSessionResponse)
  return false;
#undef DO_
}

void CloseSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CloseSessionResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.CloseSessionResponse)
}

::google::protobuf::uint8* CloseSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CloseSessionResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CloseSessionResponse)
  return target;
}

size_t CloseSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CloseSessionResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CloseSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CloseSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CloseSessionResponse)
    MergeFrom(*source);
  }
}

void CloseSessionResponse::MergeFrom(const CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CloseSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CloseSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionResponse::CopyFrom(const CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionResponse::IsInitialized() const {
  return true;
}

void CloseSessionResponse::Swap(CloseSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CloseSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CloseSessionResponse::UnsafeArenaSwap(CloseSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CloseSessionResponse::InternalSwap(CloseSessionResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseSessionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRequest::kContainerFieldNumber;
const int ResetRequest::kDeviceFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRequest::ResetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ResetRequest)
}
ResetRequest::ResetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  container_(arena),
  device_filters_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      container_(from.container_),
      device_filters_(from.device_filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetRequest)
}

void ResetRequest::SharedCtor() {
  _cached_size_ = 0;
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ResetRequest::ArenaDtor(void* object) {
  ResetRequest* _this = reinterpret_cast< ResetRequest* >(object);
  (void)_this;
}
void ResetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[10].descriptor;
}

const ResetRequest& ResetRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetRequest* ResetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ResetRequest>(arena);
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetRequest)
  container_.Clear();
  device_filters_.Clear();
}

bool ResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ResetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string container = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container(this->container_size() - 1).data(),
            this->container(this->container_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ResetRequest.container"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_filters = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_filters(this->device_filters_size() - 1).data(),
            this->device_filters(this->device_filters_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ResetRequest.device_filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ResetRequest)
  return false;
#undef DO_
}

void ResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ResetRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.container");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->container(i), output);
  }

  // repeated string device_filters = 2;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.device_filters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ResetRequest)
}

::google::protobuf::uint8* ResetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.container");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->container(i), target);
  }

  // repeated string device_filters = 2;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.device_filters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->device_filters(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetRequest)
  size_t total_size = 0;

  // repeated string container = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->container_size());
  for (int i = 0; i < this->container_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container(i));
  }

  // repeated string device_filters = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->device_filters_size());
  for (int i = 0; i < this->device_filters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_filters(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ResetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_.MergeFrom(from.container_);
  device_filters_.MergeFrom(from.device_filters_);
}

void ResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::Swap(ResetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ResetRequest::UnsafeArenaSwap(ResetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResetRequest::InternalSwap(ResetRequest* other) {
  container_.UnsafeArenaSwap(&other->container_);
  device_filters_.UnsafeArenaSwap(&other->device_filters_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetRequest

// repeated string container = 1;
int ResetRequest::container_size() const {
  return container_.size();
}
void ResetRequest::clear_container() {
  container_.Clear();
}
const ::std::string& ResetRequest::container(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ResetRequest.container)
  return container_.Get(index);
}
::std::string* ResetRequest::mutable_container(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ResetRequest.container)
  return container_.Mutable(index);
}
void ResetRequest::set_container(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ResetRequest.container)
  container_.Mutable(index)->assign(value);
}
void ResetRequest::set_container(int index, const char* value) {
  container_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ResetRequest.container)
}
void ResetRequest::set_container(int index, const char* value, size_t size) {
  container_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ResetRequest.container)
}
::std::string* ResetRequest::add_container() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ResetRequest.container)
  return container_.Add();
}
void ResetRequest::add_container(const ::std::string& value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ResetRequest.container)
}
void ResetRequest::add_container(const char* value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ResetRequest.container)
}
void ResetRequest::add_container(const char* value, size_t size) {
  container_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ResetRequest.container)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetRequest::container() const {
  // @@protoc_insertion_point(field_list:tensorflow.ResetRequest.container)
  return container_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ResetRequest::mutable_container() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ResetRequest.container)
  return &container_;
}

// repeated string device_filters = 2;
int ResetRequest::device_filters_size() const {
  return device_filters_.size();
}
void ResetRequest::clear_device_filters() {
  device_filters_.Clear();
}
const ::std::string& ResetRequest::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ResetRequest.device_filters)
  return device_filters_.Get(index);
}
::std::string* ResetRequest::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ResetRequest.device_filters)
  return device_filters_.Mutable(index);
}
void ResetRequest::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ResetRequest.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
void ResetRequest::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ResetRequest.device_filters)
}
void ResetRequest::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ResetRequest.device_filters)
}
::std::string* ResetRequest::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ResetRequest.device_filters)
  return device_filters_.Add();
}
void ResetRequest::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ResetRequest.device_filters)
}
void ResetRequest::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ResetRequest.device_filters)
}
void ResetRequest::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ResetRequest.device_filters)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetRequest::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.ResetRequest.device_filters)
  return device_filters_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ResetRequest::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ResetRequest.device_filters)
  return &device_filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetResponse::ResetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ResetResponse)
}
ResetResponse::ResetResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetResponse)
}

void ResetResponse::SharedCtor() {
  _cached_size_ = 0;
}

ResetResponse::~ResetResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetResponse)
  SharedDtor();
}

void ResetResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ResetResponse::ArenaDtor(void* object) {
  ResetResponse* _this = reinterpret_cast< ResetResponse* >(object);
  (void)_this;
}
void ResetResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[11].descriptor;
}

const ResetResponse& ResetResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetResponse* ResetResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ResetResponse>(arena);
}

void ResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetResponse)
}

bool ResetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ResetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ResetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ResetResponse)
  return false;
#undef DO_
}

void ResetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ResetResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.ResetResponse)
}

::google::protobuf::uint8* ResetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetResponse)
  return target;
}

size_t ResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ResetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ResetResponse)
    MergeFrom(*source);
  }
}

void ResetResponse::MergeFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ResetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResponse::CopyFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResponse::IsInitialized() const {
  return true;
}

void ResetResponse::Swap(ResetResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResetResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ResetResponse::UnsafeArenaSwap(ResetResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResetResponse::InternalSwap(ResetResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDevicesRequest::ListDevicesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesRequest)
}

void ListDevicesRequest::SharedCtor() {
  _cached_size_ = 0;
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesRequest)
  SharedDtor();
}

void ListDevicesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ListDevicesRequest::ArenaDtor(void* object) {
  ListDevicesRequest* _this = reinterpret_cast< ListDevicesRequest* >(object);
  (void)_this;
}
void ListDevicesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDevicesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDevicesRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[12].descriptor;
}

const ListDevicesRequest& ListDevicesRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDevicesRequest* ListDevicesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDevicesRequest>(arena);
}

void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesRequest)
}

bool ListDevicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ListDevicesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ListDevicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ListDevicesRequest)
  return false;
#undef DO_
}

void ListDevicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ListDevicesRequest)
  // @@protoc_insertion_point(serialize_end:tensorflow.ListDevicesRequest)
}

::google::protobuf::uint8* ListDevicesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesRequest)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesRequest)
  return target;
}

size_t ListDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDevicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDevicesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ListDevicesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ListDevicesRequest)
    MergeFrom(*source);
  }
}

void ListDevicesRequest::MergeFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ListDevicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {
  return true;
}

void ListDevicesRequest::Swap(ListDevicesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDevicesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListDevicesRequest::UnsafeArenaSwap(ListDevicesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDevicesRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDevicesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDevicesResponse::kLocalDeviceFieldNumber;
const int ListDevicesResponse::kRemoteDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDevicesResponse::ListDevicesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  local_device_(arena),
  remote_device_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      local_device_(from.local_device_),
      remote_device_(from.remote_device_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesResponse)
}

void ListDevicesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesResponse)
  SharedDtor();
}

void ListDevicesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ListDevicesResponse::ArenaDtor(void* object) {
  ListDevicesResponse* _this = reinterpret_cast< ListDevicesResponse* >(object);
  (void)_this;
}
void ListDevicesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDevicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDevicesResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[13].descriptor;
}

const ListDevicesResponse& ListDevicesResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDevicesResponse* ListDevicesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDevicesResponse>(arena);
}

void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesResponse)
  local_device_.Clear();
  remote_device_.Clear();
}

bool ListDevicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ListDevicesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes local_device = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_local_device()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.DeviceAttributes remote_device = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_remote_device()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ListDevicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ListDevicesResponse)
  return false;
#undef DO_
}

void ListDevicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ListDevicesResponse)
  // repeated .tensorflow.DeviceAttributes local_device = 1;
  for (unsigned int i = 0, n = this->local_device_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->local_device(i), output);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  for (unsigned int i = 0, n = this->remote_device_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_device(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ListDevicesResponse)
}

::google::protobuf::uint8* ListDevicesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesResponse)
  // repeated .tensorflow.DeviceAttributes local_device = 1;
  for (unsigned int i = 0, n = this->local_device_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->local_device(i), false, target);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  for (unsigned int i = 0, n = this->remote_device_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->remote_device(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesResponse)
  return target;
}

size_t ListDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesResponse)
  size_t total_size = 0;

  // repeated .tensorflow.DeviceAttributes local_device = 1;
  {
    unsigned int count = this->local_device_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_device(i));
    }
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  {
    unsigned int count = this->remote_device_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_device(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDevicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDevicesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ListDevicesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ListDevicesResponse)
    MergeFrom(*source);
  }
}

void ListDevicesResponse::MergeFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_device_.MergeFrom(from.local_device_);
  remote_device_.MergeFrom(from.remote_device_);
}

void ListDevicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {
  return true;
}

void ListDevicesResponse::Swap(ListDevicesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDevicesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListDevicesResponse::UnsafeArenaSwap(ListDevicesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  local_device_.UnsafeArenaSwap(&other->local_device_);
  remote_device_.UnsafeArenaSwap(&other->remote_device_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDevicesResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDevicesResponse

// repeated .tensorflow.DeviceAttributes local_device = 1;
int ListDevicesResponse::local_device_size() const {
  return local_device_.size();
}
void ListDevicesResponse::clear_local_device() {
  local_device_.Clear();
}
const ::tensorflow::DeviceAttributes& ListDevicesResponse::local_device(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Get(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::mutable_local_device(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Mutable(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::add_local_device() {
  // @@protoc_insertion_point(field_add:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
ListDevicesResponse::mutable_local_device() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ListDevicesResponse.local_device)
  return &local_device_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
ListDevicesResponse::local_device() const {
  // @@protoc_insertion_point(field_list:tensorflow.ListDevicesResponse.local_device)
  return local_device_;
}

// repeated .tensorflow.DeviceAttributes remote_device = 2;
int ListDevicesResponse::remote_device_size() const {
  return remote_device_.size();
}
void ListDevicesResponse::clear_remote_device() {
  remote_device_.Clear();
}
const ::tensorflow::DeviceAttributes& ListDevicesResponse::remote_device(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Get(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::mutable_remote_device(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Mutable(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::add_remote_device() {
  // @@protoc_insertion_point(field_add:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
ListDevicesResponse::mutable_remote_device() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ListDevicesResponse.remote_device)
  return &remote_device_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
ListDevicesResponse::remote_device() const {
  // @@protoc_insertion_point(field_list:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
