// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/debug/debug_service.proto

#include "tensorflow/core/debug/debug_service.pb.h"
#include "tensorflow/core/debug/debug_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tensorflow {

static const char* EventListener_method_names[] = {
  "/tensorflow.EventListener/SendEvents",
};

std::unique_ptr< EventListener::Stub> EventListener::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< EventListener::Stub> stub(new EventListener::Stub(channel));
  return stub;
}

EventListener::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendEvents_(EventListener_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::tensorflow::Event, ::tensorflow::EventReply>* EventListener::Stub::SendEventsRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::tensorflow::Event, ::tensorflow::EventReply>(channel_.get(), rpcmethod_SendEvents_, context);
}

::grpc::ClientAsyncReaderWriter< ::tensorflow::Event, ::tensorflow::EventReply>* EventListener::Stub::AsyncSendEventsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::tensorflow::Event, ::tensorflow::EventReply>(channel_.get(), cq, rpcmethod_SendEvents_, context, tag);
}

EventListener::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      EventListener_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< EventListener::Service, ::tensorflow::Event, ::tensorflow::EventReply>(
          std::mem_fn(&EventListener::Service::SendEvents), this)));
}

EventListener::Service::~Service() {
}

::grpc::Status EventListener::Service::SendEvents(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tensorflow::EventReply, ::tensorflow::Event>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow

