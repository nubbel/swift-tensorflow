// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/api/lib/api_objects.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/tools/api/lib/api_objects.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace third_party {
namespace tensorflow {
namespace tools {
namespace api {
class TFAPIMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFAPIMember> {
} _TFAPIMember_default_instance_;
class TFAPIMethodDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFAPIMethod> {
} _TFAPIMethod_default_instance_;
class TFAPIModuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFAPIModule> {
} _TFAPIModule_default_instance_;
class TFAPIClassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFAPIClass> {
} _TFAPIClass_default_instance_;
class TFAPIObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFAPIObject> {
} _TFAPIObject_default_instance_;

namespace protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMember, mtype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMethod, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMethod, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMethod, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIMethod, argspec_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIModule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIModule, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIModule, member_method_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIClass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIClass, is_instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIClass, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIClass, member_method_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIObject, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIObject, tf_module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFAPIObject, tf_class_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(TFAPIMember)},
  { 8, 15, sizeof(TFAPIMethod)},
  { 18, 24, sizeof(TFAPIModule)},
  { 26, 33, sizeof(TFAPIClass)},
  { 36, 43, sizeof(TFAPIObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFAPIMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFAPIMethod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFAPIModule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFAPIClass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFAPIObject_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/tools/api/lib/api_objects.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _TFAPIMember_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TFAPIMethod_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TFAPIModule_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TFAPIClass_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TFAPIObject_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TFAPIMember_default_instance_.DefaultConstruct();
  _TFAPIMethod_default_instance_.DefaultConstruct();
  _TFAPIModule_default_instance_.DefaultConstruct();
  _TFAPIClass_default_instance_.DefaultConstruct();
  _TFAPIObject_default_instance_.DefaultConstruct();
  _TFAPIObject_default_instance_.get_mutable()->tf_module_ = const_cast< ::third_party::tensorflow::tools::api::TFAPIModule*>(
      ::third_party::tensorflow::tools::api::TFAPIModule::internal_default_instance());
  _TFAPIObject_default_instance_.get_mutable()->tf_class_ = const_cast< ::third_party::tensorflow::tools::api::TFAPIClass*>(
      ::third_party::tensorflow::tools::api::TFAPIClass::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*tensorflow/tools/api/lib/api_objects.p"
      "roto\022 third_party.tensorflow.tools.api\"*"
      "\n\013TFAPIMember\022\014\n\004name\030\001 \001(\t\022\r\n\005mtype\030\002 \001"
      "(\t\":\n\013TFAPIMethod\022\014\n\004name\030\001 \001(\t\022\014\n\004path\030"
      "\002 \001(\t\022\017\n\007argspec\030\003 \001(\t\"\222\001\n\013TFAPIModule\022="
      "\n\006member\030\001 \003(\0132-.third_party.tensorflow."
      "tools.api.TFAPIMember\022D\n\rmember_method\030\002"
      " \003(\0132-.third_party.tensorflow.tools.api."
      "TFAPIMethod\"\246\001\n\nTFAPIClass\022\023\n\013is_instanc"
      "e\030\001 \003(\t\022=\n\006member\030\002 \003(\0132-.third_party.te"
      "nsorflow.tools.api.TFAPIMember\022D\n\rmember"
      "_method\030\003 \003(\0132-.third_party.tensorflow.t"
      "ools.api.TFAPIMethod\"\235\001\n\013TFAPIObject\022\014\n\004"
      "path\030\001 \001(\t\022@\n\ttf_module\030\002 \001(\0132-.third_pa"
      "rty.tensorflow.tools.api.TFAPIModule\022>\n\010"
      "tf_class\030\003 \001(\0132,.third_party.tensorflow."
      "tools.api.TFAPIClass"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/tools/api/lib/api_objects.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFAPIMember::kNameFieldNumber;
const int TFAPIMember::kMtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFAPIMember::TFAPIMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:third_party.tensorflow.tools.api.TFAPIMember)
}
TFAPIMember::TFAPIMember(const TFAPIMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mtype()) {
    mtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mtype_);
  }
  // @@protoc_insertion_point(copy_constructor:third_party.tensorflow.tools.api.TFAPIMember)
}

void TFAPIMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TFAPIMember::~TFAPIMember() {
  // @@protoc_insertion_point(destructor:third_party.tensorflow.tools.api.TFAPIMember)
  SharedDtor();
}

void TFAPIMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFAPIMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFAPIMember::descriptor() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[0].descriptor;
}

const TFAPIMember& TFAPIMember::default_instance() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFAPIMember* TFAPIMember::New(::google::protobuf::Arena* arena) const {
  TFAPIMember* n = new TFAPIMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFAPIMember::Clear() {
// @@protoc_insertion_point(message_clear_start:third_party.tensorflow.tools.api.TFAPIMember)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_mtype()) {
      GOOGLE_DCHECK(!mtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mtype_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFAPIMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:third_party.tensorflow.tools.api.TFAPIMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mtype = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mtype().data(), this->mtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIMember.mtype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:third_party.tensorflow.tools.api.TFAPIMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:third_party.tensorflow.tools.api.TFAPIMember)
  return false;
#undef DO_
}

void TFAPIMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:third_party.tensorflow.tools.api.TFAPIMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string mtype = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mtype().data(), this->mtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMember.mtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:third_party.tensorflow.tools.api.TFAPIMember)
}

::google::protobuf::uint8* TFAPIMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:third_party.tensorflow.tools.api.TFAPIMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string mtype = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mtype().data(), this->mtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMember.mtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:third_party.tensorflow.tools.api.TFAPIMember)
  return target;
}

size_t TFAPIMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:third_party.tensorflow.tools.api.TFAPIMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string mtype = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFAPIMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:third_party.tensorflow.tools.api.TFAPIMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TFAPIMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFAPIMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:third_party.tensorflow.tools.api.TFAPIMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:third_party.tensorflow.tools.api.TFAPIMember)
    MergeFrom(*source);
  }
}

void TFAPIMember::MergeFrom(const TFAPIMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:third_party.tensorflow.tools.api.TFAPIMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_mtype()) {
      set_has_mtype();
      mtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mtype_);
    }
  }
}

void TFAPIMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:third_party.tensorflow.tools.api.TFAPIMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFAPIMember::CopyFrom(const TFAPIMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:third_party.tensorflow.tools.api.TFAPIMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFAPIMember::IsInitialized() const {
  return true;
}

void TFAPIMember::Swap(TFAPIMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFAPIMember::InternalSwap(TFAPIMember* other) {
  name_.Swap(&other->name_);
  mtype_.Swap(&other->mtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFAPIMember::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFAPIMember

// optional string name = 1;
bool TFAPIMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFAPIMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TFAPIMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFAPIMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TFAPIMember::name() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMember.name)
  return name_.GetNoArena();
}
void TFAPIMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMember.name)
}
#if LANG_CXX11
void TFAPIMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMember.name)
}
#endif
void TFAPIMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMember.name)
}
void TFAPIMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMember.name)
}
::std::string* TFAPIMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIMember::release_name() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMember.name)
}

// optional string mtype = 2;
bool TFAPIMember::has_mtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFAPIMember::set_has_mtype() {
  _has_bits_[0] |= 0x00000002u;
}
void TFAPIMember::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFAPIMember::clear_mtype() {
  mtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mtype();
}
const ::std::string& TFAPIMember::mtype() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  return mtype_.GetNoArena();
}
void TFAPIMember::set_mtype(const ::std::string& value) {
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
#if LANG_CXX11
void TFAPIMember::set_mtype(::std::string&& value) {
  set_has_mtype();
  mtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
#endif
void TFAPIMember::set_mtype(const char* value) {
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
void TFAPIMember::set_mtype(const char* value, size_t size) {
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
::std::string* TFAPIMember::mutable_mtype() {
  set_has_mtype();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  return mtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIMember::release_mtype() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  clear_has_mtype();
  return mtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIMember::set_allocated_mtype(::std::string* mtype) {
  if (mtype != NULL) {
    set_has_mtype();
  } else {
    clear_has_mtype();
  }
  mtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mtype);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFAPIMethod::kNameFieldNumber;
const int TFAPIMethod::kPathFieldNumber;
const int TFAPIMethod::kArgspecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFAPIMethod::TFAPIMethod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:third_party.tensorflow.tools.api.TFAPIMethod)
}
TFAPIMethod::TFAPIMethod(const TFAPIMethod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  argspec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_argspec()) {
    argspec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.argspec_);
  }
  // @@protoc_insertion_point(copy_constructor:third_party.tensorflow.tools.api.TFAPIMethod)
}

void TFAPIMethod::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argspec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TFAPIMethod::~TFAPIMethod() {
  // @@protoc_insertion_point(destructor:third_party.tensorflow.tools.api.TFAPIMethod)
  SharedDtor();
}

void TFAPIMethod::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argspec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFAPIMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFAPIMethod::descriptor() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[1].descriptor;
}

const TFAPIMethod& TFAPIMethod::default_instance() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFAPIMethod* TFAPIMethod::New(::google::protobuf::Arena* arena) const {
  TFAPIMethod* n = new TFAPIMethod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFAPIMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:third_party.tensorflow.tools.api.TFAPIMethod)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_argspec()) {
      GOOGLE_DCHECK(!argspec_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*argspec_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFAPIMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:third_party.tensorflow.tools.api.TFAPIMethod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIMethod.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIMethod.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string argspec = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argspec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->argspec().data(), this->argspec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIMethod.argspec");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:third_party.tensorflow.tools.api.TFAPIMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:third_party.tensorflow.tools.api.TFAPIMethod)
  return false;
#undef DO_
}

void TFAPIMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:third_party.tensorflow.tools.api.TFAPIMethod)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string argspec = 3;
  if (has_argspec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argspec().data(), this->argspec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.argspec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->argspec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:third_party.tensorflow.tools.api.TFAPIMethod)
}

::google::protobuf::uint8* TFAPIMethod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:third_party.tensorflow.tools.api.TFAPIMethod)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string argspec = 3;
  if (has_argspec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argspec().data(), this->argspec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIMethod.argspec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->argspec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:third_party.tensorflow.tools.api.TFAPIMethod)
  return target;
}

size_t TFAPIMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:third_party.tensorflow.tools.api.TFAPIMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string argspec = 3;
    if (has_argspec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argspec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFAPIMethod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:third_party.tensorflow.tools.api.TFAPIMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const TFAPIMethod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFAPIMethod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:third_party.tensorflow.tools.api.TFAPIMethod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:third_party.tensorflow.tools.api.TFAPIMethod)
    MergeFrom(*source);
  }
}

void TFAPIMethod::MergeFrom(const TFAPIMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:third_party.tensorflow.tools.api.TFAPIMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_argspec()) {
      set_has_argspec();
      argspec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.argspec_);
    }
  }
}

void TFAPIMethod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:third_party.tensorflow.tools.api.TFAPIMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFAPIMethod::CopyFrom(const TFAPIMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:third_party.tensorflow.tools.api.TFAPIMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFAPIMethod::IsInitialized() const {
  return true;
}

void TFAPIMethod::Swap(TFAPIMethod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFAPIMethod::InternalSwap(TFAPIMethod* other) {
  name_.Swap(&other->name_);
  path_.Swap(&other->path_);
  argspec_.Swap(&other->argspec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFAPIMethod::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFAPIMethod

// optional string name = 1;
bool TFAPIMethod::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFAPIMethod::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TFAPIMethod::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFAPIMethod::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TFAPIMethod::name() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.name)
  return name_.GetNoArena();
}
void TFAPIMethod::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
#if LANG_CXX11
void TFAPIMethod::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
#endif
void TFAPIMethod::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
void TFAPIMethod::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
::std::string* TFAPIMethod::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIMethod::release_name() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIMethod::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.name)
}

// optional string path = 2;
bool TFAPIMethod::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFAPIMethod::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void TFAPIMethod::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFAPIMethod::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& TFAPIMethod::path() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.path)
  return path_.GetNoArena();
}
void TFAPIMethod::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
#if LANG_CXX11
void TFAPIMethod::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
#endif
void TFAPIMethod::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
void TFAPIMethod::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
::std::string* TFAPIMethod::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIMethod::release_path() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIMethod::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.path)
}

// optional string argspec = 3;
bool TFAPIMethod::has_argspec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TFAPIMethod::set_has_argspec() {
  _has_bits_[0] |= 0x00000004u;
}
void TFAPIMethod::clear_has_argspec() {
  _has_bits_[0] &= ~0x00000004u;
}
void TFAPIMethod::clear_argspec() {
  argspec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_argspec();
}
const ::std::string& TFAPIMethod::argspec() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  return argspec_.GetNoArena();
}
void TFAPIMethod::set_argspec(const ::std::string& value) {
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
#if LANG_CXX11
void TFAPIMethod::set_argspec(::std::string&& value) {
  set_has_argspec();
  argspec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
#endif
void TFAPIMethod::set_argspec(const char* value) {
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
void TFAPIMethod::set_argspec(const char* value, size_t size) {
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
::std::string* TFAPIMethod::mutable_argspec() {
  set_has_argspec();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  return argspec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIMethod::release_argspec() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  clear_has_argspec();
  return argspec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIMethod::set_allocated_argspec(::std::string* argspec) {
  if (argspec != NULL) {
    set_has_argspec();
  } else {
    clear_has_argspec();
  }
  argspec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), argspec);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFAPIModule::kMemberFieldNumber;
const int TFAPIModule::kMemberMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFAPIModule::TFAPIModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:third_party.tensorflow.tools.api.TFAPIModule)
}
TFAPIModule::TFAPIModule(const TFAPIModule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_),
      member_method_(from.member_method_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:third_party.tensorflow.tools.api.TFAPIModule)
}

void TFAPIModule::SharedCtor() {
  _cached_size_ = 0;
}

TFAPIModule::~TFAPIModule() {
  // @@protoc_insertion_point(destructor:third_party.tensorflow.tools.api.TFAPIModule)
  SharedDtor();
}

void TFAPIModule::SharedDtor() {
}

void TFAPIModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFAPIModule::descriptor() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[2].descriptor;
}

const TFAPIModule& TFAPIModule::default_instance() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFAPIModule* TFAPIModule::New(::google::protobuf::Arena* arena) const {
  TFAPIModule* n = new TFAPIModule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFAPIModule::Clear() {
// @@protoc_insertion_point(message_clear_start:third_party.tensorflow.tools.api.TFAPIModule)
  member_.Clear();
  member_method_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFAPIModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:third_party.tensorflow.tools.api.TFAPIModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_member_method()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:third_party.tensorflow.tools.api.TFAPIModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:third_party.tensorflow.tools.api.TFAPIModule)
  return false;
#undef DO_
}

void TFAPIModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:third_party.tensorflow.tools.api.TFAPIModule)
  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
  for (unsigned int i = 0, n = this->member_method_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_method(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:third_party.tensorflow.tools.api.TFAPIModule)
}

::google::protobuf::uint8* TFAPIModule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:third_party.tensorflow.tools.api.TFAPIModule)
  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->member(i), false, target);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
  for (unsigned int i = 0, n = this->member_method_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->member_method(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:third_party.tensorflow.tools.api.TFAPIModule)
  return target;
}

size_t TFAPIModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:third_party.tensorflow.tools.api.TFAPIModule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
  {
    unsigned int count = this->member_method_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_method(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFAPIModule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:third_party.tensorflow.tools.api.TFAPIModule)
  GOOGLE_DCHECK_NE(&from, this);
  const TFAPIModule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFAPIModule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:third_party.tensorflow.tools.api.TFAPIModule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:third_party.tensorflow.tools.api.TFAPIModule)
    MergeFrom(*source);
  }
}

void TFAPIModule::MergeFrom(const TFAPIModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:third_party.tensorflow.tools.api.TFAPIModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_.MergeFrom(from.member_);
  member_method_.MergeFrom(from.member_method_);
}

void TFAPIModule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:third_party.tensorflow.tools.api.TFAPIModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFAPIModule::CopyFrom(const TFAPIModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:third_party.tensorflow.tools.api.TFAPIModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFAPIModule::IsInitialized() const {
  return true;
}

void TFAPIModule::Swap(TFAPIModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFAPIModule::InternalSwap(TFAPIModule* other) {
  member_.UnsafeArenaSwap(&other->member_);
  member_method_.UnsafeArenaSwap(&other->member_method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFAPIModule::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFAPIModule

// repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
int TFAPIModule::member_size() const {
  return member_.size();
}
void TFAPIModule::clear_member() {
  member_.Clear();
}
const ::third_party::tensorflow::tools::api::TFAPIMember& TFAPIModule::member(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Get(index);
}
::third_party::tensorflow::tools::api::TFAPIMember* TFAPIModule::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Mutable(index);
}
::third_party::tensorflow::tools::api::TFAPIMember* TFAPIModule::add_member() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
TFAPIModule::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIModule.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
TFAPIModule::member() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
int TFAPIModule::member_method_size() const {
  return member_method_.size();
}
void TFAPIModule::clear_member_method() {
  member_method_.Clear();
}
const ::third_party::tensorflow::tools::api::TFAPIMethod& TFAPIModule::member_method(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Get(index);
}
::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIModule::mutable_member_method(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Mutable(index);
}
::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIModule::add_member_method() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Add();
}
::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
TFAPIModule::mutable_member_method() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return &member_method_;
}
const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
TFAPIModule::member_method() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFAPIClass::kIsInstanceFieldNumber;
const int TFAPIClass::kMemberFieldNumber;
const int TFAPIClass::kMemberMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFAPIClass::TFAPIClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:third_party.tensorflow.tools.api.TFAPIClass)
}
TFAPIClass::TFAPIClass(const TFAPIClass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      is_instance_(from.is_instance_),
      member_(from.member_),
      member_method_(from.member_method_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:third_party.tensorflow.tools.api.TFAPIClass)
}

void TFAPIClass::SharedCtor() {
  _cached_size_ = 0;
}

TFAPIClass::~TFAPIClass() {
  // @@protoc_insertion_point(destructor:third_party.tensorflow.tools.api.TFAPIClass)
  SharedDtor();
}

void TFAPIClass::SharedDtor() {
}

void TFAPIClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFAPIClass::descriptor() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[3].descriptor;
}

const TFAPIClass& TFAPIClass::default_instance() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFAPIClass* TFAPIClass::New(::google::protobuf::Arena* arena) const {
  TFAPIClass* n = new TFAPIClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFAPIClass::Clear() {
// @@protoc_insertion_point(message_clear_start:third_party.tensorflow.tools.api.TFAPIClass)
  is_instance_.Clear();
  member_.Clear();
  member_method_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFAPIClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:third_party.tensorflow.tools.api.TFAPIClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string is_instance = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_is_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->is_instance(this->is_instance_size() - 1).data(),
            this->is_instance(this->is_instance_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIClass.is_instance");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_member_method()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:third_party.tensorflow.tools.api.TFAPIClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:third_party.tensorflow.tools.api.TFAPIClass)
  return false;
#undef DO_
}

void TFAPIClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:third_party.tensorflow.tools.api.TFAPIClass)
  // repeated string is_instance = 1;
  for (int i = 0; i < this->is_instance_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->is_instance(i).data(), this->is_instance(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIClass.is_instance");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->is_instance(i), output);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
  for (unsigned int i = 0, n = this->member_method_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member_method(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:third_party.tensorflow.tools.api.TFAPIClass)
}

::google::protobuf::uint8* TFAPIClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:third_party.tensorflow.tools.api.TFAPIClass)
  // repeated string is_instance = 1;
  for (int i = 0; i < this->is_instance_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->is_instance(i).data(), this->is_instance(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIClass.is_instance");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->is_instance(i), target);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->member(i), false, target);
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
  for (unsigned int i = 0, n = this->member_method_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->member_method(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:third_party.tensorflow.tools.api.TFAPIClass)
  return target;
}

size_t TFAPIClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:third_party.tensorflow.tools.api.TFAPIClass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string is_instance = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->is_instance_size());
  for (int i = 0; i < this->is_instance_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->is_instance(i));
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
  {
    unsigned int count = this->member_method_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_method(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFAPIClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:third_party.tensorflow.tools.api.TFAPIClass)
  GOOGLE_DCHECK_NE(&from, this);
  const TFAPIClass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFAPIClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:third_party.tensorflow.tools.api.TFAPIClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:third_party.tensorflow.tools.api.TFAPIClass)
    MergeFrom(*source);
  }
}

void TFAPIClass::MergeFrom(const TFAPIClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:third_party.tensorflow.tools.api.TFAPIClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_instance_.MergeFrom(from.is_instance_);
  member_.MergeFrom(from.member_);
  member_method_.MergeFrom(from.member_method_);
}

void TFAPIClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:third_party.tensorflow.tools.api.TFAPIClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFAPIClass::CopyFrom(const TFAPIClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:third_party.tensorflow.tools.api.TFAPIClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFAPIClass::IsInitialized() const {
  return true;
}

void TFAPIClass::Swap(TFAPIClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFAPIClass::InternalSwap(TFAPIClass* other) {
  is_instance_.UnsafeArenaSwap(&other->is_instance_);
  member_.UnsafeArenaSwap(&other->member_);
  member_method_.UnsafeArenaSwap(&other->member_method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFAPIClass::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFAPIClass

// repeated string is_instance = 1;
int TFAPIClass::is_instance_size() const {
  return is_instance_.size();
}
void TFAPIClass::clear_is_instance() {
  is_instance_.Clear();
}
const ::std::string& TFAPIClass::is_instance(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Get(index);
}
::std::string* TFAPIClass::mutable_is_instance(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Mutable(index);
}
void TFAPIClass::set_is_instance(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  is_instance_.Mutable(index)->assign(value);
}
void TFAPIClass::set_is_instance(int index, const char* value) {
  is_instance_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
void TFAPIClass::set_is_instance(int index, const char* value, size_t size) {
  is_instance_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
::std::string* TFAPIClass::add_is_instance() {
  // @@protoc_insertion_point(field_add_mutable:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Add();
}
void TFAPIClass::add_is_instance(const ::std::string& value) {
  is_instance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
void TFAPIClass::add_is_instance(const char* value) {
  is_instance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
void TFAPIClass::add_is_instance(const char* value, size_t size) {
  is_instance_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFAPIClass::is_instance() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFAPIClass::mutable_is_instance() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return &is_instance_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
int TFAPIClass::member_size() const {
  return member_.size();
}
void TFAPIClass::clear_member() {
  member_.Clear();
}
const ::third_party::tensorflow::tools::api::TFAPIMember& TFAPIClass::member(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Get(index);
}
::third_party::tensorflow::tools::api::TFAPIMember* TFAPIClass::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Mutable(index);
}
::third_party::tensorflow::tools::api::TFAPIMember* TFAPIClass::add_member() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
TFAPIClass::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
TFAPIClass::member() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
int TFAPIClass::member_method_size() const {
  return member_method_.size();
}
void TFAPIClass::clear_member_method() {
  member_method_.Clear();
}
const ::third_party::tensorflow::tools::api::TFAPIMethod& TFAPIClass::member_method(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Get(index);
}
::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIClass::mutable_member_method(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Mutable(index);
}
::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIClass::add_member_method() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Add();
}
::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
TFAPIClass::mutable_member_method() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return &member_method_;
}
const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
TFAPIClass::member_method() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFAPIObject::kPathFieldNumber;
const int TFAPIObject::kTfModuleFieldNumber;
const int TFAPIObject::kTfClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFAPIObject::TFAPIObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:third_party.tensorflow.tools.api.TFAPIObject)
}
TFAPIObject::TFAPIObject(const TFAPIObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_tf_module()) {
    tf_module_ = new ::third_party::tensorflow::tools::api::TFAPIModule(*from.tf_module_);
  } else {
    tf_module_ = NULL;
  }
  if (from.has_tf_class()) {
    tf_class_ = new ::third_party::tensorflow::tools::api::TFAPIClass(*from.tf_class_);
  } else {
    tf_class_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:third_party.tensorflow.tools.api.TFAPIObject)
}

void TFAPIObject::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tf_module_, 0, reinterpret_cast<char*>(&tf_class_) -
    reinterpret_cast<char*>(&tf_module_) + sizeof(tf_class_));
}

TFAPIObject::~TFAPIObject() {
  // @@protoc_insertion_point(destructor:third_party.tensorflow.tools.api.TFAPIObject)
  SharedDtor();
}

void TFAPIObject::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tf_module_;
  }
  if (this != internal_default_instance()) {
    delete tf_class_;
  }
}

void TFAPIObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFAPIObject::descriptor() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[4].descriptor;
}

const TFAPIObject& TFAPIObject::default_instance() {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFAPIObject* TFAPIObject::New(::google::protobuf::Arena* arena) const {
  TFAPIObject* n = new TFAPIObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFAPIObject::Clear() {
// @@protoc_insertion_point(message_clear_start:third_party.tensorflow.tools.api.TFAPIObject)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_tf_module()) {
      GOOGLE_DCHECK(tf_module_ != NULL);
      tf_module_->::third_party::tensorflow::tools::api::TFAPIModule::Clear();
    }
    if (has_tf_class()) {
      GOOGLE_DCHECK(tf_class_ != NULL);
      tf_class_->::third_party::tensorflow::tools::api::TFAPIClass::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFAPIObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:third_party.tensorflow.tools.api.TFAPIObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "third_party.tensorflow.tools.api.TFAPIObject.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tf_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tf_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:third_party.tensorflow.tools.api.TFAPIObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:third_party.tensorflow.tools.api.TFAPIObject)
  return false;
#undef DO_
}

void TFAPIObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:third_party.tensorflow.tools.api.TFAPIObject)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIObject.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
  if (has_tf_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tf_module_, output);
  }

  // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
  if (has_tf_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tf_class_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:third_party.tensorflow.tools.api.TFAPIObject)
}

::google::protobuf::uint8* TFAPIObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:third_party.tensorflow.tools.api.TFAPIObject)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "third_party.tensorflow.tools.api.TFAPIObject.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
  if (has_tf_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tf_module_, false, target);
  }

  // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
  if (has_tf_class()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tf_class_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:third_party.tensorflow.tools.api.TFAPIObject)
  return target;
}

size_t TFAPIObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:third_party.tensorflow.tools.api.TFAPIObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
    if (has_tf_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tf_module_);
    }

    // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
    if (has_tf_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tf_class_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFAPIObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:third_party.tensorflow.tools.api.TFAPIObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TFAPIObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFAPIObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:third_party.tensorflow.tools.api.TFAPIObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:third_party.tensorflow.tools.api.TFAPIObject)
    MergeFrom(*source);
  }
}

void TFAPIObject::MergeFrom(const TFAPIObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:third_party.tensorflow.tools.api.TFAPIObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_tf_module()) {
      mutable_tf_module()->::third_party::tensorflow::tools::api::TFAPIModule::MergeFrom(from.tf_module());
    }
    if (from.has_tf_class()) {
      mutable_tf_class()->::third_party::tensorflow::tools::api::TFAPIClass::MergeFrom(from.tf_class());
    }
  }
}

void TFAPIObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:third_party.tensorflow.tools.api.TFAPIObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFAPIObject::CopyFrom(const TFAPIObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:third_party.tensorflow.tools.api.TFAPIObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFAPIObject::IsInitialized() const {
  return true;
}

void TFAPIObject::Swap(TFAPIObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFAPIObject::InternalSwap(TFAPIObject* other) {
  path_.Swap(&other->path_);
  std::swap(tf_module_, other->tf_module_);
  std::swap(tf_class_, other->tf_class_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFAPIObject::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFAPIObject

// optional string path = 1;
bool TFAPIObject::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFAPIObject::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void TFAPIObject::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFAPIObject::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& TFAPIObject::path() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.path)
  return path_.GetNoArena();
}
void TFAPIObject::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIObject.path)
}
#if LANG_CXX11
void TFAPIObject::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIObject.path)
}
#endif
void TFAPIObject::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIObject.path)
}
void TFAPIObject::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIObject.path)
}
::std::string* TFAPIObject::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFAPIObject::release_path() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFAPIObject::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.path)
}

// optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
bool TFAPIObject::has_tf_module() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFAPIObject::set_has_tf_module() {
  _has_bits_[0] |= 0x00000002u;
}
void TFAPIObject::clear_has_tf_module() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFAPIObject::clear_tf_module() {
  if (tf_module_ != NULL) tf_module_->::third_party::tensorflow::tools::api::TFAPIModule::Clear();
  clear_has_tf_module();
}
const ::third_party::tensorflow::tools::api::TFAPIModule& TFAPIObject::tf_module() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  return tf_module_ != NULL ? *tf_module_
                         : *::third_party::tensorflow::tools::api::TFAPIModule::internal_default_instance();
}
::third_party::tensorflow::tools::api::TFAPIModule* TFAPIObject::mutable_tf_module() {
  set_has_tf_module();
  if (tf_module_ == NULL) {
    tf_module_ = new ::third_party::tensorflow::tools::api::TFAPIModule;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  return tf_module_;
}
::third_party::tensorflow::tools::api::TFAPIModule* TFAPIObject::release_tf_module() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  clear_has_tf_module();
  ::third_party::tensorflow::tools::api::TFAPIModule* temp = tf_module_;
  tf_module_ = NULL;
  return temp;
}
void TFAPIObject::set_allocated_tf_module(::third_party::tensorflow::tools::api::TFAPIModule* tf_module) {
  delete tf_module_;
  tf_module_ = tf_module;
  if (tf_module) {
    set_has_tf_module();
  } else {
    clear_has_tf_module();
  }
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
}

// optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
bool TFAPIObject::has_tf_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TFAPIObject::set_has_tf_class() {
  _has_bits_[0] |= 0x00000004u;
}
void TFAPIObject::clear_has_tf_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void TFAPIObject::clear_tf_class() {
  if (tf_class_ != NULL) tf_class_->::third_party::tensorflow::tools::api::TFAPIClass::Clear();
  clear_has_tf_class();
}
const ::third_party::tensorflow::tools::api::TFAPIClass& TFAPIObject::tf_class() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  return tf_class_ != NULL ? *tf_class_
                         : *::third_party::tensorflow::tools::api::TFAPIClass::internal_default_instance();
}
::third_party::tensorflow::tools::api::TFAPIClass* TFAPIObject::mutable_tf_class() {
  set_has_tf_class();
  if (tf_class_ == NULL) {
    tf_class_ = new ::third_party::tensorflow::tools::api::TFAPIClass;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  return tf_class_;
}
::third_party::tensorflow::tools::api::TFAPIClass* TFAPIObject::release_tf_class() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  clear_has_tf_class();
  ::third_party::tensorflow::tools::api::TFAPIClass* temp = tf_class_;
  tf_class_ = NULL;
  return temp;
}
void TFAPIObject::set_allocated_tf_class(::third_party::tensorflow::tools::api::TFAPIClass* tf_class) {
  delete tf_class_;
  tf_class_ = tf_class;
  if (tf_class) {
    set_has_tf_class();
  } else {
    clear_has_tf_class();
  }
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace tools
}  // namespace tensorflow
}  // namespace third_party

// @@protoc_insertion_point(global_scope)
