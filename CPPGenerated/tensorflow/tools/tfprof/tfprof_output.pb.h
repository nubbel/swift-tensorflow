// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/tfprof/tfprof_output.proto

#ifndef PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
namespace tensorflow {
class TensorShapeProto;
class TensorShapeProtoDefaultTypeInternal;
extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dim;
class TensorShapeProto_DimDefaultTypeInternal;
extern TensorShapeProto_DimDefaultTypeInternal _TensorShapeProto_Dim_default_instance_;
namespace tfprof {
class TFProfNode;
class TFProfNodeDefaultTypeInternal;
extern TFProfNodeDefaultTypeInternal _TFProfNode_default_instance_;
class TFProfTensorProto;
class TFProfTensorProtoDefaultTypeInternal;
extern TFProfTensorProtoDefaultTypeInternal _TFProfTensorProto_default_instance_;
}  // namespace tfprof
}  // namespace tensorflow

namespace tensorflow {
namespace tfprof {

namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto

// ===================================================================

class TFProfTensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tfprof.TFProfTensorProto) */ {
 public:
  TFProfTensorProto();
  virtual ~TFProfTensorProto();

  TFProfTensorProto(const TFProfTensorProto& from);

  inline TFProfTensorProto& operator=(const TFProfTensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFProfTensorProto& default_instance();

  static inline const TFProfTensorProto* internal_default_instance() {
    return reinterpret_cast<const TFProfTensorProto*>(
               &_TFProfTensorProto_default_instance_);
  }

  void Swap(TFProfTensorProto* other);

  // implements Message ----------------------------------------------

  inline TFProfTensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TFProfTensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TFProfTensorProto& from);
  void MergeFrom(const TFProfTensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TFProfTensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value_double = 2;
  int value_double_size() const;
  void clear_value_double();
  static const int kValueDoubleFieldNumber = 2;
  double value_double(int index) const;
  void set_value_double(int index, double value);
  void add_value_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      value_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value_double();

  // repeated int64 value_int64 = 3;
  int value_int64_size() const;
  void clear_value_int64();
  static const int kValueInt64FieldNumber = 3;
  ::google::protobuf::int64 value_int64(int index) const;
  void set_value_int64(int index, ::google::protobuf::int64 value);
  void add_value_int64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      value_int64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_value_int64();

  // repeated string value_str = 4;
  int value_str_size() const;
  void clear_value_str();
  static const int kValueStrFieldNumber = 4;
  const ::std::string& value_str(int index) const;
  ::std::string* mutable_value_str(int index);
  void set_value_str(int index, const ::std::string& value);
  void set_value_str(int index, const char* value);
  void set_value_str(int index, const char* value, size_t size);
  ::std::string* add_value_str();
  void add_value_str(const ::std::string& value);
  void add_value_str(const char* value);
  void add_value_str(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value_str() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value_str();

  // optional .tensorflow.DataType dtype = 1;
  bool has_dtype() const;
  void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.tfprof.TFProfTensorProto)
 private:
  void set_has_dtype();
  void clear_has_dtype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > value_double_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > value_int64_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_str_;
  int dtype_;
  friend struct  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFProfNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tfprof.TFProfNode) */ {
 public:
  TFProfNode();
  virtual ~TFProfNode();

  TFProfNode(const TFProfNode& from);

  inline TFProfNode& operator=(const TFProfNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFProfNode& default_instance();

  static inline const TFProfNode* internal_default_instance() {
    return reinterpret_cast<const TFProfNode*>(
               &_TFProfNode_default_instance_);
  }

  void Swap(TFProfNode* other);

  // implements Message ----------------------------------------------

  inline TFProfNode* New() const PROTOBUF_FINAL { return New(NULL); }

  TFProfNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TFProfNode& from);
  void MergeFrom(const TFProfNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TFProfNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  int shapes_size() const;
  void clear_shapes();
  static const int kShapesFieldNumber = 11;
  const ::tensorflow::TensorShapeProto& shapes(int index) const;
  ::tensorflow::TensorShapeProto* mutable_shapes(int index);
  ::tensorflow::TensorShapeProto* add_shapes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_shapes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      shapes() const;

  // repeated .tensorflow.tfprof.TFProfNode children = 12;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 12;
  const ::tensorflow::tfprof::TFProfNode& children(int index) const;
  ::tensorflow::tfprof::TFProfNode* mutable_children(int index);
  ::tensorflow::tfprof::TFProfNode* add_children();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >&
      children() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string device = 10;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 10;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  bool has_tensor_value() const;
  void clear_tensor_value();
  static const int kTensorValueFieldNumber = 15;
  const ::tensorflow::tfprof::TFProfTensorProto& tensor_value() const;
  ::tensorflow::tfprof::TFProfTensorProto* mutable_tensor_value();
  ::tensorflow::tfprof::TFProfTensorProto* release_tensor_value();
  void set_allocated_tensor_value(::tensorflow::tfprof::TFProfTensorProto* tensor_value);

  // optional int64 exec_micros = 2;
  bool has_exec_micros() const;
  void clear_exec_micros();
  static const int kExecMicrosFieldNumber = 2;
  ::google::protobuf::int64 exec_micros() const;
  void set_exec_micros(::google::protobuf::int64 value);

  // optional int64 requested_bytes = 3;
  bool has_requested_bytes() const;
  void clear_requested_bytes();
  static const int kRequestedBytesFieldNumber = 3;
  ::google::protobuf::int64 requested_bytes() const;
  void set_requested_bytes(::google::protobuf::int64 value);

  // optional int64 parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  ::google::protobuf::int64 parameters() const;
  void set_parameters(::google::protobuf::int64 value);

  // optional int64 float_ops = 13;
  bool has_float_ops() const;
  void clear_float_ops();
  static const int kFloatOpsFieldNumber = 13;
  ::google::protobuf::int64 float_ops() const;
  void set_float_ops(::google::protobuf::int64 value);

  // optional int64 inputs = 5;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 5;
  ::google::protobuf::int64 inputs() const;
  void set_inputs(::google::protobuf::int64 value);

  // optional int64 total_exec_micros = 6;
  bool has_total_exec_micros() const;
  void clear_total_exec_micros();
  static const int kTotalExecMicrosFieldNumber = 6;
  ::google::protobuf::int64 total_exec_micros() const;
  void set_total_exec_micros(::google::protobuf::int64 value);

  // optional int64 total_requested_bytes = 7;
  bool has_total_requested_bytes() const;
  void clear_total_requested_bytes();
  static const int kTotalRequestedBytesFieldNumber = 7;
  ::google::protobuf::int64 total_requested_bytes() const;
  void set_total_requested_bytes(::google::protobuf::int64 value);

  // optional int64 total_parameters = 8;
  bool has_total_parameters() const;
  void clear_total_parameters();
  static const int kTotalParametersFieldNumber = 8;
  ::google::protobuf::int64 total_parameters() const;
  void set_total_parameters(::google::protobuf::int64 value);

  // optional int64 total_float_ops = 14;
  bool has_total_float_ops() const;
  void clear_total_float_ops();
  static const int kTotalFloatOpsFieldNumber = 14;
  ::google::protobuf::int64 total_float_ops() const;
  void set_total_float_ops(::google::protobuf::int64 value);

  // optional int64 total_inputs = 9;
  bool has_total_inputs() const;
  void clear_total_inputs();
  static const int kTotalInputsFieldNumber = 9;
  ::google::protobuf::int64 total_inputs() const;
  void set_total_inputs(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.tfprof.TFProfNode)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tensor_value();
  void clear_has_tensor_value();
  void set_has_exec_micros();
  void clear_has_exec_micros();
  void set_has_requested_bytes();
  void clear_has_requested_bytes();
  void set_has_parameters();
  void clear_has_parameters();
  void set_has_float_ops();
  void clear_has_float_ops();
  void set_has_inputs();
  void clear_has_inputs();
  void set_has_device();
  void clear_has_device();
  void set_has_total_exec_micros();
  void clear_has_total_exec_micros();
  void set_has_total_requested_bytes();
  void clear_has_total_requested_bytes();
  void set_has_total_parameters();
  void clear_has_total_parameters();
  void set_has_total_float_ops();
  void clear_has_total_float_ops();
  void set_has_total_inputs();
  void clear_has_total_inputs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > shapes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode > children_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::tensorflow::tfprof::TFProfTensorProto* tensor_value_;
  ::google::protobuf::int64 exec_micros_;
  ::google::protobuf::int64 requested_bytes_;
  ::google::protobuf::int64 parameters_;
  ::google::protobuf::int64 float_ops_;
  ::google::protobuf::int64 inputs_;
  ::google::protobuf::int64 total_exec_micros_;
  ::google::protobuf::int64 total_requested_bytes_;
  ::google::protobuf::int64 total_parameters_;
  ::google::protobuf::int64 total_float_ops_;
  ::google::protobuf::int64 total_inputs_;
  friend struct  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TFProfTensorProto

// optional .tensorflow.DataType dtype = 1;
inline bool TFProfTensorProto::has_dtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFProfTensorProto::set_has_dtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFProfTensorProto::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFProfTensorProto::clear_dtype() {
  dtype_ = 0;
  clear_has_dtype();
}
inline ::tensorflow::DataType TFProfTensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void TFProfTensorProto::set_dtype(::tensorflow::DataType value) {
  assert(::tensorflow::DataType_IsValid(value));
  set_has_dtype();
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.dtype)
}

// repeated double value_double = 2;
inline int TFProfTensorProto::value_double_size() const {
  return value_double_.size();
}
inline void TFProfTensorProto::clear_value_double() {
  value_double_.Clear();
}
inline double TFProfTensorProto::value_double(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_.Get(index);
}
inline void TFProfTensorProto::set_value_double(int index, double value) {
  value_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_double)
}
inline void TFProfTensorProto::add_value_double(double value) {
  value_double_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_double)
}
inline const ::google::protobuf::RepeatedField< double >&
TFProfTensorProto::value_double() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_;
}
inline ::google::protobuf::RepeatedField< double >*
TFProfTensorProto::mutable_value_double() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return &value_double_;
}

// repeated int64 value_int64 = 3;
inline int TFProfTensorProto::value_int64_size() const {
  return value_int64_.size();
}
inline void TFProfTensorProto::clear_value_int64() {
  value_int64_.Clear();
}
inline ::google::protobuf::int64 TFProfTensorProto::value_int64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_.Get(index);
}
inline void TFProfTensorProto::set_value_int64(int index, ::google::protobuf::int64 value) {
  value_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
inline void TFProfTensorProto::add_value_int64(::google::protobuf::int64 value) {
  value_int64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TFProfTensorProto::value_int64() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TFProfTensorProto::mutable_value_int64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return &value_int64_;
}

// repeated string value_str = 4;
inline int TFProfTensorProto::value_str_size() const {
  return value_str_.size();
}
inline void TFProfTensorProto::clear_value_str() {
  value_str_.Clear();
}
inline const ::std::string& TFProfTensorProto::value_str(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Get(index);
}
inline ::std::string* TFProfTensorProto::mutable_value_str(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Mutable(index);
}
inline void TFProfTensorProto::set_value_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_str)
  value_str_.Mutable(index)->assign(value);
}
inline void TFProfTensorProto::set_value_str(int index, const char* value) {
  value_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
inline void TFProfTensorProto::set_value_str(int index, const char* value, size_t size) {
  value_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
inline ::std::string* TFProfTensorProto::add_value_str() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Add();
}
inline void TFProfTensorProto::add_value_str(const ::std::string& value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_str)
}
inline void TFProfTensorProto::add_value_str(const char* value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
inline void TFProfTensorProto::add_value_str(const char* value, size_t size) {
  value_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFProfTensorProto::value_str() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TFProfTensorProto::mutable_value_str() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return &value_str_;
}

// -------------------------------------------------------------------

// TFProfNode

// optional string name = 1;
inline bool TFProfNode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFProfNode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFProfNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFProfNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TFProfNode::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.name)
  return name_.GetNoArena();
}
inline void TFProfNode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.name)
}
#if LANG_CXX11
inline void TFProfNode::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.TFProfNode.name)
}
#endif
inline void TFProfNode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfNode.name)
}
inline void TFProfNode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfNode.name)
}
inline ::std::string* TFProfNode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFProfNode::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFProfNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.name)
}

// optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
inline bool TFProfNode::has_tensor_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFProfNode::set_has_tensor_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFProfNode::clear_has_tensor_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFProfNode::clear_tensor_value() {
  if (tensor_value_ != NULL) tensor_value_->::tensorflow::tfprof::TFProfTensorProto::Clear();
  clear_has_tensor_value();
}
inline const ::tensorflow::tfprof::TFProfTensorProto& TFProfNode::tensor_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.tensor_value)
  return tensor_value_ != NULL ? *tensor_value_
                         : *::tensorflow::tfprof::TFProfTensorProto::internal_default_instance();
}
inline ::tensorflow::tfprof::TFProfTensorProto* TFProfNode::mutable_tensor_value() {
  set_has_tensor_value();
  if (tensor_value_ == NULL) {
    tensor_value_ = new ::tensorflow::tfprof::TFProfTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.tensor_value)
  return tensor_value_;
}
inline ::tensorflow::tfprof::TFProfTensorProto* TFProfNode::release_tensor_value() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.tensor_value)
  clear_has_tensor_value();
  ::tensorflow::tfprof::TFProfTensorProto* temp = tensor_value_;
  tensor_value_ = NULL;
  return temp;
}
inline void TFProfNode::set_allocated_tensor_value(::tensorflow::tfprof::TFProfTensorProto* tensor_value) {
  delete tensor_value_;
  tensor_value_ = tensor_value;
  if (tensor_value) {
    set_has_tensor_value();
  } else {
    clear_has_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.tensor_value)
}

// optional int64 exec_micros = 2;
inline bool TFProfNode::has_exec_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFProfNode::set_has_exec_micros() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFProfNode::clear_has_exec_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFProfNode::clear_exec_micros() {
  exec_micros_ = GOOGLE_LONGLONG(0);
  clear_has_exec_micros();
}
inline ::google::protobuf::int64 TFProfNode::exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.exec_micros)
  return exec_micros_;
}
inline void TFProfNode::set_exec_micros(::google::protobuf::int64 value) {
  set_has_exec_micros();
  exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.exec_micros)
}

// optional int64 requested_bytes = 3;
inline bool TFProfNode::has_requested_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TFProfNode::set_has_requested_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TFProfNode::clear_has_requested_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TFProfNode::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_requested_bytes();
}
inline ::google::protobuf::int64 TFProfNode::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.requested_bytes)
  return requested_bytes_;
}
inline void TFProfNode::set_requested_bytes(::google::protobuf::int64 value) {
  set_has_requested_bytes();
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.requested_bytes)
}

// optional int64 parameters = 4;
inline bool TFProfNode::has_parameters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TFProfNode::set_has_parameters() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TFProfNode::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TFProfNode::clear_parameters() {
  parameters_ = GOOGLE_LONGLONG(0);
  clear_has_parameters();
}
inline ::google::protobuf::int64 TFProfNode::parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.parameters)
  return parameters_;
}
inline void TFProfNode::set_parameters(::google::protobuf::int64 value) {
  set_has_parameters();
  parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.parameters)
}

// optional int64 float_ops = 13;
inline bool TFProfNode::has_float_ops() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TFProfNode::set_has_float_ops() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TFProfNode::clear_has_float_ops() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TFProfNode::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_float_ops();
}
inline ::google::protobuf::int64 TFProfNode::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.float_ops)
  return float_ops_;
}
inline void TFProfNode::set_float_ops(::google::protobuf::int64 value) {
  set_has_float_ops();
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.float_ops)
}

// optional int64 inputs = 5;
inline bool TFProfNode::has_inputs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TFProfNode::set_has_inputs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TFProfNode::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TFProfNode::clear_inputs() {
  inputs_ = GOOGLE_LONGLONG(0);
  clear_has_inputs();
}
inline ::google::protobuf::int64 TFProfNode::inputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.inputs)
  return inputs_;
}
inline void TFProfNode::set_inputs(::google::protobuf::int64 value) {
  set_has_inputs();
  inputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.inputs)
}

// optional string device = 10;
inline bool TFProfNode::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFProfNode::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFProfNode::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFProfNode::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
inline const ::std::string& TFProfNode::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.device)
  return device_.GetNoArena();
}
inline void TFProfNode::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.device)
}
#if LANG_CXX11
inline void TFProfNode::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.TFProfNode.device)
}
#endif
inline void TFProfNode::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfNode.device)
}
inline void TFProfNode::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfNode.device)
}
inline ::std::string* TFProfNode::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFProfNode::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFProfNode::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.device)
}

// optional int64 total_exec_micros = 6;
inline bool TFProfNode::has_total_exec_micros() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TFProfNode::set_has_total_exec_micros() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TFProfNode::clear_has_total_exec_micros() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TFProfNode::clear_total_exec_micros() {
  total_exec_micros_ = GOOGLE_LONGLONG(0);
  clear_has_total_exec_micros();
}
inline ::google::protobuf::int64 TFProfNode::total_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_exec_micros)
  return total_exec_micros_;
}
inline void TFProfNode::set_total_exec_micros(::google::protobuf::int64 value) {
  set_has_total_exec_micros();
  total_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_exec_micros)
}

// optional int64 total_requested_bytes = 7;
inline bool TFProfNode::has_total_requested_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TFProfNode::set_has_total_requested_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TFProfNode::clear_has_total_requested_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TFProfNode::clear_total_requested_bytes() {
  total_requested_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_total_requested_bytes();
}
inline ::google::protobuf::int64 TFProfNode::total_requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_requested_bytes)
  return total_requested_bytes_;
}
inline void TFProfNode::set_total_requested_bytes(::google::protobuf::int64 value) {
  set_has_total_requested_bytes();
  total_requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_requested_bytes)
}

// optional int64 total_parameters = 8;
inline bool TFProfNode::has_total_parameters() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TFProfNode::set_has_total_parameters() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TFProfNode::clear_has_total_parameters() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TFProfNode::clear_total_parameters() {
  total_parameters_ = GOOGLE_LONGLONG(0);
  clear_has_total_parameters();
}
inline ::google::protobuf::int64 TFProfNode::total_parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_parameters)
  return total_parameters_;
}
inline void TFProfNode::set_total_parameters(::google::protobuf::int64 value) {
  set_has_total_parameters();
  total_parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_parameters)
}

// optional int64 total_float_ops = 14;
inline bool TFProfNode::has_total_float_ops() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TFProfNode::set_has_total_float_ops() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TFProfNode::clear_has_total_float_ops() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TFProfNode::clear_total_float_ops() {
  total_float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_total_float_ops();
}
inline ::google::protobuf::int64 TFProfNode::total_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_float_ops)
  return total_float_ops_;
}
inline void TFProfNode::set_total_float_ops(::google::protobuf::int64 value) {
  set_has_total_float_ops();
  total_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_float_ops)
}

// optional int64 total_inputs = 9;
inline bool TFProfNode::has_total_inputs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TFProfNode::set_has_total_inputs() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TFProfNode::clear_has_total_inputs() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TFProfNode::clear_total_inputs() {
  total_inputs_ = GOOGLE_LONGLONG(0);
  clear_has_total_inputs();
}
inline ::google::protobuf::int64 TFProfNode::total_inputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_inputs)
  return total_inputs_;
}
inline void TFProfNode::set_total_inputs(::google::protobuf::int64 value) {
  set_has_total_inputs();
  total_inputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_inputs)
}

// repeated .tensorflow.TensorShapeProto shapes = 11;
inline int TFProfNode::shapes_size() const {
  return shapes_.size();
}
inline void TFProfNode::clear_shapes() {
  shapes_.Clear();
}
inline const ::tensorflow::TensorShapeProto& TFProfNode::shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Get(index);
}
inline ::tensorflow::TensorShapeProto* TFProfNode::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Mutable(index);
}
inline ::tensorflow::TensorShapeProto* TFProfNode::add_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TFProfNode::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfNode.shapes)
  return &shapes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TFProfNode::shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_;
}

// repeated .tensorflow.tfprof.TFProfNode children = 12;
inline int TFProfNode::children_size() const {
  return children_.size();
}
inline void TFProfNode::clear_children() {
  children_.Clear();
}
inline const ::tensorflow::tfprof::TFProfNode& TFProfNode::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.children)
  return children_.Get(index);
}
inline ::tensorflow::tfprof::TFProfNode* TFProfNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.children)
  return children_.Mutable(index);
}
inline ::tensorflow::tfprof::TFProfNode* TFProfNode::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfNode.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >*
TFProfNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfNode.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >&
TFProfNode::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfNode.children)
  return children_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto__INCLUDED
