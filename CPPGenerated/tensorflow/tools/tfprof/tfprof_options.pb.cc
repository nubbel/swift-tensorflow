// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/tfprof/tfprof_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/tools/tfprof/tfprof_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {
class OptionsProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OptionsProto> {
} _OptionsProto_default_instance_;

namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, max_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, min_float_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, device_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, order_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, account_type_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, start_name_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, trim_name_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, show_name_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, hide_name_regexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, account_displayed_op_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, viz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsProto, dump_to_file_),
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  8,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 20, sizeof(OptionsProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OptionsProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/tools/tfprof/tfprof_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _OptionsProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OptionsProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,tensorflow/tools/tfprof/tfprof_options"
      ".proto\022\021tensorflow.tfprof\"\376\002\n\014OptionsPro"
      "to\022\021\n\tmax_depth\030\001 \001(\003\022\021\n\tmin_bytes\030\002 \001(\003"
      "\022\022\n\nmin_micros\030\003 \001(\003\022\022\n\nmin_params\030\004 \001(\003"
      "\022\025\n\rmin_float_ops\030\005 \001(\003\022\026\n\016device_regexe"
      "s\030\006 \003(\t\022\020\n\010order_by\030\007 \001(\t\022\034\n\024account_typ"
      "e_regexes\030\010 \003(\t\022\032\n\022start_name_regexes\030\t "
      "\003(\t\022\031\n\021trim_name_regexes\030\n \003(\t\022\031\n\021show_n"
      "ame_regexes\030\013 \003(\t\022\031\n\021hide_name_regexes\030\014"
      " \003(\t\022!\n\031account_displayed_op_only\030\r \001(\010\022"
      "\016\n\006select\030\016 \003(\t\022\013\n\003viz\030\017 \001(\010\022\024\n\014dump_to_"
      "file\030\020 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/tools/tfprof/tfprof_options.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionsProto::kMaxDepthFieldNumber;
const int OptionsProto::kMinBytesFieldNumber;
const int OptionsProto::kMinMicrosFieldNumber;
const int OptionsProto::kMinParamsFieldNumber;
const int OptionsProto::kMinFloatOpsFieldNumber;
const int OptionsProto::kDeviceRegexesFieldNumber;
const int OptionsProto::kOrderByFieldNumber;
const int OptionsProto::kAccountTypeRegexesFieldNumber;
const int OptionsProto::kStartNameRegexesFieldNumber;
const int OptionsProto::kTrimNameRegexesFieldNumber;
const int OptionsProto::kShowNameRegexesFieldNumber;
const int OptionsProto::kHideNameRegexesFieldNumber;
const int OptionsProto::kAccountDisplayedOpOnlyFieldNumber;
const int OptionsProto::kSelectFieldNumber;
const int OptionsProto::kVizFieldNumber;
const int OptionsProto::kDumpToFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionsProto::OptionsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OptionsProto)
}
OptionsProto::OptionsProto(const OptionsProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      device_regexes_(from.device_regexes_),
      account_type_regexes_(from.account_type_regexes_),
      start_name_regexes_(from.start_name_regexes_),
      trim_name_regexes_(from.trim_name_regexes_),
      show_name_regexes_(from.show_name_regexes_),
      hide_name_regexes_(from.hide_name_regexes_),
      select_(from.select_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_by()) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  dump_to_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dump_to_file()) {
    dump_to_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_to_file_);
  }
  ::memcpy(&max_depth_, &from.max_depth_,
    reinterpret_cast<char*>(&viz_) -
    reinterpret_cast<char*>(&max_depth_) + sizeof(viz_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OptionsProto)
}

void OptionsProto::SharedCtor() {
  _cached_size_ = 0;
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_depth_, 0, reinterpret_cast<char*>(&viz_) -
    reinterpret_cast<char*>(&max_depth_) + sizeof(viz_));
}

OptionsProto::~OptionsProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OptionsProto)
  SharedDtor();
}

void OptionsProto::SharedDtor() {
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionsProto::descriptor() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::file_level_metadata[0].descriptor;
}

const OptionsProto& OptionsProto::default_instance() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

OptionsProto* OptionsProto::New(::google::protobuf::Arena* arena) const {
  OptionsProto* n = new OptionsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OptionsProto)
  device_regexes_.Clear();
  account_type_regexes_.Clear();
  start_name_regexes_.Clear();
  trim_name_regexes_.Clear();
  show_name_regexes_.Clear();
  hide_name_regexes_.Clear();
  select_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_order_by()) {
      GOOGLE_DCHECK(!order_by_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_by_.UnsafeRawStringPointer())->clear();
    }
    if (has_dump_to_file()) {
      GOOGLE_DCHECK(!dump_to_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dump_to_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&max_depth_, 0, reinterpret_cast<char*>(&account_displayed_op_only_) -
      reinterpret_cast<char*>(&max_depth_) + sizeof(account_displayed_op_only_));
  }
  viz_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OptionsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_depth = 1;
      case 1: {
        if (tag == 8u) {
          set_has_max_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_bytes = 2;
      case 2: {
        if (tag == 16u) {
          set_has_min_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_micros = 3;
      case 3: {
        if (tag == 24u) {
          set_has_min_micros();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_params = 4;
      case 4: {
        if (tag == 32u) {
          set_has_min_params();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_params_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_float_ops = 5;
      case 5: {
        if (tag == 40u) {
          set_has_min_float_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_float_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_regexes = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_regexes(this->device_regexes_size() - 1).data(),
            this->device_regexes(this->device_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.device_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_by = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_by().data(), this->order_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.order_by");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string account_type_regexes = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account_type_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_type_regexes(this->account_type_regexes_size() - 1).data(),
            this->account_type_regexes(this->account_type_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.account_type_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string start_name_regexes = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_start_name_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_name_regexes(this->start_name_regexes_size() - 1).data(),
            this->start_name_regexes(this->start_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.start_name_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string trim_name_regexes = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trim_name_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trim_name_regexes(this->trim_name_regexes_size() - 1).data(),
            this->trim_name_regexes(this->trim_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.trim_name_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string show_name_regexes = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show_name_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_name_regexes(this->show_name_regexes_size() - 1).data(),
            this->show_name_regexes(this->show_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.show_name_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hide_name_regexes = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hide_name_regexes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hide_name_regexes(this->hide_name_regexes_size() - 1).data(),
            this->hide_name_regexes(this->hide_name_regexes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.hide_name_regexes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool account_displayed_op_only = 13;
      case 13: {
        if (tag == 104u) {
          set_has_account_displayed_op_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_displayed_op_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string select = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_select()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->select(this->select_size() - 1).data(),
            this->select(this->select_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.select");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool viz = 15;
      case 15: {
        if (tag == 120u) {
          set_has_viz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dump_to_file = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_to_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dump_to_file().data(), this->dump_to_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.OptionsProto.dump_to_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OptionsProto)
  return false;
#undef DO_
}

void OptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OptionsProto)
  // optional int64 max_depth = 1;
  if (has_max_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_depth(), output);
  }

  // optional int64 min_bytes = 2;
  if (has_min_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min_bytes(), output);
  }

  // optional int64 min_micros = 3;
  if (has_min_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->min_micros(), output);
  }

  // optional int64 min_params = 4;
  if (has_min_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->min_params(), output);
  }

  // optional int64 min_float_ops = 5;
  if (has_min_float_ops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->min_float_ops(), output);
  }

  // repeated string device_regexes = 6;
  for (int i = 0; i < this->device_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_regexes(i).data(), this->device_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.device_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->device_regexes(i), output);
  }

  // optional string order_by = 7;
  if (has_order_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_by(), output);
  }

  // repeated string account_type_regexes = 8;
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_type_regexes(i).data(), this->account_type_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.account_type_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->account_type_regexes(i), output);
  }

  // repeated string start_name_regexes = 9;
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_name_regexes(i).data(), this->start_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.start_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->start_name_regexes(i), output);
  }

  // repeated string trim_name_regexes = 10;
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trim_name_regexes(i).data(), this->trim_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.trim_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->trim_name_regexes(i), output);
  }

  // repeated string show_name_regexes = 11;
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_name_regexes(i).data(), this->show_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.show_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->show_name_regexes(i), output);
  }

  // repeated string hide_name_regexes = 12;
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hide_name_regexes(i).data(), this->hide_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.hide_name_regexes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->hide_name_regexes(i), output);
  }

  // optional bool account_displayed_op_only = 13;
  if (has_account_displayed_op_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->account_displayed_op_only(), output);
  }

  // repeated string select = 14;
  for (int i = 0; i < this->select_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->select(i).data(), this->select(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.select");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->select(i), output);
  }

  // optional bool viz = 15;
  if (has_viz()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->viz(), output);
  }

  // optional string dump_to_file = 16;
  if (has_dump_to_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_to_file().data(), this->dump_to_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.dump_to_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->dump_to_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OptionsProto)
}

::google::protobuf::uint8* OptionsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OptionsProto)
  // optional int64 max_depth = 1;
  if (has_max_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_depth(), target);
  }

  // optional int64 min_bytes = 2;
  if (has_min_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min_bytes(), target);
  }

  // optional int64 min_micros = 3;
  if (has_min_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->min_micros(), target);
  }

  // optional int64 min_params = 4;
  if (has_min_params()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->min_params(), target);
  }

  // optional int64 min_float_ops = 5;
  if (has_min_float_ops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->min_float_ops(), target);
  }

  // repeated string device_regexes = 6;
  for (int i = 0; i < this->device_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_regexes(i).data(), this->device_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.device_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->device_regexes(i), target);
  }

  // optional string order_by = 7;
  if (has_order_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_by(), target);
  }

  // repeated string account_type_regexes = 8;
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_type_regexes(i).data(), this->account_type_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.account_type_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->account_type_regexes(i), target);
  }

  // repeated string start_name_regexes = 9;
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_name_regexes(i).data(), this->start_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.start_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->start_name_regexes(i), target);
  }

  // repeated string trim_name_regexes = 10;
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trim_name_regexes(i).data(), this->trim_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.trim_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->trim_name_regexes(i), target);
  }

  // repeated string show_name_regexes = 11;
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_name_regexes(i).data(), this->show_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.show_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->show_name_regexes(i), target);
  }

  // repeated string hide_name_regexes = 12;
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hide_name_regexes(i).data(), this->hide_name_regexes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.hide_name_regexes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->hide_name_regexes(i), target);
  }

  // optional bool account_displayed_op_only = 13;
  if (has_account_displayed_op_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->account_displayed_op_only(), target);
  }

  // repeated string select = 14;
  for (int i = 0; i < this->select_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->select(i).data(), this->select(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.select");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->select(i), target);
  }

  // optional bool viz = 15;
  if (has_viz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->viz(), target);
  }

  // optional string dump_to_file = 16;
  if (has_dump_to_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_to_file().data(), this->dump_to_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.dump_to_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dump_to_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OptionsProto)
  return target;
}

size_t OptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OptionsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string device_regexes = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->device_regexes_size());
  for (int i = 0; i < this->device_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_regexes(i));
  }

  // repeated string account_type_regexes = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->account_type_regexes_size());
  for (int i = 0; i < this->account_type_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account_type_regexes(i));
  }

  // repeated string start_name_regexes = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->start_name_regexes_size());
  for (int i = 0; i < this->start_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->start_name_regexes(i));
  }

  // repeated string trim_name_regexes = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trim_name_regexes_size());
  for (int i = 0; i < this->trim_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trim_name_regexes(i));
  }

  // repeated string show_name_regexes = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->show_name_regexes_size());
  for (int i = 0; i < this->show_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show_name_regexes(i));
  }

  // repeated string hide_name_regexes = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hide_name_regexes_size());
  for (int i = 0; i < this->hide_name_regexes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hide_name_regexes(i));
  }

  // repeated string select = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->select_size());
  for (int i = 0; i < this->select_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->select(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string order_by = 7;
    if (has_order_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_by());
    }

    // optional string dump_to_file = 16;
    if (has_dump_to_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_to_file());
    }

    // optional int64 max_depth = 1;
    if (has_max_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_depth());
    }

    // optional int64 min_bytes = 2;
    if (has_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_bytes());
    }

    // optional int64 min_micros = 3;
    if (has_min_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_micros());
    }

    // optional int64 min_params = 4;
    if (has_min_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_params());
    }

    // optional int64 min_float_ops = 5;
    if (has_min_float_ops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_float_ops());
    }

    // optional bool account_displayed_op_only = 13;
    if (has_account_displayed_op_only()) {
      total_size += 1 + 1;
    }

  }
  // optional bool viz = 15;
  if (has_viz()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionsProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OptionsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OptionsProto)
    MergeFrom(*source);
  }
}

void OptionsProto::MergeFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_regexes_.MergeFrom(from.device_regexes_);
  account_type_regexes_.MergeFrom(from.account_type_regexes_);
  start_name_regexes_.MergeFrom(from.start_name_regexes_);
  trim_name_regexes_.MergeFrom(from.trim_name_regexes_);
  show_name_regexes_.MergeFrom(from.show_name_regexes_);
  hide_name_regexes_.MergeFrom(from.hide_name_regexes_);
  select_.MergeFrom(from.select_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_order_by()) {
      set_has_order_by();
      order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
    }
    if (from.has_dump_to_file()) {
      set_has_dump_to_file();
      dump_to_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_to_file_);
    }
    if (from.has_max_depth()) {
      set_max_depth(from.max_depth());
    }
    if (from.has_min_bytes()) {
      set_min_bytes(from.min_bytes());
    }
    if (from.has_min_micros()) {
      set_min_micros(from.min_micros());
    }
    if (from.has_min_params()) {
      set_min_params(from.min_params());
    }
    if (from.has_min_float_ops()) {
      set_min_float_ops(from.min_float_ops());
    }
    if (from.has_account_displayed_op_only()) {
      set_account_displayed_op_only(from.account_displayed_op_only());
    }
  }
  if (from.has_viz()) {
    set_viz(from.viz());
  }
}

void OptionsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsProto::CopyFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsProto::IsInitialized() const {
  return true;
}

void OptionsProto::Swap(OptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionsProto::InternalSwap(OptionsProto* other) {
  device_regexes_.UnsafeArenaSwap(&other->device_regexes_);
  account_type_regexes_.UnsafeArenaSwap(&other->account_type_regexes_);
  start_name_regexes_.UnsafeArenaSwap(&other->start_name_regexes_);
  trim_name_regexes_.UnsafeArenaSwap(&other->trim_name_regexes_);
  show_name_regexes_.UnsafeArenaSwap(&other->show_name_regexes_);
  hide_name_regexes_.UnsafeArenaSwap(&other->hide_name_regexes_);
  select_.UnsafeArenaSwap(&other->select_);
  order_by_.Swap(&other->order_by_);
  dump_to_file_.Swap(&other->dump_to_file_);
  std::swap(max_depth_, other->max_depth_);
  std::swap(min_bytes_, other->min_bytes_);
  std::swap(min_micros_, other->min_micros_);
  std::swap(min_params_, other->min_params_);
  std::swap(min_float_ops_, other->min_float_ops_);
  std::swap(account_displayed_op_only_, other->account_displayed_op_only_);
  std::swap(viz_, other->viz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionsProto::GetMetadata() const {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionsProto

// optional int64 max_depth = 1;
bool OptionsProto::has_max_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OptionsProto::set_has_max_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void OptionsProto::clear_has_max_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void OptionsProto::clear_max_depth() {
  max_depth_ = GOOGLE_LONGLONG(0);
  clear_has_max_depth();
}
::google::protobuf::int64 OptionsProto::max_depth() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.max_depth)
  return max_depth_;
}
void OptionsProto::set_max_depth(::google::protobuf::int64 value) {
  set_has_max_depth();
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.max_depth)
}

// optional int64 min_bytes = 2;
bool OptionsProto::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OptionsProto::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void OptionsProto::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void OptionsProto::clear_min_bytes() {
  min_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_min_bytes();
}
::google::protobuf::int64 OptionsProto::min_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_bytes)
  return min_bytes_;
}
void OptionsProto::set_min_bytes(::google::protobuf::int64 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_bytes)
}

// optional int64 min_micros = 3;
bool OptionsProto::has_min_micros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OptionsProto::set_has_min_micros() {
  _has_bits_[0] |= 0x00000010u;
}
void OptionsProto::clear_has_min_micros() {
  _has_bits_[0] &= ~0x00000010u;
}
void OptionsProto::clear_min_micros() {
  min_micros_ = GOOGLE_LONGLONG(0);
  clear_has_min_micros();
}
::google::protobuf::int64 OptionsProto::min_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_micros)
  return min_micros_;
}
void OptionsProto::set_min_micros(::google::protobuf::int64 value) {
  set_has_min_micros();
  min_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_micros)
}

// optional int64 min_params = 4;
bool OptionsProto::has_min_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OptionsProto::set_has_min_params() {
  _has_bits_[0] |= 0x00000020u;
}
void OptionsProto::clear_has_min_params() {
  _has_bits_[0] &= ~0x00000020u;
}
void OptionsProto::clear_min_params() {
  min_params_ = GOOGLE_LONGLONG(0);
  clear_has_min_params();
}
::google::protobuf::int64 OptionsProto::min_params() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_params)
  return min_params_;
}
void OptionsProto::set_min_params(::google::protobuf::int64 value) {
  set_has_min_params();
  min_params_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_params)
}

// optional int64 min_float_ops = 5;
bool OptionsProto::has_min_float_ops() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OptionsProto::set_has_min_float_ops() {
  _has_bits_[0] |= 0x00000040u;
}
void OptionsProto::clear_has_min_float_ops() {
  _has_bits_[0] &= ~0x00000040u;
}
void OptionsProto::clear_min_float_ops() {
  min_float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_min_float_ops();
}
::google::protobuf::int64 OptionsProto::min_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_float_ops)
  return min_float_ops_;
}
void OptionsProto::set_min_float_ops(::google::protobuf::int64 value) {
  set_has_min_float_ops();
  min_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_float_ops)
}

// repeated string device_regexes = 6;
int OptionsProto::device_regexes_size() const {
  return device_regexes_.size();
}
void OptionsProto::clear_device_regexes() {
  device_regexes_.Clear();
}
const ::std::string& OptionsProto::device_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_device_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Mutable(index);
}
void OptionsProto::set_device_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.device_regexes)
  device_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_device_regexes(int index, const char* value) {
  device_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.device_regexes)
}
void OptionsProto::set_device_regexes(int index, const char* value, size_t size) {
  device_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.device_regexes)
}
::std::string* OptionsProto::add_device_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Add();
}
void OptionsProto::add_device_regexes(const ::std::string& value) {
  device_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.device_regexes)
}
void OptionsProto::add_device_regexes(const char* value) {
  device_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.device_regexes)
}
void OptionsProto::add_device_regexes(const char* value, size_t size) {
  device_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.device_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::device_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_device_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.device_regexes)
  return &device_regexes_;
}

// optional string order_by = 7;
bool OptionsProto::has_order_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptionsProto::set_has_order_by() {
  _has_bits_[0] |= 0x00000001u;
}
void OptionsProto::clear_has_order_by() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptionsProto::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_by();
}
const ::std::string& OptionsProto::order_by() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.GetNoArena();
}
void OptionsProto::set_order_by(const ::std::string& value) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.order_by)
}
#if LANG_CXX11
void OptionsProto::set_order_by(::std::string&& value) {
  set_has_order_by();
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.OptionsProto.order_by)
}
#endif
void OptionsProto::set_order_by(const char* value) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.order_by)
}
void OptionsProto::set_order_by(const char* value, size_t size) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.order_by)
}
::std::string* OptionsProto::mutable_order_by() {
  set_has_order_by();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionsProto::release_order_by() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.order_by)
  clear_has_order_by();
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    set_has_order_by();
  } else {
    clear_has_order_by();
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.order_by)
}

// repeated string account_type_regexes = 8;
int OptionsProto::account_type_regexes_size() const {
  return account_type_regexes_.size();
}
void OptionsProto::clear_account_type_regexes() {
  account_type_regexes_.Clear();
}
const ::std::string& OptionsProto::account_type_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_account_type_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Mutable(index);
}
void OptionsProto::set_account_type_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_type_regexes)
  account_type_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_account_type_regexes(int index, const char* value) {
  account_type_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::set_account_type_regexes(int index, const char* value, size_t size) {
  account_type_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
::std::string* OptionsProto::add_account_type_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Add();
}
void OptionsProto::add_account_type_regexes(const ::std::string& value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::add_account_type_regexes(const char* value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
void OptionsProto::add_account_type_regexes(const char* value, size_t size) {
  account_type_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::account_type_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_account_type_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return &account_type_regexes_;
}

// repeated string start_name_regexes = 9;
int OptionsProto::start_name_regexes_size() const {
  return start_name_regexes_.size();
}
void OptionsProto::clear_start_name_regexes() {
  start_name_regexes_.Clear();
}
const ::std::string& OptionsProto::start_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_start_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Mutable(index);
}
void OptionsProto::set_start_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.start_name_regexes)
  start_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_start_name_regexes(int index, const char* value) {
  start_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::set_start_name_regexes(int index, const char* value, size_t size) {
  start_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
::std::string* OptionsProto::add_start_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Add();
}
void OptionsProto::add_start_name_regexes(const ::std::string& value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::add_start_name_regexes(const char* value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
void OptionsProto::add_start_name_regexes(const char* value, size_t size) {
  start_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::start_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_start_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return &start_name_regexes_;
}

// repeated string trim_name_regexes = 10;
int OptionsProto::trim_name_regexes_size() const {
  return trim_name_regexes_.size();
}
void OptionsProto::clear_trim_name_regexes() {
  trim_name_regexes_.Clear();
}
const ::std::string& OptionsProto::trim_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_trim_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Mutable(index);
}
void OptionsProto::set_trim_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  trim_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_trim_name_regexes(int index, const char* value) {
  trim_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::set_trim_name_regexes(int index, const char* value, size_t size) {
  trim_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
::std::string* OptionsProto::add_trim_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Add();
}
void OptionsProto::add_trim_name_regexes(const ::std::string& value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::add_trim_name_regexes(const char* value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
void OptionsProto::add_trim_name_regexes(const char* value, size_t size) {
  trim_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::trim_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_trim_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return &trim_name_regexes_;
}

// repeated string show_name_regexes = 11;
int OptionsProto::show_name_regexes_size() const {
  return show_name_regexes_.size();
}
void OptionsProto::clear_show_name_regexes() {
  show_name_regexes_.Clear();
}
const ::std::string& OptionsProto::show_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_show_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Mutable(index);
}
void OptionsProto::set_show_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.show_name_regexes)
  show_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_show_name_regexes(int index, const char* value) {
  show_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::set_show_name_regexes(int index, const char* value, size_t size) {
  show_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
::std::string* OptionsProto::add_show_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Add();
}
void OptionsProto::add_show_name_regexes(const ::std::string& value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::add_show_name_regexes(const char* value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
void OptionsProto::add_show_name_regexes(const char* value, size_t size) {
  show_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::show_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_show_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return &show_name_regexes_;
}

// repeated string hide_name_regexes = 12;
int OptionsProto::hide_name_regexes_size() const {
  return hide_name_regexes_.size();
}
void OptionsProto::clear_hide_name_regexes() {
  hide_name_regexes_.Clear();
}
const ::std::string& OptionsProto::hide_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Get(index);
}
::std::string* OptionsProto::mutable_hide_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Mutable(index);
}
void OptionsProto::set_hide_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  hide_name_regexes_.Mutable(index)->assign(value);
}
void OptionsProto::set_hide_name_regexes(int index, const char* value) {
  hide_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::set_hide_name_regexes(int index, const char* value, size_t size) {
  hide_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
::std::string* OptionsProto::add_hide_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Add();
}
void OptionsProto::add_hide_name_regexes(const ::std::string& value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::add_hide_name_regexes(const char* value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
void OptionsProto::add_hide_name_regexes(const char* value, size_t size) {
  hide_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::hide_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_hide_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return &hide_name_regexes_;
}

// optional bool account_displayed_op_only = 13;
bool OptionsProto::has_account_displayed_op_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OptionsProto::set_has_account_displayed_op_only() {
  _has_bits_[0] |= 0x00000080u;
}
void OptionsProto::clear_has_account_displayed_op_only() {
  _has_bits_[0] &= ~0x00000080u;
}
void OptionsProto::clear_account_displayed_op_only() {
  account_displayed_op_only_ = false;
  clear_has_account_displayed_op_only();
}
bool OptionsProto::account_displayed_op_only() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
  return account_displayed_op_only_;
}
void OptionsProto::set_account_displayed_op_only(bool value) {
  set_has_account_displayed_op_only();
  account_displayed_op_only_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
}

// repeated string select = 14;
int OptionsProto::select_size() const {
  return select_.size();
}
void OptionsProto::clear_select() {
  select_.Clear();
}
const ::std::string& OptionsProto::select(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.select)
  return select_.Get(index);
}
::std::string* OptionsProto::mutable_select(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Mutable(index);
}
void OptionsProto::set_select(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.select)
  select_.Mutable(index)->assign(value);
}
void OptionsProto::set_select(int index, const char* value) {
  select_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::set_select(int index, const char* value, size_t size) {
  select_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.select)
}
::std::string* OptionsProto::add_select() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Add();
}
void OptionsProto::add_select(const ::std::string& value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::add_select(const char* value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.select)
}
void OptionsProto::add_select(const char* value, size_t size) {
  select_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.select)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::select() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.select)
  return select_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_select() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.select)
  return &select_;
}

// optional bool viz = 15;
bool OptionsProto::has_viz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OptionsProto::set_has_viz() {
  _has_bits_[0] |= 0x00000100u;
}
void OptionsProto::clear_has_viz() {
  _has_bits_[0] &= ~0x00000100u;
}
void OptionsProto::clear_viz() {
  viz_ = false;
  clear_has_viz();
}
bool OptionsProto::viz() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.viz)
  return viz_;
}
void OptionsProto::set_viz(bool value) {
  set_has_viz();
  viz_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.viz)
}

// optional string dump_to_file = 16;
bool OptionsProto::has_dump_to_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptionsProto::set_has_dump_to_file() {
  _has_bits_[0] |= 0x00000002u;
}
void OptionsProto::clear_has_dump_to_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptionsProto::clear_dump_to_file() {
  dump_to_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_to_file();
}
const ::std::string& OptionsProto::dump_to_file() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.GetNoArena();
}
void OptionsProto::set_dump_to_file(const ::std::string& value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.dump_to_file)
}
#if LANG_CXX11
void OptionsProto::set_dump_to_file(::std::string&& value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.OptionsProto.dump_to_file)
}
#endif
void OptionsProto::set_dump_to_file(const char* value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.dump_to_file)
}
void OptionsProto::set_dump_to_file(const char* value, size_t size) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.dump_to_file)
}
::std::string* OptionsProto::mutable_dump_to_file() {
  set_has_dump_to_file();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionsProto::release_dump_to_file() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.dump_to_file)
  clear_has_dump_to_file();
  return dump_to_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionsProto::set_allocated_dump_to_file(::std::string* dump_to_file) {
  if (dump_to_file != NULL) {
    set_has_dump_to_file();
  } else {
    clear_has_dump_to_file();
  }
  dump_to_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_to_file);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.dump_to_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
