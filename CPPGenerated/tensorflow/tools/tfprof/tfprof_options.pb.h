// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/tfprof/tfprof_options.proto

#ifndef PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace tfprof {
class OptionsProto;
class OptionsProtoDefaultTypeInternal;
extern OptionsProtoDefaultTypeInternal _OptionsProto_default_instance_;
}  // namespace tfprof
}  // namespace tensorflow

namespace tensorflow {
namespace tfprof {

namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto

// ===================================================================

class OptionsProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tfprof.OptionsProto) */ {
 public:
  OptionsProto();
  virtual ~OptionsProto();

  OptionsProto(const OptionsProto& from);

  inline OptionsProto& operator=(const OptionsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionsProto& default_instance();

  static inline const OptionsProto* internal_default_instance() {
    return reinterpret_cast<const OptionsProto*>(
               &_OptionsProto_default_instance_);
  }

  void Swap(OptionsProto* other);

  // implements Message ----------------------------------------------

  inline OptionsProto* New() const PROTOBUF_FINAL { return New(NULL); }

  OptionsProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptionsProto& from);
  void MergeFrom(const OptionsProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string device_regexes = 6;
  int device_regexes_size() const;
  void clear_device_regexes();
  static const int kDeviceRegexesFieldNumber = 6;
  const ::std::string& device_regexes(int index) const;
  ::std::string* mutable_device_regexes(int index);
  void set_device_regexes(int index, const ::std::string& value);
  void set_device_regexes(int index, const char* value);
  void set_device_regexes(int index, const char* value, size_t size);
  ::std::string* add_device_regexes();
  void add_device_regexes(const ::std::string& value);
  void add_device_regexes(const char* value);
  void add_device_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_regexes();

  // repeated string account_type_regexes = 8;
  int account_type_regexes_size() const;
  void clear_account_type_regexes();
  static const int kAccountTypeRegexesFieldNumber = 8;
  const ::std::string& account_type_regexes(int index) const;
  ::std::string* mutable_account_type_regexes(int index);
  void set_account_type_regexes(int index, const ::std::string& value);
  void set_account_type_regexes(int index, const char* value);
  void set_account_type_regexes(int index, const char* value, size_t size);
  ::std::string* add_account_type_regexes();
  void add_account_type_regexes(const ::std::string& value);
  void add_account_type_regexes(const char* value);
  void add_account_type_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& account_type_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account_type_regexes();

  // repeated string start_name_regexes = 9;
  int start_name_regexes_size() const;
  void clear_start_name_regexes();
  static const int kStartNameRegexesFieldNumber = 9;
  const ::std::string& start_name_regexes(int index) const;
  ::std::string* mutable_start_name_regexes(int index);
  void set_start_name_regexes(int index, const ::std::string& value);
  void set_start_name_regexes(int index, const char* value);
  void set_start_name_regexes(int index, const char* value, size_t size);
  ::std::string* add_start_name_regexes();
  void add_start_name_regexes(const ::std::string& value);
  void add_start_name_regexes(const char* value);
  void add_start_name_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& start_name_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_start_name_regexes();

  // repeated string trim_name_regexes = 10;
  int trim_name_regexes_size() const;
  void clear_trim_name_regexes();
  static const int kTrimNameRegexesFieldNumber = 10;
  const ::std::string& trim_name_regexes(int index) const;
  ::std::string* mutable_trim_name_regexes(int index);
  void set_trim_name_regexes(int index, const ::std::string& value);
  void set_trim_name_regexes(int index, const char* value);
  void set_trim_name_regexes(int index, const char* value, size_t size);
  ::std::string* add_trim_name_regexes();
  void add_trim_name_regexes(const ::std::string& value);
  void add_trim_name_regexes(const char* value);
  void add_trim_name_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& trim_name_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trim_name_regexes();

  // repeated string show_name_regexes = 11;
  int show_name_regexes_size() const;
  void clear_show_name_regexes();
  static const int kShowNameRegexesFieldNumber = 11;
  const ::std::string& show_name_regexes(int index) const;
  ::std::string* mutable_show_name_regexes(int index);
  void set_show_name_regexes(int index, const ::std::string& value);
  void set_show_name_regexes(int index, const char* value);
  void set_show_name_regexes(int index, const char* value, size_t size);
  ::std::string* add_show_name_regexes();
  void add_show_name_regexes(const ::std::string& value);
  void add_show_name_regexes(const char* value);
  void add_show_name_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& show_name_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_show_name_regexes();

  // repeated string hide_name_regexes = 12;
  int hide_name_regexes_size() const;
  void clear_hide_name_regexes();
  static const int kHideNameRegexesFieldNumber = 12;
  const ::std::string& hide_name_regexes(int index) const;
  ::std::string* mutable_hide_name_regexes(int index);
  void set_hide_name_regexes(int index, const ::std::string& value);
  void set_hide_name_regexes(int index, const char* value);
  void set_hide_name_regexes(int index, const char* value, size_t size);
  ::std::string* add_hide_name_regexes();
  void add_hide_name_regexes(const ::std::string& value);
  void add_hide_name_regexes(const char* value);
  void add_hide_name_regexes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hide_name_regexes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hide_name_regexes();

  // repeated string select = 14;
  int select_size() const;
  void clear_select();
  static const int kSelectFieldNumber = 14;
  const ::std::string& select(int index) const;
  ::std::string* mutable_select(int index);
  void set_select(int index, const ::std::string& value);
  void set_select(int index, const char* value);
  void set_select(int index, const char* value, size_t size);
  ::std::string* add_select();
  void add_select(const ::std::string& value);
  void add_select(const char* value);
  void add_select(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& select() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_select();

  // optional string order_by = 7;
  bool has_order_by() const;
  void clear_order_by();
  static const int kOrderByFieldNumber = 7;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // optional string dump_to_file = 16;
  bool has_dump_to_file() const;
  void clear_dump_to_file();
  static const int kDumpToFileFieldNumber = 16;
  const ::std::string& dump_to_file() const;
  void set_dump_to_file(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_to_file(::std::string&& value);
  #endif
  void set_dump_to_file(const char* value);
  void set_dump_to_file(const char* value, size_t size);
  ::std::string* mutable_dump_to_file();
  ::std::string* release_dump_to_file();
  void set_allocated_dump_to_file(::std::string* dump_to_file);

  // optional int64 max_depth = 1;
  bool has_max_depth() const;
  void clear_max_depth();
  static const int kMaxDepthFieldNumber = 1;
  ::google::protobuf::int64 max_depth() const;
  void set_max_depth(::google::protobuf::int64 value);

  // optional int64 min_bytes = 2;
  bool has_min_bytes() const;
  void clear_min_bytes();
  static const int kMinBytesFieldNumber = 2;
  ::google::protobuf::int64 min_bytes() const;
  void set_min_bytes(::google::protobuf::int64 value);

  // optional int64 min_micros = 3;
  bool has_min_micros() const;
  void clear_min_micros();
  static const int kMinMicrosFieldNumber = 3;
  ::google::protobuf::int64 min_micros() const;
  void set_min_micros(::google::protobuf::int64 value);

  // optional int64 min_params = 4;
  bool has_min_params() const;
  void clear_min_params();
  static const int kMinParamsFieldNumber = 4;
  ::google::protobuf::int64 min_params() const;
  void set_min_params(::google::protobuf::int64 value);

  // optional int64 min_float_ops = 5;
  bool has_min_float_ops() const;
  void clear_min_float_ops();
  static const int kMinFloatOpsFieldNumber = 5;
  ::google::protobuf::int64 min_float_ops() const;
  void set_min_float_ops(::google::protobuf::int64 value);

  // optional bool account_displayed_op_only = 13;
  bool has_account_displayed_op_only() const;
  void clear_account_displayed_op_only();
  static const int kAccountDisplayedOpOnlyFieldNumber = 13;
  bool account_displayed_op_only() const;
  void set_account_displayed_op_only(bool value);

  // optional bool viz = 15;
  bool has_viz() const;
  void clear_viz();
  static const int kVizFieldNumber = 15;
  bool viz() const;
  void set_viz(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.tfprof.OptionsProto)
 private:
  void set_has_max_depth();
  void clear_has_max_depth();
  void set_has_min_bytes();
  void clear_has_min_bytes();
  void set_has_min_micros();
  void clear_has_min_micros();
  void set_has_min_params();
  void clear_has_min_params();
  void set_has_min_float_ops();
  void clear_has_min_float_ops();
  void set_has_order_by();
  void clear_has_order_by();
  void set_has_account_displayed_op_only();
  void clear_has_account_displayed_op_only();
  void set_has_viz();
  void clear_has_viz();
  void set_has_dump_to_file();
  void clear_has_dump_to_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> account_type_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> start_name_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trim_name_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> show_name_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hide_name_regexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> select_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::internal::ArenaStringPtr dump_to_file_;
  ::google::protobuf::int64 max_depth_;
  ::google::protobuf::int64 min_bytes_;
  ::google::protobuf::int64 min_micros_;
  ::google::protobuf::int64 min_params_;
  ::google::protobuf::int64 min_float_ops_;
  bool account_displayed_op_only_;
  bool viz_;
  friend struct  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionsProto

// optional int64 max_depth = 1;
inline bool OptionsProto::has_max_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionsProto::set_has_max_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionsProto::clear_has_max_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionsProto::clear_max_depth() {
  max_depth_ = GOOGLE_LONGLONG(0);
  clear_has_max_depth();
}
inline ::google::protobuf::int64 OptionsProto::max_depth() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.max_depth)
  return max_depth_;
}
inline void OptionsProto::set_max_depth(::google::protobuf::int64 value) {
  set_has_max_depth();
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.max_depth)
}

// optional int64 min_bytes = 2;
inline bool OptionsProto::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionsProto::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionsProto::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionsProto::clear_min_bytes() {
  min_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_min_bytes();
}
inline ::google::protobuf::int64 OptionsProto::min_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_bytes)
  return min_bytes_;
}
inline void OptionsProto::set_min_bytes(::google::protobuf::int64 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_bytes)
}

// optional int64 min_micros = 3;
inline bool OptionsProto::has_min_micros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionsProto::set_has_min_micros() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionsProto::clear_has_min_micros() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionsProto::clear_min_micros() {
  min_micros_ = GOOGLE_LONGLONG(0);
  clear_has_min_micros();
}
inline ::google::protobuf::int64 OptionsProto::min_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_micros)
  return min_micros_;
}
inline void OptionsProto::set_min_micros(::google::protobuf::int64 value) {
  set_has_min_micros();
  min_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_micros)
}

// optional int64 min_params = 4;
inline bool OptionsProto::has_min_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionsProto::set_has_min_params() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionsProto::clear_has_min_params() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionsProto::clear_min_params() {
  min_params_ = GOOGLE_LONGLONG(0);
  clear_has_min_params();
}
inline ::google::protobuf::int64 OptionsProto::min_params() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_params)
  return min_params_;
}
inline void OptionsProto::set_min_params(::google::protobuf::int64 value) {
  set_has_min_params();
  min_params_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_params)
}

// optional int64 min_float_ops = 5;
inline bool OptionsProto::has_min_float_ops() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionsProto::set_has_min_float_ops() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionsProto::clear_has_min_float_ops() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionsProto::clear_min_float_ops() {
  min_float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_min_float_ops();
}
inline ::google::protobuf::int64 OptionsProto::min_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.min_float_ops)
  return min_float_ops_;
}
inline void OptionsProto::set_min_float_ops(::google::protobuf::int64 value) {
  set_has_min_float_ops();
  min_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.min_float_ops)
}

// repeated string device_regexes = 6;
inline int OptionsProto::device_regexes_size() const {
  return device_regexes_.size();
}
inline void OptionsProto::clear_device_regexes() {
  device_regexes_.Clear();
}
inline const ::std::string& OptionsProto::device_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_device_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Mutable(index);
}
inline void OptionsProto::set_device_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.device_regexes)
  device_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_device_regexes(int index, const char* value) {
  device_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.device_regexes)
}
inline void OptionsProto::set_device_regexes(int index, const char* value, size_t size) {
  device_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.device_regexes)
}
inline ::std::string* OptionsProto::add_device_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_.Add();
}
inline void OptionsProto::add_device_regexes(const ::std::string& value) {
  device_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.device_regexes)
}
inline void OptionsProto::add_device_regexes(const char* value) {
  device_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.device_regexes)
}
inline void OptionsProto::add_device_regexes(const char* value, size_t size) {
  device_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.device_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::device_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.device_regexes)
  return device_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_device_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.device_regexes)
  return &device_regexes_;
}

// optional string order_by = 7;
inline bool OptionsProto::has_order_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionsProto::set_has_order_by() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionsProto::clear_has_order_by() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionsProto::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_by();
}
inline const ::std::string& OptionsProto::order_by() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.GetNoArena();
}
inline void OptionsProto::set_order_by(const ::std::string& value) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.order_by)
}
#if LANG_CXX11
inline void OptionsProto::set_order_by(::std::string&& value) {
  set_has_order_by();
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.OptionsProto.order_by)
}
#endif
inline void OptionsProto::set_order_by(const char* value) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.order_by)
}
inline void OptionsProto::set_order_by(const char* value, size_t size) {
  set_has_order_by();
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.order_by)
}
inline ::std::string* OptionsProto::mutable_order_by() {
  set_has_order_by();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionsProto::release_order_by() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.order_by)
  clear_has_order_by();
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionsProto::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    set_has_order_by();
  } else {
    clear_has_order_by();
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.order_by)
}

// repeated string account_type_regexes = 8;
inline int OptionsProto::account_type_regexes_size() const {
  return account_type_regexes_.size();
}
inline void OptionsProto::clear_account_type_regexes() {
  account_type_regexes_.Clear();
}
inline const ::std::string& OptionsProto::account_type_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_account_type_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Mutable(index);
}
inline void OptionsProto::set_account_type_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_type_regexes)
  account_type_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_account_type_regexes(int index, const char* value) {
  account_type_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
inline void OptionsProto::set_account_type_regexes(int index, const char* value, size_t size) {
  account_type_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
inline ::std::string* OptionsProto::add_account_type_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_.Add();
}
inline void OptionsProto::add_account_type_regexes(const ::std::string& value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
inline void OptionsProto::add_account_type_regexes(const char* value) {
  account_type_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
inline void OptionsProto::add_account_type_regexes(const char* value, size_t size) {
  account_type_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.account_type_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::account_type_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return account_type_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_account_type_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.account_type_regexes)
  return &account_type_regexes_;
}

// repeated string start_name_regexes = 9;
inline int OptionsProto::start_name_regexes_size() const {
  return start_name_regexes_.size();
}
inline void OptionsProto::clear_start_name_regexes() {
  start_name_regexes_.Clear();
}
inline const ::std::string& OptionsProto::start_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_start_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Mutable(index);
}
inline void OptionsProto::set_start_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.start_name_regexes)
  start_name_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_start_name_regexes(int index, const char* value) {
  start_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
inline void OptionsProto::set_start_name_regexes(int index, const char* value, size_t size) {
  start_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
inline ::std::string* OptionsProto::add_start_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_.Add();
}
inline void OptionsProto::add_start_name_regexes(const ::std::string& value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
inline void OptionsProto::add_start_name_regexes(const char* value) {
  start_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
inline void OptionsProto::add_start_name_regexes(const char* value, size_t size) {
  start_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.start_name_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::start_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return start_name_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_start_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.start_name_regexes)
  return &start_name_regexes_;
}

// repeated string trim_name_regexes = 10;
inline int OptionsProto::trim_name_regexes_size() const {
  return trim_name_regexes_.size();
}
inline void OptionsProto::clear_trim_name_regexes() {
  trim_name_regexes_.Clear();
}
inline const ::std::string& OptionsProto::trim_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_trim_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Mutable(index);
}
inline void OptionsProto::set_trim_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  trim_name_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_trim_name_regexes(int index, const char* value) {
  trim_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
inline void OptionsProto::set_trim_name_regexes(int index, const char* value, size_t size) {
  trim_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
inline ::std::string* OptionsProto::add_trim_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_.Add();
}
inline void OptionsProto::add_trim_name_regexes(const ::std::string& value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
inline void OptionsProto::add_trim_name_regexes(const char* value) {
  trim_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
inline void OptionsProto::add_trim_name_regexes(const char* value, size_t size) {
  trim_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.trim_name_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::trim_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return trim_name_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_trim_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.trim_name_regexes)
  return &trim_name_regexes_;
}

// repeated string show_name_regexes = 11;
inline int OptionsProto::show_name_regexes_size() const {
  return show_name_regexes_.size();
}
inline void OptionsProto::clear_show_name_regexes() {
  show_name_regexes_.Clear();
}
inline const ::std::string& OptionsProto::show_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_show_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Mutable(index);
}
inline void OptionsProto::set_show_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.show_name_regexes)
  show_name_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_show_name_regexes(int index, const char* value) {
  show_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
inline void OptionsProto::set_show_name_regexes(int index, const char* value, size_t size) {
  show_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
inline ::std::string* OptionsProto::add_show_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_.Add();
}
inline void OptionsProto::add_show_name_regexes(const ::std::string& value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
inline void OptionsProto::add_show_name_regexes(const char* value) {
  show_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
inline void OptionsProto::add_show_name_regexes(const char* value, size_t size) {
  show_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.show_name_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::show_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return show_name_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_show_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.show_name_regexes)
  return &show_name_regexes_;
}

// repeated string hide_name_regexes = 12;
inline int OptionsProto::hide_name_regexes_size() const {
  return hide_name_regexes_.size();
}
inline void OptionsProto::clear_hide_name_regexes() {
  hide_name_regexes_.Clear();
}
inline const ::std::string& OptionsProto::hide_name_regexes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Get(index);
}
inline ::std::string* OptionsProto::mutable_hide_name_regexes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Mutable(index);
}
inline void OptionsProto::set_hide_name_regexes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  hide_name_regexes_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_hide_name_regexes(int index, const char* value) {
  hide_name_regexes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
inline void OptionsProto::set_hide_name_regexes(int index, const char* value, size_t size) {
  hide_name_regexes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
inline ::std::string* OptionsProto::add_hide_name_regexes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_.Add();
}
inline void OptionsProto::add_hide_name_regexes(const ::std::string& value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
inline void OptionsProto::add_hide_name_regexes(const char* value) {
  hide_name_regexes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
inline void OptionsProto::add_hide_name_regexes(const char* value, size_t size) {
  hide_name_regexes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.hide_name_regexes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::hide_name_regexes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return hide_name_regexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_hide_name_regexes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.hide_name_regexes)
  return &hide_name_regexes_;
}

// optional bool account_displayed_op_only = 13;
inline bool OptionsProto::has_account_displayed_op_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionsProto::set_has_account_displayed_op_only() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionsProto::clear_has_account_displayed_op_only() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionsProto::clear_account_displayed_op_only() {
  account_displayed_op_only_ = false;
  clear_has_account_displayed_op_only();
}
inline bool OptionsProto::account_displayed_op_only() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
  return account_displayed_op_only_;
}
inline void OptionsProto::set_account_displayed_op_only(bool value) {
  set_has_account_displayed_op_only();
  account_displayed_op_only_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.account_displayed_op_only)
}

// repeated string select = 14;
inline int OptionsProto::select_size() const {
  return select_.size();
}
inline void OptionsProto::clear_select() {
  select_.Clear();
}
inline const ::std::string& OptionsProto::select(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.select)
  return select_.Get(index);
}
inline ::std::string* OptionsProto::mutable_select(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Mutable(index);
}
inline void OptionsProto::set_select(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.select)
  select_.Mutable(index)->assign(value);
}
inline void OptionsProto::set_select(int index, const char* value) {
  select_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.select)
}
inline void OptionsProto::set_select(int index, const char* value, size_t size) {
  select_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.select)
}
inline ::std::string* OptionsProto::add_select() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OptionsProto.select)
  return select_.Add();
}
inline void OptionsProto::add_select(const ::std::string& value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OptionsProto.select)
}
inline void OptionsProto::add_select(const char* value) {
  select_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OptionsProto.select)
}
inline void OptionsProto::add_select(const char* value, size_t size) {
  select_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OptionsProto.select)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionsProto::select() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OptionsProto.select)
  return select_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionsProto::mutable_select() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OptionsProto.select)
  return &select_;
}

// optional bool viz = 15;
inline bool OptionsProto::has_viz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionsProto::set_has_viz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionsProto::clear_has_viz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionsProto::clear_viz() {
  viz_ = false;
  clear_has_viz();
}
inline bool OptionsProto::viz() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.viz)
  return viz_;
}
inline void OptionsProto::set_viz(bool value) {
  set_has_viz();
  viz_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.viz)
}

// optional string dump_to_file = 16;
inline bool OptionsProto::has_dump_to_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionsProto::set_has_dump_to_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionsProto::clear_has_dump_to_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionsProto::clear_dump_to_file() {
  dump_to_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_to_file();
}
inline const ::std::string& OptionsProto::dump_to_file() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.GetNoArena();
}
inline void OptionsProto::set_dump_to_file(const ::std::string& value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OptionsProto.dump_to_file)
}
#if LANG_CXX11
inline void OptionsProto::set_dump_to_file(::std::string&& value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.OptionsProto.dump_to_file)
}
#endif
inline void OptionsProto::set_dump_to_file(const char* value) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OptionsProto.dump_to_file)
}
inline void OptionsProto::set_dump_to_file(const char* value, size_t size) {
  set_has_dump_to_file();
  dump_to_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OptionsProto.dump_to_file)
}
inline ::std::string* OptionsProto::mutable_dump_to_file() {
  set_has_dump_to_file();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OptionsProto.dump_to_file)
  return dump_to_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionsProto::release_dump_to_file() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OptionsProto.dump_to_file)
  clear_has_dump_to_file();
  return dump_to_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionsProto::set_allocated_dump_to_file(::std::string* dump_to_file) {
  if (dump_to_file != NULL) {
    set_has_dump_to_file();
  } else {
    clear_has_dump_to_file();
  }
  dump_to_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_to_file);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OptionsProto.dump_to_file)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2ftools_2ftfprof_2ftfprof_5foptions_2eproto__INCLUDED
