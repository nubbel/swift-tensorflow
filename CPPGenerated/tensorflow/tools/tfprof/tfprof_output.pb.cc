// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/tfprof/tfprof_output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/tools/tfprof/tfprof_output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {
class TFProfTensorProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFProfTensorProto> {
} _TFProfTensorProto_default_instance_;
class TFProfNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFProfNode> {
} _TFProfNode_default_instance_;

namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfTensorProto, value_str_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, tensor_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, exec_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, requested_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, float_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, total_exec_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, total_requested_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, total_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, total_float_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, total_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFProfNode, children_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  8,
  9,
  10,
  11,
  12,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(TFProfTensorProto)},
  { 12, 31, sizeof(TFProfNode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFProfTensorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFProfNode_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/tools/tfprof/tfprof_output.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TFProfTensorProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TFProfNode_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::InitDefaults();
  _TFProfTensorProto_default_instance_.DefaultConstruct();
  _TFProfNode_default_instance_.DefaultConstruct();
  _TFProfNode_default_instance_.get_mutable()->tensor_value_ = const_cast< ::tensorflow::tfprof::TFProfTensorProto*>(
      ::tensorflow::tfprof::TFProfTensorProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n+tensorflow/tools/tfprof/tfprof_output."
      "proto\022\021tensorflow.tfprof\032,tensorflow/cor"
      "e/framework/tensor_shape.proto\032%tensorfl"
      "ow/core/framework/types.proto\"v\n\021TFProfT"
      "ensorProto\022#\n\005dtype\030\001 \001(\0162\024.tensorflow.D"
      "ataType\022\024\n\014value_double\030\002 \003(\001\022\023\n\013value_i"
      "nt64\030\003 \003(\003\022\021\n\tvalue_str\030\004 \003(\t\"\255\003\n\nTFProf"
      "Node\022\014\n\004name\030\001 \001(\t\022:\n\014tensor_value\030\017 \001(\013"
      "2$.tensorflow.tfprof.TFProfTensorProto\022\023"
      "\n\013exec_micros\030\002 \001(\003\022\027\n\017requested_bytes\030\003"
      " \001(\003\022\022\n\nparameters\030\004 \001(\003\022\021\n\tfloat_ops\030\r "
      "\001(\003\022\016\n\006inputs\030\005 \001(\003\022\016\n\006device\030\n \001(\t\022\031\n\021t"
      "otal_exec_micros\030\006 \001(\003\022\035\n\025total_requeste"
      "d_bytes\030\007 \001(\003\022\030\n\020total_parameters\030\010 \001(\003\022"
      "\027\n\017total_float_ops\030\016 \001(\003\022\024\n\014total_inputs"
      "\030\t \001(\003\022,\n\006shapes\030\013 \003(\0132\034.tensorflow.Tens"
      "orShapeProto\022/\n\010children\030\014 \003(\0132\035.tensorf"
      "low.tfprof.TFProfNode"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/tools/tfprof/tfprof_output.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFProfTensorProto::kDtypeFieldNumber;
const int TFProfTensorProto::kValueDoubleFieldNumber;
const int TFProfTensorProto::kValueInt64FieldNumber;
const int TFProfTensorProto::kValueStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFProfTensorProto::TFProfTensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.TFProfTensorProto)
}
TFProfTensorProto::TFProfTensorProto(const TFProfTensorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      value_double_(from.value_double_),
      value_int64_(from.value_int64_),
      value_str_(from.value_str_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.TFProfTensorProto)
}

void TFProfTensorProto::SharedCtor() {
  _cached_size_ = 0;
  dtype_ = 0;
}

TFProfTensorProto::~TFProfTensorProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.TFProfTensorProto)
  SharedDtor();
}

void TFProfTensorProto::SharedDtor() {
}

void TFProfTensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFProfTensorProto::descriptor() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::file_level_metadata[0].descriptor;
}

const TFProfTensorProto& TFProfTensorProto::default_instance() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFProfTensorProto* TFProfTensorProto::New(::google::protobuf::Arena* arena) const {
  TFProfTensorProto* n = new TFProfTensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFProfTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.TFProfTensorProto)
  value_double_.Clear();
  value_int64_.Clear();
  value_str_.Clear();
  dtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFProfTensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.TFProfTensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tensorflow::DataType_IsValid(value)) {
            set_dtype(static_cast< ::tensorflow::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double value_double = 2;
      case 2: {
        if (tag == 17u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_value_double())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 value_int64 = 3;
      case 3: {
        if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_value_int64())));
        } else if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string value_str = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_str(this->value_str_size() - 1).data(),
            this->value_str(this->value_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.TFProfTensorProto.value_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.TFProfTensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.TFProfTensorProto)
  return false;
#undef DO_
}

void TFProfTensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.TFProfTensorProto)
  // optional .tensorflow.DataType dtype = 1;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // repeated double value_double = 2;
  for (int i = 0; i < this->value_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->value_double(i), output);
  }

  // repeated int64 value_int64 = 3;
  for (int i = 0; i < this->value_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->value_int64(i), output);
  }

  // repeated string value_str = 4;
  for (int i = 0; i < this->value_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_str(i).data(), this->value_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfTensorProto.value_str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value_str(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.TFProfTensorProto)
}

::google::protobuf::uint8* TFProfTensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.TFProfTensorProto)
  // optional .tensorflow.DataType dtype = 1;
  if (has_dtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // repeated double value_double = 2;
  for (int i = 0; i < this->value_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->value_double(i), target);
  }

  // repeated int64 value_int64 = 3;
  for (int i = 0; i < this->value_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->value_int64(i), target);
  }

  // repeated string value_str = 4;
  for (int i = 0; i < this->value_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_str(i).data(), this->value_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfTensorProto.value_str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->value_str(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.TFProfTensorProto)
  return target;
}

size_t TFProfTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.TFProfTensorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double value_double = 2;
  {
    unsigned int count = this->value_double_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_double_size());
    total_size += data_size;
  }

  // repeated int64 value_int64 = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->value_int64_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_int64_size());
    total_size += data_size;
  }

  // repeated string value_str = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_str_size());
  for (int i = 0; i < this->value_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_str(i));
  }

  // optional .tensorflow.DataType dtype = 1;
  if (has_dtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFProfTensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TFProfTensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFProfTensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.TFProfTensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.TFProfTensorProto)
    MergeFrom(*source);
  }
}

void TFProfTensorProto::MergeFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_double_.MergeFrom(from.value_double_);
  value_int64_.MergeFrom(from.value_int64_);
  value_str_.MergeFrom(from.value_str_);
  if (from.has_dtype()) {
    set_dtype(from.dtype());
  }
}

void TFProfTensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFProfTensorProto::CopyFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFProfTensorProto::IsInitialized() const {
  return true;
}

void TFProfTensorProto::Swap(TFProfTensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFProfTensorProto::InternalSwap(TFProfTensorProto* other) {
  value_double_.UnsafeArenaSwap(&other->value_double_);
  value_int64_.UnsafeArenaSwap(&other->value_int64_);
  value_str_.UnsafeArenaSwap(&other->value_str_);
  std::swap(dtype_, other->dtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFProfTensorProto::GetMetadata() const {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFProfTensorProto

// optional .tensorflow.DataType dtype = 1;
bool TFProfTensorProto::has_dtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFProfTensorProto::set_has_dtype() {
  _has_bits_[0] |= 0x00000001u;
}
void TFProfTensorProto::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFProfTensorProto::clear_dtype() {
  dtype_ = 0;
  clear_has_dtype();
}
::tensorflow::DataType TFProfTensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void TFProfTensorProto::set_dtype(::tensorflow::DataType value) {
  assert(::tensorflow::DataType_IsValid(value));
  set_has_dtype();
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.dtype)
}

// repeated double value_double = 2;
int TFProfTensorProto::value_double_size() const {
  return value_double_.size();
}
void TFProfTensorProto::clear_value_double() {
  value_double_.Clear();
}
double TFProfTensorProto::value_double(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_.Get(index);
}
void TFProfTensorProto::set_value_double(int index, double value) {
  value_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_double)
}
void TFProfTensorProto::add_value_double(double value) {
  value_double_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_double)
}
const ::google::protobuf::RepeatedField< double >&
TFProfTensorProto::value_double() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return value_double_;
}
::google::protobuf::RepeatedField< double >*
TFProfTensorProto::mutable_value_double() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_double)
  return &value_double_;
}

// repeated int64 value_int64 = 3;
int TFProfTensorProto::value_int64_size() const {
  return value_int64_.size();
}
void TFProfTensorProto::clear_value_int64() {
  value_int64_.Clear();
}
::google::protobuf::int64 TFProfTensorProto::value_int64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_.Get(index);
}
void TFProfTensorProto::set_value_int64(int index, ::google::protobuf::int64 value) {
  value_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
void TFProfTensorProto::add_value_int64(::google::protobuf::int64 value) {
  value_int64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_int64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TFProfTensorProto::value_int64() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return value_int64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TFProfTensorProto::mutable_value_int64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_int64)
  return &value_int64_;
}

// repeated string value_str = 4;
int TFProfTensorProto::value_str_size() const {
  return value_str_.size();
}
void TFProfTensorProto::clear_value_str() {
  value_str_.Clear();
}
const ::std::string& TFProfTensorProto::value_str(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Get(index);
}
::std::string* TFProfTensorProto::mutable_value_str(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Mutable(index);
}
void TFProfTensorProto::set_value_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfTensorProto.value_str)
  value_str_.Mutable(index)->assign(value);
}
void TFProfTensorProto::set_value_str(int index, const char* value) {
  value_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::set_value_str(int index, const char* value, size_t size) {
  value_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
::std::string* TFProfTensorProto::add_value_str() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_.Add();
}
void TFProfTensorProto::add_value_str(const ::std::string& value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::add_value_str(const char* value) {
  value_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.TFProfTensorProto.value_str)
}
void TFProfTensorProto::add_value_str(const char* value, size_t size) {
  value_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.TFProfTensorProto.value_str)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFProfTensorProto::value_str() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return value_str_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFProfTensorProto::mutable_value_str() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfTensorProto.value_str)
  return &value_str_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFProfNode::kNameFieldNumber;
const int TFProfNode::kTensorValueFieldNumber;
const int TFProfNode::kExecMicrosFieldNumber;
const int TFProfNode::kRequestedBytesFieldNumber;
const int TFProfNode::kParametersFieldNumber;
const int TFProfNode::kFloatOpsFieldNumber;
const int TFProfNode::kInputsFieldNumber;
const int TFProfNode::kDeviceFieldNumber;
const int TFProfNode::kTotalExecMicrosFieldNumber;
const int TFProfNode::kTotalRequestedBytesFieldNumber;
const int TFProfNode::kTotalParametersFieldNumber;
const int TFProfNode::kTotalFloatOpsFieldNumber;
const int TFProfNode::kTotalInputsFieldNumber;
const int TFProfNode::kShapesFieldNumber;
const int TFProfNode::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFProfNode::TFProfNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.TFProfNode)
}
TFProfNode::TFProfNode(const TFProfNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shapes_(from.shapes_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device()) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.has_tensor_value()) {
    tensor_value_ = new ::tensorflow::tfprof::TFProfTensorProto(*from.tensor_value_);
  } else {
    tensor_value_ = NULL;
  }
  ::memcpy(&exec_micros_, &from.exec_micros_,
    reinterpret_cast<char*>(&total_inputs_) -
    reinterpret_cast<char*>(&exec_micros_) + sizeof(total_inputs_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.TFProfNode)
}

void TFProfNode::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_value_, 0, reinterpret_cast<char*>(&total_inputs_) -
    reinterpret_cast<char*>(&tensor_value_) + sizeof(total_inputs_));
}

TFProfNode::~TFProfNode() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.TFProfNode)
  SharedDtor();
}

void TFProfNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_value_;
  }
}

void TFProfNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFProfNode::descriptor() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::file_level_metadata[1].descriptor;
}

const TFProfNode& TFProfNode::default_instance() {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFProfNode* TFProfNode::New(::google::protobuf::Arena* arena) const {
  TFProfNode* n = new TFProfNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFProfNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.TFProfNode)
  shapes_.Clear();
  children_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_device()) {
      GOOGLE_DCHECK(!device_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_.UnsafeRawStringPointer())->clear();
    }
    if (has_tensor_value()) {
      GOOGLE_DCHECK(tensor_value_ != NULL);
      tensor_value_->::tensorflow::tfprof::TFProfTensorProto::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&exec_micros_, 0, reinterpret_cast<char*>(&inputs_) -
      reinterpret_cast<char*>(&exec_micros_) + sizeof(inputs_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&total_exec_micros_, 0, reinterpret_cast<char*>(&total_inputs_) -
      reinterpret_cast<char*>(&total_exec_micros_) + sizeof(total_inputs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFProfNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.TFProfNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.TFProfNode.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 exec_micros = 2;
      case 2: {
        if (tag == 16u) {
          set_has_exec_micros();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exec_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 requested_bytes = 3;
      case 3: {
        if (tag == 24u) {
          set_has_requested_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parameters = 4;
      case 4: {
        if (tag == 32u) {
          set_has_parameters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parameters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 inputs = 5;
      case 5: {
        if (tag == 40u) {
          set_has_inputs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_exec_micros = 6;
      case 6: {
        if (tag == 48u) {
          set_has_total_exec_micros();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_exec_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_requested_bytes = 7;
      case 7: {
        if (tag == 56u) {
          set_has_total_requested_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_parameters = 8;
      case 8: {
        if (tag == 64u) {
          set_has_total_parameters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_parameters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_inputs = 9;
      case 9: {
        if (tag == 72u) {
          set_has_total_inputs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorflow.tfprof.TFProfNode.device");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorShapeProto shapes = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfprof.TFProfNode children = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int64 float_ops = 13;
      case 13: {
        if (tag == 104u) {
          set_has_float_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_float_ops = 14;
      case 14: {
        if (tag == 112u) {
          set_has_total_float_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_float_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.TFProfNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.TFProfNode)
  return false;
#undef DO_
}

void TFProfNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.TFProfNode)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 exec_micros = 2;
  if (has_exec_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exec_micros(), output);
  }

  // optional int64 requested_bytes = 3;
  if (has_requested_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requested_bytes(), output);
  }

  // optional int64 parameters = 4;
  if (has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parameters(), output);
  }

  // optional int64 inputs = 5;
  if (has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->inputs(), output);
  }

  // optional int64 total_exec_micros = 6;
  if (has_total_exec_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_exec_micros(), output);
  }

  // optional int64 total_requested_bytes = 7;
  if (has_total_requested_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->total_requested_bytes(), output);
  }

  // optional int64 total_parameters = 8;
  if (has_total_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->total_parameters(), output);
  }

  // optional int64 total_inputs = 9;
  if (has_total_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->total_inputs(), output);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfNode.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device(), output);
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  for (unsigned int i = 0, n = this->shapes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shapes(i), output);
  }

  // repeated .tensorflow.tfprof.TFProfNode children = 12;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->children(i), output);
  }

  // optional int64 float_ops = 13;
  if (has_float_ops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->float_ops(), output);
  }

  // optional int64 total_float_ops = 14;
  if (has_total_float_ops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->total_float_ops(), output);
  }

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (has_tensor_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->tensor_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.TFProfNode)
}

::google::protobuf::uint8* TFProfNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.TFProfNode)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 exec_micros = 2;
  if (has_exec_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exec_micros(), target);
  }

  // optional int64 requested_bytes = 3;
  if (has_requested_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requested_bytes(), target);
  }

  // optional int64 parameters = 4;
  if (has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parameters(), target);
  }

  // optional int64 inputs = 5;
  if (has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->inputs(), target);
  }

  // optional int64 total_exec_micros = 6;
  if (has_total_exec_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_exec_micros(), target);
  }

  // optional int64 total_requested_bytes = 7;
  if (has_total_requested_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->total_requested_bytes(), target);
  }

  // optional int64 total_parameters = 8;
  if (has_total_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->total_parameters(), target);
  }

  // optional int64 total_inputs = 9;
  if (has_total_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->total_inputs(), target);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorflow.tfprof.TFProfNode.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  for (unsigned int i = 0, n = this->shapes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->shapes(i), false, target);
  }

  // repeated .tensorflow.tfprof.TFProfNode children = 12;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->children(i), false, target);
  }

  // optional int64 float_ops = 13;
  if (has_float_ops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->float_ops(), target);
  }

  // optional int64 total_float_ops = 14;
  if (has_total_float_ops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->total_float_ops(), target);
  }

  // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (has_tensor_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->tensor_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.TFProfNode)
  return target;
}

size_t TFProfNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.TFProfNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .tensorflow.TensorShapeProto shapes = 11;
  {
    unsigned int count = this->shapes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapes(i));
    }
  }

  // repeated .tensorflow.tfprof.TFProfNode children = 12;
  {
    unsigned int count = this->children_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string device = 10;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
    if (has_tensor_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tensor_value_);
    }

    // optional int64 exec_micros = 2;
    if (has_exec_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exec_micros());
    }

    // optional int64 requested_bytes = 3;
    if (has_requested_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requested_bytes());
    }

    // optional int64 parameters = 4;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parameters());
    }

    // optional int64 float_ops = 13;
    if (has_float_ops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->float_ops());
    }

    // optional int64 inputs = 5;
    if (has_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inputs());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 total_exec_micros = 6;
    if (has_total_exec_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_exec_micros());
    }

    // optional int64 total_requested_bytes = 7;
    if (has_total_requested_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_requested_bytes());
    }

    // optional int64 total_parameters = 8;
    if (has_total_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_parameters());
    }

    // optional int64 total_float_ops = 14;
    if (has_total_float_ops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_float_ops());
    }

    // optional int64 total_inputs = 9;
    if (has_total_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_inputs());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFProfNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.TFProfNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TFProfNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFProfNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.TFProfNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.TFProfNode)
    MergeFrom(*source);
  }
}

void TFProfNode::MergeFrom(const TFProfNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.TFProfNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shapes_.MergeFrom(from.shapes_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (from.has_tensor_value()) {
      mutable_tensor_value()->::tensorflow::tfprof::TFProfTensorProto::MergeFrom(from.tensor_value());
    }
    if (from.has_exec_micros()) {
      set_exec_micros(from.exec_micros());
    }
    if (from.has_requested_bytes()) {
      set_requested_bytes(from.requested_bytes());
    }
    if (from.has_parameters()) {
      set_parameters(from.parameters());
    }
    if (from.has_float_ops()) {
      set_float_ops(from.float_ops());
    }
    if (from.has_inputs()) {
      set_inputs(from.inputs());
    }
  }
  if (from._has_bits_[8 / 32] & 7936u) {
    if (from.has_total_exec_micros()) {
      set_total_exec_micros(from.total_exec_micros());
    }
    if (from.has_total_requested_bytes()) {
      set_total_requested_bytes(from.total_requested_bytes());
    }
    if (from.has_total_parameters()) {
      set_total_parameters(from.total_parameters());
    }
    if (from.has_total_float_ops()) {
      set_total_float_ops(from.total_float_ops());
    }
    if (from.has_total_inputs()) {
      set_total_inputs(from.total_inputs());
    }
  }
}

void TFProfNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.TFProfNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFProfNode::CopyFrom(const TFProfNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.TFProfNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFProfNode::IsInitialized() const {
  return true;
}

void TFProfNode::Swap(TFProfNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFProfNode::InternalSwap(TFProfNode* other) {
  shapes_.UnsafeArenaSwap(&other->shapes_);
  children_.UnsafeArenaSwap(&other->children_);
  name_.Swap(&other->name_);
  device_.Swap(&other->device_);
  std::swap(tensor_value_, other->tensor_value_);
  std::swap(exec_micros_, other->exec_micros_);
  std::swap(requested_bytes_, other->requested_bytes_);
  std::swap(parameters_, other->parameters_);
  std::swap(float_ops_, other->float_ops_);
  std::swap(inputs_, other->inputs_);
  std::swap(total_exec_micros_, other->total_exec_micros_);
  std::swap(total_requested_bytes_, other->total_requested_bytes_);
  std::swap(total_parameters_, other->total_parameters_);
  std::swap(total_float_ops_, other->total_float_ops_);
  std::swap(total_inputs_, other->total_inputs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFProfNode::GetMetadata() const {
  protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2ftfprof_2ftfprof_5foutput_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFProfNode

// optional string name = 1;
bool TFProfNode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFProfNode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TFProfNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFProfNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TFProfNode::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.name)
  return name_.GetNoArena();
}
void TFProfNode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.name)
}
#if LANG_CXX11
void TFProfNode::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.TFProfNode.name)
}
#endif
void TFProfNode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfNode.name)
}
void TFProfNode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfNode.name)
}
::std::string* TFProfNode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFProfNode::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFProfNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.name)
}

// optional .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
bool TFProfNode::has_tensor_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TFProfNode::set_has_tensor_value() {
  _has_bits_[0] |= 0x00000004u;
}
void TFProfNode::clear_has_tensor_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void TFProfNode::clear_tensor_value() {
  if (tensor_value_ != NULL) tensor_value_->::tensorflow::tfprof::TFProfTensorProto::Clear();
  clear_has_tensor_value();
}
const ::tensorflow::tfprof::TFProfTensorProto& TFProfNode::tensor_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.tensor_value)
  return tensor_value_ != NULL ? *tensor_value_
                         : *::tensorflow::tfprof::TFProfTensorProto::internal_default_instance();
}
::tensorflow::tfprof::TFProfTensorProto* TFProfNode::mutable_tensor_value() {
  set_has_tensor_value();
  if (tensor_value_ == NULL) {
    tensor_value_ = new ::tensorflow::tfprof::TFProfTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.tensor_value)
  return tensor_value_;
}
::tensorflow::tfprof::TFProfTensorProto* TFProfNode::release_tensor_value() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.tensor_value)
  clear_has_tensor_value();
  ::tensorflow::tfprof::TFProfTensorProto* temp = tensor_value_;
  tensor_value_ = NULL;
  return temp;
}
void TFProfNode::set_allocated_tensor_value(::tensorflow::tfprof::TFProfTensorProto* tensor_value) {
  delete tensor_value_;
  tensor_value_ = tensor_value;
  if (tensor_value) {
    set_has_tensor_value();
  } else {
    clear_has_tensor_value();
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.tensor_value)
}

// optional int64 exec_micros = 2;
bool TFProfNode::has_exec_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TFProfNode::set_has_exec_micros() {
  _has_bits_[0] |= 0x00000008u;
}
void TFProfNode::clear_has_exec_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
void TFProfNode::clear_exec_micros() {
  exec_micros_ = GOOGLE_LONGLONG(0);
  clear_has_exec_micros();
}
::google::protobuf::int64 TFProfNode::exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.exec_micros)
  return exec_micros_;
}
void TFProfNode::set_exec_micros(::google::protobuf::int64 value) {
  set_has_exec_micros();
  exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.exec_micros)
}

// optional int64 requested_bytes = 3;
bool TFProfNode::has_requested_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TFProfNode::set_has_requested_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void TFProfNode::clear_has_requested_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void TFProfNode::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_requested_bytes();
}
::google::protobuf::int64 TFProfNode::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.requested_bytes)
  return requested_bytes_;
}
void TFProfNode::set_requested_bytes(::google::protobuf::int64 value) {
  set_has_requested_bytes();
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.requested_bytes)
}

// optional int64 parameters = 4;
bool TFProfNode::has_parameters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TFProfNode::set_has_parameters() {
  _has_bits_[0] |= 0x00000020u;
}
void TFProfNode::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000020u;
}
void TFProfNode::clear_parameters() {
  parameters_ = GOOGLE_LONGLONG(0);
  clear_has_parameters();
}
::google::protobuf::int64 TFProfNode::parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.parameters)
  return parameters_;
}
void TFProfNode::set_parameters(::google::protobuf::int64 value) {
  set_has_parameters();
  parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.parameters)
}

// optional int64 float_ops = 13;
bool TFProfNode::has_float_ops() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TFProfNode::set_has_float_ops() {
  _has_bits_[0] |= 0x00000040u;
}
void TFProfNode::clear_has_float_ops() {
  _has_bits_[0] &= ~0x00000040u;
}
void TFProfNode::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_float_ops();
}
::google::protobuf::int64 TFProfNode::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.float_ops)
  return float_ops_;
}
void TFProfNode::set_float_ops(::google::protobuf::int64 value) {
  set_has_float_ops();
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.float_ops)
}

// optional int64 inputs = 5;
bool TFProfNode::has_inputs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TFProfNode::set_has_inputs() {
  _has_bits_[0] |= 0x00000080u;
}
void TFProfNode::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000080u;
}
void TFProfNode::clear_inputs() {
  inputs_ = GOOGLE_LONGLONG(0);
  clear_has_inputs();
}
::google::protobuf::int64 TFProfNode::inputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.inputs)
  return inputs_;
}
void TFProfNode::set_inputs(::google::protobuf::int64 value) {
  set_has_inputs();
  inputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.inputs)
}

// optional string device = 10;
bool TFProfNode::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFProfNode::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void TFProfNode::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFProfNode::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& TFProfNode::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.device)
  return device_.GetNoArena();
}
void TFProfNode::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.device)
}
#if LANG_CXX11
void TFProfNode::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.TFProfNode.device)
}
#endif
void TFProfNode::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.TFProfNode.device)
}
void TFProfNode::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.TFProfNode.device)
}
::std::string* TFProfNode::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFProfNode::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.TFProfNode.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFProfNode::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.TFProfNode.device)
}

// optional int64 total_exec_micros = 6;
bool TFProfNode::has_total_exec_micros() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TFProfNode::set_has_total_exec_micros() {
  _has_bits_[0] |= 0x00000100u;
}
void TFProfNode::clear_has_total_exec_micros() {
  _has_bits_[0] &= ~0x00000100u;
}
void TFProfNode::clear_total_exec_micros() {
  total_exec_micros_ = GOOGLE_LONGLONG(0);
  clear_has_total_exec_micros();
}
::google::protobuf::int64 TFProfNode::total_exec_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_exec_micros)
  return total_exec_micros_;
}
void TFProfNode::set_total_exec_micros(::google::protobuf::int64 value) {
  set_has_total_exec_micros();
  total_exec_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_exec_micros)
}

// optional int64 total_requested_bytes = 7;
bool TFProfNode::has_total_requested_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TFProfNode::set_has_total_requested_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
void TFProfNode::clear_has_total_requested_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
void TFProfNode::clear_total_requested_bytes() {
  total_requested_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_total_requested_bytes();
}
::google::protobuf::int64 TFProfNode::total_requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_requested_bytes)
  return total_requested_bytes_;
}
void TFProfNode::set_total_requested_bytes(::google::protobuf::int64 value) {
  set_has_total_requested_bytes();
  total_requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_requested_bytes)
}

// optional int64 total_parameters = 8;
bool TFProfNode::has_total_parameters() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TFProfNode::set_has_total_parameters() {
  _has_bits_[0] |= 0x00000400u;
}
void TFProfNode::clear_has_total_parameters() {
  _has_bits_[0] &= ~0x00000400u;
}
void TFProfNode::clear_total_parameters() {
  total_parameters_ = GOOGLE_LONGLONG(0);
  clear_has_total_parameters();
}
::google::protobuf::int64 TFProfNode::total_parameters() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_parameters)
  return total_parameters_;
}
void TFProfNode::set_total_parameters(::google::protobuf::int64 value) {
  set_has_total_parameters();
  total_parameters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_parameters)
}

// optional int64 total_float_ops = 14;
bool TFProfNode::has_total_float_ops() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TFProfNode::set_has_total_float_ops() {
  _has_bits_[0] |= 0x00000800u;
}
void TFProfNode::clear_has_total_float_ops() {
  _has_bits_[0] &= ~0x00000800u;
}
void TFProfNode::clear_total_float_ops() {
  total_float_ops_ = GOOGLE_LONGLONG(0);
  clear_has_total_float_ops();
}
::google::protobuf::int64 TFProfNode::total_float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_float_ops)
  return total_float_ops_;
}
void TFProfNode::set_total_float_ops(::google::protobuf::int64 value) {
  set_has_total_float_ops();
  total_float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_float_ops)
}

// optional int64 total_inputs = 9;
bool TFProfNode::has_total_inputs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TFProfNode::set_has_total_inputs() {
  _has_bits_[0] |= 0x00001000u;
}
void TFProfNode::clear_has_total_inputs() {
  _has_bits_[0] &= ~0x00001000u;
}
void TFProfNode::clear_total_inputs() {
  total_inputs_ = GOOGLE_LONGLONG(0);
  clear_has_total_inputs();
}
::google::protobuf::int64 TFProfNode::total_inputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.total_inputs)
  return total_inputs_;
}
void TFProfNode::set_total_inputs(::google::protobuf::int64 value) {
  set_has_total_inputs();
  total_inputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.TFProfNode.total_inputs)
}

// repeated .tensorflow.TensorShapeProto shapes = 11;
int TFProfNode::shapes_size() const {
  return shapes_.size();
}
void TFProfNode::clear_shapes() {
  shapes_.Clear();
}
const ::tensorflow::TensorShapeProto& TFProfNode::shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Get(index);
}
::tensorflow::TensorShapeProto* TFProfNode::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Mutable(index);
}
::tensorflow::TensorShapeProto* TFProfNode::add_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TFProfNode::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfNode.shapes)
  return &shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TFProfNode::shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfNode.shapes)
  return shapes_;
}

// repeated .tensorflow.tfprof.TFProfNode children = 12;
int TFProfNode::children_size() const {
  return children_.size();
}
void TFProfNode::clear_children() {
  children_.Clear();
}
const ::tensorflow::tfprof::TFProfNode& TFProfNode::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.TFProfNode.children)
  return children_.Get(index);
}
::tensorflow::tfprof::TFProfNode* TFProfNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.TFProfNode.children)
  return children_.Mutable(index);
}
::tensorflow::tfprof::TFProfNode* TFProfNode::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.TFProfNode.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >*
TFProfNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.TFProfNode.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::TFProfNode >&
TFProfNode::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.TFProfNode.children)
  return children_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
