// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/proto_text/test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/tools/proto_text/test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace test {
class TestAllTypes_NestedMessage_DoubleNestedMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage_DoubleNestedMessage> {
} _TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_;
class TestAllTypes_NestedMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage> {
} _TestAllTypes_NestedMessage_default_instance_;
class TestAllTypesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes> {
  public:
  ::google::protobuf::uint32 oneof_uint32_;
  const ::tensorflow::test::TestAllTypes_NestedMessage* oneof_nested_message_;
  ::google::protobuf::internal::ArenaStringPtr oneof_string_;
  ::google::protobuf::internal::ArenaStringPtr oneof_bytes_;
  int oneof_enum_;
} _TestAllTypes_default_instance_;
class NestedTestAllTypesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NestedTestAllTypes> {
} _NestedTestAllTypes_default_instance_;
class ForeignMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForeignMessage> {
} _ForeignMessage_default_instance_;
class TestEmptyMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestEmptyMessage> {
} _TestEmptyMessage_default_instance_;

namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage_DoubleNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage_DoubleNestedMessage, optional_string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage, optional_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes_NestedMessage, optional_int64_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_fixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_fixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_sfixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_sfixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_foreign_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_nested_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_foreign_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, optional_cord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_fixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_fixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_sfixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_sfixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_nested_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, repeated_cord_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TestAllTypes_default_instance_), oneof_uint32_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TestAllTypes_default_instance_), oneof_nested_message_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TestAllTypes_default_instance_), oneof_string_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TestAllTypes_default_instance_), oneof_bytes_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TestAllTypes_default_instance_), oneof_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_string_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_int32_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_int64_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_bool_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_string_to_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, map_int64_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, another_map_string_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, packed_repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestAllTypes, oneof_field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedTestAllTypes, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedTestAllTypes, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedTestAllTypes, map_string_to_int64_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignMessage, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TestAllTypes_NestedMessage_DoubleNestedMessage)},
  { 5, -1, sizeof(TestAllTypes_NestedMessage)},
  { 13, -1, sizeof(TestAllTypes)},
  { 69, -1, sizeof(NestedTestAllTypes)},
  { 76, -1, sizeof(ForeignMessage)},
  { 81, -1, sizeof(TestEmptyMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestAllTypes_NestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestAllTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NestedTestAllTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForeignMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestEmptyMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/tools/proto_text/test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
  const ::google::protobuf::Descriptor* TestAllTypes_MapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[2].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapStringToMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::test::TestAllTypes_NestedMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestAllTypes_MapStringToMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_MapInt32ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[3].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapInt32ToMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::test::TestAllTypes_NestedMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestAllTypes_MapInt32ToMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_MapInt64ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[4].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapInt64ToMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::tensorflow::test::TestAllTypes_NestedMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestAllTypes_MapInt64ToMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_MapBoolToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[5].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapBoolToMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            bool,
            ::tensorflow::test::TestAllTypes_NestedMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestAllTypes_MapBoolToMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[6].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapStringToInt64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                TestAllTypes_MapStringToInt64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_MapInt64ToStringEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[7].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_MapInt64ToStringEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestAllTypes_MapInt64ToStringEntry_descriptor));
  const ::google::protobuf::Descriptor* TestAllTypes_AnotherMapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[8].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestAllTypes_AnotherMapStringToMessageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::test::TestAllTypes_NestedMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestAllTypes_AnotherMapStringToMessageEntry_descriptor));
  const ::google::protobuf::Descriptor* NestedTestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[10].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        NestedTestAllTypes_MapStringToInt64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                NestedTestAllTypes_MapStringToInt64Entry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TestAllTypes_NestedMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TestAllTypes_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _NestedTestAllTypes_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ForeignMessage_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _TestEmptyMessage_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_.DefaultConstruct();
  _TestAllTypes_NestedMessage_default_instance_.DefaultConstruct();
  _TestAllTypes_default_instance_.DefaultConstruct();
  _NestedTestAllTypes_default_instance_.DefaultConstruct();
  _ForeignMessage_default_instance_.DefaultConstruct();
  _TestEmptyMessage_default_instance_.DefaultConstruct();
  _TestAllTypes_NestedMessage_default_instance_.get_mutable()->msg_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::internal_default_instance());
  _TestAllTypes_default_instance_.get_mutable()->optional_nested_message_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage::internal_default_instance());
  _TestAllTypes_default_instance_.get_mutable()->optional_foreign_message_ = const_cast< ::tensorflow::test::ForeignMessage*>(
      ::tensorflow::test::ForeignMessage::internal_default_instance());
  _TestAllTypes_default_instance_.oneof_uint32_ = 0u;
  _TestAllTypes_default_instance_.oneof_nested_message_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage::internal_default_instance());
  _TestAllTypes_default_instance_.oneof_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TestAllTypes_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TestAllTypes_default_instance_.oneof_enum_ = 0;
  _NestedTestAllTypes_default_instance_.get_mutable()->child_ = const_cast< ::tensorflow::test::NestedTestAllTypes*>(
      ::tensorflow::test::NestedTestAllTypes::internal_default_instance());
  _NestedTestAllTypes_default_instance_.get_mutable()->payload_ = const_cast< ::tensorflow::test::TestAllTypes*>(
      ::tensorflow::test::TestAllTypes::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&tensorflow/tools/proto_text/test.proto"
      "\022\017tensorflow.test\"\321\027\n\014TestAllTypes\022\027\n\016op"
      "tional_int32\030\350\007 \001(\005\022\026\n\016optional_int64\030\002 "
      "\001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022\030\n\017optional"
      "_uint64\030\347\007 \001(\004\022\027\n\017optional_sint32\030\005 \001(\021\022"
      "\027\n\017optional_sint64\030\006 \001(\022\022\030\n\020optional_fix"
      "ed32\030\007 \001(\007\022\030\n\020optional_fixed64\030\010 \001(\006\022\031\n\021"
      "optional_sfixed32\030\t \001(\017\022\031\n\021optional_sfix"
      "ed64\030\n \001(\020\022\026\n\016optional_float\030\013 \001(\002\022\027\n\017op"
      "tional_double\030\014 \001(\001\022\025\n\roptional_bool\030\r \001"
      "(\010\022\027\n\017optional_string\030\016 \001(\t\022\026\n\016optional_"
      "bytes\030\017 \001(\014\022L\n\027optional_nested_message\030\022"
      " \001(\0132+.tensorflow.test.TestAllTypes.Nest"
      "edMessage\022A\n\030optional_foreign_message\030\023 "
      "\001(\0132\037.tensorflow.test.ForeignMessage\022F\n\024"
      "optional_nested_enum\030\025 \001(\0162(.tensorflow."
      "test.TestAllTypes.NestedEnum\022;\n\025optional"
      "_foreign_enum\030\026 \001(\0162\034.tensorflow.test.Fo"
      "reignEnum\022\025\n\roptional_cord\030\031 \001(\t\022\026\n\016repe"
      "ated_int32\030\037 \003(\005\022\026\n\016repeated_int64\030  \003(\003"
      "\022\027\n\017repeated_uint32\030! \003(\r\022\027\n\017repeated_ui"
      "nt64\030\" \003(\004\022\027\n\017repeated_sint32\030# \003(\021\022\027\n\017r"
      "epeated_sint64\030$ \003(\022\022\030\n\020repeated_fixed32"
      "\030% \003(\007\022\030\n\020repeated_fixed64\030& \003(\006\022\031\n\021repe"
      "ated_sfixed32\030\' \003(\017\022\031\n\021repeated_sfixed64"
      "\030( \003(\020\022\026\n\016repeated_float\030) \003(\002\022\027\n\017repeat"
      "ed_double\030* \003(\001\022\025\n\rrepeated_bool\030+ \003(\010\022\027"
      "\n\017repeated_string\030, \003(\t\022\026\n\016repeated_byte"
      "s\030- \003(\014\022L\n\027repeated_nested_message\0300 \003(\013"
      "2+.tensorflow.test.TestAllTypes.NestedMe"
      "ssage\022F\n\024repeated_nested_enum\0303 \003(\0162(.te"
      "nsorflow.test.TestAllTypes.NestedEnum\022\025\n"
      "\rrepeated_cord\0307 \003(\t\022\026\n\014oneof_uint32\030o \001"
      "(\rH\000\022K\n\024oneof_nested_message\030p \001(\0132+.ten"
      "sorflow.test.TestAllTypes.NestedMessageH"
      "\000\022\026\n\014oneof_string\030q \001(\tH\000\022\025\n\013oneof_bytes"
      "\030r \001(\014H\000\022>\n\noneof_enum\030d \001(\0162(.tensorflo"
      "w.test.TestAllTypes.NestedEnumH\000\022T\n\025map_"
      "string_to_message\030: \003(\01325.tensorflow.tes"
      "t.TestAllTypes.MapStringToMessageEntry\022R"
      "\n\024map_int32_to_message\030; \003(\01324.tensorflo"
      "w.test.TestAllTypes.MapInt32ToMessageEnt"
      "ry\022R\n\024map_int64_to_message\030< \003(\01324.tenso"
      "rflow.test.TestAllTypes.MapInt64ToMessag"
      "eEntry\022P\n\023map_bool_to_message\030= \003(\01323.te"
      "nsorflow.test.TestAllTypes.MapBoolToMess"
      "ageEntry\022P\n\023map_string_to_int64\030> \003(\01323."
      "tensorflow.test.TestAllTypes.MapStringTo"
      "Int64Entry\022P\n\023map_int64_to_string\030\? \003(\0132"
      "3.tensorflow.test.TestAllTypes.MapInt64T"
      "oStringEntry\022c\n\035another_map_string_to_me"
      "ssage\030A \003(\0132<.tensorflow.test.TestAllTyp"
      "es.AnotherMapStringToMessageEntry\022!\n\025pac"
      "ked_repeated_int64\030@ \003(\003B\002\020\001\032\325\001\n\rNestedM"
      "essage\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016repeat"
      "ed_int32\030\002 \003(\005\022L\n\003msg\030\003 \001(\0132\?.tensorflow"
      ".test.TestAllTypes.NestedMessage.DoubleN"
      "estedMessage\022\026\n\016optional_int64\030\004 \001(\003\032.\n\023"
      "DoubleNestedMessage\022\027\n\017optional_string\030\001"
      " \001(\t\032f\n\027MapStringToMessageEntry\022\013\n\003key\030\001"
      " \001(\t\022:\n\005value\030\002 \001(\0132+.tensorflow.test.Te"
      "stAllTypes.NestedMessage:\0028\001\032e\n\026MapInt32"
      "ToMessageEntry\022\013\n\003key\030\001 \001(\005\022:\n\005value\030\002 \001"
      "(\0132+.tensorflow.test.TestAllTypes.Nested"
      "Message:\0028\001\032e\n\026MapInt64ToMessageEntry\022\013\n"
      "\003key\030\001 \001(\003\022:\n\005value\030\002 \001(\0132+.tensorflow.t"
      "est.TestAllTypes.NestedMessage:\0028\001\032d\n\025Ma"
      "pBoolToMessageEntry\022\013\n\003key\030\001 \001(\010\022:\n\005valu"
      "e\030\002 \001(\0132+.tensorflow.test.TestAllTypes.N"
      "estedMessage:\0028\001\0327\n\025MapStringToInt64Entr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\0327\n\025Map"
      "Int64ToStringEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\032m\n\036AnotherMapStringToMessageE"
      "ntry\022\013\n\003key\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.tenso"
      "rflow.test.TestAllTypes.NestedMessage:\0028"
      "\001\"C\n\nNestedEnum\022\010\n\004ZERO\020\000\022\007\n\003FOO\020\001\022\007\n\003BA"
      "R\020\002\022\007\n\003BAZ\020\003\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001B\r\n\013oneof_"
      "field\"\211\002\n\022NestedTestAllTypes\0222\n\005child\030\001 "
      "\001(\0132#.tensorflow.test.NestedTestAllTypes"
      "\022.\n\007payload\030\002 \001(\0132\035.tensorflow.test.Test"
      "AllTypes\022V\n\023map_string_to_int64\030\003 \003(\01329."
      "tensorflow.test.NestedTestAllTypes.MapSt"
      "ringToInt64Entry\0327\n\025MapStringToInt64Entr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\033\n\016For"
      "eignMessage\022\t\n\001c\030\001 \001(\005\"\022\n\020TestEmptyMessa"
      "ge*R\n\013ForeignEnum\022\020\n\014FOREIGN_ZERO\020\000\022\017\n\013F"
      "OREIGN_FOO\020\004\022\017\n\013FOREIGN_BAR\020\005\022\017\n\013FOREIGN"
      "_BAZ\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/tools/proto_text/test.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto

const ::google::protobuf::EnumDescriptor* TestAllTypes_NestedEnum_descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_enum_descriptors[0];
}
bool TestAllTypes_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestAllTypes_NestedEnum TestAllTypes::ZERO;
const TestAllTypes_NestedEnum TestAllTypes::FOO;
const TestAllTypes_NestedEnum TestAllTypes::BAR;
const TestAllTypes_NestedEnum TestAllTypes::BAZ;
const TestAllTypes_NestedEnum TestAllTypes::NEG;
const TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
const TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
const int TestAllTypes::NestedEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ForeignEnum_descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_enum_descriptors[1];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes_NestedMessage_DoubleNestedMessage::kOptionalStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes_NestedMessage_DoubleNestedMessage::TestAllTypes_NestedMessage_DoubleNestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}
TestAllTypes_NestedMessage_DoubleNestedMessage::TestAllTypes_NestedMessage_DoubleNestedMessage(const TestAllTypes_NestedMessage_DoubleNestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_string().size() > 0) {
    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SharedCtor() {
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TestAllTypes_NestedMessage_DoubleNestedMessage::~TestAllTypes_NestedMessage_DoubleNestedMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestAllTypes_NestedMessage_DoubleNestedMessage::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[0].descriptor;
}

const TestAllTypes_NestedMessage_DoubleNestedMessage& TestAllTypes_NestedMessage_DoubleNestedMessage::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestAllTypes_NestedMessage_DoubleNestedMessage* TestAllTypes_NestedMessage_DoubleNestedMessage::New(::google::protobuf::Arena* arena) const {
  TestAllTypes_NestedMessage_DoubleNestedMessage* n = new TestAllTypes_NestedMessage_DoubleNestedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TestAllTypes_NestedMessage_DoubleNestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string optional_string = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), this->optional_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return false;
#undef DO_
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->optional_string(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}

::google::protobuf::uint8* TestAllTypes_NestedMessage_DoubleNestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->optional_string(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage_DoubleNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  size_t total_size = 0;

  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage_DoubleNestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes_NestedMessage_DoubleNestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(const TestAllTypes_NestedMessage_DoubleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::CopyFrom(const TestAllTypes_NestedMessage_DoubleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage_DoubleNestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::Swap(TestAllTypes_NestedMessage_DoubleNestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes_NestedMessage_DoubleNestedMessage::InternalSwap(TestAllTypes_NestedMessage_DoubleNestedMessage* other) {
  optional_string_.Swap(&other->optional_string_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestAllTypes_NestedMessage_DoubleNestedMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestAllTypes_NestedMessage_DoubleNestedMessage

// string optional_string = 1;
void TestAllTypes_NestedMessage_DoubleNestedMessage::clear_optional_string() {
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestAllTypes_NestedMessage_DoubleNestedMessage::optional_string() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
  return optional_string_.GetNoArena();
}
void TestAllTypes_NestedMessage_DoubleNestedMessage::set_optional_string(const ::std::string& value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
}
#if LANG_CXX11
void TestAllTypes_NestedMessage_DoubleNestedMessage::set_optional_string(::std::string&& value) {
  
  optional_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
}
#endif
void TestAllTypes_NestedMessage_DoubleNestedMessage::set_optional_string(const char* value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
}
void TestAllTypes_NestedMessage_DoubleNestedMessage::set_optional_string(const char* value, size_t size) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
}
::std::string* TestAllTypes_NestedMessage_DoubleNestedMessage::mutable_optional_string() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
  return optional_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes_NestedMessage_DoubleNestedMessage::release_optional_string() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
  
  return optional_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAllTypes_NestedMessage_DoubleNestedMessage::set_allocated_optional_string(::std::string* optional_string) {
  if (optional_string != NULL) {
    
  } else {
    
  }
  optional_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_string);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes_NestedMessage::kOptionalInt32FieldNumber;
const int TestAllTypes_NestedMessage::kRepeatedInt32FieldNumber;
const int TestAllTypes_NestedMessage::kMsgFieldNumber;
const int TestAllTypes_NestedMessage::kOptionalInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      repeated_int32_(from.repeated_int32_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    reinterpret_cast<char*>(&optional_int32_) -
    reinterpret_cast<char*>(&optional_int64_) + sizeof(optional_int32_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes.NestedMessage)
}

void TestAllTypes_NestedMessage::SharedCtor() {
  ::memset(&msg_, 0, reinterpret_cast<char*>(&optional_int32_) -
    reinterpret_cast<char*>(&msg_) + sizeof(optional_int32_));
  _cached_size_ = 0;
}

TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes.NestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void TestAllTypes_NestedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestAllTypes_NestedMessage::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[1].descriptor;
}

const TestAllTypes_NestedMessage& TestAllTypes_NestedMessage::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestAllTypes_NestedMessage* TestAllTypes_NestedMessage::New(::google::protobuf::Arena* arena) const {
  TestAllTypes_NestedMessage* n = new TestAllTypes_NestedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes.NestedMessage)
  repeated_int32_.Clear();
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
    delete msg_;
  }
  msg_ = NULL;
  ::memset(&optional_int64_, 0, reinterpret_cast<char*>(&optional_int32_) -
    reinterpret_cast<char*>(&optional_int64_) + sizeof(optional_int32_));
}

bool TestAllTypes_NestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes.NestedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 optional_int32 = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 optional_int64 = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes.NestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes.NestedMessage)
  return false;
#undef DO_
}

void TestAllTypes_NestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes.NestedMessage)
  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optional_int32(), output);
  }

  // repeated int32 repeated_int32 = 2;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->msg_, output);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->optional_int64(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes.NestedMessage)
}

::google::protobuf::uint8* TestAllTypes_NestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes.NestedMessage)
  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optional_int32(), target);
  }

  // repeated int32 repeated_int32 = 2;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_int32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32(i), target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->msg_, false, target);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->optional_int64(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes.NestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes.NestedMessage)
  size_t total_size = 0;

  // repeated int32 repeated_int32 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypes_NestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes_NestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes.NestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage::MergeFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  if (from.has_msg()) {
    mutable_msg()->::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(from.msg());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
}

void TestAllTypes_NestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage::Swap(TestAllTypes_NestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* other) {
  repeated_int32_.UnsafeArenaSwap(&other->repeated_int32_);
  std::swap(msg_, other->msg_);
  std::swap(optional_int64_, other->optional_int64_);
  std::swap(optional_int32_, other->optional_int32_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestAllTypes_NestedMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestAllTypes_NestedMessage

// int32 optional_int32 = 1;
void TestAllTypes_NestedMessage::clear_optional_int32() {
  optional_int32_ = 0;
}
::google::protobuf::int32 TestAllTypes_NestedMessage::optional_int32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.NestedMessage.optional_int32)
  return optional_int32_;
}
void TestAllTypes_NestedMessage::set_optional_int32(::google::protobuf::int32 value) {
  
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.NestedMessage.optional_int32)
}

// repeated int32 repeated_int32 = 2;
int TestAllTypes_NestedMessage::repeated_int32_size() const {
  return repeated_int32_.size();
}
void TestAllTypes_NestedMessage::clear_repeated_int32() {
  repeated_int32_.Clear();
}
::google::protobuf::int32 TestAllTypes_NestedMessage::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.NestedMessage.repeated_int32)
  return repeated_int32_.Get(index);
}
void TestAllTypes_NestedMessage::set_repeated_int32(int index, ::google::protobuf::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.NestedMessage.repeated_int32)
}
void TestAllTypes_NestedMessage::add_repeated_int32(::google::protobuf::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.NestedMessage.repeated_int32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestAllTypes_NestedMessage::repeated_int32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.NestedMessage.repeated_int32)
  return repeated_int32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestAllTypes_NestedMessage::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.NestedMessage.repeated_int32)
  return &repeated_int32_;
}

// .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
bool TestAllTypes_NestedMessage::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void TestAllTypes_NestedMessage::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage& TestAllTypes_NestedMessage::msg() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.NestedMessage.msg)
  return msg_ != NULL ? *msg_
                         : *::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::internal_default_instance();
}
::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage* TestAllTypes_NestedMessage::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.NestedMessage.msg)
  return msg_;
}
::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage* TestAllTypes_NestedMessage::release_msg() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.NestedMessage.msg)
  
  ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}
void TestAllTypes_NestedMessage::set_allocated_msg(::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.NestedMessage.msg)
}

// int64 optional_int64 = 4;
void TestAllTypes_NestedMessage::clear_optional_int64() {
  optional_int64_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TestAllTypes_NestedMessage::optional_int64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.NestedMessage.optional_int64)
  return optional_int64_;
}
void TestAllTypes_NestedMessage::set_optional_int64(::google::protobuf::int64 value) {
  
  optional_int64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.NestedMessage.optional_int64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes::kOptionalInt32FieldNumber;
const int TestAllTypes::kOptionalInt64FieldNumber;
const int TestAllTypes::kOptionalUint32FieldNumber;
const int TestAllTypes::kOptionalUint64FieldNumber;
const int TestAllTypes::kOptionalSint32FieldNumber;
const int TestAllTypes::kOptionalSint64FieldNumber;
const int TestAllTypes::kOptionalFixed32FieldNumber;
const int TestAllTypes::kOptionalFixed64FieldNumber;
const int TestAllTypes::kOptionalSfixed32FieldNumber;
const int TestAllTypes::kOptionalSfixed64FieldNumber;
const int TestAllTypes::kOptionalFloatFieldNumber;
const int TestAllTypes::kOptionalDoubleFieldNumber;
const int TestAllTypes::kOptionalBoolFieldNumber;
const int TestAllTypes::kOptionalStringFieldNumber;
const int TestAllTypes::kOptionalBytesFieldNumber;
const int TestAllTypes::kOptionalNestedMessageFieldNumber;
const int TestAllTypes::kOptionalForeignMessageFieldNumber;
const int TestAllTypes::kOptionalNestedEnumFieldNumber;
const int TestAllTypes::kOptionalForeignEnumFieldNumber;
const int TestAllTypes::kOptionalCordFieldNumber;
const int TestAllTypes::kRepeatedInt32FieldNumber;
const int TestAllTypes::kRepeatedInt64FieldNumber;
const int TestAllTypes::kRepeatedUint32FieldNumber;
const int TestAllTypes::kRepeatedUint64FieldNumber;
const int TestAllTypes::kRepeatedSint32FieldNumber;
const int TestAllTypes::kRepeatedSint64FieldNumber;
const int TestAllTypes::kRepeatedFixed32FieldNumber;
const int TestAllTypes::kRepeatedFixed64FieldNumber;
const int TestAllTypes::kRepeatedSfixed32FieldNumber;
const int TestAllTypes::kRepeatedSfixed64FieldNumber;
const int TestAllTypes::kRepeatedFloatFieldNumber;
const int TestAllTypes::kRepeatedDoubleFieldNumber;
const int TestAllTypes::kRepeatedBoolFieldNumber;
const int TestAllTypes::kRepeatedStringFieldNumber;
const int TestAllTypes::kRepeatedBytesFieldNumber;
const int TestAllTypes::kRepeatedNestedMessageFieldNumber;
const int TestAllTypes::kRepeatedNestedEnumFieldNumber;
const int TestAllTypes::kRepeatedCordFieldNumber;
const int TestAllTypes::kOneofUint32FieldNumber;
const int TestAllTypes::kOneofNestedMessageFieldNumber;
const int TestAllTypes::kOneofStringFieldNumber;
const int TestAllTypes::kOneofBytesFieldNumber;
const int TestAllTypes::kOneofEnumFieldNumber;
const int TestAllTypes::kMapStringToMessageFieldNumber;
const int TestAllTypes::kMapInt32ToMessageFieldNumber;
const int TestAllTypes::kMapInt64ToMessageFieldNumber;
const int TestAllTypes::kMapBoolToMessageFieldNumber;
const int TestAllTypes::kMapStringToInt64FieldNumber;
const int TestAllTypes::kMapInt64ToStringFieldNumber;
const int TestAllTypes::kAnotherMapStringToMessageFieldNumber;
const int TestAllTypes::kPackedRepeatedInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes::TestAllTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes)
}
TestAllTypes::TestAllTypes(const TestAllTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_cord_(from.repeated_cord_),
      packed_repeated_int64_(from.packed_repeated_int64_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestAllTypes_MapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[2].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt32ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[3].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt64ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[4].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapBoolToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[5].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[6].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt64ToStringEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[7].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_AnotherMapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[8].descriptor;
  map_string_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapStringToMessageEntry_descriptor);
  map_string_to_message_.MergeFrom(from.map_string_to_message_);
  map_int32_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int32_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapInt32ToMessageEntry_descriptor);
  map_int32_to_message_.MergeFrom(from.map_int32_to_message_);
  map_int64_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int64_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapInt64ToMessageEntry_descriptor);
  map_int64_to_message_.MergeFrom(from.map_int64_to_message_);
  map_bool_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_bool_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapBoolToMessageEntry_descriptor);
  map_bool_to_message_.MergeFrom(from.map_bool_to_message_);
  map_string_to_int64_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_int64_.SetEntryDescriptor(
      &TestAllTypes_MapStringToInt64Entry_descriptor);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  map_int64_to_string_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int64_to_string_.SetEntryDescriptor(
      &TestAllTypes_MapInt64ToStringEntry_descriptor);
  map_int64_to_string_.MergeFrom(from.map_int64_to_string_);
  another_map_string_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  another_map_string_to_message_.SetEntryDescriptor(
      &TestAllTypes_AnotherMapStringToMessageEntry_descriptor);
  another_map_string_to_message_.MergeFrom(from.another_map_string_to_message_);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_string().size() > 0) {
    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_bytes().size() > 0) {
    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  optional_cord_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_cord().size() > 0) {
    optional_cord_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_cord_);
  }
  if (from.has_optional_nested_message()) {
    optional_nested_message_ = new ::tensorflow::test::TestAllTypes_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = NULL;
  }
  if (from.has_optional_foreign_message()) {
    optional_foreign_message_ = new ::tensorflow::test::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = NULL;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    reinterpret_cast<char*>(&optional_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_) + sizeof(optional_foreign_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      mutable_oneof_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.oneof_nested_message());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes)
}

void TestAllTypes::SharedCtor() {
  const ::google::protobuf::Descriptor*& TestAllTypes_MapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[2].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt32ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[3].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt64ToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[4].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapBoolToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[5].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[6].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_MapInt64ToStringEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[7].descriptor;
  const ::google::protobuf::Descriptor*& TestAllTypes_AnotherMapStringToMessageEntry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[8].descriptor;
  map_string_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapStringToMessageEntry_descriptor);
  map_int32_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int32_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapInt32ToMessageEntry_descriptor);
  map_int64_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int64_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapInt64ToMessageEntry_descriptor);
  map_bool_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_bool_to_message_.SetEntryDescriptor(
      &TestAllTypes_MapBoolToMessageEntry_descriptor);
  map_string_to_int64_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_int64_.SetEntryDescriptor(
      &TestAllTypes_MapStringToInt64Entry_descriptor);
  map_int64_to_string_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_int64_to_string_.SetEntryDescriptor(
      &TestAllTypes_MapInt64ToStringEntry_descriptor);
  another_map_string_to_message_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  another_map_string_to_message_.SetEntryDescriptor(
      &TestAllTypes_AnotherMapStringToMessageEntry_descriptor);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, reinterpret_cast<char*>(&optional_foreign_enum_) -
    reinterpret_cast<char*>(&optional_nested_message_) + sizeof(optional_foreign_enum_));
  clear_has_oneof_field();
  _cached_size_ = 0;
}

TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes)
  SharedDtor();
}

void TestAllTypes::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete optional_nested_message_;
  }
  if (this != internal_default_instance()) {
    delete optional_foreign_message_;
  }
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestAllTypes::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[9].descriptor;
}

const TestAllTypes& TestAllTypes::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestAllTypes* TestAllTypes::New(::google::protobuf::Arena* arena) const {
  TestAllTypes* n = new TestAllTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.test.TestAllTypes)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      delete oneof_field_.oneof_nested_message_;
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes)
  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_nested_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_cord_.Clear();
  map_string_to_message_.Clear();
  map_int32_to_message_.Clear();
  map_int64_to_message_.Clear();
  map_bool_to_message_.Clear();
  map_string_to_int64_.Clear();
  map_int64_to_string_.Clear();
  another_map_string_to_message_.Clear();
  packed_repeated_int64_.Clear();
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && optional_nested_message_ != NULL) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = NULL;
  if (GetArenaNoVirtual() == NULL && optional_foreign_message_ != NULL) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = NULL;
  ::memset(&optional_int64_, 0, reinterpret_cast<char*>(&optional_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_) + sizeof(optional_foreign_enum_));
  clear_oneof_field();
}

bool TestAllTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 optional_int64 = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 optional_uint32 = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 optional_sint32 = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &optional_sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 optional_sint64 = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &optional_sint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 optional_fixed32 = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &optional_fixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 optional_fixed64 = 8;
      case 8: {
        if (tag == 65u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &optional_fixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 optional_sfixed32 = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &optional_sfixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 optional_sfixed64 = 10;
      case 10: {
        if (tag == 81u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optional_sfixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float optional_float = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optional_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double optional_double = 12;
      case 12: {
        if (tag == 97u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool optional_bool = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optional_string = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), this->optional_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.optional_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes optional_bytes = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optional_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_foreign_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
      case 21: {
        if (tag == 168u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
      case 22: {
        if (tag == 176u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_foreign_enum(static_cast< ::tensorflow::test::ForeignEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optional_cord = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_cord()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_cord().data(), this->optional_cord().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.optional_cord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 31;
      case 31: {
        if (tag == 250u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (tag == 248u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 250u, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 repeated_int64 = 32;
      case 32: {
        if (tag == 258u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else if (tag == 256u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 258u, input, this->mutable_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 repeated_uint32 = 33;
      case 33: {
        if (tag == 266u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else if (tag == 264u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 266u, input, this->mutable_repeated_uint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 repeated_uint64 = 34;
      case 34: {
        if (tag == 274u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else if (tag == 272u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 274u, input, this->mutable_repeated_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 repeated_sint32 = 35;
      case 35: {
        if (tag == 282u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_repeated_sint32())));
        } else if (tag == 280u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 282u, input, this->mutable_repeated_sint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 repeated_sint64 = 36;
      case 36: {
        if (tag == 290u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_repeated_sint64())));
        } else if (tag == 288u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 290u, input, this->mutable_repeated_sint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 repeated_fixed32 = 37;
      case 37: {
        if (tag == 298u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_repeated_fixed32())));
        } else if (tag == 301u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 298u, input, this->mutable_repeated_fixed32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 repeated_fixed64 = 38;
      case 38: {
        if (tag == 306u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_repeated_fixed64())));
        } else if (tag == 305u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 306u, input, this->mutable_repeated_fixed64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39: {
        if (tag == 314u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_repeated_sfixed32())));
        } else if (tag == 317u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 2, 314u, input, this->mutable_repeated_sfixed32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40: {
        if (tag == 322u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_repeated_sfixed64())));
        } else if (tag == 321u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 2, 322u, input, this->mutable_repeated_sfixed64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float repeated_float = 41;
      case 41: {
        if (tag == 330u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else if (tag == 333u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 330u, input, this->mutable_repeated_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double repeated_double = 42;
      case 42: {
        if (tag == 338u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else if (tag == 337u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 338u, input, this->mutable_repeated_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool repeated_bool = 43;
      case 43: {
        if (tag == 346u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else if (tag == 344u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 346u, input, this->mutable_repeated_bool())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_string = 44;
      case 44: {
        if (tag == 354u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_string(this->repeated_string_size() - 1).data(),
            this->repeated_string(this->repeated_string_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.repeated_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes repeated_bytes = 45;
      case 45: {
        if (tag == 362u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
      case 48: {
        if (tag == 386u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_repeated_nested_message()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
      case 51: {
        if (tag == 410u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_repeated_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 408u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_repeated_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_cord = 55;
      case 55: {
        if (tag == 442u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_cord()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_cord(this->repeated_cord_size() - 1).data(),
            this->repeated_cord(this->repeated_cord_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.repeated_cord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
      case 58: {
        if (tag == 466u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapStringToMessageEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_string_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
      case 59: {
        if (tag == 474u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapInt32ToMessageEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_int32_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
      case 60: {
        if (tag == 482u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapInt64ToMessageEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_int64_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
      case 61: {
        if (tag == 490u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapBoolToMessageEntry::Parser< ::google::protobuf::internal::MapField<
              bool, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_bool_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, int64> map_string_to_int64 = 62;
      case 62: {
        if (tag == 498u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapStringToInt64Entry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&map_string_to_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int64, string> map_int64_to_string = 63;
      case 63: {
        if (tag == 506u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_MapInt64ToStringEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&map_int64_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated int64 packed_repeated_int64 = 64 [packed = true];
      case 64: {
        if (tag == 514u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_packed_repeated_int64())));
        } else if (tag == 512u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 514u, input, this->mutable_packed_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
      case 65: {
        if (tag == 522u) {
          DO_(input->IncrementRecursionDepth());
          TestAllTypes_AnotherMapStringToMessageEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&another_map_string_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
      case 100: {
        if (tag == 800u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oneof_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 oneof_uint32 = 111;
      case 111: {
        if (tag == 888u) {
          clear_oneof_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_field_.oneof_uint32_)));
          set_has_oneof_uint32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
      case 112: {
        if (tag == 898u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oneof_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oneof_string = 113;
      case 113: {
        if (tag == 906u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oneof_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oneof_string().data(), this->oneof_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.oneof_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes oneof_bytes = 114;
      case 114: {
        if (tag == 914u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oneof_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 optional_uint64 = 999;
      case 999: {
        if (tag == 7992u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optional_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 optional_int32 = 1000;
      case 1000: {
        if (tag == 8000u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes)
  return false;
#undef DO_
}

void TestAllTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes)
  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->optional_int64(), output);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optional_uint32(), output);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->optional_sint32(), output);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->optional_sint64(), output);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->optional_fixed32(), output);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->optional_fixed64(), output);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->optional_sfixed32(), output);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->optional_sfixed64(), output);
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->optional_float(), output);
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->optional_double(), output);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->optional_bool(), output);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->optional_string(), output);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->optional_bytes(), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->optional_nested_message_, output);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->optional_foreign_message_, output);
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->optional_nested_enum(), output);
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->optional_foreign_enum(), output);
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_cord().data(), this->optional_cord().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_cord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->optional_cord(), output);
  }

  // repeated int32 repeated_int32 = 31;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(31, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 32;
  if (this->repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(32, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 33;
  if (this->repeated_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(33, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_uint32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 34;
  if (this->repeated_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(34, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_uint64_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->repeated_uint64(i), output);
  }

  // repeated sint32 repeated_sint32 = 35;
  if (this->repeated_sint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(35, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_sint32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->repeated_sint32(i), output);
  }

  // repeated sint64 repeated_sint64 = 36;
  if (this->repeated_sint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(36, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_sint64_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->repeated_sint64(i), output);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->repeated_fixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(37, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_fixed32_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->repeated_fixed32().data(), this->repeated_fixed32_size(), output);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->repeated_fixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(38, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_fixed64_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFixed64Array(
      this->repeated_fixed64().data(), this->repeated_fixed64_size(), output);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->repeated_sfixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(39, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_sfixed32_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->repeated_sfixed32().data(), this->repeated_sfixed32_size(), output);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->repeated_sfixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(40, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_sfixed64_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64Array(
      this->repeated_sfixed64().data(), this->repeated_sfixed64_size(), output);
  }

  // repeated float repeated_float = 41;
  if (this->repeated_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(41, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_float_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->repeated_float().data(), this->repeated_float_size(), output);
  }

  // repeated double repeated_double = 42;
  if (this->repeated_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(42, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_double_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->repeated_double().data(), this->repeated_double_size(), output);
  }

  // repeated bool repeated_bool = 43;
  if (this->repeated_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(43, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_bool_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->repeated_bool().data(), this->repeated_bool_size(), output);
  }

  // repeated string repeated_string = 44;
  for (int i = 0; i < this->repeated_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), this->repeated_string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      45, this->repeated_bytes(i), output);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0, n = this->repeated_nested_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->repeated_nested_message(i), output);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  if (this->repeated_nested_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_repeated_nested_enum_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_nested_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->repeated_nested_enum(i), output);
  }

  // repeated string repeated_cord = 55;
  for (int i = 0; i < this->repeated_cord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_cord(i).data(), this->repeated_cord(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_cord");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->repeated_cord(i), output);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  if (!this->map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            58, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToMessageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            58, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  if (!this->map_int32_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_int32_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int32_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt32ToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            59, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt32ToMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            59, *entry, output);
      }
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  if (!this->map_int64_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_int64_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            60, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            60, *entry, output);
      }
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  if (!this->map_bool_to_message().empty()) {
    typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_bool_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_bool_to_message().size()]);
      typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapBoolToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapBoolToMessageEntry> entry;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
      }
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToInt64Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  if (!this->map_int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_int64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  if (this->packed_repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(64, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_repeated_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_repeated_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->packed_repeated_int64(i), output);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  if (!this->another_map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->another_map_string_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->another_map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_AnotherMapStringToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_AnotherMapStringToMessageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
  if (has_oneof_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->oneof_enum(), output);
  }

  // uint32 oneof_uint32 = 111;
  if (has_oneof_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(111, this->oneof_uint32(), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
  if (has_oneof_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *oneof_field_.oneof_nested_message_, output);
  }

  // string oneof_string = 113;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), this->oneof_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.oneof_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      113, this->oneof_string(), output);
  }

  // bytes oneof_bytes = 114;
  if (has_oneof_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      114, this->oneof_bytes(), output);
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(999, this->optional_uint64(), output);
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1000, this->optional_int32(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes)
}

::google::protobuf::uint8* TestAllTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes)
  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optional_uint32(), target);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->optional_sint32(), target);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->optional_sint64(), target);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->optional_fixed32(), target);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->optional_fixed64(), target);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->optional_sfixed32(), target);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->optional_sfixed64(), target);
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->optional_float(), target);
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->optional_double(), target);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->optional_bool(), target);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->optional_string(), target);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->optional_bytes(), target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->optional_nested_message_, false, target);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->optional_foreign_message_, false, target);
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->optional_nested_enum(), target);
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->optional_foreign_enum(), target);
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_cord().data(), this->optional_cord().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_cord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->optional_cord(), target);
  }

  // repeated int32 repeated_int32 = 31;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      31,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_int32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  if (this->repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      32,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  if (this->repeated_uint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      33,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_uint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_uint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  if (this->repeated_uint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      34,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_uint64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_uint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  if (this->repeated_sint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      35,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_sint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_sint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  if (this->repeated_sint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      36,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_sint64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_sint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->repeated_fixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      37,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_fixed32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_fixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->repeated_fixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      38,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_fixed64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_fixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->repeated_sfixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      39,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_sfixed32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_sfixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->repeated_sfixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      40,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_sfixed64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_sfixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64NoTagToArray(this->repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  if (this->repeated_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      41,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_float_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  if (this->repeated_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      42,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_double_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  if (this->repeated_bool_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      43,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_bool_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0; i < this->repeated_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), this->repeated_string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(44, this->repeated_string(i), target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(45, this->repeated_bytes(i), target);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0, n = this->repeated_nested_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, this->repeated_nested_message(i), false, target);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  if (this->repeated_nested_enum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _repeated_nested_enum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_nested_enum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->repeated_nested_enum(i), target);
  }

  // repeated string repeated_cord = 55;
  for (int i = 0; i < this->repeated_cord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_cord(i).data(), this->repeated_cord(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_cord");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(55, this->repeated_cord(i), target);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  if (!this->map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       58, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToMessageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       58, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  if (!this->map_int32_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_int32_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int32_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt32ToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       59, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt32ToMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       59, *entry, deterministic, target);
;
      }
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  if (!this->map_int64_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_int64_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       60, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToMessageEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       60, *entry, deterministic, target);
;
      }
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  if (!this->map_bool_to_message().empty()) {
    typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_bool_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_bool_to_message().size()]);
      typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapBoolToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapBoolToMessageEntry> entry;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
      }
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToInt64Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  if (!this->map_int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  if (this->packed_repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      64,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _packed_repeated_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->packed_repeated_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->packed_repeated_int64(i), target);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  if (!this->another_map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key");
      }
    };

    if (deterministic &&
        this->another_map_string_to_message().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->another_map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestAllTypes_AnotherMapStringToMessageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestAllTypes_AnotherMapStringToMessageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
  if (has_oneof_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->oneof_enum(), target);
  }

  // uint32 oneof_uint32 = 111;
  if (has_oneof_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(111, this->oneof_uint32(), target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
  if (has_oneof_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *oneof_field_.oneof_nested_message_, false, target);
  }

  // string oneof_string = 113;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), this->oneof_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.oneof_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        113, this->oneof_string(), target);
  }

  // bytes oneof_bytes = 114;
  if (has_oneof_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        114, this->oneof_bytes(), target);
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(999, this->optional_uint64(), target);
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1000, this->optional_int32(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes)
  return target;
}

size_t TestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes)
  size_t total_size = 0;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sint32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sint64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = this->repeated_fixed32_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_fixed32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = this->repeated_fixed64_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_fixed64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = this->repeated_sfixed32_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sfixed32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = this->repeated_sfixed64_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sfixed64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = this->repeated_float_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_float_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = this->repeated_double_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_double_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = this->repeated_bool_size();
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_bool_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_string_size());
  for (int i = 0; i < this->repeated_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_bytes_size());
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  {
    unsigned int count = this->repeated_nested_message_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->repeated_nested_message(i));
    }
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = this->repeated_nested_enum_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_nested_enum(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_nested_enum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_cord = 55;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_cord_size());
  for (int i = 0; i < this->repeated_cord_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_cord(i));
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_message_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToMessageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_string_to_message().begin();
        it != this->map_string_to_message().end(); ++it) {
      entry.reset(map_string_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int32_to_message_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapInt32ToMessageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_int32_to_message().begin();
        it != this->map_int32_to_message().end(); ++it) {
      entry.reset(map_int32_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int64_to_message_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToMessageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_int64_to_message().begin();
        it != this->map_int64_to_message().end(); ++it) {
      entry.reset(map_int64_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_bool_to_message_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapBoolToMessageEntry> entry;
    for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_bool_to_message().begin();
        it != this->map_bool_to_message().end(); ++it) {
      entry.reset(map_bool_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_int64_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapStringToInt64Entry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->map_string_to_int64().begin();
        it != this->map_string_to_int64().end(); ++it) {
      entry.reset(map_string_to_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int64_to_string_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_MapInt64ToStringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->map_int64_to_string().begin();
        it != this->map_int64_to_string().end(); ++it) {
      entry.reset(map_int64_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->another_map_string_to_message_size());
  {
    ::google::protobuf::scoped_ptr<TestAllTypes_AnotherMapStringToMessageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->another_map_string_to_message().begin();
        it != this->another_map_string_to_message().end(); ++it) {
      entry.reset(another_map_string_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->packed_repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_repeated_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->optional_bytes());
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_cord());
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optional_nested_message_);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optional_foreign_message_);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optional_uint32());
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->optional_uint64());
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->optional_sint64());
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->optional_sint32());
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    total_size += 1 + 4;
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    total_size += 1 + 4;
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    total_size += 1 + 8;
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_nested_enum());
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_foreign_enum());
  }

  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneof_uint32());
      break;
    }
    // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oneof_bytes());
      break;
    }
    // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
    case kOneofEnum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes)
    MergeFrom(*source);
  }
}

void TestAllTypes::MergeFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  map_string_to_message_.MergeFrom(from.map_string_to_message_);
  map_int32_to_message_.MergeFrom(from.map_int32_to_message_);
  map_int64_to_message_.MergeFrom(from.map_int64_to_message_);
  map_bool_to_message_.MergeFrom(from.map_bool_to_message_);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  map_int64_to_string_.MergeFrom(from.map_int64_to_string_);
  another_map_string_to_message_.MergeFrom(from.another_map_string_to_message_);
  packed_repeated_int64_.MergeFrom(from.packed_repeated_int64_);
  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  if (from.optional_bytes().size() > 0) {

    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  if (from.optional_cord().size() > 0) {

    optional_cord_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_cord_);
  }
  if (from.has_optional_nested_message()) {
    mutable_optional_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.optional_nested_message());
  }
  if (from.has_optional_foreign_message()) {
    mutable_optional_foreign_message()->::tensorflow::test::ForeignMessage::MergeFrom(from.optional_foreign_message());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
  if (from.optional_uint32() != 0) {
    set_optional_uint32(from.optional_uint32());
  }
  if (from.optional_uint64() != 0) {
    set_optional_uint64(from.optional_uint64());
  }
  if (from.optional_sint64() != 0) {
    set_optional_sint64(from.optional_sint64());
  }
  if (from.optional_sint32() != 0) {
    set_optional_sint32(from.optional_sint32());
  }
  if (from.optional_fixed32() != 0) {
    set_optional_fixed32(from.optional_fixed32());
  }
  if (from.optional_fixed64() != 0) {
    set_optional_fixed64(from.optional_fixed64());
  }
  if (from.optional_sfixed64() != 0) {
    set_optional_sfixed64(from.optional_sfixed64());
  }
  if (from.optional_sfixed32() != 0) {
    set_optional_sfixed32(from.optional_sfixed32());
  }
  if (from.optional_float() != 0) {
    set_optional_float(from.optional_float());
  }
  if (from.optional_double() != 0) {
    set_optional_double(from.optional_double());
  }
  if (from.optional_bool() != 0) {
    set_optional_bool(from.optional_bool());
  }
  if (from.optional_nested_enum() != 0) {
    set_optional_nested_enum(from.optional_nested_enum());
  }
  if (from.optional_foreign_enum() != 0) {
    set_optional_foreign_enum(from.optional_foreign_enum());
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      mutable_oneof_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.oneof_nested_message());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes::IsInitialized() const {
  return true;
}

void TestAllTypes::Swap(TestAllTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes::InternalSwap(TestAllTypes* other) {
  repeated_int32_.UnsafeArenaSwap(&other->repeated_int32_);
  repeated_int64_.UnsafeArenaSwap(&other->repeated_int64_);
  repeated_uint32_.UnsafeArenaSwap(&other->repeated_uint32_);
  repeated_uint64_.UnsafeArenaSwap(&other->repeated_uint64_);
  repeated_sint32_.UnsafeArenaSwap(&other->repeated_sint32_);
  repeated_sint64_.UnsafeArenaSwap(&other->repeated_sint64_);
  repeated_fixed32_.UnsafeArenaSwap(&other->repeated_fixed32_);
  repeated_fixed64_.UnsafeArenaSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.UnsafeArenaSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.UnsafeArenaSwap(&other->repeated_sfixed64_);
  repeated_float_.UnsafeArenaSwap(&other->repeated_float_);
  repeated_double_.UnsafeArenaSwap(&other->repeated_double_);
  repeated_bool_.UnsafeArenaSwap(&other->repeated_bool_);
  repeated_string_.UnsafeArenaSwap(&other->repeated_string_);
  repeated_bytes_.UnsafeArenaSwap(&other->repeated_bytes_);
  repeated_nested_message_.UnsafeArenaSwap(&other->repeated_nested_message_);
  repeated_nested_enum_.UnsafeArenaSwap(&other->repeated_nested_enum_);
  repeated_cord_.UnsafeArenaSwap(&other->repeated_cord_);
  map_string_to_message_.Swap(&other->map_string_to_message_);
  map_int32_to_message_.Swap(&other->map_int32_to_message_);
  map_int64_to_message_.Swap(&other->map_int64_to_message_);
  map_bool_to_message_.Swap(&other->map_bool_to_message_);
  map_string_to_int64_.Swap(&other->map_string_to_int64_);
  map_int64_to_string_.Swap(&other->map_int64_to_string_);
  another_map_string_to_message_.Swap(&other->another_map_string_to_message_);
  packed_repeated_int64_.UnsafeArenaSwap(&other->packed_repeated_int64_);
  optional_string_.Swap(&other->optional_string_);
  optional_bytes_.Swap(&other->optional_bytes_);
  optional_cord_.Swap(&other->optional_cord_);
  std::swap(optional_nested_message_, other->optional_nested_message_);
  std::swap(optional_foreign_message_, other->optional_foreign_message_);
  std::swap(optional_int64_, other->optional_int64_);
  std::swap(optional_int32_, other->optional_int32_);
  std::swap(optional_uint32_, other->optional_uint32_);
  std::swap(optional_uint64_, other->optional_uint64_);
  std::swap(optional_sint64_, other->optional_sint64_);
  std::swap(optional_sint32_, other->optional_sint32_);
  std::swap(optional_fixed32_, other->optional_fixed32_);
  std::swap(optional_fixed64_, other->optional_fixed64_);
  std::swap(optional_sfixed64_, other->optional_sfixed64_);
  std::swap(optional_sfixed32_, other->optional_sfixed32_);
  std::swap(optional_float_, other->optional_float_);
  std::swap(optional_double_, other->optional_double_);
  std::swap(optional_bool_, other->optional_bool_);
  std::swap(optional_nested_enum_, other->optional_nested_enum_);
  std::swap(optional_foreign_enum_, other->optional_foreign_enum_);
  std::swap(oneof_field_, other->oneof_field_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestAllTypes::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestAllTypes

// int32 optional_int32 = 1000;
void TestAllTypes::clear_optional_int32() {
  optional_int32_ = 0;
}
::google::protobuf::int32 TestAllTypes::optional_int32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_int32)
  return optional_int32_;
}
void TestAllTypes::set_optional_int32(::google::protobuf::int32 value) {
  
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_int32)
}

// int64 optional_int64 = 2;
void TestAllTypes::clear_optional_int64() {
  optional_int64_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TestAllTypes::optional_int64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_int64)
  return optional_int64_;
}
void TestAllTypes::set_optional_int64(::google::protobuf::int64 value) {
  
  optional_int64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_int64)
}

// uint32 optional_uint32 = 3;
void TestAllTypes::clear_optional_uint32() {
  optional_uint32_ = 0u;
}
::google::protobuf::uint32 TestAllTypes::optional_uint32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_uint32)
  return optional_uint32_;
}
void TestAllTypes::set_optional_uint32(::google::protobuf::uint32 value) {
  
  optional_uint32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_uint32)
}

// uint64 optional_uint64 = 999;
void TestAllTypes::clear_optional_uint64() {
  optional_uint64_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TestAllTypes::optional_uint64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_uint64)
  return optional_uint64_;
}
void TestAllTypes::set_optional_uint64(::google::protobuf::uint64 value) {
  
  optional_uint64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_uint64)
}

// sint32 optional_sint32 = 5;
void TestAllTypes::clear_optional_sint32() {
  optional_sint32_ = 0;
}
::google::protobuf::int32 TestAllTypes::optional_sint32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_sint32)
  return optional_sint32_;
}
void TestAllTypes::set_optional_sint32(::google::protobuf::int32 value) {
  
  optional_sint32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_sint32)
}

// sint64 optional_sint64 = 6;
void TestAllTypes::clear_optional_sint64() {
  optional_sint64_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TestAllTypes::optional_sint64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_sint64)
  return optional_sint64_;
}
void TestAllTypes::set_optional_sint64(::google::protobuf::int64 value) {
  
  optional_sint64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_sint64)
}

// fixed32 optional_fixed32 = 7;
void TestAllTypes::clear_optional_fixed32() {
  optional_fixed32_ = 0u;
}
::google::protobuf::uint32 TestAllTypes::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_fixed32)
  return optional_fixed32_;
}
void TestAllTypes::set_optional_fixed32(::google::protobuf::uint32 value) {
  
  optional_fixed32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_fixed32)
}

// fixed64 optional_fixed64 = 8;
void TestAllTypes::clear_optional_fixed64() {
  optional_fixed64_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TestAllTypes::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_fixed64)
  return optional_fixed64_;
}
void TestAllTypes::set_optional_fixed64(::google::protobuf::uint64 value) {
  
  optional_fixed64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_fixed64)
}

// sfixed32 optional_sfixed32 = 9;
void TestAllTypes::clear_optional_sfixed32() {
  optional_sfixed32_ = 0;
}
::google::protobuf::int32 TestAllTypes::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_sfixed32)
  return optional_sfixed32_;
}
void TestAllTypes::set_optional_sfixed32(::google::protobuf::int32 value) {
  
  optional_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_sfixed32)
}

// sfixed64 optional_sfixed64 = 10;
void TestAllTypes::clear_optional_sfixed64() {
  optional_sfixed64_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TestAllTypes::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_sfixed64)
  return optional_sfixed64_;
}
void TestAllTypes::set_optional_sfixed64(::google::protobuf::int64 value) {
  
  optional_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_sfixed64)
}

// float optional_float = 11;
void TestAllTypes::clear_optional_float() {
  optional_float_ = 0;
}
float TestAllTypes::optional_float() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_float)
  return optional_float_;
}
void TestAllTypes::set_optional_float(float value) {
  
  optional_float_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_float)
}

// double optional_double = 12;
void TestAllTypes::clear_optional_double() {
  optional_double_ = 0;
}
double TestAllTypes::optional_double() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_double)
  return optional_double_;
}
void TestAllTypes::set_optional_double(double value) {
  
  optional_double_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_double)
}

// bool optional_bool = 13;
void TestAllTypes::clear_optional_bool() {
  optional_bool_ = false;
}
bool TestAllTypes::optional_bool() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_bool)
  return optional_bool_;
}
void TestAllTypes::set_optional_bool(bool value) {
  
  optional_bool_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_bool)
}

// string optional_string = 14;
void TestAllTypes::clear_optional_string() {
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestAllTypes::optional_string() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_string)
  return optional_string_.GetNoArena();
}
void TestAllTypes::set_optional_string(const ::std::string& value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_string)
}
#if LANG_CXX11
void TestAllTypes::set_optional_string(::std::string&& value) {
  
  optional_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.optional_string)
}
#endif
void TestAllTypes::set_optional_string(const char* value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.optional_string)
}
void TestAllTypes::set_optional_string(const char* value, size_t size) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.optional_string)
}
::std::string* TestAllTypes::mutable_optional_string() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.optional_string)
  return optional_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes::release_optional_string() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.optional_string)
  
  return optional_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAllTypes::set_allocated_optional_string(::std::string* optional_string) {
  if (optional_string != NULL) {
    
  } else {
    
  }
  optional_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_string);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.optional_string)
}

// bytes optional_bytes = 15;
void TestAllTypes::clear_optional_bytes() {
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestAllTypes::optional_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_bytes)
  return optional_bytes_.GetNoArena();
}
void TestAllTypes::set_optional_bytes(const ::std::string& value) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_bytes)
}
#if LANG_CXX11
void TestAllTypes::set_optional_bytes(::std::string&& value) {
  
  optional_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.optional_bytes)
}
#endif
void TestAllTypes::set_optional_bytes(const char* value) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.optional_bytes)
}
void TestAllTypes::set_optional_bytes(const void* value, size_t size) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.optional_bytes)
}
::std::string* TestAllTypes::mutable_optional_bytes() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.optional_bytes)
  return optional_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.optional_bytes)
  
  return optional_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAllTypes::set_allocated_optional_bytes(::std::string* optional_bytes) {
  if (optional_bytes != NULL) {
    
  } else {
    
  }
  optional_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_bytes);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.optional_bytes)
}

// .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
bool TestAllTypes::has_optional_nested_message() const {
  return this != internal_default_instance() && optional_nested_message_ != NULL;
}
void TestAllTypes::clear_optional_nested_message() {
  if (GetArenaNoVirtual() == NULL && optional_nested_message_ != NULL) delete optional_nested_message_;
  optional_nested_message_ = NULL;
}
const ::tensorflow::test::TestAllTypes_NestedMessage& TestAllTypes::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_nested_message)
  return optional_nested_message_ != NULL ? *optional_nested_message_
                         : *::tensorflow::test::TestAllTypes_NestedMessage::internal_default_instance();
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::mutable_optional_nested_message() {
  
  if (optional_nested_message_ == NULL) {
    optional_nested_message_ = new ::tensorflow::test::TestAllTypes_NestedMessage;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.optional_nested_message)
  return optional_nested_message_;
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.optional_nested_message)
  
  ::tensorflow::test::TestAllTypes_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = NULL;
  return temp;
}
void TestAllTypes::set_allocated_optional_nested_message(::tensorflow::test::TestAllTypes_NestedMessage* optional_nested_message) {
  delete optional_nested_message_;
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.optional_nested_message)
}

// .tensorflow.test.ForeignMessage optional_foreign_message = 19;
bool TestAllTypes::has_optional_foreign_message() const {
  return this != internal_default_instance() && optional_foreign_message_ != NULL;
}
void TestAllTypes::clear_optional_foreign_message() {
  if (GetArenaNoVirtual() == NULL && optional_foreign_message_ != NULL) delete optional_foreign_message_;
  optional_foreign_message_ = NULL;
}
const ::tensorflow::test::ForeignMessage& TestAllTypes::optional_foreign_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_foreign_message)
  return optional_foreign_message_ != NULL ? *optional_foreign_message_
                         : *::tensorflow::test::ForeignMessage::internal_default_instance();
}
::tensorflow::test::ForeignMessage* TestAllTypes::mutable_optional_foreign_message() {
  
  if (optional_foreign_message_ == NULL) {
    optional_foreign_message_ = new ::tensorflow::test::ForeignMessage;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.optional_foreign_message)
  return optional_foreign_message_;
}
::tensorflow::test::ForeignMessage* TestAllTypes::release_optional_foreign_message() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.optional_foreign_message)
  
  ::tensorflow::test::ForeignMessage* temp = optional_foreign_message_;
  optional_foreign_message_ = NULL;
  return temp;
}
void TestAllTypes::set_allocated_optional_foreign_message(::tensorflow::test::ForeignMessage* optional_foreign_message) {
  delete optional_foreign_message_;
  optional_foreign_message_ = optional_foreign_message;
  if (optional_foreign_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.optional_foreign_message)
}

// .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
void TestAllTypes::clear_optional_nested_enum() {
  optional_nested_enum_ = 0;
}
::tensorflow::test::TestAllTypes_NestedEnum TestAllTypes::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_nested_enum)
  return static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(optional_nested_enum_);
}
void TestAllTypes::set_optional_nested_enum(::tensorflow::test::TestAllTypes_NestedEnum value) {
  
  optional_nested_enum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_nested_enum)
}

// .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
void TestAllTypes::clear_optional_foreign_enum() {
  optional_foreign_enum_ = 0;
}
::tensorflow::test::ForeignEnum TestAllTypes::optional_foreign_enum() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_foreign_enum)
  return static_cast< ::tensorflow::test::ForeignEnum >(optional_foreign_enum_);
}
void TestAllTypes::set_optional_foreign_enum(::tensorflow::test::ForeignEnum value) {
  
  optional_foreign_enum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_foreign_enum)
}

// string optional_cord = 25;
void TestAllTypes::clear_optional_cord() {
  optional_cord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestAllTypes::optional_cord() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.optional_cord)
  return optional_cord_.GetNoArena();
}
void TestAllTypes::set_optional_cord(const ::std::string& value) {
  
  optional_cord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.optional_cord)
}
#if LANG_CXX11
void TestAllTypes::set_optional_cord(::std::string&& value) {
  
  optional_cord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.optional_cord)
}
#endif
void TestAllTypes::set_optional_cord(const char* value) {
  
  optional_cord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.optional_cord)
}
void TestAllTypes::set_optional_cord(const char* value, size_t size) {
  
  optional_cord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.optional_cord)
}
::std::string* TestAllTypes::mutable_optional_cord() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.optional_cord)
  return optional_cord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes::release_optional_cord() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.optional_cord)
  
  return optional_cord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestAllTypes::set_allocated_optional_cord(::std::string* optional_cord) {
  if (optional_cord != NULL) {
    
  } else {
    
  }
  optional_cord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_cord);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.optional_cord)
}

// repeated int32 repeated_int32 = 31;
int TestAllTypes::repeated_int32_size() const {
  return repeated_int32_.size();
}
void TestAllTypes::clear_repeated_int32() {
  repeated_int32_.Clear();
}
::google::protobuf::int32 TestAllTypes::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_int32)
  return repeated_int32_.Get(index);
}
void TestAllTypes::set_repeated_int32(int index, ::google::protobuf::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_int32)
}
void TestAllTypes::add_repeated_int32(::google::protobuf::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_int32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestAllTypes::repeated_int32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_int32)
  return repeated_int32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestAllTypes::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_int32)
  return &repeated_int32_;
}

// repeated int64 repeated_int64 = 32;
int TestAllTypes::repeated_int64_size() const {
  return repeated_int64_.size();
}
void TestAllTypes::clear_repeated_int64() {
  repeated_int64_.Clear();
}
::google::protobuf::int64 TestAllTypes::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_int64)
  return repeated_int64_.Get(index);
}
void TestAllTypes::set_repeated_int64(int index, ::google::protobuf::int64 value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_int64)
}
void TestAllTypes::add_repeated_int64(::google::protobuf::int64 value) {
  repeated_int64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_int64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestAllTypes::repeated_int64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_int64)
  return repeated_int64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestAllTypes::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_int64)
  return &repeated_int64_;
}

// repeated uint32 repeated_uint32 = 33;
int TestAllTypes::repeated_uint32_size() const {
  return repeated_uint32_.size();
}
void TestAllTypes::clear_repeated_uint32() {
  repeated_uint32_.Clear();
}
::google::protobuf::uint32 TestAllTypes::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_uint32)
  return repeated_uint32_.Get(index);
}
void TestAllTypes::set_repeated_uint32(int index, ::google::protobuf::uint32 value) {
  repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_uint32)
}
void TestAllTypes::add_repeated_uint32(::google::protobuf::uint32 value) {
  repeated_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_uint32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestAllTypes::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_uint32)
  return repeated_uint32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestAllTypes::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_uint32)
  return &repeated_uint32_;
}

// repeated uint64 repeated_uint64 = 34;
int TestAllTypes::repeated_uint64_size() const {
  return repeated_uint64_.size();
}
void TestAllTypes::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
::google::protobuf::uint64 TestAllTypes::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_uint64)
  return repeated_uint64_.Get(index);
}
void TestAllTypes::set_repeated_uint64(int index, ::google::protobuf::uint64 value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_uint64)
}
void TestAllTypes::add_repeated_uint64(::google::protobuf::uint64 value) {
  repeated_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_uint64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestAllTypes::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_uint64)
  return repeated_uint64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestAllTypes::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_uint64)
  return &repeated_uint64_;
}

// repeated sint32 repeated_sint32 = 35;
int TestAllTypes::repeated_sint32_size() const {
  return repeated_sint32_.size();
}
void TestAllTypes::clear_repeated_sint32() {
  repeated_sint32_.Clear();
}
::google::protobuf::int32 TestAllTypes::repeated_sint32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_sint32)
  return repeated_sint32_.Get(index);
}
void TestAllTypes::set_repeated_sint32(int index, ::google::protobuf::int32 value) {
  repeated_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_sint32)
}
void TestAllTypes::add_repeated_sint32(::google::protobuf::int32 value) {
  repeated_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_sint32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestAllTypes::repeated_sint32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_sint32)
  return repeated_sint32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestAllTypes::mutable_repeated_sint32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_sint32)
  return &repeated_sint32_;
}

// repeated sint64 repeated_sint64 = 36;
int TestAllTypes::repeated_sint64_size() const {
  return repeated_sint64_.size();
}
void TestAllTypes::clear_repeated_sint64() {
  repeated_sint64_.Clear();
}
::google::protobuf::int64 TestAllTypes::repeated_sint64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_sint64)
  return repeated_sint64_.Get(index);
}
void TestAllTypes::set_repeated_sint64(int index, ::google::protobuf::int64 value) {
  repeated_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_sint64)
}
void TestAllTypes::add_repeated_sint64(::google::protobuf::int64 value) {
  repeated_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_sint64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestAllTypes::repeated_sint64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_sint64)
  return repeated_sint64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestAllTypes::mutable_repeated_sint64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_sint64)
  return &repeated_sint64_;
}

// repeated fixed32 repeated_fixed32 = 37;
int TestAllTypes::repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
void TestAllTypes::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
::google::protobuf::uint32 TestAllTypes::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_fixed32)
  return repeated_fixed32_.Get(index);
}
void TestAllTypes::set_repeated_fixed32(int index, ::google::protobuf::uint32 value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_fixed32)
}
void TestAllTypes::add_repeated_fixed32(::google::protobuf::uint32 value) {
  repeated_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_fixed32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestAllTypes::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_fixed32)
  return repeated_fixed32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestAllTypes::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_fixed32)
  return &repeated_fixed32_;
}

// repeated fixed64 repeated_fixed64 = 38;
int TestAllTypes::repeated_fixed64_size() const {
  return repeated_fixed64_.size();
}
void TestAllTypes::clear_repeated_fixed64() {
  repeated_fixed64_.Clear();
}
::google::protobuf::uint64 TestAllTypes::repeated_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_fixed64)
  return repeated_fixed64_.Get(index);
}
void TestAllTypes::set_repeated_fixed64(int index, ::google::protobuf::uint64 value) {
  repeated_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_fixed64)
}
void TestAllTypes::add_repeated_fixed64(::google::protobuf::uint64 value) {
  repeated_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_fixed64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestAllTypes::repeated_fixed64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_fixed64)
  return repeated_fixed64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestAllTypes::mutable_repeated_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_fixed64)
  return &repeated_fixed64_;
}

// repeated sfixed32 repeated_sfixed32 = 39;
int TestAllTypes::repeated_sfixed32_size() const {
  return repeated_sfixed32_.size();
}
void TestAllTypes::clear_repeated_sfixed32() {
  repeated_sfixed32_.Clear();
}
::google::protobuf::int32 TestAllTypes::repeated_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_sfixed32)
  return repeated_sfixed32_.Get(index);
}
void TestAllTypes::set_repeated_sfixed32(int index, ::google::protobuf::int32 value) {
  repeated_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_sfixed32)
}
void TestAllTypes::add_repeated_sfixed32(::google::protobuf::int32 value) {
  repeated_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_sfixed32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestAllTypes::repeated_sfixed32() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_sfixed32)
  return repeated_sfixed32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestAllTypes::mutable_repeated_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_sfixed32)
  return &repeated_sfixed32_;
}

// repeated sfixed64 repeated_sfixed64 = 40;
int TestAllTypes::repeated_sfixed64_size() const {
  return repeated_sfixed64_.size();
}
void TestAllTypes::clear_repeated_sfixed64() {
  repeated_sfixed64_.Clear();
}
::google::protobuf::int64 TestAllTypes::repeated_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_sfixed64)
  return repeated_sfixed64_.Get(index);
}
void TestAllTypes::set_repeated_sfixed64(int index, ::google::protobuf::int64 value) {
  repeated_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_sfixed64)
}
void TestAllTypes::add_repeated_sfixed64(::google::protobuf::int64 value) {
  repeated_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_sfixed64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestAllTypes::repeated_sfixed64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_sfixed64)
  return repeated_sfixed64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestAllTypes::mutable_repeated_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_sfixed64)
  return &repeated_sfixed64_;
}

// repeated float repeated_float = 41;
int TestAllTypes::repeated_float_size() const {
  return repeated_float_.size();
}
void TestAllTypes::clear_repeated_float() {
  repeated_float_.Clear();
}
float TestAllTypes::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_float)
  return repeated_float_.Get(index);
}
void TestAllTypes::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_float)
}
void TestAllTypes::add_repeated_float(float value) {
  repeated_float_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_float)
}
const ::google::protobuf::RepeatedField< float >&
TestAllTypes::repeated_float() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_float)
  return repeated_float_;
}
::google::protobuf::RepeatedField< float >*
TestAllTypes::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_float)
  return &repeated_float_;
}

// repeated double repeated_double = 42;
int TestAllTypes::repeated_double_size() const {
  return repeated_double_.size();
}
void TestAllTypes::clear_repeated_double() {
  repeated_double_.Clear();
}
double TestAllTypes::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_double)
  return repeated_double_.Get(index);
}
void TestAllTypes::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_double)
}
void TestAllTypes::add_repeated_double(double value) {
  repeated_double_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_double)
}
const ::google::protobuf::RepeatedField< double >&
TestAllTypes::repeated_double() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_double)
  return repeated_double_;
}
::google::protobuf::RepeatedField< double >*
TestAllTypes::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_double)
  return &repeated_double_;
}

// repeated bool repeated_bool = 43;
int TestAllTypes::repeated_bool_size() const {
  return repeated_bool_.size();
}
void TestAllTypes::clear_repeated_bool() {
  repeated_bool_.Clear();
}
bool TestAllTypes::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_bool)
  return repeated_bool_.Get(index);
}
void TestAllTypes::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_bool)
}
void TestAllTypes::add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_bool)
}
const ::google::protobuf::RepeatedField< bool >&
TestAllTypes::repeated_bool() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_bool)
  return repeated_bool_;
}
::google::protobuf::RepeatedField< bool >*
TestAllTypes::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_bool)
  return &repeated_bool_;
}

// repeated string repeated_string = 44;
int TestAllTypes::repeated_string_size() const {
  return repeated_string_.size();
}
void TestAllTypes::clear_repeated_string() {
  repeated_string_.Clear();
}
const ::std::string& TestAllTypes::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_string)
  return repeated_string_.Get(index);
}
::std::string* TestAllTypes::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.repeated_string)
  return repeated_string_.Mutable(index);
}
void TestAllTypes::set_repeated_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_string)
  repeated_string_.Mutable(index)->assign(value);
}
void TestAllTypes::set_repeated_string(int index, const char* value) {
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.repeated_string)
}
void TestAllTypes::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.repeated_string)
}
::std::string* TestAllTypes::add_repeated_string() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.test.TestAllTypes.repeated_string)
  return repeated_string_.Add();
}
void TestAllTypes::add_repeated_string(const ::std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_string)
}
void TestAllTypes::add_repeated_string(const char* value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.test.TestAllTypes.repeated_string)
}
void TestAllTypes::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.test.TestAllTypes.repeated_string)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestAllTypes::repeated_string() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_string)
  return repeated_string_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TestAllTypes::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_string)
  return &repeated_string_;
}

// repeated bytes repeated_bytes = 45;
int TestAllTypes::repeated_bytes_size() const {
  return repeated_bytes_.size();
}
void TestAllTypes::clear_repeated_bytes() {
  repeated_bytes_.Clear();
}
const ::std::string& TestAllTypes::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_bytes)
  return repeated_bytes_.Get(index);
}
::std::string* TestAllTypes::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.repeated_bytes)
  return repeated_bytes_.Mutable(index);
}
void TestAllTypes::set_repeated_bytes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_bytes)
  repeated_bytes_.Mutable(index)->assign(value);
}
void TestAllTypes::set_repeated_bytes(int index, const char* value) {
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.repeated_bytes)
}
void TestAllTypes::set_repeated_bytes(int index, const void* value, size_t size) {
  repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.repeated_bytes)
}
::std::string* TestAllTypes::add_repeated_bytes() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.test.TestAllTypes.repeated_bytes)
  return repeated_bytes_.Add();
}
void TestAllTypes::add_repeated_bytes(const ::std::string& value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_bytes)
}
void TestAllTypes::add_repeated_bytes(const char* value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.test.TestAllTypes.repeated_bytes)
}
void TestAllTypes::add_repeated_bytes(const void* value, size_t size) {
  repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.test.TestAllTypes.repeated_bytes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestAllTypes::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_bytes)
  return repeated_bytes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TestAllTypes::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_bytes)
  return &repeated_bytes_;
}

// repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
int TestAllTypes::repeated_nested_message_size() const {
  return repeated_nested_message_.size();
}
void TestAllTypes::clear_repeated_nested_message() {
  repeated_nested_message_.Clear();
}
const ::tensorflow::test::TestAllTypes_NestedMessage& TestAllTypes::repeated_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_.Get(index);
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::mutable_repeated_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_.Mutable(index);
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::add_repeated_nested_message() {
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_nested_message)
  return &repeated_nested_message_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::repeated_nested_message() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_;
}

// repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
int TestAllTypes::repeated_nested_enum_size() const {
  return repeated_nested_enum_.size();
}
void TestAllTypes::clear_repeated_nested_enum() {
  repeated_nested_enum_.Clear();
}
::tensorflow::test::TestAllTypes_NestedEnum TestAllTypes::repeated_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_nested_enum)
  return static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(repeated_nested_enum_.Get(index));
}
void TestAllTypes::set_repeated_nested_enum(int index, ::tensorflow::test::TestAllTypes_NestedEnum value) {
  repeated_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_nested_enum)
}
void TestAllTypes::add_repeated_nested_enum(::tensorflow::test::TestAllTypes_NestedEnum value) {
  repeated_nested_enum_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_nested_enum)
}
const ::google::protobuf::RepeatedField<int>&
TestAllTypes::repeated_nested_enum() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_nested_enum)
  return repeated_nested_enum_;
}
::google::protobuf::RepeatedField<int>*
TestAllTypes::mutable_repeated_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_nested_enum)
  return &repeated_nested_enum_;
}

// repeated string repeated_cord = 55;
int TestAllTypes::repeated_cord_size() const {
  return repeated_cord_.size();
}
void TestAllTypes::clear_repeated_cord() {
  repeated_cord_.Clear();
}
const ::std::string& TestAllTypes::repeated_cord(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.repeated_cord)
  return repeated_cord_.Get(index);
}
::std::string* TestAllTypes::mutable_repeated_cord(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.repeated_cord)
  return repeated_cord_.Mutable(index);
}
void TestAllTypes::set_repeated_cord(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.repeated_cord)
  repeated_cord_.Mutable(index)->assign(value);
}
void TestAllTypes::set_repeated_cord(int index, const char* value) {
  repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.repeated_cord)
}
void TestAllTypes::set_repeated_cord(int index, const char* value, size_t size) {
  repeated_cord_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.repeated_cord)
}
::std::string* TestAllTypes::add_repeated_cord() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.test.TestAllTypes.repeated_cord)
  return repeated_cord_.Add();
}
void TestAllTypes::add_repeated_cord(const ::std::string& value) {
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.repeated_cord)
}
void TestAllTypes::add_repeated_cord(const char* value) {
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.test.TestAllTypes.repeated_cord)
}
void TestAllTypes::add_repeated_cord(const char* value, size_t size) {
  repeated_cord_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.test.TestAllTypes.repeated_cord)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestAllTypes::repeated_cord() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.repeated_cord)
  return repeated_cord_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TestAllTypes::mutable_repeated_cord() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.repeated_cord)
  return &repeated_cord_;
}

// uint32 oneof_uint32 = 111;
bool TestAllTypes::has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
void TestAllTypes::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
void TestAllTypes::clear_oneof_uint32() {
  if (has_oneof_uint32()) {
    oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
::google::protobuf::uint32 TestAllTypes::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.oneof_uint32)
  if (has_oneof_uint32()) {
    return oneof_field_.oneof_uint32_;
  }
  return 0u;
}
void TestAllTypes::set_oneof_uint32(::google::protobuf::uint32 value) {
  if (!has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  oneof_field_.oneof_uint32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_uint32)
}

// .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
bool TestAllTypes::has_oneof_nested_message() const {
  return oneof_field_case() == kOneofNestedMessage;
}
void TestAllTypes::set_has_oneof_nested_message() {
  _oneof_case_[0] = kOneofNestedMessage;
}
void TestAllTypes::clear_oneof_nested_message() {
  if (has_oneof_nested_message()) {
    delete oneof_field_.oneof_nested_message_;
    clear_has_oneof_field();
  }
}
 const ::tensorflow::test::TestAllTypes_NestedMessage& TestAllTypes::oneof_nested_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.oneof_nested_message)
  return has_oneof_nested_message()
      ? *oneof_field_.oneof_nested_message_
      : ::tensorflow::test::TestAllTypes_NestedMessage::default_instance();
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::mutable_oneof_nested_message() {
  if (!has_oneof_nested_message()) {
    clear_oneof_field();
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = new ::tensorflow::test::TestAllTypes_NestedMessage;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.oneof_nested_message)
  return oneof_field_.oneof_nested_message_;
}
::tensorflow::test::TestAllTypes_NestedMessage* TestAllTypes::release_oneof_nested_message() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.oneof_nested_message)
  if (has_oneof_nested_message()) {
    clear_has_oneof_field();
    ::tensorflow::test::TestAllTypes_NestedMessage* temp = oneof_field_.oneof_nested_message_;
    oneof_field_.oneof_nested_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TestAllTypes::set_allocated_oneof_nested_message(::tensorflow::test::TestAllTypes_NestedMessage* oneof_nested_message) {
  clear_oneof_field();
  if (oneof_nested_message) {
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.oneof_nested_message)
}

// string oneof_string = 113;
bool TestAllTypes::has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
void TestAllTypes::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
void TestAllTypes::clear_oneof_string() {
  if (has_oneof_string()) {
    oneof_field_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
const ::std::string& TestAllTypes::oneof_string() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.oneof_string)
  if (has_oneof_string()) {
    return oneof_field_.oneof_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TestAllTypes::set_oneof_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_string)
}
#if LANG_CXX11
void TestAllTypes::set_oneof_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.oneof_string)
}
#endif
void TestAllTypes::set_oneof_string(const char* value) {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.oneof_string)
}
void TestAllTypes::set_oneof_string(const char* value, size_t size) {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.oneof_string)
}
::std::string* TestAllTypes::mutable_oneof_string() {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.oneof_string)
  return oneof_field_.oneof_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes::release_oneof_string() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.oneof_string)
  if (has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TestAllTypes::set_allocated_oneof_string(::std::string* oneof_string) {
  if (!has_oneof_string()) {
    oneof_field_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_oneof_field();
  if (oneof_string != NULL) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        oneof_string);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.oneof_string)
}

// bytes oneof_bytes = 114;
bool TestAllTypes::has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
void TestAllTypes::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
void TestAllTypes::clear_oneof_bytes() {
  if (has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
const ::std::string& TestAllTypes::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.oneof_bytes)
  if (has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TestAllTypes::set_oneof_bytes(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_bytes)
}
#if LANG_CXX11
void TestAllTypes::set_oneof_bytes(::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.test.TestAllTypes.oneof_bytes)
}
#endif
void TestAllTypes::set_oneof_bytes(const char* value) {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.test.TestAllTypes.oneof_bytes)
}
void TestAllTypes::set_oneof_bytes(const void* value, size_t size) {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.test.TestAllTypes.oneof_bytes)
}
::std::string* TestAllTypes::mutable_oneof_bytes() {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.TestAllTypes.oneof_bytes)
  return oneof_field_.oneof_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestAllTypes::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:tensorflow.test.TestAllTypes.oneof_bytes)
  if (has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TestAllTypes::set_allocated_oneof_bytes(::std::string* oneof_bytes) {
  if (!has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_oneof_field();
  if (oneof_bytes != NULL) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        oneof_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.oneof_bytes)
}

// .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
bool TestAllTypes::has_oneof_enum() const {
  return oneof_field_case() == kOneofEnum;
}
void TestAllTypes::set_has_oneof_enum() {
  _oneof_case_[0] = kOneofEnum;
}
void TestAllTypes::clear_oneof_enum() {
  if (has_oneof_enum()) {
    oneof_field_.oneof_enum_ = 0;
    clear_has_oneof_field();
  }
}
::tensorflow::test::TestAllTypes_NestedEnum TestAllTypes::oneof_enum() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.oneof_enum)
  if (has_oneof_enum()) {
    return static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(oneof_field_.oneof_enum_);
  }
  return static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(0);
}
void TestAllTypes::set_oneof_enum(::tensorflow::test::TestAllTypes_NestedEnum value) {
  if (!has_oneof_enum()) {
    clear_oneof_field();
    set_has_oneof_enum();
  }
  oneof_field_.oneof_enum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.oneof_enum)
}

// map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
int TestAllTypes::map_string_to_message_size() const {
  return map_string_to_message_.size();
}
void TestAllTypes::clear_map_string_to_message() {
  map_string_to_message_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::map_string_to_message() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_string_to_message)
  return map_string_to_message_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_map_string_to_message() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_string_to_message)
  return map_string_to_message_.MutableMap();
}

// map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
int TestAllTypes::map_int32_to_message_size() const {
  return map_int32_to_message_.size();
}
void TestAllTypes::clear_map_int32_to_message() {
  map_int32_to_message_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::map_int32_to_message() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_int32_to_message)
  return map_int32_to_message_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_map_int32_to_message() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_int32_to_message)
  return map_int32_to_message_.MutableMap();
}

// map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
int TestAllTypes::map_int64_to_message_size() const {
  return map_int64_to_message_.size();
}
void TestAllTypes::clear_map_int64_to_message() {
  map_int64_to_message_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::map_int64_to_message() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_int64_to_message)
  return map_int64_to_message_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_map_int64_to_message() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_int64_to_message)
  return map_int64_to_message_.MutableMap();
}

// map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
int TestAllTypes::map_bool_to_message_size() const {
  return map_bool_to_message_.size();
}
void TestAllTypes::clear_map_bool_to_message() {
  map_bool_to_message_.Clear();
}
 const ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::map_bool_to_message() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_bool_to_message)
  return map_bool_to_message_.GetMap();
}
 ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_map_bool_to_message() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_bool_to_message)
  return map_bool_to_message_.MutableMap();
}

// map<string, int64> map_string_to_int64 = 62;
int TestAllTypes::map_string_to_int64_size() const {
  return map_string_to_int64_.size();
}
void TestAllTypes::clear_map_string_to_int64() {
  map_string_to_int64_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
TestAllTypes::map_string_to_int64() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_string_to_int64)
  return map_string_to_int64_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
TestAllTypes::mutable_map_string_to_int64() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_string_to_int64)
  return map_string_to_int64_.MutableMap();
}

// map<int64, string> map_int64_to_string = 63;
int TestAllTypes::map_int64_to_string_size() const {
  return map_int64_to_string_.size();
}
void TestAllTypes::clear_map_int64_to_string() {
  map_int64_to_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
TestAllTypes::map_int64_to_string() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.map_int64_to_string)
  return map_int64_to_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
TestAllTypes::mutable_map_int64_to_string() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.map_int64_to_string)
  return map_int64_to_string_.MutableMap();
}

// map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
int TestAllTypes::another_map_string_to_message_size() const {
  return another_map_string_to_message_.size();
}
void TestAllTypes::clear_another_map_string_to_message() {
  another_map_string_to_message_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >&
TestAllTypes::another_map_string_to_message() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.TestAllTypes.another_map_string_to_message)
  return another_map_string_to_message_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_another_map_string_to_message() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.TestAllTypes.another_map_string_to_message)
  return another_map_string_to_message_.MutableMap();
}

// repeated int64 packed_repeated_int64 = 64 [packed = true];
int TestAllTypes::packed_repeated_int64_size() const {
  return packed_repeated_int64_.size();
}
void TestAllTypes::clear_packed_repeated_int64() {
  packed_repeated_int64_.Clear();
}
::google::protobuf::int64 TestAllTypes::packed_repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.test.TestAllTypes.packed_repeated_int64)
  return packed_repeated_int64_.Get(index);
}
void TestAllTypes::set_packed_repeated_int64(int index, ::google::protobuf::int64 value) {
  packed_repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.test.TestAllTypes.packed_repeated_int64)
}
void TestAllTypes::add_packed_repeated_int64(::google::protobuf::int64 value) {
  packed_repeated_int64_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.test.TestAllTypes.packed_repeated_int64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestAllTypes::packed_repeated_int64() const {
  // @@protoc_insertion_point(field_list:tensorflow.test.TestAllTypes.packed_repeated_int64)
  return packed_repeated_int64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestAllTypes::mutable_packed_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.test.TestAllTypes.packed_repeated_int64)
  return &packed_repeated_int64_;
}

bool TestAllTypes::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
void TestAllTypes::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
TestAllTypes::OneofFieldCase TestAllTypes::oneof_field_case() const {
  return TestAllTypes::OneofFieldCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NestedTestAllTypes::kChildFieldNumber;
const int NestedTestAllTypes::kPayloadFieldNumber;
const int NestedTestAllTypes::kMapStringToInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NestedTestAllTypes::NestedTestAllTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(const NestedTestAllTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& NestedTestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[10].descriptor;
  map_string_to_int64_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_int64_.SetEntryDescriptor(
      &NestedTestAllTypes_MapStringToInt64Entry_descriptor);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  if (from.has_child()) {
    child_ = new ::tensorflow::test::NestedTestAllTypes(*from.child_);
  } else {
    child_ = NULL;
  }
  if (from.has_payload()) {
    payload_ = new ::tensorflow::test::TestAllTypes(*from.payload_);
  } else {
    payload_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.NestedTestAllTypes)
}

void NestedTestAllTypes::SharedCtor() {
  const ::google::protobuf::Descriptor*& NestedTestAllTypes_MapStringToInt64Entry_descriptor = protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[10].descriptor;
  map_string_to_int64_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce);
  map_string_to_int64_.SetEntryDescriptor(
      &NestedTestAllTypes_MapStringToInt64Entry_descriptor);
  ::memset(&child_, 0, reinterpret_cast<char*>(&payload_) -
    reinterpret_cast<char*>(&child_) + sizeof(payload_));
  _cached_size_ = 0;
}

NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:tensorflow.test.NestedTestAllTypes)
  SharedDtor();
}

void NestedTestAllTypes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete child_;
  }
  if (this != internal_default_instance()) {
    delete payload_;
  }
}

void NestedTestAllTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedTestAllTypes::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[11].descriptor;
}

const NestedTestAllTypes& NestedTestAllTypes::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

NestedTestAllTypes* NestedTestAllTypes::New(::google::protobuf::Arena* arena) const {
  NestedTestAllTypes* n = new NestedTestAllTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.NestedTestAllTypes)
  map_string_to_int64_.Clear();
  if (GetArenaNoVirtual() == NULL && child_ != NULL) {
    delete child_;
  }
  child_ = NULL;
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}

bool NestedTestAllTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.NestedTestAllTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.test.NestedTestAllTypes child = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes payload = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> map_string_to_int64 = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          NestedTestAllTypes_MapStringToInt64Entry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&map_string_to_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.NestedTestAllTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.NestedTestAllTypes)
  return false;
#undef DO_
}

void NestedTestAllTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.NestedTestAllTypes)
  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->child_, output);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->payload_, output);
  }

  // map<string, int64> map_string_to_int64 = 3;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NestedTestAllTypes_MapStringToInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NestedTestAllTypes_MapStringToInt64Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.test.NestedTestAllTypes)
}

::google::protobuf::uint8* NestedTestAllTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.NestedTestAllTypes)
  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->child_, false, target);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->payload_, false, target);
  }

  // map<string, int64> map_string_to_int64 = 3;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NestedTestAllTypes_MapStringToInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NestedTestAllTypes_MapStringToInt64Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.NestedTestAllTypes)
  return target;
}

size_t NestedTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.NestedTestAllTypes)
  size_t total_size = 0;

  // map<string, int64> map_string_to_int64 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_int64_size());
  {
    ::google::protobuf::scoped_ptr<NestedTestAllTypes_MapStringToInt64Entry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->map_string_to_int64().begin();
        it != this->map_string_to_int64().end(); ++it) {
      entry.reset(map_string_to_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->child_);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedTestAllTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedTestAllTypes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NestedTestAllTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.NestedTestAllTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.NestedTestAllTypes)
    MergeFrom(*source);
  }
}

void NestedTestAllTypes::MergeFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  if (from.has_child()) {
    mutable_child()->::tensorflow::test::NestedTestAllTypes::MergeFrom(from.child());
  }
  if (from.has_payload()) {
    mutable_payload()->::tensorflow::test::TestAllTypes::MergeFrom(from.payload());
  }
}

void NestedTestAllTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestAllTypes::IsInitialized() const {
  return true;
}

void NestedTestAllTypes::Swap(NestedTestAllTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* other) {
  map_string_to_int64_.Swap(&other->map_string_to_int64_);
  std::swap(child_, other->child_);
  std::swap(payload_, other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NestedTestAllTypes::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NestedTestAllTypes

// .tensorflow.test.NestedTestAllTypes child = 1;
bool NestedTestAllTypes::has_child() const {
  return this != internal_default_instance() && child_ != NULL;
}
void NestedTestAllTypes::clear_child() {
  if (GetArenaNoVirtual() == NULL && child_ != NULL) delete child_;
  child_ = NULL;
}
const ::tensorflow::test::NestedTestAllTypes& NestedTestAllTypes::child() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.NestedTestAllTypes.child)
  return child_ != NULL ? *child_
                         : *::tensorflow::test::NestedTestAllTypes::internal_default_instance();
}
::tensorflow::test::NestedTestAllTypes* NestedTestAllTypes::mutable_child() {
  
  if (child_ == NULL) {
    child_ = new ::tensorflow::test::NestedTestAllTypes;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.NestedTestAllTypes.child)
  return child_;
}
::tensorflow::test::NestedTestAllTypes* NestedTestAllTypes::release_child() {
  // @@protoc_insertion_point(field_release:tensorflow.test.NestedTestAllTypes.child)
  
  ::tensorflow::test::NestedTestAllTypes* temp = child_;
  child_ = NULL;
  return temp;
}
void NestedTestAllTypes::set_allocated_child(::tensorflow::test::NestedTestAllTypes* child) {
  delete child_;
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.NestedTestAllTypes.child)
}

// .tensorflow.test.TestAllTypes payload = 2;
bool NestedTestAllTypes::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
void NestedTestAllTypes::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::tensorflow::test::TestAllTypes& NestedTestAllTypes::payload() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.NestedTestAllTypes.payload)
  return payload_ != NULL ? *payload_
                         : *::tensorflow::test::TestAllTypes::internal_default_instance();
}
::tensorflow::test::TestAllTypes* NestedTestAllTypes::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::tensorflow::test::TestAllTypes;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.test.NestedTestAllTypes.payload)
  return payload_;
}
::tensorflow::test::TestAllTypes* NestedTestAllTypes::release_payload() {
  // @@protoc_insertion_point(field_release:tensorflow.test.NestedTestAllTypes.payload)
  
  ::tensorflow::test::TestAllTypes* temp = payload_;
  payload_ = NULL;
  return temp;
}
void NestedTestAllTypes::set_allocated_payload(::tensorflow::test::TestAllTypes* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.NestedTestAllTypes.payload)
}

// map<string, int64> map_string_to_int64 = 3;
int NestedTestAllTypes::map_string_to_int64_size() const {
  return map_string_to_int64_.size();
}
void NestedTestAllTypes::clear_map_string_to_int64() {
  map_string_to_int64_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
NestedTestAllTypes::map_string_to_int64() const {
  // @@protoc_insertion_point(field_map:tensorflow.test.NestedTestAllTypes.map_string_to_int64)
  return map_string_to_int64_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
NestedTestAllTypes::mutable_map_string_to_int64() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.test.NestedTestAllTypes.map_string_to_int64)
  return map_string_to_int64_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForeignMessage::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForeignMessage::ForeignMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.ForeignMessage)
}

void ForeignMessage::SharedCtor() {
  c_ = 0;
  _cached_size_ = 0;
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.ForeignMessage)
  SharedDtor();
}

void ForeignMessage::SharedDtor() {
}

void ForeignMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForeignMessage::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[12].descriptor;
}

const ForeignMessage& ForeignMessage::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForeignMessage* ForeignMessage::New(::google::protobuf::Arena* arena) const {
  ForeignMessage* n = new ForeignMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.ForeignMessage)
  c_ = 0;
}

bool ForeignMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.ForeignMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 c = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.ForeignMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.ForeignMessage)
  return false;
#undef DO_
}

void ForeignMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.ForeignMessage)
  // int32 c = 1;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.test.ForeignMessage)
}

::google::protobuf::uint8* ForeignMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.ForeignMessage)
  // int32 c = 1;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.ForeignMessage)
  size_t total_size = 0;

  // int32 c = 1;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForeignMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForeignMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.ForeignMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.ForeignMessage)
    MergeFrom(*source);
  }
}

void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void ForeignMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::Swap(ForeignMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForeignMessage::InternalSwap(ForeignMessage* other) {
  std::swap(c_, other->c_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForeignMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForeignMessage

// int32 c = 1;
void ForeignMessage::clear_c() {
  c_ = 0;
}
::google::protobuf::int32 ForeignMessage::c() const {
  // @@protoc_insertion_point(field_get:tensorflow.test.ForeignMessage.c)
  return c_;
}
void ForeignMessage::set_c(::google::protobuf::int32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.test.ForeignMessage.c)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestEmptyMessage::TestEmptyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(const TestEmptyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestEmptyMessage)
}

void TestEmptyMessage::SharedCtor() {
  _cached_size_ = 0;
}

TestEmptyMessage::~TestEmptyMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestEmptyMessage)
  SharedDtor();
}

void TestEmptyMessage::SharedDtor() {
}

void TestEmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestEmptyMessage::descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[13].descriptor;
}

const TestEmptyMessage& TestEmptyMessage::default_instance() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestEmptyMessage* TestEmptyMessage::New(::google::protobuf::Arena* arena) const {
  TestEmptyMessage* n = new TestEmptyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestEmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestEmptyMessage)
}

bool TestEmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestEmptyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestEmptyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestEmptyMessage)
  return false;
#undef DO_
}

void TestEmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestEmptyMessage)
  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestEmptyMessage)
}

::google::protobuf::uint8* TestEmptyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestEmptyMessage)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestEmptyMessage)
  return target;
}

size_t TestEmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestEmptyMessage)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestEmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmptyMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestEmptyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestEmptyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestEmptyMessage)
    MergeFrom(*source);
  }
}

void TestEmptyMessage::MergeFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TestEmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmptyMessage::CopyFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessage::IsInitialized() const {
  return true;
}

void TestEmptyMessage::Swap(TestEmptyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestEmptyMessage::InternalSwap(TestEmptyMessage* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestEmptyMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestEmptyMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
