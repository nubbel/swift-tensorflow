// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/learner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/boosted_trees/proto/learner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace boosted_trees {
namespace learner {
class TreeRegularizationConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TreeRegularizationConfig> {
} _TreeRegularizationConfig_default_instance_;
class TreeConstraintsConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TreeConstraintsConfig> {
} _TreeConstraintsConfig_default_instance_;
class LearningRateConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningRateConfig> {
  public:
  const ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* fixed_;
  const ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* dropout_;
  const ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* line_search_;
} _LearningRateConfig_default_instance_;
class LearningRateFixedConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningRateFixedConfig> {
} _LearningRateFixedConfig_default_instance_;
class LearningRateLineSearchConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningRateLineSearchConfig> {
} _LearningRateLineSearchConfig_default_instance_;
class AveragingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AveragingConfig> {
  public:
  float average_last_n_trees_;
  float average_last_percent_trees_;
} _AveragingConfig_default_instance_;
class LearningRateDropoutDrivenConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningRateDropoutDrivenConfig> {
} _LearningRateDropoutDrivenConfig_default_instance_;
class LearnerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearnerConfig> {
  public:
  float feature_fraction_per_tree_;
  float feature_fraction_per_level_;
} _LearnerConfig_default_instance_;

namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRegularizationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRegularizationConfig, l1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRegularizationConfig, l2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRegularizationConfig, tree_complexity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConstraintsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConstraintsConfig, max_tree_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConstraintsConfig, min_node_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LearningRateConfig_default_instance_), fixed_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LearningRateConfig_default_instance_), dropout_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LearningRateConfig_default_instance_), line_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, tuner_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateFixedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateFixedConfig, learning_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateLineSearchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateLineSearchConfig, max_learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateLineSearchConfig, num_steps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AveragingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AveragingConfig, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AveragingConfig_default_instance_), average_last_n_trees_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AveragingConfig_default_instance_), average_last_percent_trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AveragingConfig, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateDropoutDrivenConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateDropoutDrivenConfig, dropout_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateDropoutDrivenConfig, probability_of_skipping_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateDropoutDrivenConfig, learning_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, num_classes_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LearnerConfig_default_instance_), feature_fraction_per_tree_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LearnerConfig_default_instance_), feature_fraction_per_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, regularization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, constraints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, pruning_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, growing_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, learning_rate_tuner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, multi_class_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, averaging_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, feature_fraction_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TreeRegularizationConfig)},
  { 7, -1, sizeof(TreeConstraintsConfig)},
  { 13, -1, sizeof(LearningRateConfig)},
  { 21, -1, sizeof(LearningRateFixedConfig)},
  { 26, -1, sizeof(LearningRateLineSearchConfig)},
  { 32, -1, sizeof(AveragingConfig)},
  { 39, -1, sizeof(LearningRateDropoutDrivenConfig)},
  { 46, -1, sizeof(LearnerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeRegularizationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeConstraintsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningRateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningRateFixedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningRateLineSearchConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AveragingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningRateDropoutDrivenConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearnerConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/boosted_trees/proto/learner.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _TreeRegularizationConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TreeConstraintsConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LearningRateConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LearningRateFixedConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LearningRateLineSearchConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AveragingConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LearningRateDropoutDrivenConfig_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LearnerConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TreeRegularizationConfig_default_instance_.DefaultConstruct();
  _TreeConstraintsConfig_default_instance_.DefaultConstruct();
  _LearningRateConfig_default_instance_.DefaultConstruct();
  _LearningRateFixedConfig_default_instance_.DefaultConstruct();
  _LearningRateLineSearchConfig_default_instance_.DefaultConstruct();
  _AveragingConfig_default_instance_.DefaultConstruct();
  _LearningRateDropoutDrivenConfig_default_instance_.DefaultConstruct();
  _LearnerConfig_default_instance_.DefaultConstruct();
  _LearningRateConfig_default_instance_.fixed_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateFixedConfig::internal_default_instance());
  _LearningRateConfig_default_instance_.dropout_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::internal_default_instance());
  _LearningRateConfig_default_instance_.line_search_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::internal_default_instance());
  _AveragingConfig_default_instance_.average_last_n_trees_ = 0;
  _AveragingConfig_default_instance_.average_last_percent_trees_ = 0;
  _LearnerConfig_default_instance_.feature_fraction_per_tree_ = 0;
  _LearnerConfig_default_instance_.feature_fraction_per_level_ = 0;
  _LearnerConfig_default_instance_.get_mutable()->regularization_ = const_cast< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig*>(
      ::tensorflow::boosted_trees::learner::TreeRegularizationConfig::internal_default_instance());
  _LearnerConfig_default_instance_.get_mutable()->constraints_ = const_cast< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig*>(
      ::tensorflow::boosted_trees::learner::TreeConstraintsConfig::internal_default_instance());
  _LearnerConfig_default_instance_.get_mutable()->learning_rate_tuner_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateConfig::internal_default_instance());
  _LearnerConfig_default_instance_.get_mutable()->averaging_config_ = const_cast< ::tensorflow::boosted_trees::learner::AveragingConfig*>(
      ::tensorflow::boosted_trees::learner::AveragingConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n4tensorflow/contrib/boosted_trees/proto"
      "/learner.proto\022 tensorflow.boosted_trees"
      ".learner\"K\n\030TreeRegularizationConfig\022\n\n\002"
      "l1\030\001 \001(\002\022\n\n\002l2\030\002 \001(\002\022\027\n\017tree_complexity\030"
      "\003 \001(\002\"H\n\025TreeConstraintsConfig\022\026\n\016max_tr"
      "ee_depth\030\001 \001(\r\022\027\n\017min_node_weight\030\002 \001(\002\""
      "\226\002\n\022LearningRateConfig\022J\n\005fixed\030\001 \001(\01329."
      "tensorflow.boosted_trees.learner.Learnin"
      "gRateFixedConfigH\000\022T\n\007dropout\030\002 \001(\0132A.te"
      "nsorflow.boosted_trees.learner.LearningR"
      "ateDropoutDrivenConfigH\000\022U\n\013line_search\030"
      "\003 \001(\0132>.tensorflow.boosted_trees.learner"
      ".LearningRateLineSearchConfigH\000B\007\n\005tuner"
      "\"0\n\027LearningRateFixedConfig\022\025\n\rlearning_"
      "rate\030\001 \001(\002\"L\n\034LearningRateLineSearchConf"
      "ig\022\031\n\021max_learning_rate\030\001 \001(\002\022\021\n\tnum_ste"
      "ps\030\002 \001(\005\"a\n\017AveragingConfig\022\036\n\024average_l"
      "ast_n_trees\030\001 \001(\002H\000\022$\n\032average_last_perc"
      "ent_trees\030\002 \001(\002H\000B\010\n\006config\"~\n\037LearningR"
      "ateDropoutDrivenConfig\022\033\n\023dropout_probab"
      "ility\030\001 \001(\002\022\'\n\037probability_of_skipping_d"
      "ropout\030\002 \001(\002\022\025\n\rlearning_rate\030\003 \001(\002\"\200\007\n\r"
      "LearnerConfig\022\023\n\013num_classes\030\001 \001(\r\022#\n\031fe"
      "ature_fraction_per_tree\030\002 \001(\002H\000\022$\n\032featu"
      "re_fraction_per_level\030\003 \001(\002H\000\022R\n\016regular"
      "ization\030\004 \001(\0132:.tensorflow.boosted_trees"
      ".learner.TreeRegularizationConfig\022L\n\013con"
      "straints\030\005 \001(\01327.tensorflow.boosted_tree"
      "s.learner.TreeConstraintsConfig\022Q\n\014pruni"
      "ng_mode\030\010 \001(\0162;.tensorflow.boosted_trees"
      ".learner.LearnerConfig.PruningMode\022Q\n\014gr"
      "owing_mode\030\t \001(\0162;.tensorflow.boosted_tr"
      "ees.learner.LearnerConfig.GrowingMode\022Q\n"
      "\023learning_rate_tuner\030\006 \001(\01324.tensorflow."
      "boosted_trees.learner.LearningRateConfig"
      "\022`\n\024multi_class_strategy\030\n \001(\0162B.tensorf"
      "low.boosted_trees.learner.LearnerConfig."
      "MultiClassStrategy\022K\n\020averaging_config\030\013"
      " \001(\01321.tensorflow.boosted_trees.learner."
      "AveragingConfig\",\n\013PruningMode\022\r\n\tPRE_PR"
      "UNE\020\000\022\016\n\nPOST_PRUNE\020\001\"1\n\013GrowingMode\022\016\n\n"
      "WHOLE_TREE\020\000\022\022\n\016LAYER_BY_LAYER\020\001\"P\n\022Mult"
      "iClassStrategy\022\022\n\016TREE_PER_CLASS\020\000\022\020\n\014FU"
      "LL_HESSIAN\020\001\022\024\n\020DIAGONAL_HESSIAN\020\002B\022\n\020fe"
      "ature_fractionB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/boosted_trees/proto/learner.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto

const ::google::protobuf::EnumDescriptor* LearnerConfig_PruningMode_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[0];
}
bool LearnerConfig_PruningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_PruningMode LearnerConfig::PRE_PRUNE;
const LearnerConfig_PruningMode LearnerConfig::POST_PRUNE;
const LearnerConfig_PruningMode LearnerConfig::PruningMode_MIN;
const LearnerConfig_PruningMode LearnerConfig::PruningMode_MAX;
const int LearnerConfig::PruningMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LearnerConfig_GrowingMode_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[1];
}
bool LearnerConfig_GrowingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_GrowingMode LearnerConfig::WHOLE_TREE;
const LearnerConfig_GrowingMode LearnerConfig::LAYER_BY_LAYER;
const LearnerConfig_GrowingMode LearnerConfig::GrowingMode_MIN;
const LearnerConfig_GrowingMode LearnerConfig::GrowingMode_MAX;
const int LearnerConfig::GrowingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LearnerConfig_MultiClassStrategy_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[2];
}
bool LearnerConfig_MultiClassStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_MultiClassStrategy LearnerConfig::TREE_PER_CLASS;
const LearnerConfig_MultiClassStrategy LearnerConfig::FULL_HESSIAN;
const LearnerConfig_MultiClassStrategy LearnerConfig::DIAGONAL_HESSIAN;
const LearnerConfig_MultiClassStrategy LearnerConfig::MultiClassStrategy_MIN;
const LearnerConfig_MultiClassStrategy LearnerConfig::MultiClassStrategy_MAX;
const int LearnerConfig::MultiClassStrategy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeRegularizationConfig::kL1FieldNumber;
const int TreeRegularizationConfig::kL2FieldNumber;
const int TreeRegularizationConfig::kTreeComplexityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeRegularizationConfig::TreeRegularizationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}
TreeRegularizationConfig::TreeRegularizationConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}
TreeRegularizationConfig::TreeRegularizationConfig(const TreeRegularizationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l1_, &from.l1_,
    reinterpret_cast<char*>(&tree_complexity_) -
    reinterpret_cast<char*>(&l1_) + sizeof(tree_complexity_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}

void TreeRegularizationConfig::SharedCtor() {
  ::memset(&l1_, 0, reinterpret_cast<char*>(&tree_complexity_) -
    reinterpret_cast<char*>(&l1_) + sizeof(tree_complexity_));
  _cached_size_ = 0;
}

TreeRegularizationConfig::~TreeRegularizationConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  SharedDtor();
}

void TreeRegularizationConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TreeRegularizationConfig::ArenaDtor(void* object) {
  TreeRegularizationConfig* _this = reinterpret_cast< TreeRegularizationConfig* >(object);
  (void)_this;
}
void TreeRegularizationConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeRegularizationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeRegularizationConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[0].descriptor;
}

const TreeRegularizationConfig& TreeRegularizationConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeRegularizationConfig* TreeRegularizationConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeRegularizationConfig>(arena);
}

void TreeRegularizationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  ::memset(&l1_, 0, reinterpret_cast<char*>(&tree_complexity_) -
    reinterpret_cast<char*>(&l1_) + sizeof(tree_complexity_));
}

bool TreeRegularizationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float l1 = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l2 = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tree_complexity = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tree_complexity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return false;
#undef DO_
}

void TreeRegularizationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  // float l1 = 1;
  if (this->l1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->l1(), output);
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->l2(), output);
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tree_complexity(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}

::google::protobuf::uint8* TreeRegularizationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  // float l1 = 1;
  if (this->l1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->l1(), target);
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->l2(), target);
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tree_complexity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return target;
}

size_t TreeRegularizationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  size_t total_size = 0;

  // float l1 = 1;
  if (this->l1() != 0) {
    total_size += 1 + 4;
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    total_size += 1 + 4;
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeRegularizationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeRegularizationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeRegularizationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
    MergeFrom(*source);
  }
}

void TreeRegularizationConfig::MergeFrom(const TreeRegularizationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.l1() != 0) {
    set_l1(from.l1());
  }
  if (from.l2() != 0) {
    set_l2(from.l2());
  }
  if (from.tree_complexity() != 0) {
    set_tree_complexity(from.tree_complexity());
  }
}

void TreeRegularizationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeRegularizationConfig::CopyFrom(const TreeRegularizationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeRegularizationConfig::IsInitialized() const {
  return true;
}

void TreeRegularizationConfig::Swap(TreeRegularizationConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeRegularizationConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeRegularizationConfig::UnsafeArenaSwap(TreeRegularizationConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeRegularizationConfig::InternalSwap(TreeRegularizationConfig* other) {
  std::swap(l1_, other->l1_);
  std::swap(l2_, other->l2_);
  std::swap(tree_complexity_, other->tree_complexity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeRegularizationConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeRegularizationConfig

// float l1 = 1;
void TreeRegularizationConfig::clear_l1() {
  l1_ = 0;
}
float TreeRegularizationConfig::l1() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.TreeRegularizationConfig.l1)
  return l1_;
}
void TreeRegularizationConfig::set_l1(float value) {
  
  l1_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.TreeRegularizationConfig.l1)
}

// float l2 = 2;
void TreeRegularizationConfig::clear_l2() {
  l2_ = 0;
}
float TreeRegularizationConfig::l2() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.TreeRegularizationConfig.l2)
  return l2_;
}
void TreeRegularizationConfig::set_l2(float value) {
  
  l2_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.TreeRegularizationConfig.l2)
}

// float tree_complexity = 3;
void TreeRegularizationConfig::clear_tree_complexity() {
  tree_complexity_ = 0;
}
float TreeRegularizationConfig::tree_complexity() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.TreeRegularizationConfig.tree_complexity)
  return tree_complexity_;
}
void TreeRegularizationConfig::set_tree_complexity(float value) {
  
  tree_complexity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.TreeRegularizationConfig.tree_complexity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeConstraintsConfig::kMaxTreeDepthFieldNumber;
const int TreeConstraintsConfig::kMinNodeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeConstraintsConfig::TreeConstraintsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}
TreeConstraintsConfig::TreeConstraintsConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}
TreeConstraintsConfig::TreeConstraintsConfig(const TreeConstraintsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_tree_depth_, &from.max_tree_depth_,
    reinterpret_cast<char*>(&min_node_weight_) -
    reinterpret_cast<char*>(&max_tree_depth_) + sizeof(min_node_weight_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}

void TreeConstraintsConfig::SharedCtor() {
  ::memset(&max_tree_depth_, 0, reinterpret_cast<char*>(&min_node_weight_) -
    reinterpret_cast<char*>(&max_tree_depth_) + sizeof(min_node_weight_));
  _cached_size_ = 0;
}

TreeConstraintsConfig::~TreeConstraintsConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  SharedDtor();
}

void TreeConstraintsConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TreeConstraintsConfig::ArenaDtor(void* object) {
  TreeConstraintsConfig* _this = reinterpret_cast< TreeConstraintsConfig* >(object);
  (void)_this;
}
void TreeConstraintsConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeConstraintsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeConstraintsConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[1].descriptor;
}

const TreeConstraintsConfig& TreeConstraintsConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeConstraintsConfig* TreeConstraintsConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeConstraintsConfig>(arena);
}

void TreeConstraintsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  ::memset(&max_tree_depth_, 0, reinterpret_cast<char*>(&min_node_weight_) -
    reinterpret_cast<char*>(&max_tree_depth_) + sizeof(min_node_weight_));
}

bool TreeConstraintsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_tree_depth = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tree_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_node_weight = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_node_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return false;
#undef DO_
}

void TreeConstraintsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tree_depth(), output);
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_node_weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}

::google::protobuf::uint8* TreeConstraintsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_tree_depth(), target);
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_node_weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return target;
}

size_t TreeConstraintsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  size_t total_size = 0;

  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_tree_depth());
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeConstraintsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeConstraintsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeConstraintsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
    MergeFrom(*source);
  }
}

void TreeConstraintsConfig::MergeFrom(const TreeConstraintsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.max_tree_depth() != 0) {
    set_max_tree_depth(from.max_tree_depth());
  }
  if (from.min_node_weight() != 0) {
    set_min_node_weight(from.min_node_weight());
  }
}

void TreeConstraintsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeConstraintsConfig::CopyFrom(const TreeConstraintsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeConstraintsConfig::IsInitialized() const {
  return true;
}

void TreeConstraintsConfig::Swap(TreeConstraintsConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeConstraintsConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeConstraintsConfig::UnsafeArenaSwap(TreeConstraintsConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeConstraintsConfig::InternalSwap(TreeConstraintsConfig* other) {
  std::swap(max_tree_depth_, other->max_tree_depth_);
  std::swap(min_node_weight_, other->min_node_weight_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeConstraintsConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeConstraintsConfig

// uint32 max_tree_depth = 1;
void TreeConstraintsConfig::clear_max_tree_depth() {
  max_tree_depth_ = 0u;
}
::google::protobuf::uint32 TreeConstraintsConfig::max_tree_depth() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.TreeConstraintsConfig.max_tree_depth)
  return max_tree_depth_;
}
void TreeConstraintsConfig::set_max_tree_depth(::google::protobuf::uint32 value) {
  
  max_tree_depth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.TreeConstraintsConfig.max_tree_depth)
}

// float min_node_weight = 2;
void TreeConstraintsConfig::clear_min_node_weight() {
  min_node_weight_ = 0;
}
float TreeConstraintsConfig::min_node_weight() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.TreeConstraintsConfig.min_node_weight)
  return min_node_weight_;
}
void TreeConstraintsConfig::set_min_node_weight(float value) {
  
  min_node_weight_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.TreeConstraintsConfig.min_node_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateConfig::kFixedFieldNumber;
const int LearningRateConfig::kDropoutFieldNumber;
const int LearningRateConfig::kLineSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateConfig::LearningRateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}
LearningRateConfig::LearningRateConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}
LearningRateConfig::LearningRateConfig(const LearningRateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_tuner();
  switch (from.tuner_case()) {
    case kFixed: {
      mutable_fixed()->::tensorflow::boosted_trees::learner::LearningRateFixedConfig::MergeFrom(from.fixed());
      break;
    }
    case kDropout: {
      mutable_dropout()->::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::MergeFrom(from.dropout());
      break;
    }
    case kLineSearch: {
      mutable_line_search()->::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::MergeFrom(from.line_search());
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}

void LearningRateConfig::SharedCtor() {
  clear_has_tuner();
  _cached_size_ = 0;
}

LearningRateConfig::~LearningRateConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateConfig)
  SharedDtor();
}

void LearningRateConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_tuner()) {
    clear_tuner();
  }
}

void LearningRateConfig::ArenaDtor(void* object) {
  LearningRateConfig* _this = reinterpret_cast< LearningRateConfig* >(object);
  (void)_this;
}
void LearningRateConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[2].descriptor;
}

const LearningRateConfig& LearningRateConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningRateConfig* LearningRateConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LearningRateConfig>(arena);
}

void LearningRateConfig::clear_tuner() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  switch (tuner_case()) {
    case kFixed: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.fixed_;
      }
      break;
    }
    case kDropout: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.dropout_;
      }
      break;
    }
    case kLineSearch: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.line_search_;
      }
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TUNER_NOT_SET;
}


void LearningRateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  clear_tuner();
}

bool LearningRateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateConfig)
  return false;
#undef DO_
}

void LearningRateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
  if (has_fixed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *tuner_.fixed_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
  if (has_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *tuner_.dropout_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
  if (has_line_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *tuner_.line_search_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateConfig)
}

::google::protobuf::uint8* LearningRateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
  if (has_fixed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *tuner_.fixed_, false, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
  if (has_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *tuner_.dropout_, false, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
  if (has_line_search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *tuner_.line_search_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateConfig)
  return target;
}

size_t LearningRateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  size_t total_size = 0;

  switch (tuner_case()) {
    // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
    case kFixed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *tuner_.fixed_);
      break;
    }
    // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
    case kDropout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *tuner_.dropout_);
      break;
    }
    // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
    case kLineSearch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *tuner_.line_search_);
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateConfig)
    MergeFrom(*source);
  }
}

void LearningRateConfig::MergeFrom(const LearningRateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.tuner_case()) {
    case kFixed: {
      mutable_fixed()->::tensorflow::boosted_trees::learner::LearningRateFixedConfig::MergeFrom(from.fixed());
      break;
    }
    case kDropout: {
      mutable_dropout()->::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::MergeFrom(from.dropout());
      break;
    }
    case kLineSearch: {
      mutable_line_search()->::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::MergeFrom(from.line_search());
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
}

void LearningRateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateConfig::CopyFrom(const LearningRateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateConfig::IsInitialized() const {
  return true;
}

void LearningRateConfig::Swap(LearningRateConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateConfig::UnsafeArenaSwap(LearningRateConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateConfig::InternalSwap(LearningRateConfig* other) {
  std::swap(tuner_, other->tuner_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningRateConfig

// .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
bool LearningRateConfig::has_fixed() const {
  return tuner_case() == kFixed;
}
void LearningRateConfig::set_has_fixed() {
  _oneof_case_[0] = kFixed;
}
void LearningRateConfig::clear_fixed() {
  if (has_fixed()) {
    if (GetArenaNoVirtual() == NULL) {
      delete tuner_.fixed_;
    }
    clear_has_tuner();
  }
}
 const ::tensorflow::boosted_trees::learner::LearningRateFixedConfig& LearningRateConfig::fixed() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
  return has_fixed()
      ? *tuner_.fixed_
      : ::tensorflow::boosted_trees::learner::LearningRateFixedConfig::default_instance();
}
::tensorflow::boosted_trees::learner::LearningRateFixedConfig* LearningRateConfig::mutable_fixed() {
  if (!has_fixed()) {
    clear_tuner();
    set_has_fixed();
    tuner_.fixed_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
  return tuner_.fixed_;
}
::tensorflow::boosted_trees::learner::LearningRateFixedConfig* LearningRateConfig::release_fixed() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
  if (has_fixed()) {
    clear_has_tuner();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* temp = new ::tensorflow::boosted_trees::learner::LearningRateFixedConfig(*tuner_.fixed_);
      tuner_.fixed_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* temp = tuner_.fixed_;
      tuner_.fixed_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void LearningRateConfig::set_allocated_fixed(::tensorflow::boosted_trees::learner::LearningRateFixedConfig* fixed) {
  clear_tuner();
  if (fixed) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(fixed) == NULL) {
      GetArenaNoVirtual()->Own(fixed);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(fixed)) {
      ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* new_fixed = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig >(
          GetArenaNoVirtual());
      new_fixed->CopyFrom(*fixed);
      fixed = new_fixed;
    }
    set_has_fixed();
    tuner_.fixed_ = fixed;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
}
 ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* LearningRateConfig::unsafe_arena_release_fixed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
  if (has_fixed()) {
    clear_has_tuner();
    ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* temp = tuner_.fixed_;
    tuner_.fixed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LearningRateConfig::unsafe_arena_set_allocated_fixed(::tensorflow::boosted_trees::learner::LearningRateFixedConfig* fixed) {
  clear_tuner();
  if (fixed) {
    set_has_fixed();
    tuner_.fixed_ = fixed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
}

// .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
bool LearningRateConfig::has_dropout() const {
  return tuner_case() == kDropout;
}
void LearningRateConfig::set_has_dropout() {
  _oneof_case_[0] = kDropout;
}
void LearningRateConfig::clear_dropout() {
  if (has_dropout()) {
    if (GetArenaNoVirtual() == NULL) {
      delete tuner_.dropout_;
    }
    clear_has_tuner();
  }
}
 const ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig& LearningRateConfig::dropout() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
  return has_dropout()
      ? *tuner_.dropout_
      : ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::default_instance();
}
::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* LearningRateConfig::mutable_dropout() {
  if (!has_dropout()) {
    clear_tuner();
    set_has_dropout();
    tuner_.dropout_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
  return tuner_.dropout_;
}
::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* LearningRateConfig::release_dropout() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
  if (has_dropout()) {
    clear_has_tuner();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* temp = new ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig(*tuner_.dropout_);
      tuner_.dropout_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* temp = tuner_.dropout_;
      tuner_.dropout_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void LearningRateConfig::set_allocated_dropout(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* dropout) {
  clear_tuner();
  if (dropout) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dropout) == NULL) {
      GetArenaNoVirtual()->Own(dropout);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dropout)) {
      ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* new_dropout = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig >(
          GetArenaNoVirtual());
      new_dropout->CopyFrom(*dropout);
      dropout = new_dropout;
    }
    set_has_dropout();
    tuner_.dropout_ = dropout;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
}
 ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* LearningRateConfig::unsafe_arena_release_dropout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
  if (has_dropout()) {
    clear_has_tuner();
    ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* temp = tuner_.dropout_;
    tuner_.dropout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LearningRateConfig::unsafe_arena_set_allocated_dropout(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* dropout) {
  clear_tuner();
  if (dropout) {
    set_has_dropout();
    tuner_.dropout_ = dropout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
}

// .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
bool LearningRateConfig::has_line_search() const {
  return tuner_case() == kLineSearch;
}
void LearningRateConfig::set_has_line_search() {
  _oneof_case_[0] = kLineSearch;
}
void LearningRateConfig::clear_line_search() {
  if (has_line_search()) {
    if (GetArenaNoVirtual() == NULL) {
      delete tuner_.line_search_;
    }
    clear_has_tuner();
  }
}
 const ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig& LearningRateConfig::line_search() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
  return has_line_search()
      ? *tuner_.line_search_
      : ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::default_instance();
}
::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* LearningRateConfig::mutable_line_search() {
  if (!has_line_search()) {
    clear_tuner();
    set_has_line_search();
    tuner_.line_search_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
  return tuner_.line_search_;
}
::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* LearningRateConfig::release_line_search() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
  if (has_line_search()) {
    clear_has_tuner();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* temp = new ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig(*tuner_.line_search_);
      tuner_.line_search_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* temp = tuner_.line_search_;
      tuner_.line_search_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void LearningRateConfig::set_allocated_line_search(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* line_search) {
  clear_tuner();
  if (line_search) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(line_search) == NULL) {
      GetArenaNoVirtual()->Own(line_search);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(line_search)) {
      ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* new_line_search = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig >(
          GetArenaNoVirtual());
      new_line_search->CopyFrom(*line_search);
      line_search = new_line_search;
    }
    set_has_line_search();
    tuner_.line_search_ = line_search;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
}
 ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* LearningRateConfig::unsafe_arena_release_line_search() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
  if (has_line_search()) {
    clear_has_tuner();
    ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* temp = tuner_.line_search_;
    tuner_.line_search_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LearningRateConfig::unsafe_arena_set_allocated_line_search(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* line_search) {
  clear_tuner();
  if (line_search) {
    set_has_line_search();
    tuner_.line_search_ = line_search;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
}

bool LearningRateConfig::has_tuner() const {
  return tuner_case() != TUNER_NOT_SET;
}
void LearningRateConfig::clear_has_tuner() {
  _oneof_case_[0] = TUNER_NOT_SET;
}
LearningRateConfig::TunerCase LearningRateConfig::tuner_case() const {
  return LearningRateConfig::TunerCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateFixedConfig::kLearningRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateFixedConfig::LearningRateFixedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}
LearningRateFixedConfig::LearningRateFixedConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}
LearningRateFixedConfig::LearningRateFixedConfig(const LearningRateFixedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learning_rate_ = from.learning_rate_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}

void LearningRateFixedConfig::SharedCtor() {
  learning_rate_ = 0;
  _cached_size_ = 0;
}

LearningRateFixedConfig::~LearningRateFixedConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  SharedDtor();
}

void LearningRateFixedConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void LearningRateFixedConfig::ArenaDtor(void* object) {
  LearningRateFixedConfig* _this = reinterpret_cast< LearningRateFixedConfig* >(object);
  (void)_this;
}
void LearningRateFixedConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateFixedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateFixedConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[3].descriptor;
}

const LearningRateFixedConfig& LearningRateFixedConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningRateFixedConfig* LearningRateFixedConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LearningRateFixedConfig>(arena);
}

void LearningRateFixedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  learning_rate_ = 0;
}

bool LearningRateFixedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return false;
#undef DO_
}

void LearningRateFixedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}

::google::protobuf::uint8* LearningRateFixedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return target;
}

size_t LearningRateFixedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateFixedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateFixedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateFixedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
    MergeFrom(*source);
  }
}

void LearningRateFixedConfig::MergeFrom(const LearningRateFixedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
}

void LearningRateFixedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateFixedConfig::CopyFrom(const LearningRateFixedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateFixedConfig::IsInitialized() const {
  return true;
}

void LearningRateFixedConfig::Swap(LearningRateFixedConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateFixedConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateFixedConfig::UnsafeArenaSwap(LearningRateFixedConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateFixedConfig::InternalSwap(LearningRateFixedConfig* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateFixedConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningRateFixedConfig

// float learning_rate = 1;
void LearningRateFixedConfig::clear_learning_rate() {
  learning_rate_ = 0;
}
float LearningRateFixedConfig::learning_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateFixedConfig.learning_rate)
  return learning_rate_;
}
void LearningRateFixedConfig::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateFixedConfig.learning_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateLineSearchConfig::kMaxLearningRateFieldNumber;
const int LearningRateLineSearchConfig::kNumStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateLineSearchConfig::LearningRateLineSearchConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}
LearningRateLineSearchConfig::LearningRateLineSearchConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}
LearningRateLineSearchConfig::LearningRateLineSearchConfig(const LearningRateLineSearchConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_learning_rate_, &from.max_learning_rate_,
    reinterpret_cast<char*>(&num_steps_) -
    reinterpret_cast<char*>(&max_learning_rate_) + sizeof(num_steps_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}

void LearningRateLineSearchConfig::SharedCtor() {
  ::memset(&max_learning_rate_, 0, reinterpret_cast<char*>(&num_steps_) -
    reinterpret_cast<char*>(&max_learning_rate_) + sizeof(num_steps_));
  _cached_size_ = 0;
}

LearningRateLineSearchConfig::~LearningRateLineSearchConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  SharedDtor();
}

void LearningRateLineSearchConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void LearningRateLineSearchConfig::ArenaDtor(void* object) {
  LearningRateLineSearchConfig* _this = reinterpret_cast< LearningRateLineSearchConfig* >(object);
  (void)_this;
}
void LearningRateLineSearchConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateLineSearchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateLineSearchConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[4].descriptor;
}

const LearningRateLineSearchConfig& LearningRateLineSearchConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningRateLineSearchConfig* LearningRateLineSearchConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LearningRateLineSearchConfig>(arena);
}

void LearningRateLineSearchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  ::memset(&max_learning_rate_, 0, reinterpret_cast<char*>(&num_steps_) -
    reinterpret_cast<char*>(&max_learning_rate_) + sizeof(num_steps_));
}

bool LearningRateLineSearchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float max_learning_rate = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_steps = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return false;
#undef DO_
}

void LearningRateLineSearchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_learning_rate(), output);
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_steps(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}

::google::protobuf::uint8* LearningRateLineSearchConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_learning_rate(), target);
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_steps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return target;
}

size_t LearningRateLineSearchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  size_t total_size = 0;

  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_steps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateLineSearchConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateLineSearchConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateLineSearchConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
    MergeFrom(*source);
  }
}

void LearningRateLineSearchConfig::MergeFrom(const LearningRateLineSearchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.max_learning_rate() != 0) {
    set_max_learning_rate(from.max_learning_rate());
  }
  if (from.num_steps() != 0) {
    set_num_steps(from.num_steps());
  }
}

void LearningRateLineSearchConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateLineSearchConfig::CopyFrom(const LearningRateLineSearchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateLineSearchConfig::IsInitialized() const {
  return true;
}

void LearningRateLineSearchConfig::Swap(LearningRateLineSearchConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateLineSearchConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateLineSearchConfig::UnsafeArenaSwap(LearningRateLineSearchConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateLineSearchConfig::InternalSwap(LearningRateLineSearchConfig* other) {
  std::swap(max_learning_rate_, other->max_learning_rate_);
  std::swap(num_steps_, other->num_steps_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateLineSearchConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningRateLineSearchConfig

// float max_learning_rate = 1;
void LearningRateLineSearchConfig::clear_max_learning_rate() {
  max_learning_rate_ = 0;
}
float LearningRateLineSearchConfig::max_learning_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig.max_learning_rate)
  return max_learning_rate_;
}
void LearningRateLineSearchConfig::set_max_learning_rate(float value) {
  
  max_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig.max_learning_rate)
}

// int32 num_steps = 2;
void LearningRateLineSearchConfig::clear_num_steps() {
  num_steps_ = 0;
}
::google::protobuf::int32 LearningRateLineSearchConfig::num_steps() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig.num_steps)
  return num_steps_;
}
void LearningRateLineSearchConfig::set_num_steps(::google::protobuf::int32 value) {
  
  num_steps_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig.num_steps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AveragingConfig::kAverageLastNTreesFieldNumber;
const int AveragingConfig::kAverageLastPercentTreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AveragingConfig::AveragingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}
AveragingConfig::AveragingConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}
AveragingConfig::AveragingConfig(const AveragingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kAverageLastNTrees: {
      set_average_last_n_trees(from.average_last_n_trees());
      break;
    }
    case kAverageLastPercentTrees: {
      set_average_last_percent_trees(from.average_last_percent_trees());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}

void AveragingConfig::SharedCtor() {
  clear_has_config();
  _cached_size_ = 0;
}

AveragingConfig::~AveragingConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.AveragingConfig)
  SharedDtor();
}

void AveragingConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_config()) {
    clear_config();
  }
}

void AveragingConfig::ArenaDtor(void* object) {
  AveragingConfig* _this = reinterpret_cast< AveragingConfig* >(object);
  (void)_this;
}
void AveragingConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AveragingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AveragingConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[5].descriptor;
}

const AveragingConfig& AveragingConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

AveragingConfig* AveragingConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AveragingConfig>(arena);
}

void AveragingConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.AveragingConfig)
  switch (config_case()) {
    case kAverageLastNTrees: {
      // No need to clear
      break;
    }
    case kAverageLastPercentTrees: {
      // No need to clear
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void AveragingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.AveragingConfig)
  clear_config();
}

bool AveragingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.AveragingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float average_last_n_trees = 1;
      case 1: {
        if (tag == 13u) {
          clear_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &config_.average_last_n_trees_)));
          set_has_average_last_n_trees();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float average_last_percent_trees = 2;
      case 2: {
        if (tag == 21u) {
          clear_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &config_.average_last_percent_trees_)));
          set_has_average_last_percent_trees();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.AveragingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.AveragingConfig)
  return false;
#undef DO_
}

void AveragingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.AveragingConfig)
  // float average_last_n_trees = 1;
  if (has_average_last_n_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->average_last_n_trees(), output);
  }

  // float average_last_percent_trees = 2;
  if (has_average_last_percent_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->average_last_percent_trees(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.AveragingConfig)
}

::google::protobuf::uint8* AveragingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.AveragingConfig)
  // float average_last_n_trees = 1;
  if (has_average_last_n_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->average_last_n_trees(), target);
  }

  // float average_last_percent_trees = 2;
  if (has_average_last_percent_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->average_last_percent_trees(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.AveragingConfig)
  return target;
}

size_t AveragingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.AveragingConfig)
  size_t total_size = 0;

  switch (config_case()) {
    // float average_last_n_trees = 1;
    case kAverageLastNTrees: {
      total_size += 1 + 4;
      break;
    }
    // float average_last_percent_trees = 2;
    case kAverageLastPercentTrees: {
      total_size += 1 + 4;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AveragingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AveragingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AveragingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.AveragingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.AveragingConfig)
    MergeFrom(*source);
  }
}

void AveragingConfig::MergeFrom(const AveragingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.config_case()) {
    case kAverageLastNTrees: {
      set_average_last_n_trees(from.average_last_n_trees());
      break;
    }
    case kAverageLastPercentTrees: {
      set_average_last_percent_trees(from.average_last_percent_trees());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void AveragingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AveragingConfig::CopyFrom(const AveragingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AveragingConfig::IsInitialized() const {
  return true;
}

void AveragingConfig::Swap(AveragingConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AveragingConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AveragingConfig::UnsafeArenaSwap(AveragingConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AveragingConfig::InternalSwap(AveragingConfig* other) {
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AveragingConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AveragingConfig

// float average_last_n_trees = 1;
bool AveragingConfig::has_average_last_n_trees() const {
  return config_case() == kAverageLastNTrees;
}
void AveragingConfig::set_has_average_last_n_trees() {
  _oneof_case_[0] = kAverageLastNTrees;
}
void AveragingConfig::clear_average_last_n_trees() {
  if (has_average_last_n_trees()) {
    config_.average_last_n_trees_ = 0;
    clear_has_config();
  }
}
float AveragingConfig::average_last_n_trees() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.AveragingConfig.average_last_n_trees)
  if (has_average_last_n_trees()) {
    return config_.average_last_n_trees_;
  }
  return 0;
}
void AveragingConfig::set_average_last_n_trees(float value) {
  if (!has_average_last_n_trees()) {
    clear_config();
    set_has_average_last_n_trees();
  }
  config_.average_last_n_trees_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.AveragingConfig.average_last_n_trees)
}

// float average_last_percent_trees = 2;
bool AveragingConfig::has_average_last_percent_trees() const {
  return config_case() == kAverageLastPercentTrees;
}
void AveragingConfig::set_has_average_last_percent_trees() {
  _oneof_case_[0] = kAverageLastPercentTrees;
}
void AveragingConfig::clear_average_last_percent_trees() {
  if (has_average_last_percent_trees()) {
    config_.average_last_percent_trees_ = 0;
    clear_has_config();
  }
}
float AveragingConfig::average_last_percent_trees() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.AveragingConfig.average_last_percent_trees)
  if (has_average_last_percent_trees()) {
    return config_.average_last_percent_trees_;
  }
  return 0;
}
void AveragingConfig::set_average_last_percent_trees(float value) {
  if (!has_average_last_percent_trees()) {
    clear_config();
    set_has_average_last_percent_trees();
  }
  config_.average_last_percent_trees_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.AveragingConfig.average_last_percent_trees)
}

bool AveragingConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void AveragingConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
AveragingConfig::ConfigCase AveragingConfig::config_case() const {
  return AveragingConfig::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateDropoutDrivenConfig::kDropoutProbabilityFieldNumber;
const int LearningRateDropoutDrivenConfig::kProbabilityOfSkippingDropoutFieldNumber;
const int LearningRateDropoutDrivenConfig::kLearningRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}
LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}
LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig(const LearningRateDropoutDrivenConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropout_probability_, &from.dropout_probability_,
    reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&dropout_probability_) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}

void LearningRateDropoutDrivenConfig::SharedCtor() {
  ::memset(&dropout_probability_, 0, reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&dropout_probability_) + sizeof(learning_rate_));
  _cached_size_ = 0;
}

LearningRateDropoutDrivenConfig::~LearningRateDropoutDrivenConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  SharedDtor();
}

void LearningRateDropoutDrivenConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void LearningRateDropoutDrivenConfig::ArenaDtor(void* object) {
  LearningRateDropoutDrivenConfig* _this = reinterpret_cast< LearningRateDropoutDrivenConfig* >(object);
  (void)_this;
}
void LearningRateDropoutDrivenConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateDropoutDrivenConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateDropoutDrivenConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[6].descriptor;
}

const LearningRateDropoutDrivenConfig& LearningRateDropoutDrivenConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningRateDropoutDrivenConfig* LearningRateDropoutDrivenConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LearningRateDropoutDrivenConfig>(arena);
}

void LearningRateDropoutDrivenConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  ::memset(&dropout_probability_, 0, reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&dropout_probability_) + sizeof(learning_rate_));
}

bool LearningRateDropoutDrivenConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dropout_probability = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float probability_of_skipping_dropout = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_of_skipping_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float learning_rate = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return false;
#undef DO_
}

void LearningRateDropoutDrivenConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_probability(), output);
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->probability_of_skipping_dropout(), output);
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->learning_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}

::google::protobuf::uint8* LearningRateDropoutDrivenConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_probability(), target);
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->probability_of_skipping_dropout(), target);
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->learning_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return target;
}

size_t LearningRateDropoutDrivenConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  size_t total_size = 0;

  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    total_size += 1 + 4;
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    total_size += 1 + 4;
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateDropoutDrivenConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateDropoutDrivenConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateDropoutDrivenConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
    MergeFrom(*source);
  }
}

void LearningRateDropoutDrivenConfig::MergeFrom(const LearningRateDropoutDrivenConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dropout_probability() != 0) {
    set_dropout_probability(from.dropout_probability());
  }
  if (from.probability_of_skipping_dropout() != 0) {
    set_probability_of_skipping_dropout(from.probability_of_skipping_dropout());
  }
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
}

void LearningRateDropoutDrivenConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateDropoutDrivenConfig::CopyFrom(const LearningRateDropoutDrivenConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateDropoutDrivenConfig::IsInitialized() const {
  return true;
}

void LearningRateDropoutDrivenConfig::Swap(LearningRateDropoutDrivenConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateDropoutDrivenConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateDropoutDrivenConfig::UnsafeArenaSwap(LearningRateDropoutDrivenConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateDropoutDrivenConfig::InternalSwap(LearningRateDropoutDrivenConfig* other) {
  std::swap(dropout_probability_, other->dropout_probability_);
  std::swap(probability_of_skipping_dropout_, other->probability_of_skipping_dropout_);
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateDropoutDrivenConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningRateDropoutDrivenConfig

// float dropout_probability = 1;
void LearningRateDropoutDrivenConfig::clear_dropout_probability() {
  dropout_probability_ = 0;
}
float LearningRateDropoutDrivenConfig::dropout_probability() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.dropout_probability)
  return dropout_probability_;
}
void LearningRateDropoutDrivenConfig::set_dropout_probability(float value) {
  
  dropout_probability_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.dropout_probability)
}

// float probability_of_skipping_dropout = 2;
void LearningRateDropoutDrivenConfig::clear_probability_of_skipping_dropout() {
  probability_of_skipping_dropout_ = 0;
}
float LearningRateDropoutDrivenConfig::probability_of_skipping_dropout() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.probability_of_skipping_dropout)
  return probability_of_skipping_dropout_;
}
void LearningRateDropoutDrivenConfig::set_probability_of_skipping_dropout(float value) {
  
  probability_of_skipping_dropout_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.probability_of_skipping_dropout)
}

// float learning_rate = 3;
void LearningRateDropoutDrivenConfig::clear_learning_rate() {
  learning_rate_ = 0;
}
float LearningRateDropoutDrivenConfig::learning_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.learning_rate)
  return learning_rate_;
}
void LearningRateDropoutDrivenConfig::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig.learning_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LearnerConfig::_slow_mutable_regularization() {
  regularization_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::learner::TreeRegularizationConfig* LearnerConfig::_slow_release_regularization() {
  if (regularization_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* temp = new ::tensorflow::boosted_trees::learner::TreeRegularizationConfig(*regularization_);
    regularization_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::learner::TreeRegularizationConfig* LearnerConfig::unsafe_arena_release_regularization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
  
  ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* temp = regularization_;
  regularization_ = NULL;
  return temp;
}
void LearnerConfig::_slow_set_allocated_regularization(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::learner::TreeRegularizationConfig** regularization) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*regularization) == NULL) {
      message_arena->Own(*regularization);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*regularization)) {
      ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* new_regularization = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig >(
            message_arena);
      new_regularization->CopyFrom(**regularization);
      *regularization = new_regularization;
    }
}
void LearnerConfig::unsafe_arena_set_allocated_regularization(
    ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* regularization) {
  if (GetArenaNoVirtual() == NULL) {
    delete regularization_;
  }
  regularization_ = regularization;
  if (regularization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
}
void LearnerConfig::_slow_mutable_constraints() {
  constraints_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::learner::TreeConstraintsConfig* LearnerConfig::_slow_release_constraints() {
  if (constraints_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* temp = new ::tensorflow::boosted_trees::learner::TreeConstraintsConfig(*constraints_);
    constraints_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::learner::TreeConstraintsConfig* LearnerConfig::unsafe_arena_release_constraints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
  
  ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* temp = constraints_;
  constraints_ = NULL;
  return temp;
}
void LearnerConfig::_slow_set_allocated_constraints(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::learner::TreeConstraintsConfig** constraints) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*constraints) == NULL) {
      message_arena->Own(*constraints);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*constraints)) {
      ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* new_constraints = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig >(
            message_arena);
      new_constraints->CopyFrom(**constraints);
      *constraints = new_constraints;
    }
}
void LearnerConfig::unsafe_arena_set_allocated_constraints(
    ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* constraints) {
  if (GetArenaNoVirtual() == NULL) {
    delete constraints_;
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
}
void LearnerConfig::_slow_mutable_learning_rate_tuner() {
  learning_rate_tuner_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateConfig >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::learner::LearningRateConfig* LearnerConfig::_slow_release_learning_rate_tuner() {
  if (learning_rate_tuner_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::learner::LearningRateConfig* temp = new ::tensorflow::boosted_trees::learner::LearningRateConfig(*learning_rate_tuner_);
    learning_rate_tuner_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::learner::LearningRateConfig* LearnerConfig::unsafe_arena_release_learning_rate_tuner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
  
  ::tensorflow::boosted_trees::learner::LearningRateConfig* temp = learning_rate_tuner_;
  learning_rate_tuner_ = NULL;
  return temp;
}
void LearnerConfig::_slow_set_allocated_learning_rate_tuner(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::learner::LearningRateConfig** learning_rate_tuner) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*learning_rate_tuner) == NULL) {
      message_arena->Own(*learning_rate_tuner);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*learning_rate_tuner)) {
      ::tensorflow::boosted_trees::learner::LearningRateConfig* new_learning_rate_tuner = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateConfig >(
            message_arena);
      new_learning_rate_tuner->CopyFrom(**learning_rate_tuner);
      *learning_rate_tuner = new_learning_rate_tuner;
    }
}
void LearnerConfig::unsafe_arena_set_allocated_learning_rate_tuner(
    ::tensorflow::boosted_trees::learner::LearningRateConfig* learning_rate_tuner) {
  if (GetArenaNoVirtual() == NULL) {
    delete learning_rate_tuner_;
  }
  learning_rate_tuner_ = learning_rate_tuner;
  if (learning_rate_tuner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
}
void LearnerConfig::_slow_mutable_averaging_config() {
  averaging_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::AveragingConfig >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::learner::AveragingConfig* LearnerConfig::_slow_release_averaging_config() {
  if (averaging_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::learner::AveragingConfig* temp = new ::tensorflow::boosted_trees::learner::AveragingConfig(*averaging_config_);
    averaging_config_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::learner::AveragingConfig* LearnerConfig::unsafe_arena_release_averaging_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
  
  ::tensorflow::boosted_trees::learner::AveragingConfig* temp = averaging_config_;
  averaging_config_ = NULL;
  return temp;
}
void LearnerConfig::_slow_set_allocated_averaging_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::learner::AveragingConfig** averaging_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*averaging_config) == NULL) {
      message_arena->Own(*averaging_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*averaging_config)) {
      ::tensorflow::boosted_trees::learner::AveragingConfig* new_averaging_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::learner::AveragingConfig >(
            message_arena);
      new_averaging_config->CopyFrom(**averaging_config);
      *averaging_config = new_averaging_config;
    }
}
void LearnerConfig::unsafe_arena_set_allocated_averaging_config(
    ::tensorflow::boosted_trees::learner::AveragingConfig* averaging_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete averaging_config_;
  }
  averaging_config_ = averaging_config;
  if (averaging_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearnerConfig::kNumClassesFieldNumber;
const int LearnerConfig::kFeatureFractionPerTreeFieldNumber;
const int LearnerConfig::kFeatureFractionPerLevelFieldNumber;
const int LearnerConfig::kRegularizationFieldNumber;
const int LearnerConfig::kConstraintsFieldNumber;
const int LearnerConfig::kPruningModeFieldNumber;
const int LearnerConfig::kGrowingModeFieldNumber;
const int LearnerConfig::kLearningRateTunerFieldNumber;
const int LearnerConfig::kMultiClassStrategyFieldNumber;
const int LearnerConfig::kAveragingConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearnerConfig::LearnerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}
LearnerConfig::LearnerConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}
LearnerConfig::LearnerConfig(const LearnerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regularization()) {
    regularization_ = new ::tensorflow::boosted_trees::learner::TreeRegularizationConfig(*from.regularization_);
  } else {
    regularization_ = NULL;
  }
  if (from.has_constraints()) {
    constraints_ = new ::tensorflow::boosted_trees::learner::TreeConstraintsConfig(*from.constraints_);
  } else {
    constraints_ = NULL;
  }
  if (from.has_learning_rate_tuner()) {
    learning_rate_tuner_ = new ::tensorflow::boosted_trees::learner::LearningRateConfig(*from.learning_rate_tuner_);
  } else {
    learning_rate_tuner_ = NULL;
  }
  if (from.has_averaging_config()) {
    averaging_config_ = new ::tensorflow::boosted_trees::learner::AveragingConfig(*from.averaging_config_);
  } else {
    averaging_config_ = NULL;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    reinterpret_cast<char*>(&multi_class_strategy_) -
    reinterpret_cast<char*>(&num_classes_) + sizeof(multi_class_strategy_));
  clear_has_feature_fraction();
  switch (from.feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      set_feature_fraction_per_tree(from.feature_fraction_per_tree());
      break;
    }
    case kFeatureFractionPerLevel: {
      set_feature_fraction_per_level(from.feature_fraction_per_level());
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}

void LearnerConfig::SharedCtor() {
  ::memset(&regularization_, 0, reinterpret_cast<char*>(&multi_class_strategy_) -
    reinterpret_cast<char*>(&regularization_) + sizeof(multi_class_strategy_));
  clear_has_feature_fraction();
  _cached_size_ = 0;
}

LearnerConfig::~LearnerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearnerConfig)
  SharedDtor();
}

void LearnerConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete regularization_;
  }
  if (this != internal_default_instance()) {
    delete constraints_;
  }
  if (this != internal_default_instance()) {
    delete learning_rate_tuner_;
  }
  if (this != internal_default_instance()) {
    delete averaging_config_;
  }
  if (has_feature_fraction()) {
    clear_feature_fraction();
  }
}

void LearnerConfig::ArenaDtor(void* object) {
  LearnerConfig* _this = reinterpret_cast< LearnerConfig* >(object);
  (void)_this;
}
void LearnerConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearnerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnerConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[7].descriptor;
}

const LearnerConfig& LearnerConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearnerConfig* LearnerConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LearnerConfig>(arena);
}

void LearnerConfig::clear_feature_fraction() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.LearnerConfig)
  switch (feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      // No need to clear
      break;
    }
    case kFeatureFractionPerLevel: {
      // No need to clear
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_FRACTION_NOT_SET;
}


void LearnerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearnerConfig)
  if (GetArenaNoVirtual() == NULL && regularization_ != NULL) {
    delete regularization_;
  }
  regularization_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraints_ != NULL) {
    delete constraints_;
  }
  constraints_ = NULL;
  if (GetArenaNoVirtual() == NULL && learning_rate_tuner_ != NULL) {
    delete learning_rate_tuner_;
  }
  learning_rate_tuner_ = NULL;
  if (GetArenaNoVirtual() == NULL && averaging_config_ != NULL) {
    delete averaging_config_;
  }
  averaging_config_ = NULL;
  ::memset(&num_classes_, 0, reinterpret_cast<char*>(&multi_class_strategy_) -
    reinterpret_cast<char*>(&num_classes_) + sizeof(multi_class_strategy_));
  clear_feature_fraction();
}

bool LearnerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearnerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_classes = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float feature_fraction_per_tree = 2;
      case 2: {
        if (tag == 21u) {
          clear_feature_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_fraction_.feature_fraction_per_tree_)));
          set_has_feature_fraction_per_tree();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float feature_fraction_per_level = 3;
      case 3: {
        if (tag == 29u) {
          clear_feature_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_fraction_.feature_fraction_per_level_)));
          set_has_feature_fraction_per_level();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regularization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learning_rate_tuner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pruning_mode(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_PruningMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_growing_mode(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_GrowingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_multi_class_strategy(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_MultiClassStrategy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_averaging_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearnerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearnerConfig)
  return false;
#undef DO_
}

void LearnerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearnerConfig)
  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_classes(), output);
  }

  // float feature_fraction_per_tree = 2;
  if (has_feature_fraction_per_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->feature_fraction_per_tree(), output);
  }

  // float feature_fraction_per_level = 3;
  if (has_feature_fraction_per_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->feature_fraction_per_level(), output);
  }

  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->regularization_, output);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->constraints_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->learning_rate_tuner_, output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pruning_mode(), output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->growing_mode(), output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->multi_class_strategy(), output);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->averaging_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearnerConfig)
}

::google::protobuf::uint8* LearnerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearnerConfig)
  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_classes(), target);
  }

  // float feature_fraction_per_tree = 2;
  if (has_feature_fraction_per_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->feature_fraction_per_tree(), target);
  }

  // float feature_fraction_per_level = 3;
  if (has_feature_fraction_per_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->feature_fraction_per_level(), target);
  }

  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->regularization_, false, target);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->constraints_, false, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->learning_rate_tuner_, false, target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pruning_mode(), target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->growing_mode(), target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->multi_class_strategy(), target);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->averaging_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearnerConfig)
  return target;
}

size_t LearnerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearnerConfig)
  size_t total_size = 0;

  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->regularization_);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->constraints_);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->learning_rate_tuner_);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->averaging_config_);
  }

  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_classes());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pruning_mode());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->growing_mode());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multi_class_strategy());
  }

  switch (feature_fraction_case()) {
    // float feature_fraction_per_tree = 2;
    case kFeatureFractionPerTree: {
      total_size += 1 + 4;
      break;
    }
    // float feature_fraction_per_level = 3;
    case kFeatureFractionPerLevel: {
      total_size += 1 + 4;
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearnerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearnerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearnerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearnerConfig)
    MergeFrom(*source);
  }
}

void LearnerConfig::MergeFrom(const LearnerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regularization()) {
    mutable_regularization()->::tensorflow::boosted_trees::learner::TreeRegularizationConfig::MergeFrom(from.regularization());
  }
  if (from.has_constraints()) {
    mutable_constraints()->::tensorflow::boosted_trees::learner::TreeConstraintsConfig::MergeFrom(from.constraints());
  }
  if (from.has_learning_rate_tuner()) {
    mutable_learning_rate_tuner()->::tensorflow::boosted_trees::learner::LearningRateConfig::MergeFrom(from.learning_rate_tuner());
  }
  if (from.has_averaging_config()) {
    mutable_averaging_config()->::tensorflow::boosted_trees::learner::AveragingConfig::MergeFrom(from.averaging_config());
  }
  if (from.num_classes() != 0) {
    set_num_classes(from.num_classes());
  }
  if (from.pruning_mode() != 0) {
    set_pruning_mode(from.pruning_mode());
  }
  if (from.growing_mode() != 0) {
    set_growing_mode(from.growing_mode());
  }
  if (from.multi_class_strategy() != 0) {
    set_multi_class_strategy(from.multi_class_strategy());
  }
  switch (from.feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      set_feature_fraction_per_tree(from.feature_fraction_per_tree());
      break;
    }
    case kFeatureFractionPerLevel: {
      set_feature_fraction_per_level(from.feature_fraction_per_level());
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
}

void LearnerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnerConfig::CopyFrom(const LearnerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnerConfig::IsInitialized() const {
  return true;
}

void LearnerConfig::Swap(LearnerConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearnerConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearnerConfig::UnsafeArenaSwap(LearnerConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearnerConfig::InternalSwap(LearnerConfig* other) {
  std::swap(regularization_, other->regularization_);
  std::swap(constraints_, other->constraints_);
  std::swap(learning_rate_tuner_, other->learning_rate_tuner_);
  std::swap(averaging_config_, other->averaging_config_);
  std::swap(num_classes_, other->num_classes_);
  std::swap(pruning_mode_, other->pruning_mode_);
  std::swap(growing_mode_, other->growing_mode_);
  std::swap(multi_class_strategy_, other->multi_class_strategy_);
  std::swap(feature_fraction_, other->feature_fraction_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearnerConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearnerConfig

// uint32 num_classes = 1;
void LearnerConfig::clear_num_classes() {
  num_classes_ = 0u;
}
::google::protobuf::uint32 LearnerConfig::num_classes() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.num_classes)
  return num_classes_;
}
void LearnerConfig::set_num_classes(::google::protobuf::uint32 value) {
  
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.num_classes)
}

// float feature_fraction_per_tree = 2;
bool LearnerConfig::has_feature_fraction_per_tree() const {
  return feature_fraction_case() == kFeatureFractionPerTree;
}
void LearnerConfig::set_has_feature_fraction_per_tree() {
  _oneof_case_[0] = kFeatureFractionPerTree;
}
void LearnerConfig::clear_feature_fraction_per_tree() {
  if (has_feature_fraction_per_tree()) {
    feature_fraction_.feature_fraction_per_tree_ = 0;
    clear_has_feature_fraction();
  }
}
float LearnerConfig::feature_fraction_per_tree() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.feature_fraction_per_tree)
  if (has_feature_fraction_per_tree()) {
    return feature_fraction_.feature_fraction_per_tree_;
  }
  return 0;
}
void LearnerConfig::set_feature_fraction_per_tree(float value) {
  if (!has_feature_fraction_per_tree()) {
    clear_feature_fraction();
    set_has_feature_fraction_per_tree();
  }
  feature_fraction_.feature_fraction_per_tree_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.feature_fraction_per_tree)
}

// float feature_fraction_per_level = 3;
bool LearnerConfig::has_feature_fraction_per_level() const {
  return feature_fraction_case() == kFeatureFractionPerLevel;
}
void LearnerConfig::set_has_feature_fraction_per_level() {
  _oneof_case_[0] = kFeatureFractionPerLevel;
}
void LearnerConfig::clear_feature_fraction_per_level() {
  if (has_feature_fraction_per_level()) {
    feature_fraction_.feature_fraction_per_level_ = 0;
    clear_has_feature_fraction();
  }
}
float LearnerConfig::feature_fraction_per_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.feature_fraction_per_level)
  if (has_feature_fraction_per_level()) {
    return feature_fraction_.feature_fraction_per_level_;
  }
  return 0;
}
void LearnerConfig::set_feature_fraction_per_level(float value) {
  if (!has_feature_fraction_per_level()) {
    clear_feature_fraction();
    set_has_feature_fraction_per_level();
  }
  feature_fraction_.feature_fraction_per_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.feature_fraction_per_level)
}

// .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
bool LearnerConfig::has_regularization() const {
  return this != internal_default_instance() && regularization_ != NULL;
}
void LearnerConfig::clear_regularization() {
  if (GetArenaNoVirtual() == NULL && regularization_ != NULL) delete regularization_;
  regularization_ = NULL;
}
const ::tensorflow::boosted_trees::learner::TreeRegularizationConfig& LearnerConfig::regularization() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
  return regularization_ != NULL ? *regularization_
                         : *::tensorflow::boosted_trees::learner::TreeRegularizationConfig::internal_default_instance();
}
::tensorflow::boosted_trees::learner::TreeRegularizationConfig* LearnerConfig::mutable_regularization() {
  
  if (regularization_ == NULL) {
    _slow_mutable_regularization();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
  return regularization_;
}
::tensorflow::boosted_trees::learner::TreeRegularizationConfig* LearnerConfig::release_regularization() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_regularization();
  } else {
    ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* temp = regularization_;
    regularization_ = NULL;
    return temp;
  }
}
 void LearnerConfig::set_allocated_regularization(::tensorflow::boosted_trees::learner::TreeRegularizationConfig* regularization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete regularization_;
  }
  if (regularization != NULL) {
    _slow_set_allocated_regularization(message_arena, &regularization);
  }
  regularization_ = regularization;
  if (regularization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
}

// .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
bool LearnerConfig::has_constraints() const {
  return this != internal_default_instance() && constraints_ != NULL;
}
void LearnerConfig::clear_constraints() {
  if (GetArenaNoVirtual() == NULL && constraints_ != NULL) delete constraints_;
  constraints_ = NULL;
}
const ::tensorflow::boosted_trees::learner::TreeConstraintsConfig& LearnerConfig::constraints() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
  return constraints_ != NULL ? *constraints_
                         : *::tensorflow::boosted_trees::learner::TreeConstraintsConfig::internal_default_instance();
}
::tensorflow::boosted_trees::learner::TreeConstraintsConfig* LearnerConfig::mutable_constraints() {
  
  if (constraints_ == NULL) {
    _slow_mutable_constraints();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
  return constraints_;
}
::tensorflow::boosted_trees::learner::TreeConstraintsConfig* LearnerConfig::release_constraints() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_constraints();
  } else {
    ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* temp = constraints_;
    constraints_ = NULL;
    return temp;
  }
}
 void LearnerConfig::set_allocated_constraints(::tensorflow::boosted_trees::learner::TreeConstraintsConfig* constraints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete constraints_;
  }
  if (constraints != NULL) {
    _slow_set_allocated_constraints(message_arena, &constraints);
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
}

// .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
void LearnerConfig::clear_pruning_mode() {
  pruning_mode_ = 0;
}
::tensorflow::boosted_trees::learner::LearnerConfig_PruningMode LearnerConfig::pruning_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.pruning_mode)
  return static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_PruningMode >(pruning_mode_);
}
void LearnerConfig::set_pruning_mode(::tensorflow::boosted_trees::learner::LearnerConfig_PruningMode value) {
  
  pruning_mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.pruning_mode)
}

// .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
void LearnerConfig::clear_growing_mode() {
  growing_mode_ = 0;
}
::tensorflow::boosted_trees::learner::LearnerConfig_GrowingMode LearnerConfig::growing_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.growing_mode)
  return static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_GrowingMode >(growing_mode_);
}
void LearnerConfig::set_growing_mode(::tensorflow::boosted_trees::learner::LearnerConfig_GrowingMode value) {
  
  growing_mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.growing_mode)
}

// .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
bool LearnerConfig::has_learning_rate_tuner() const {
  return this != internal_default_instance() && learning_rate_tuner_ != NULL;
}
void LearnerConfig::clear_learning_rate_tuner() {
  if (GetArenaNoVirtual() == NULL && learning_rate_tuner_ != NULL) delete learning_rate_tuner_;
  learning_rate_tuner_ = NULL;
}
const ::tensorflow::boosted_trees::learner::LearningRateConfig& LearnerConfig::learning_rate_tuner() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
  return learning_rate_tuner_ != NULL ? *learning_rate_tuner_
                         : *::tensorflow::boosted_trees::learner::LearningRateConfig::internal_default_instance();
}
::tensorflow::boosted_trees::learner::LearningRateConfig* LearnerConfig::mutable_learning_rate_tuner() {
  
  if (learning_rate_tuner_ == NULL) {
    _slow_mutable_learning_rate_tuner();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
  return learning_rate_tuner_;
}
::tensorflow::boosted_trees::learner::LearningRateConfig* LearnerConfig::release_learning_rate_tuner() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_learning_rate_tuner();
  } else {
    ::tensorflow::boosted_trees::learner::LearningRateConfig* temp = learning_rate_tuner_;
    learning_rate_tuner_ = NULL;
    return temp;
  }
}
 void LearnerConfig::set_allocated_learning_rate_tuner(::tensorflow::boosted_trees::learner::LearningRateConfig* learning_rate_tuner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete learning_rate_tuner_;
  }
  if (learning_rate_tuner != NULL) {
    _slow_set_allocated_learning_rate_tuner(message_arena, &learning_rate_tuner);
  }
  learning_rate_tuner_ = learning_rate_tuner;
  if (learning_rate_tuner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
}

// .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
void LearnerConfig::clear_multi_class_strategy() {
  multi_class_strategy_ = 0;
}
::tensorflow::boosted_trees::learner::LearnerConfig_MultiClassStrategy LearnerConfig::multi_class_strategy() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.multi_class_strategy)
  return static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_MultiClassStrategy >(multi_class_strategy_);
}
void LearnerConfig::set_multi_class_strategy(::tensorflow::boosted_trees::learner::LearnerConfig_MultiClassStrategy value) {
  
  multi_class_strategy_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.learner.LearnerConfig.multi_class_strategy)
}

// .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
bool LearnerConfig::has_averaging_config() const {
  return this != internal_default_instance() && averaging_config_ != NULL;
}
void LearnerConfig::clear_averaging_config() {
  if (GetArenaNoVirtual() == NULL && averaging_config_ != NULL) delete averaging_config_;
  averaging_config_ = NULL;
}
const ::tensorflow::boosted_trees::learner::AveragingConfig& LearnerConfig::averaging_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
  return averaging_config_ != NULL ? *averaging_config_
                         : *::tensorflow::boosted_trees::learner::AveragingConfig::internal_default_instance();
}
::tensorflow::boosted_trees::learner::AveragingConfig* LearnerConfig::mutable_averaging_config() {
  
  if (averaging_config_ == NULL) {
    _slow_mutable_averaging_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
  return averaging_config_;
}
::tensorflow::boosted_trees::learner::AveragingConfig* LearnerConfig::release_averaging_config() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_averaging_config();
  } else {
    ::tensorflow::boosted_trees::learner::AveragingConfig* temp = averaging_config_;
    averaging_config_ = NULL;
    return temp;
  }
}
 void LearnerConfig::set_allocated_averaging_config(::tensorflow::boosted_trees::learner::AveragingConfig* averaging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete averaging_config_;
  }
  if (averaging_config != NULL) {
    _slow_set_allocated_averaging_config(message_arena, &averaging_config);
  }
  averaging_config_ = averaging_config;
  if (averaging_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
}

bool LearnerConfig::has_feature_fraction() const {
  return feature_fraction_case() != FEATURE_FRACTION_NOT_SET;
}
void LearnerConfig::clear_has_feature_fraction() {
  _oneof_case_[0] = FEATURE_FRACTION_NOT_SET;
}
LearnerConfig::FeatureFractionCase LearnerConfig::feature_fraction_case() const {
  return LearnerConfig::FeatureFractionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
