// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/tree_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/boosted_trees/proto/tree_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace boosted_trees {
namespace trees {
class TreeNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TreeNode> {
  public:
  const ::tensorflow::boosted_trees::trees::Leaf* leaf_;
  const ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* dense_float_binary_split_;
  const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* sparse_float_binary_split_default_left_;
  const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* sparse_float_binary_split_default_right_;
  const ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* categorical_id_binary_split_;
  const ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* categorical_id_set_membership_binary_split_;
} _TreeNode_default_instance_;
class TreeNodeMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TreeNodeMetadata> {
} _TreeNodeMetadata_default_instance_;
class LeafDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Leaf> {
  public:
  const ::tensorflow::boosted_trees::trees::Vector* vector_;
  const ::tensorflow::boosted_trees::trees::SparseVector* sparse_vector_;
} _Leaf_default_instance_;
class VectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector> {
} _Vector_default_instance_;
class SparseVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SparseVector> {
} _SparseVector_default_instance_;
class DenseFloatBinarySplitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DenseFloatBinarySplit> {
} _DenseFloatBinarySplit_default_instance_;
class SparseFloatBinarySplitDefaultLeftDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SparseFloatBinarySplitDefaultLeft> {
} _SparseFloatBinarySplitDefaultLeft_default_instance_;
class SparseFloatBinarySplitDefaultRightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SparseFloatBinarySplitDefaultRight> {
} _SparseFloatBinarySplitDefaultRight_default_instance_;
class CategoricalIdBinarySplitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CategoricalIdBinarySplit> {
} _CategoricalIdBinarySplit_default_instance_;
class CategoricalIdSetMembershipBinarySplitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CategoricalIdSetMembershipBinarySplit> {
} _CategoricalIdSetMembershipBinarySplit_default_instance_;
class DecisionTreeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeConfig> {
} _DecisionTreeConfig_default_instance_;
class DecisionTreeMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeMetadata> {
} _DecisionTreeMetadata_default_instance_;
class DecisionTreeEnsembleConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeEnsembleConfig> {
} _DecisionTreeEnsembleConfig_default_instance_;

namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), leaf_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), dense_float_binary_split_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), sparse_float_binary_split_default_left_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), sparse_float_binary_split_default_right_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), categorical_id_binary_split_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TreeNode_default_instance_), categorical_id_set_membership_binary_split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, node_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeMetadata, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeMetadata, original_leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Leaf_default_instance_), vector_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Leaf_default_instance_), sparse_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseFloatBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseFloatBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseFloatBinarySplit, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseFloatBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseFloatBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseFloatBinarySplitDefaultLeft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseFloatBinarySplitDefaultLeft, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseFloatBinarySplitDefaultRight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseFloatBinarySplitDefaultRight, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdBinarySplit, feature_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdSetMembershipBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdSetMembershipBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdSetMembershipBinarySplit, feature_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdSetMembershipBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoricalIdSetMembershipBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeConfig, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeMetadata, num_tree_weight_updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeMetadata, num_layers_grown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeMetadata, is_finalized_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeEnsembleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeEnsembleConfig, trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeEnsembleConfig, tree_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTreeEnsembleConfig, tree_metadata_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TreeNode)},
  { 12, -1, sizeof(TreeNodeMetadata)},
  { 18, -1, sizeof(Leaf)},
  { 25, -1, sizeof(Vector)},
  { 30, -1, sizeof(SparseVector)},
  { 36, -1, sizeof(DenseFloatBinarySplit)},
  { 44, -1, sizeof(SparseFloatBinarySplitDefaultLeft)},
  { 49, -1, sizeof(SparseFloatBinarySplitDefaultRight)},
  { 54, -1, sizeof(CategoricalIdBinarySplit)},
  { 62, -1, sizeof(CategoricalIdSetMembershipBinarySplit)},
  { 70, -1, sizeof(DecisionTreeConfig)},
  { 75, -1, sizeof(DecisionTreeMetadata)},
  { 82, -1, sizeof(DecisionTreeEnsembleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Leaf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SparseVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DenseFloatBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SparseFloatBinarySplitDefaultLeft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SparseFloatBinarySplitDefaultRight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoricalIdBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoricalIdSetMembershipBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionTreeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionTreeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionTreeEnsembleConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/boosted_trees/proto/tree_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _TreeNode_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TreeNodeMetadata_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Leaf_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Vector_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SparseVector_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DenseFloatBinarySplit_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SparseFloatBinarySplitDefaultLeft_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SparseFloatBinarySplitDefaultRight_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CategoricalIdBinarySplit_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CategoricalIdSetMembershipBinarySplit_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DecisionTreeConfig_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _DecisionTreeMetadata_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _DecisionTreeEnsembleConfig_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TreeNode_default_instance_.DefaultConstruct();
  _TreeNodeMetadata_default_instance_.DefaultConstruct();
  _Leaf_default_instance_.DefaultConstruct();
  _Vector_default_instance_.DefaultConstruct();
  _SparseVector_default_instance_.DefaultConstruct();
  _DenseFloatBinarySplit_default_instance_.DefaultConstruct();
  _SparseFloatBinarySplitDefaultLeft_default_instance_.DefaultConstruct();
  _SparseFloatBinarySplitDefaultRight_default_instance_.DefaultConstruct();
  _CategoricalIdBinarySplit_default_instance_.DefaultConstruct();
  _CategoricalIdSetMembershipBinarySplit_default_instance_.DefaultConstruct();
  _DecisionTreeConfig_default_instance_.DefaultConstruct();
  _DecisionTreeMetadata_default_instance_.DefaultConstruct();
  _DecisionTreeEnsembleConfig_default_instance_.DefaultConstruct();
  _TreeNode_default_instance_.leaf_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
  _TreeNode_default_instance_.dense_float_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
  _TreeNode_default_instance_.sparse_float_binary_split_default_left_ = const_cast< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft*>(
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::internal_default_instance());
  _TreeNode_default_instance_.sparse_float_binary_split_default_right_ = const_cast< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight*>(
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::internal_default_instance());
  _TreeNode_default_instance_.categorical_id_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit*>(
      ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::internal_default_instance());
  _TreeNode_default_instance_.categorical_id_set_membership_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit*>(
      ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::internal_default_instance());
  _TreeNode_default_instance_.get_mutable()->node_metadata_ = const_cast< ::tensorflow::boosted_trees::trees::TreeNodeMetadata*>(
      ::tensorflow::boosted_trees::trees::TreeNodeMetadata::internal_default_instance());
  _TreeNodeMetadata_default_instance_.get_mutable()->original_leaf_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
  _Leaf_default_instance_.vector_ = const_cast< ::tensorflow::boosted_trees::trees::Vector*>(
      ::tensorflow::boosted_trees::trees::Vector::internal_default_instance());
  _Leaf_default_instance_.sparse_vector_ = const_cast< ::tensorflow::boosted_trees::trees::SparseVector*>(
      ::tensorflow::boosted_trees::trees::SparseVector::internal_default_instance());
  _SparseFloatBinarySplitDefaultLeft_default_instance_.get_mutable()->split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
  _SparseFloatBinarySplitDefaultRight_default_instance_.get_mutable()->split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n8tensorflow/contrib/boosted_trees/proto"
      "/tree_config.proto\022\036tensorflow.boosted_t"
      "rees.trees\"\267\005\n\010TreeNode\0224\n\004leaf\030\001 \001(\0132$."
      "tensorflow.boosted_trees.trees.LeafH\000\022Y\n"
      "\030dense_float_binary_split\030\002 \001(\01325.tensor"
      "flow.boosted_trees.trees.DenseFloatBinar"
      "ySplitH\000\022s\n&sparse_float_binary_split_de"
      "fault_left\030\003 \001(\0132A.tensorflow.boosted_tr"
      "ees.trees.SparseFloatBinarySplitDefaultL"
      "eftH\000\022u\n\'sparse_float_binary_split_defau"
      "lt_right\030\004 \001(\0132B.tensorflow.boosted_tree"
      "s.trees.SparseFloatBinarySplitDefaultRig"
      "htH\000\022_\n\033categorical_id_binary_split\030\005 \001("
      "\01328.tensorflow.boosted_trees.trees.Categ"
      "oricalIdBinarySplitH\000\022{\n*categorical_id_"
      "set_membership_binary_split\030\006 \001(\0132E.tens"
      "orflow.boosted_trees.trees.CategoricalId"
      "SetMembershipBinarySplitH\000\022H\n\rnode_metad"
      "ata\030\211\006 \001(\01320.tensorflow.boosted_trees.tr"
      "ees.TreeNodeMetadataB\006\n\004node\"]\n\020TreeNode"
      "Metadata\022\014\n\004gain\030\001 \001(\002\022;\n\roriginal_leaf\030"
      "\002 \001(\0132$.tensorflow.boosted_trees.trees.L"
      "eaf\"\217\001\n\004Leaf\0228\n\006vector\030\001 \001(\0132&.tensorflo"
      "w.boosted_trees.trees.VectorH\000\022E\n\rsparse"
      "_vector\030\002 \001(\0132,.tensorflow.boosted_trees"
      ".trees.SparseVectorH\000B\006\n\004leaf\"\027\n\006Vector\022"
      "\r\n\005value\030\001 \003(\002\",\n\014SparseVector\022\r\n\005index\030"
      "\001 \003(\005\022\r\n\005value\030\002 \003(\002\"e\n\025DenseFloatBinary"
      "Split\022\026\n\016feature_column\030\001 \001(\005\022\021\n\tthresho"
      "ld\030\002 \001(\002\022\017\n\007left_id\030\003 \001(\005\022\020\n\010right_id\030\004 "
      "\001(\005\"i\n!SparseFloatBinarySplitDefaultLeft"
      "\022D\n\005split\030\001 \001(\01325.tensorflow.boosted_tre"
      "es.trees.DenseFloatBinarySplit\"j\n\"Sparse"
      "FloatBinarySplitDefaultRight\022D\n\005split\030\001 "
      "\001(\01325.tensorflow.boosted_trees.trees.Den"
      "seFloatBinarySplit\"i\n\030CategoricalIdBinar"
      "ySplit\022\026\n\016feature_column\030\001 \001(\005\022\022\n\nfeatur"
      "e_id\030\002 \001(\003\022\017\n\007left_id\030\003 \001(\005\022\020\n\010right_id\030"
      "\004 \001(\005\"w\n%CategoricalIdSetMembershipBinar"
      "ySplit\022\026\n\016feature_column\030\001 \001(\005\022\023\n\013featur"
      "e_ids\030\002 \003(\003\022\017\n\007left_id\030\003 \001(\005\022\020\n\010right_id"
      "\030\004 \001(\005\"M\n\022DecisionTreeConfig\0227\n\005nodes\030\001 "
      "\003(\0132(.tensorflow.boosted_trees.trees.Tre"
      "eNode\"g\n\024DecisionTreeMetadata\022\037\n\027num_tre"
      "e_weight_updates\030\001 \001(\005\022\030\n\020num_layers_gro"
      "wn\030\002 \001(\005\022\024\n\014is_finalized\030\003 \001(\010\"\302\001\n\032Decis"
      "ionTreeEnsembleConfig\022A\n\005trees\030\001 \003(\01322.t"
      "ensorflow.boosted_trees.trees.DecisionTr"
      "eeConfig\022\024\n\014tree_weights\030\002 \003(\002\022K\n\rtree_m"
      "etadata\030\003 \003(\01324.tensorflow.boosted_trees"
      ".trees.DecisionTreeMetadataB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2040);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/boosted_trees/proto/tree_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto


// ===================================================================

void TreeNode::_slow_mutable_node_metadata() {
  node_metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNodeMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::TreeNodeMetadata* TreeNode::_slow_release_node_metadata() {
  if (node_metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::TreeNodeMetadata* temp = new ::tensorflow::boosted_trees::trees::TreeNodeMetadata(*node_metadata_);
    node_metadata_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::TreeNodeMetadata* TreeNode::unsafe_arena_release_node_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
  
  ::tensorflow::boosted_trees::trees::TreeNodeMetadata* temp = node_metadata_;
  node_metadata_ = NULL;
  return temp;
}
void TreeNode::_slow_set_allocated_node_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::TreeNodeMetadata** node_metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*node_metadata) == NULL) {
      message_arena->Own(*node_metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*node_metadata)) {
      ::tensorflow::boosted_trees::trees::TreeNodeMetadata* new_node_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNodeMetadata >(
            message_arena);
      new_node_metadata->CopyFrom(**node_metadata);
      *node_metadata = new_node_metadata;
    }
}
void TreeNode::unsafe_arena_set_allocated_node_metadata(
    ::tensorflow::boosted_trees::trees::TreeNodeMetadata* node_metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete node_metadata_;
  }
  node_metadata_ = node_metadata;
  if (node_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kLeafFieldNumber;
const int TreeNode::kDenseFloatBinarySplitFieldNumber;
const int TreeNode::kSparseFloatBinarySplitDefaultLeftFieldNumber;
const int TreeNode::kSparseFloatBinarySplitDefaultRightFieldNumber;
const int TreeNode::kCategoricalIdBinarySplitFieldNumber;
const int TreeNode::kCategoricalIdSetMembershipBinarySplitFieldNumber;
const int TreeNode::kNodeMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.TreeNode)
}
TreeNode::TreeNode(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_metadata()) {
    node_metadata_ = new ::tensorflow::boosted_trees::trees::TreeNodeMetadata(*from.node_metadata_);
  } else {
    node_metadata_ = NULL;
  }
  clear_has_node();
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kDenseFloatBinarySplit: {
      mutable_dense_float_binary_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.dense_float_binary_split());
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      mutable_sparse_float_binary_split_default_left()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::MergeFrom(from.sparse_float_binary_split_default_left());
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      mutable_sparse_float_binary_split_default_right()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::MergeFrom(from.sparse_float_binary_split_default_right());
      break;
    }
    case kCategoricalIdBinarySplit: {
      mutable_categorical_id_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::MergeFrom(from.categorical_id_binary_split());
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      mutable_categorical_id_set_membership_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::MergeFrom(from.categorical_id_set_membership_binary_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.TreeNode)
}

void TreeNode::SharedCtor() {
  node_metadata_ = NULL;
  clear_has_node();
  _cached_size_ = 0;
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete node_metadata_;
  }
  if (has_node()) {
    clear_node();
  }
}

void TreeNode::ArenaDtor(void* object) {
  TreeNode* _this = reinterpret_cast< TreeNode* >(object);
  (void)_this;
}
void TreeNode::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[0].descriptor;
}

const TreeNode& TreeNode::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeNode* TreeNode::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeNode>(arena);
}

void TreeNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.trees.TreeNode)
  switch (node_case()) {
    case kLeaf: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.leaf_;
      }
      break;
    }
    case kDenseFloatBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.dense_float_binary_split_;
      }
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.sparse_float_binary_split_default_left_;
      }
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.sparse_float_binary_split_default_right_;
      }
      break;
    }
    case kCategoricalIdBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.categorical_id_binary_split_;
      }
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.categorical_id_set_membership_binary_split_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.TreeNode)
  if (GetArenaNoVirtual() == NULL && node_metadata_ != NULL) {
    delete node_metadata_;
  }
  node_metadata_ = NULL;
  clear_node();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.TreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_float_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_float_binary_split_default_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_float_binary_split_default_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categorical_id_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categorical_id_set_membership_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
      case 777: {
        if (tag == 6218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.TreeNode)
  // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *node_.leaf_, output);
  }

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
  if (has_dense_float_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *node_.dense_float_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
  if (has_sparse_float_binary_split_default_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *node_.sparse_float_binary_split_default_left_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
  if (has_sparse_float_binary_split_default_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *node_.sparse_float_binary_split_default_right_, output);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
  if (has_categorical_id_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *node_.categorical_id_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
  if (has_categorical_id_set_membership_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *node_.categorical_id_set_membership_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      777, *this->node_metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.TreeNode)
  // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *node_.leaf_, false, target);
  }

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
  if (has_dense_float_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *node_.dense_float_binary_split_, false, target);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
  if (has_sparse_float_binary_split_default_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *node_.sparse_float_binary_split_default_left_, false, target);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
  if (has_sparse_float_binary_split_default_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *node_.sparse_float_binary_split_default_right_, false, target);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
  if (has_categorical_id_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *node_.categorical_id_binary_split_, false, target);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
  if (has_categorical_id_set_membership_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *node_.categorical_id_set_membership_binary_split_, false, target);
  }

  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        777, *this->node_metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.TreeNode)
  size_t total_size = 0;

  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_metadata_);
  }

  switch (node_case()) {
    // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
    case kLeaf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.leaf_);
      break;
    }
    // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
    case kDenseFloatBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.dense_float_binary_split_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
    case kSparseFloatBinarySplitDefaultLeft: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.sparse_float_binary_split_default_left_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
    case kSparseFloatBinarySplitDefaultRight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.sparse_float_binary_split_default_right_);
      break;
    }
    // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
    case kCategoricalIdBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.categorical_id_binary_split_);
      break;
    }
    // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
    case kCategoricalIdSetMembershipBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.categorical_id_set_membership_binary_split_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_metadata()) {
    mutable_node_metadata()->::tensorflow::boosted_trees::trees::TreeNodeMetadata::MergeFrom(from.node_metadata());
  }
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kDenseFloatBinarySplit: {
      mutable_dense_float_binary_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.dense_float_binary_split());
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      mutable_sparse_float_binary_split_default_left()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::MergeFrom(from.sparse_float_binary_split_default_left());
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      mutable_sparse_float_binary_split_default_right()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::MergeFrom(from.sparse_float_binary_split_default_right());
      break;
    }
    case kCategoricalIdBinarySplit: {
      mutable_categorical_id_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::MergeFrom(from.categorical_id_binary_split());
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      mutable_categorical_id_set_membership_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::MergeFrom(from.categorical_id_set_membership_binary_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeNode* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeNode::UnsafeArenaSwap(TreeNode* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  std::swap(node_metadata_, other->node_metadata_);
  std::swap(node_, other->node_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeNode

// .tensorflow.boosted_trees.trees.Leaf leaf = 1;
bool TreeNode::has_leaf() const {
  return node_case() == kLeaf;
}
void TreeNode::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
void TreeNode::clear_leaf() {
  if (has_leaf()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.leaf_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::Leaf& TreeNode::leaf() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.leaf)
  return has_leaf()
      ? *node_.leaf_
      : ::tensorflow::boosted_trees::trees::Leaf::default_instance();
}
::tensorflow::boosted_trees::trees::Leaf* TreeNode::mutable_leaf() {
  if (!has_leaf()) {
    clear_node();
    set_has_leaf();
    node_.leaf_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.leaf)
  return node_.leaf_;
}
::tensorflow::boosted_trees::trees::Leaf* TreeNode::release_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.leaf)
  if (has_leaf()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::Leaf* temp = new ::tensorflow::boosted_trees::trees::Leaf(*node_.leaf_);
      node_.leaf_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::Leaf* temp = node_.leaf_;
      node_.leaf_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_leaf(::tensorflow::boosted_trees::trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(leaf) == NULL) {
      GetArenaNoVirtual()->Own(leaf);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(leaf)) {
      ::tensorflow::boosted_trees::trees::Leaf* new_leaf = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
          GetArenaNoVirtual());
      new_leaf->CopyFrom(*leaf);
      leaf = new_leaf;
    }
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.leaf)
}
 ::tensorflow::boosted_trees::trees::Leaf* TreeNode::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.leaf)
  if (has_leaf()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::Leaf* temp = node_.leaf_;
    node_.leaf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_leaf(::tensorflow::boosted_trees::trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.leaf)
}

// .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
bool TreeNode::has_dense_float_binary_split() const {
  return node_case() == kDenseFloatBinarySplit;
}
void TreeNode::set_has_dense_float_binary_split() {
  _oneof_case_[0] = kDenseFloatBinarySplit;
}
void TreeNode::clear_dense_float_binary_split() {
  if (has_dense_float_binary_split()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.dense_float_binary_split_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit& TreeNode::dense_float_binary_split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
  return has_dense_float_binary_split()
      ? *node_.dense_float_binary_split_
      : ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::default_instance();
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* TreeNode::mutable_dense_float_binary_split() {
  if (!has_dense_float_binary_split()) {
    clear_node();
    set_has_dense_float_binary_split();
    node_.dense_float_binary_split_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
  return node_.dense_float_binary_split_;
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* TreeNode::release_dense_float_binary_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
  if (has_dense_float_binary_split()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*node_.dense_float_binary_split_);
      node_.dense_float_binary_split_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = node_.dense_float_binary_split_;
      node_.dense_float_binary_split_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_dense_float_binary_split(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* dense_float_binary_split) {
  clear_node();
  if (dense_float_binary_split) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dense_float_binary_split) == NULL) {
      GetArenaNoVirtual()->Own(dense_float_binary_split);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dense_float_binary_split)) {
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* new_dense_float_binary_split = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
          GetArenaNoVirtual());
      new_dense_float_binary_split->CopyFrom(*dense_float_binary_split);
      dense_float_binary_split = new_dense_float_binary_split;
    }
    set_has_dense_float_binary_split();
    node_.dense_float_binary_split_ = dense_float_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
}
 ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* TreeNode::unsafe_arena_release_dense_float_binary_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
  if (has_dense_float_binary_split()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = node_.dense_float_binary_split_;
    node_.dense_float_binary_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_dense_float_binary_split(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* dense_float_binary_split) {
  clear_node();
  if (dense_float_binary_split) {
    set_has_dense_float_binary_split();
    node_.dense_float_binary_split_ = dense_float_binary_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
}

// .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
bool TreeNode::has_sparse_float_binary_split_default_left() const {
  return node_case() == kSparseFloatBinarySplitDefaultLeft;
}
void TreeNode::set_has_sparse_float_binary_split_default_left() {
  _oneof_case_[0] = kSparseFloatBinarySplitDefaultLeft;
}
void TreeNode::clear_sparse_float_binary_split_default_left() {
  if (has_sparse_float_binary_split_default_left()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.sparse_float_binary_split_default_left_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft& TreeNode::sparse_float_binary_split_default_left() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
  return has_sparse_float_binary_split_default_left()
      ? *node_.sparse_float_binary_split_default_left_
      : ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::default_instance();
}
::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* TreeNode::mutable_sparse_float_binary_split_default_left() {
  if (!has_sparse_float_binary_split_default_left()) {
    clear_node();
    set_has_sparse_float_binary_split_default_left();
    node_.sparse_float_binary_split_default_left_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
  return node_.sparse_float_binary_split_default_left_;
}
::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* TreeNode::release_sparse_float_binary_split_default_left() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
  if (has_sparse_float_binary_split_default_left()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* temp = new ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft(*node_.sparse_float_binary_split_default_left_);
      node_.sparse_float_binary_split_default_left_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* temp = node_.sparse_float_binary_split_default_left_;
      node_.sparse_float_binary_split_default_left_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_sparse_float_binary_split_default_left(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* sparse_float_binary_split_default_left) {
  clear_node();
  if (sparse_float_binary_split_default_left) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_left) == NULL) {
      GetArenaNoVirtual()->Own(sparse_float_binary_split_default_left);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_left)) {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* new_sparse_float_binary_split_default_left = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft >(
          GetArenaNoVirtual());
      new_sparse_float_binary_split_default_left->CopyFrom(*sparse_float_binary_split_default_left);
      sparse_float_binary_split_default_left = new_sparse_float_binary_split_default_left;
    }
    set_has_sparse_float_binary_split_default_left();
    node_.sparse_float_binary_split_default_left_ = sparse_float_binary_split_default_left;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
}
 ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* TreeNode::unsafe_arena_release_sparse_float_binary_split_default_left() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
  if (has_sparse_float_binary_split_default_left()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* temp = node_.sparse_float_binary_split_default_left_;
    node_.sparse_float_binary_split_default_left_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_sparse_float_binary_split_default_left(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* sparse_float_binary_split_default_left) {
  clear_node();
  if (sparse_float_binary_split_default_left) {
    set_has_sparse_float_binary_split_default_left();
    node_.sparse_float_binary_split_default_left_ = sparse_float_binary_split_default_left;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
}

// .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
bool TreeNode::has_sparse_float_binary_split_default_right() const {
  return node_case() == kSparseFloatBinarySplitDefaultRight;
}
void TreeNode::set_has_sparse_float_binary_split_default_right() {
  _oneof_case_[0] = kSparseFloatBinarySplitDefaultRight;
}
void TreeNode::clear_sparse_float_binary_split_default_right() {
  if (has_sparse_float_binary_split_default_right()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.sparse_float_binary_split_default_right_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight& TreeNode::sparse_float_binary_split_default_right() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
  return has_sparse_float_binary_split_default_right()
      ? *node_.sparse_float_binary_split_default_right_
      : ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::default_instance();
}
::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* TreeNode::mutable_sparse_float_binary_split_default_right() {
  if (!has_sparse_float_binary_split_default_right()) {
    clear_node();
    set_has_sparse_float_binary_split_default_right();
    node_.sparse_float_binary_split_default_right_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
  return node_.sparse_float_binary_split_default_right_;
}
::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* TreeNode::release_sparse_float_binary_split_default_right() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
  if (has_sparse_float_binary_split_default_right()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* temp = new ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight(*node_.sparse_float_binary_split_default_right_);
      node_.sparse_float_binary_split_default_right_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* temp = node_.sparse_float_binary_split_default_right_;
      node_.sparse_float_binary_split_default_right_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_sparse_float_binary_split_default_right(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* sparse_float_binary_split_default_right) {
  clear_node();
  if (sparse_float_binary_split_default_right) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_right) == NULL) {
      GetArenaNoVirtual()->Own(sparse_float_binary_split_default_right);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_right)) {
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* new_sparse_float_binary_split_default_right = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight >(
          GetArenaNoVirtual());
      new_sparse_float_binary_split_default_right->CopyFrom(*sparse_float_binary_split_default_right);
      sparse_float_binary_split_default_right = new_sparse_float_binary_split_default_right;
    }
    set_has_sparse_float_binary_split_default_right();
    node_.sparse_float_binary_split_default_right_ = sparse_float_binary_split_default_right;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
}
 ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* TreeNode::unsafe_arena_release_sparse_float_binary_split_default_right() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
  if (has_sparse_float_binary_split_default_right()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* temp = node_.sparse_float_binary_split_default_right_;
    node_.sparse_float_binary_split_default_right_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_sparse_float_binary_split_default_right(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* sparse_float_binary_split_default_right) {
  clear_node();
  if (sparse_float_binary_split_default_right) {
    set_has_sparse_float_binary_split_default_right();
    node_.sparse_float_binary_split_default_right_ = sparse_float_binary_split_default_right;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
}

// .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
bool TreeNode::has_categorical_id_binary_split() const {
  return node_case() == kCategoricalIdBinarySplit;
}
void TreeNode::set_has_categorical_id_binary_split() {
  _oneof_case_[0] = kCategoricalIdBinarySplit;
}
void TreeNode::clear_categorical_id_binary_split() {
  if (has_categorical_id_binary_split()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.categorical_id_binary_split_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit& TreeNode::categorical_id_binary_split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
  return has_categorical_id_binary_split()
      ? *node_.categorical_id_binary_split_
      : ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::default_instance();
}
::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* TreeNode::mutable_categorical_id_binary_split() {
  if (!has_categorical_id_binary_split()) {
    clear_node();
    set_has_categorical_id_binary_split();
    node_.categorical_id_binary_split_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
  return node_.categorical_id_binary_split_;
}
::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* TreeNode::release_categorical_id_binary_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
  if (has_categorical_id_binary_split()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* temp = new ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit(*node_.categorical_id_binary_split_);
      node_.categorical_id_binary_split_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* temp = node_.categorical_id_binary_split_;
      node_.categorical_id_binary_split_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_categorical_id_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* categorical_id_binary_split) {
  clear_node();
  if (categorical_id_binary_split) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(categorical_id_binary_split) == NULL) {
      GetArenaNoVirtual()->Own(categorical_id_binary_split);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(categorical_id_binary_split)) {
      ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* new_categorical_id_binary_split = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit >(
          GetArenaNoVirtual());
      new_categorical_id_binary_split->CopyFrom(*categorical_id_binary_split);
      categorical_id_binary_split = new_categorical_id_binary_split;
    }
    set_has_categorical_id_binary_split();
    node_.categorical_id_binary_split_ = categorical_id_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
}
 ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* TreeNode::unsafe_arena_release_categorical_id_binary_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
  if (has_categorical_id_binary_split()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* temp = node_.categorical_id_binary_split_;
    node_.categorical_id_binary_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_categorical_id_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* categorical_id_binary_split) {
  clear_node();
  if (categorical_id_binary_split) {
    set_has_categorical_id_binary_split();
    node_.categorical_id_binary_split_ = categorical_id_binary_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
}

// .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
bool TreeNode::has_categorical_id_set_membership_binary_split() const {
  return node_case() == kCategoricalIdSetMembershipBinarySplit;
}
void TreeNode::set_has_categorical_id_set_membership_binary_split() {
  _oneof_case_[0] = kCategoricalIdSetMembershipBinarySplit;
}
void TreeNode::clear_categorical_id_set_membership_binary_split() {
  if (has_categorical_id_set_membership_binary_split()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.categorical_id_set_membership_binary_split_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit& TreeNode::categorical_id_set_membership_binary_split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
  return has_categorical_id_set_membership_binary_split()
      ? *node_.categorical_id_set_membership_binary_split_
      : ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::default_instance();
}
::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* TreeNode::mutable_categorical_id_set_membership_binary_split() {
  if (!has_categorical_id_set_membership_binary_split()) {
    clear_node();
    set_has_categorical_id_set_membership_binary_split();
    node_.categorical_id_set_membership_binary_split_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
  return node_.categorical_id_set_membership_binary_split_;
}
::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* TreeNode::release_categorical_id_set_membership_binary_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
  if (has_categorical_id_set_membership_binary_split()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* temp = new ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit(*node_.categorical_id_set_membership_binary_split_);
      node_.categorical_id_set_membership_binary_split_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* temp = node_.categorical_id_set_membership_binary_split_;
      node_.categorical_id_set_membership_binary_split_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void TreeNode::set_allocated_categorical_id_set_membership_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* categorical_id_set_membership_binary_split) {
  clear_node();
  if (categorical_id_set_membership_binary_split) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(categorical_id_set_membership_binary_split) == NULL) {
      GetArenaNoVirtual()->Own(categorical_id_set_membership_binary_split);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(categorical_id_set_membership_binary_split)) {
      ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* new_categorical_id_set_membership_binary_split = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit >(
          GetArenaNoVirtual());
      new_categorical_id_set_membership_binary_split->CopyFrom(*categorical_id_set_membership_binary_split);
      categorical_id_set_membership_binary_split = new_categorical_id_set_membership_binary_split;
    }
    set_has_categorical_id_set_membership_binary_split();
    node_.categorical_id_set_membership_binary_split_ = categorical_id_set_membership_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
}
 ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* TreeNode::unsafe_arena_release_categorical_id_set_membership_binary_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
  if (has_categorical_id_set_membership_binary_split()) {
    clear_has_node();
    ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* temp = node_.categorical_id_set_membership_binary_split_;
    node_.categorical_id_set_membership_binary_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void TreeNode::unsafe_arena_set_allocated_categorical_id_set_membership_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* categorical_id_set_membership_binary_split) {
  clear_node();
  if (categorical_id_set_membership_binary_split) {
    set_has_categorical_id_set_membership_binary_split();
    node_.categorical_id_set_membership_binary_split_ = categorical_id_set_membership_binary_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
}

// .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
bool TreeNode::has_node_metadata() const {
  return this != internal_default_instance() && node_metadata_ != NULL;
}
void TreeNode::clear_node_metadata() {
  if (GetArenaNoVirtual() == NULL && node_metadata_ != NULL) delete node_metadata_;
  node_metadata_ = NULL;
}
const ::tensorflow::boosted_trees::trees::TreeNodeMetadata& TreeNode::node_metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
  return node_metadata_ != NULL ? *node_metadata_
                         : *::tensorflow::boosted_trees::trees::TreeNodeMetadata::internal_default_instance();
}
::tensorflow::boosted_trees::trees::TreeNodeMetadata* TreeNode::mutable_node_metadata() {
  
  if (node_metadata_ == NULL) {
    _slow_mutable_node_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
  return node_metadata_;
}
::tensorflow::boosted_trees::trees::TreeNodeMetadata* TreeNode::release_node_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_node_metadata();
  } else {
    ::tensorflow::boosted_trees::trees::TreeNodeMetadata* temp = node_metadata_;
    node_metadata_ = NULL;
    return temp;
  }
}
 void TreeNode::set_allocated_node_metadata(::tensorflow::boosted_trees::trees::TreeNodeMetadata* node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_metadata_;
  }
  if (node_metadata != NULL) {
    _slow_set_allocated_node_metadata(message_arena, &node_metadata);
  }
  node_metadata_ = node_metadata;
  if (node_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
}

bool TreeNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
void TreeNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
TreeNode::NodeCase TreeNode::node_case() const {
  return TreeNode::NodeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TreeNodeMetadata::_slow_mutable_original_leaf() {
  original_leaf_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::Leaf* TreeNodeMetadata::_slow_release_original_leaf() {
  if (original_leaf_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = new ::tensorflow::boosted_trees::trees::Leaf(*original_leaf_);
    original_leaf_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::Leaf* TreeNodeMetadata::unsafe_arena_release_original_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = original_leaf_;
  original_leaf_ = NULL;
  return temp;
}
void TreeNodeMetadata::_slow_set_allocated_original_leaf(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::Leaf** original_leaf) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_leaf) == NULL) {
      message_arena->Own(*original_leaf);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_leaf)) {
      ::tensorflow::boosted_trees::trees::Leaf* new_original_leaf = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
            message_arena);
      new_original_leaf->CopyFrom(**original_leaf);
      *original_leaf = new_original_leaf;
    }
}
void TreeNodeMetadata::unsafe_arena_set_allocated_original_leaf(
    ::tensorflow::boosted_trees::trees::Leaf* original_leaf) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_leaf_;
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNodeMetadata::kGainFieldNumber;
const int TreeNodeMetadata::kOriginalLeafFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNodeMetadata::TreeNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}
TreeNodeMetadata::TreeNodeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}
TreeNodeMetadata::TreeNodeMetadata(const TreeNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_original_leaf()) {
    original_leaf_ = new ::tensorflow::boosted_trees::trees::Leaf(*from.original_leaf_);
  } else {
    original_leaf_ = NULL;
  }
  gain_ = from.gain_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}

void TreeNodeMetadata::SharedCtor() {
  ::memset(&original_leaf_, 0, reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&original_leaf_) + sizeof(gain_));
  _cached_size_ = 0;
}

TreeNodeMetadata::~TreeNodeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  SharedDtor();
}

void TreeNodeMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete original_leaf_;
  }
}

void TreeNodeMetadata::ArenaDtor(void* object) {
  TreeNodeMetadata* _this = reinterpret_cast< TreeNodeMetadata* >(object);
  (void)_this;
}
void TreeNodeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeNodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNodeMetadata::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[1].descriptor;
}

const TreeNodeMetadata& TreeNodeMetadata::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeNodeMetadata* TreeNodeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeNodeMetadata>(arena);
}

void TreeNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) {
    delete original_leaf_;
  }
  original_leaf_ = NULL;
  gain_ = 0;
}

bool TreeNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float gain = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return false;
#undef DO_
}

void TreeNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  // float gain = 1;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gain(), output);
  }

  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->original_leaf_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}

::google::protobuf::uint8* TreeNodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  // float gain = 1;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gain(), target);
  }

  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->original_leaf_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return target;
}

size_t TreeNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  size_t total_size = 0;

  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_leaf_);
  }

  // float gain = 1;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.TreeNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.TreeNodeMetadata)
    MergeFrom(*source);
  }
}

void TreeNodeMetadata::MergeFrom(const TreeNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_original_leaf()) {
    mutable_original_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.original_leaf());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void TreeNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNodeMetadata::CopyFrom(const TreeNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNodeMetadata::IsInitialized() const {
  return true;
}

void TreeNodeMetadata::Swap(TreeNodeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeNodeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeNodeMetadata::UnsafeArenaSwap(TreeNodeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeNodeMetadata::InternalSwap(TreeNodeMetadata* other) {
  std::swap(original_leaf_, other->original_leaf_);
  std::swap(gain_, other->gain_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeNodeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeNodeMetadata

// float gain = 1;
void TreeNodeMetadata::clear_gain() {
  gain_ = 0;
}
float TreeNodeMetadata::gain() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNodeMetadata.gain)
  return gain_;
}
void TreeNodeMetadata::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.TreeNodeMetadata.gain)
}

// .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
bool TreeNodeMetadata::has_original_leaf() const {
  return this != internal_default_instance() && original_leaf_ != NULL;
}
void TreeNodeMetadata::clear_original_leaf() {
  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) delete original_leaf_;
  original_leaf_ = NULL;
}
const ::tensorflow::boosted_trees::trees::Leaf& TreeNodeMetadata::original_leaf() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
  return original_leaf_ != NULL ? *original_leaf_
                         : *::tensorflow::boosted_trees::trees::Leaf::internal_default_instance();
}
::tensorflow::boosted_trees::trees::Leaf* TreeNodeMetadata::mutable_original_leaf() {
  
  if (original_leaf_ == NULL) {
    _slow_mutable_original_leaf();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
  return original_leaf_;
}
::tensorflow::boosted_trees::trees::Leaf* TreeNodeMetadata::release_original_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_leaf();
  } else {
    ::tensorflow::boosted_trees::trees::Leaf* temp = original_leaf_;
    original_leaf_ = NULL;
    return temp;
  }
}
 void TreeNodeMetadata::set_allocated_original_leaf(::tensorflow::boosted_trees::trees::Leaf* original_leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_leaf_;
  }
  if (original_leaf != NULL) {
    _slow_set_allocated_original_leaf(message_arena, &original_leaf);
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaf::kVectorFieldNumber;
const int Leaf::kSparseVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaf::Leaf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.Leaf)
}
Leaf::Leaf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_leaf();
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.Leaf)
}

void Leaf::SharedCtor() {
  clear_has_leaf();
  _cached_size_ = 0;
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.Leaf)
  SharedDtor();
}

void Leaf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_leaf()) {
    clear_leaf();
  }
}

void Leaf::ArenaDtor(void* object) {
  Leaf* _this = reinterpret_cast< Leaf* >(object);
  (void)_this;
}
void Leaf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Leaf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaf::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[2].descriptor;
}

const Leaf& Leaf::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Leaf* Leaf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Leaf>(arena);
}

void Leaf::clear_leaf() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.trees.Leaf)
  switch (leaf_case()) {
    case kVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.vector_;
      }
      break;
    }
    case kSparseVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.sparse_vector_;
      }
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_NOT_SET;
}


void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.Leaf)
  clear_leaf();
}

bool Leaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.Leaf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.Vector vector = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.Leaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.Leaf)
  return false;
#undef DO_
}

void Leaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.Leaf)
  // .tensorflow.boosted_trees.trees.Vector vector = 1;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *leaf_.vector_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *leaf_.sparse_vector_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.Leaf)
}

::google::protobuf::uint8* Leaf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.Leaf)
  // .tensorflow.boosted_trees.trees.Vector vector = 1;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *leaf_.vector_, false, target);
  }

  // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *leaf_.sparse_vector_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.Leaf)
  size_t total_size = 0;

  switch (leaf_case()) {
    // .tensorflow.boosted_trees.trees.Vector vector = 1;
    case kVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *leaf_.vector_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
    case kSparseVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *leaf_.sparse_vector_);
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.Leaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.Leaf)
    MergeFrom(*source);
  }
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
}

void Leaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::Swap(Leaf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Leaf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Leaf::UnsafeArenaSwap(Leaf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Leaf::InternalSwap(Leaf* other) {
  std::swap(leaf_, other->leaf_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaf::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaf

// .tensorflow.boosted_trees.trees.Vector vector = 1;
bool Leaf::has_vector() const {
  return leaf_case() == kVector;
}
void Leaf::set_has_vector() {
  _oneof_case_[0] = kVector;
}
void Leaf::clear_vector() {
  if (has_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.vector_;
    }
    clear_has_leaf();
  }
}
 const ::tensorflow::boosted_trees::trees::Vector& Leaf::vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.Leaf.vector)
  return has_vector()
      ? *leaf_.vector_
      : ::tensorflow::boosted_trees::trees::Vector::default_instance();
}
::tensorflow::boosted_trees::trees::Vector* Leaf::mutable_vector() {
  if (!has_vector()) {
    clear_leaf();
    set_has_vector();
    leaf_.vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Vector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.Leaf.vector)
  return leaf_.vector_;
}
::tensorflow::boosted_trees::trees::Vector* Leaf::release_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::Vector* temp = new ::tensorflow::boosted_trees::trees::Vector(*leaf_.vector_);
      leaf_.vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::Vector* temp = leaf_.vector_;
      leaf_.vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Leaf::set_allocated_vector(::tensorflow::boosted_trees::trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(vector) == NULL) {
      GetArenaNoVirtual()->Own(vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(vector)) {
      ::tensorflow::boosted_trees::trees::Vector* new_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Vector >(
          GetArenaNoVirtual());
      new_vector->CopyFrom(*vector);
      vector = new_vector;
    }
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.Leaf.vector)
}
 ::tensorflow::boosted_trees::trees::Vector* Leaf::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::trees::Vector* temp = leaf_.vector_;
    leaf_.vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Leaf::unsafe_arena_set_allocated_vector(::tensorflow::boosted_trees::trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.Leaf.vector)
}

// .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
bool Leaf::has_sparse_vector() const {
  return leaf_case() == kSparseVector;
}
void Leaf::set_has_sparse_vector() {
  _oneof_case_[0] = kSparseVector;
}
void Leaf::clear_sparse_vector() {
  if (has_sparse_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.sparse_vector_;
    }
    clear_has_leaf();
  }
}
 const ::tensorflow::boosted_trees::trees::SparseVector& Leaf::sparse_vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
  return has_sparse_vector()
      ? *leaf_.sparse_vector_
      : ::tensorflow::boosted_trees::trees::SparseVector::default_instance();
}
::tensorflow::boosted_trees::trees::SparseVector* Leaf::mutable_sparse_vector() {
  if (!has_sparse_vector()) {
    clear_leaf();
    set_has_sparse_vector();
    leaf_.sparse_vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseVector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
  return leaf_.sparse_vector_;
}
::tensorflow::boosted_trees::trees::SparseVector* Leaf::release_sparse_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::trees::SparseVector* temp = new ::tensorflow::boosted_trees::trees::SparseVector(*leaf_.sparse_vector_);
      leaf_.sparse_vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::trees::SparseVector* temp = leaf_.sparse_vector_;
      leaf_.sparse_vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Leaf::set_allocated_sparse_vector(::tensorflow::boosted_trees::trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(sparse_vector) == NULL) {
      GetArenaNoVirtual()->Own(sparse_vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(sparse_vector)) {
      ::tensorflow::boosted_trees::trees::SparseVector* new_sparse_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseVector >(
          GetArenaNoVirtual());
      new_sparse_vector->CopyFrom(*sparse_vector);
      sparse_vector = new_sparse_vector;
    }
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
}
 ::tensorflow::boosted_trees::trees::SparseVector* Leaf::unsafe_arena_release_sparse_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::trees::SparseVector* temp = leaf_.sparse_vector_;
    leaf_.sparse_vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Leaf::unsafe_arena_set_allocated_sparse_vector(::tensorflow::boosted_trees::trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
}

bool Leaf::has_leaf() const {
  return leaf_case() != LEAF_NOT_SET;
}
void Leaf::clear_has_leaf() {
  _oneof_case_[0] = LEAF_NOT_SET;
}
Leaf::LeafCase Leaf::leaf_case() const {
  return Leaf::LeafCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.Vector)
}
Vector::Vector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[3].descriptor;
}

const Vector& Vector::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Vector>(arena);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.Vector)
  value_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.Vector)
  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.Vector)
  // repeated float value = 1;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.Vector)
  size_t total_size = 0;

  // repeated float value = 1;
  {
    unsigned int count = this->value_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector::UnsafeArenaSwap(Vector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// repeated float value = 1;
int Vector::value_size() const {
  return value_.size();
}
void Vector::clear_value() {
  value_.Clear();
}
float Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.Vector.value)
  return value_.Get(index);
}
void Vector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.Vector.value)
}
void Vector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.Vector.value)
}
const ::google::protobuf::RepeatedField< float >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.Vector.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.Vector.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseVector::kIndexFieldNumber;
const int SparseVector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseVector::SparseVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseVector)
}
SparseVector::SparseVector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  index_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseVector)
}
SparseVector::SparseVector(const SparseVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      index_(from.index_),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseVector)
}

void SparseVector::SharedCtor() {
  _cached_size_ = 0;
}

SparseVector::~SparseVector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseVector)
  SharedDtor();
}

void SparseVector::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void SparseVector::ArenaDtor(void* object) {
  SparseVector* _this = reinterpret_cast< SparseVector* >(object);
  (void)_this;
}
void SparseVector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseVector::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[4].descriptor;
}

const SparseVector& SparseVector::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SparseVector* SparseVector::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SparseVector>(arena);
}

void SparseVector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseVector)
  index_.Clear();
  value_.Clear();
}

bool SparseVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float value = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseVector)
  return false;
#undef DO_
}

void SparseVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseVector)
  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_index_cached_byte_size_);
  }
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->index(i), output);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseVector)
}

::google::protobuf::uint8* SparseVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseVector)
  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->index(i), target);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseVector)
  return target;
}

size_t SparseVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseVector)
  size_t total_size = 0;

  // repeated int32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float value = 2;
  {
    unsigned int count = this->value_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseVector)
    MergeFrom(*source);
  }
}

void SparseVector::MergeFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_.MergeFrom(from.index_);
  value_.MergeFrom(from.value_);
}

void SparseVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseVector::CopyFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector::IsInitialized() const {
  return true;
}

void SparseVector::Swap(SparseVector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseVector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseVector::UnsafeArenaSwap(SparseVector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseVector::InternalSwap(SparseVector* other) {
  index_.UnsafeArenaSwap(&other->index_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseVector::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseVector

// repeated int32 index = 1;
int SparseVector::index_size() const {
  return index_.size();
}
void SparseVector::clear_index() {
  index_.Clear();
}
::google::protobuf::int32 SparseVector::index(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.SparseVector.index)
  return index_.Get(index);
}
void SparseVector::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.SparseVector.index)
}
void SparseVector::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.SparseVector.index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SparseVector::index() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.SparseVector.index)
  return index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SparseVector::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.SparseVector.index)
  return &index_;
}

// repeated float value = 2;
int SparseVector::value_size() const {
  return value_.size();
}
void SparseVector::clear_value() {
  value_.Clear();
}
float SparseVector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.SparseVector.value)
  return value_.Get(index);
}
void SparseVector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.SparseVector.value)
}
void SparseVector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.SparseVector.value)
}
const ::google::protobuf::RepeatedField< float >&
SparseVector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.SparseVector.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
SparseVector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.SparseVector.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseFloatBinarySplit::kFeatureColumnFieldNumber;
const int DenseFloatBinarySplit::kThresholdFieldNumber;
const int DenseFloatBinarySplit::kLeftIdFieldNumber;
const int DenseFloatBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseFloatBinarySplit::DenseFloatBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}
DenseFloatBinarySplit::DenseFloatBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}
DenseFloatBinarySplit::DenseFloatBinarySplit(const DenseFloatBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_column_, &from.feature_column_,
    reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}

void DenseFloatBinarySplit::SharedCtor() {
  ::memset(&feature_column_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
  _cached_size_ = 0;
}

DenseFloatBinarySplit::~DenseFloatBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  SharedDtor();
}

void DenseFloatBinarySplit::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DenseFloatBinarySplit::ArenaDtor(void* object) {
  DenseFloatBinarySplit* _this = reinterpret_cast< DenseFloatBinarySplit* >(object);
  (void)_this;
}
void DenseFloatBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DenseFloatBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseFloatBinarySplit::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[5].descriptor;
}

const DenseFloatBinarySplit& DenseFloatBinarySplit::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DenseFloatBinarySplit* DenseFloatBinarySplit::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DenseFloatBinarySplit>(arena);
}

void DenseFloatBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  ::memset(&feature_column_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
}

bool DenseFloatBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return false;
#undef DO_
}

void DenseFloatBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}

::google::protobuf::uint8* DenseFloatBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return target;
}

size_t DenseFloatBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  size_t total_size = 0;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    total_size += 1 + 4;
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseFloatBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseFloatBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseFloatBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
    MergeFrom(*source);
  }
}

void DenseFloatBinarySplit::MergeFrom(const DenseFloatBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void DenseFloatBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseFloatBinarySplit::CopyFrom(const DenseFloatBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseFloatBinarySplit::IsInitialized() const {
  return true;
}

void DenseFloatBinarySplit::Swap(DenseFloatBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DenseFloatBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DenseFloatBinarySplit::UnsafeArenaSwap(DenseFloatBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DenseFloatBinarySplit::InternalSwap(DenseFloatBinarySplit* other) {
  std::swap(feature_column_, other->feature_column_);
  std::swap(threshold_, other->threshold_);
  std::swap(left_id_, other->left_id_);
  std::swap(right_id_, other->right_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseFloatBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseFloatBinarySplit

// int32 feature_column = 1;
void DenseFloatBinarySplit::clear_feature_column() {
  feature_column_ = 0;
}
::google::protobuf::int32 DenseFloatBinarySplit::feature_column() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.feature_column)
  return feature_column_;
}
void DenseFloatBinarySplit::set_feature_column(::google::protobuf::int32 value) {
  
  feature_column_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.feature_column)
}

// float threshold = 2;
void DenseFloatBinarySplit::clear_threshold() {
  threshold_ = 0;
}
float DenseFloatBinarySplit::threshold() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.threshold)
  return threshold_;
}
void DenseFloatBinarySplit::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.threshold)
}

// int32 left_id = 3;
void DenseFloatBinarySplit::clear_left_id() {
  left_id_ = 0;
}
::google::protobuf::int32 DenseFloatBinarySplit::left_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.left_id)
  return left_id_;
}
void DenseFloatBinarySplit::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.left_id)
}

// int32 right_id = 4;
void DenseFloatBinarySplit::clear_right_id() {
  right_id_ = 0;
}
::google::protobuf::int32 DenseFloatBinarySplit::right_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.right_id)
  return right_id_;
}
void DenseFloatBinarySplit::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DenseFloatBinarySplit.right_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SparseFloatBinarySplitDefaultLeft::_slow_mutable_split() {
  split_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultLeft::_slow_release_split() {
  if (split_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*split_);
    split_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultLeft::unsafe_arena_release_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
  
  ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = split_;
  split_ = NULL;
  return temp;
}
void SparseFloatBinarySplitDefaultLeft::_slow_set_allocated_split(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit** split) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*split) == NULL) {
      message_arena->Own(*split);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*split)) {
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* new_split = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
            message_arena);
      new_split->CopyFrom(**split);
      *split = new_split;
    }
}
void SparseFloatBinarySplitDefaultLeft::unsafe_arena_set_allocated_split(
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_;
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseFloatBinarySplitDefaultLeft::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}
SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}
SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft(const SparseFloatBinarySplitDefaultLeft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    split_ = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*from.split_);
  } else {
    split_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}

void SparseFloatBinarySplitDefaultLeft::SharedCtor() {
  split_ = NULL;
  _cached_size_ = 0;
}

SparseFloatBinarySplitDefaultLeft::~SparseFloatBinarySplitDefaultLeft() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  SharedDtor();
}

void SparseFloatBinarySplitDefaultLeft::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete split_;
  }
}

void SparseFloatBinarySplitDefaultLeft::ArenaDtor(void* object) {
  SparseFloatBinarySplitDefaultLeft* _this = reinterpret_cast< SparseFloatBinarySplitDefaultLeft* >(object);
  (void)_this;
}
void SparseFloatBinarySplitDefaultLeft::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseFloatBinarySplitDefaultLeft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseFloatBinarySplitDefaultLeft::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[6].descriptor;
}

const SparseFloatBinarySplitDefaultLeft& SparseFloatBinarySplitDefaultLeft::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SparseFloatBinarySplitDefaultLeft* SparseFloatBinarySplitDefaultLeft::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SparseFloatBinarySplitDefaultLeft>(arena);
}

void SparseFloatBinarySplitDefaultLeft::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
}

bool SparseFloatBinarySplitDefaultLeft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return false;
#undef DO_
}

void SparseFloatBinarySplitDefaultLeft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->split_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}

::google::protobuf::uint8* SparseFloatBinarySplitDefaultLeft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->split_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return target;
}

size_t SparseFloatBinarySplitDefaultLeft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  size_t total_size = 0;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseFloatBinarySplitDefaultLeft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseFloatBinarySplitDefaultLeft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseFloatBinarySplitDefaultLeft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
    MergeFrom(*source);
  }
}

void SparseFloatBinarySplitDefaultLeft::MergeFrom(const SparseFloatBinarySplitDefaultLeft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    mutable_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.split());
  }
}

void SparseFloatBinarySplitDefaultLeft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseFloatBinarySplitDefaultLeft::CopyFrom(const SparseFloatBinarySplitDefaultLeft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseFloatBinarySplitDefaultLeft::IsInitialized() const {
  return true;
}

void SparseFloatBinarySplitDefaultLeft::Swap(SparseFloatBinarySplitDefaultLeft* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseFloatBinarySplitDefaultLeft* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseFloatBinarySplitDefaultLeft::UnsafeArenaSwap(SparseFloatBinarySplitDefaultLeft* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseFloatBinarySplitDefaultLeft::InternalSwap(SparseFloatBinarySplitDefaultLeft* other) {
  std::swap(split_, other->split_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseFloatBinarySplitDefaultLeft::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseFloatBinarySplitDefaultLeft

// .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
bool SparseFloatBinarySplitDefaultLeft::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
void SparseFloatBinarySplitDefaultLeft::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit& SparseFloatBinarySplitDefaultLeft::split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
  return split_ != NULL ? *split_
                         : *::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance();
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultLeft::mutable_split() {
  
  if (split_ == NULL) {
    _slow_mutable_split();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
  return split_;
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultLeft::release_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_split();
  } else {
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = split_;
    split_ = NULL;
    return temp;
  }
}
 void SparseFloatBinarySplitDefaultLeft::set_allocated_split(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_;
  }
  if (split != NULL) {
    _slow_set_allocated_split(message_arena, &split);
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SparseFloatBinarySplitDefaultRight::_slow_mutable_split() {
  split_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultRight::_slow_release_split() {
  if (split_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*split_);
    split_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultRight::unsafe_arena_release_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
  
  ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = split_;
  split_ = NULL;
  return temp;
}
void SparseFloatBinarySplitDefaultRight::_slow_set_allocated_split(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit** split) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*split) == NULL) {
      message_arena->Own(*split);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*split)) {
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* new_split = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(
            message_arena);
      new_split->CopyFrom(**split);
      *split = new_split;
    }
}
void SparseFloatBinarySplitDefaultRight::unsafe_arena_set_allocated_split(
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_;
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseFloatBinarySplitDefaultRight::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}
SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}
SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight(const SparseFloatBinarySplitDefaultRight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    split_ = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*from.split_);
  } else {
    split_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}

void SparseFloatBinarySplitDefaultRight::SharedCtor() {
  split_ = NULL;
  _cached_size_ = 0;
}

SparseFloatBinarySplitDefaultRight::~SparseFloatBinarySplitDefaultRight() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  SharedDtor();
}

void SparseFloatBinarySplitDefaultRight::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete split_;
  }
}

void SparseFloatBinarySplitDefaultRight::ArenaDtor(void* object) {
  SparseFloatBinarySplitDefaultRight* _this = reinterpret_cast< SparseFloatBinarySplitDefaultRight* >(object);
  (void)_this;
}
void SparseFloatBinarySplitDefaultRight::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseFloatBinarySplitDefaultRight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseFloatBinarySplitDefaultRight::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[7].descriptor;
}

const SparseFloatBinarySplitDefaultRight& SparseFloatBinarySplitDefaultRight::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SparseFloatBinarySplitDefaultRight* SparseFloatBinarySplitDefaultRight::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SparseFloatBinarySplitDefaultRight>(arena);
}

void SparseFloatBinarySplitDefaultRight::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
}

bool SparseFloatBinarySplitDefaultRight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return false;
#undef DO_
}

void SparseFloatBinarySplitDefaultRight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->split_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}

::google::protobuf::uint8* SparseFloatBinarySplitDefaultRight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->split_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return target;
}

size_t SparseFloatBinarySplitDefaultRight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  size_t total_size = 0;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseFloatBinarySplitDefaultRight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseFloatBinarySplitDefaultRight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseFloatBinarySplitDefaultRight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
    MergeFrom(*source);
  }
}

void SparseFloatBinarySplitDefaultRight::MergeFrom(const SparseFloatBinarySplitDefaultRight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    mutable_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.split());
  }
}

void SparseFloatBinarySplitDefaultRight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseFloatBinarySplitDefaultRight::CopyFrom(const SparseFloatBinarySplitDefaultRight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseFloatBinarySplitDefaultRight::IsInitialized() const {
  return true;
}

void SparseFloatBinarySplitDefaultRight::Swap(SparseFloatBinarySplitDefaultRight* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseFloatBinarySplitDefaultRight* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseFloatBinarySplitDefaultRight::UnsafeArenaSwap(SparseFloatBinarySplitDefaultRight* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseFloatBinarySplitDefaultRight::InternalSwap(SparseFloatBinarySplitDefaultRight* other) {
  std::swap(split_, other->split_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseFloatBinarySplitDefaultRight::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseFloatBinarySplitDefaultRight

// .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
bool SparseFloatBinarySplitDefaultRight::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
void SparseFloatBinarySplitDefaultRight::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit& SparseFloatBinarySplitDefaultRight::split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
  return split_ != NULL ? *split_
                         : *::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance();
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultRight::mutable_split() {
  
  if (split_ == NULL) {
    _slow_mutable_split();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
  return split_;
}
::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* SparseFloatBinarySplitDefaultRight::release_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_split();
  } else {
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* temp = split_;
    split_ = NULL;
    return temp;
  }
}
 void SparseFloatBinarySplitDefaultRight::set_allocated_split(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_;
  }
  if (split != NULL) {
    _slow_set_allocated_split(message_arena, &split);
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoricalIdBinarySplit::kFeatureColumnFieldNumber;
const int CategoricalIdBinarySplit::kFeatureIdFieldNumber;
const int CategoricalIdBinarySplit::kLeftIdFieldNumber;
const int CategoricalIdBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoricalIdBinarySplit::CategoricalIdBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}
CategoricalIdBinarySplit::CategoricalIdBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}
CategoricalIdBinarySplit::CategoricalIdBinarySplit(const CategoricalIdBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_id_, &from.feature_id_,
    reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_id_) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}

void CategoricalIdBinarySplit::SharedCtor() {
  ::memset(&feature_id_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_id_) + sizeof(right_id_));
  _cached_size_ = 0;
}

CategoricalIdBinarySplit::~CategoricalIdBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  SharedDtor();
}

void CategoricalIdBinarySplit::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void CategoricalIdBinarySplit::ArenaDtor(void* object) {
  CategoricalIdBinarySplit* _this = reinterpret_cast< CategoricalIdBinarySplit* >(object);
  (void)_this;
}
void CategoricalIdBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CategoricalIdBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoricalIdBinarySplit::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[8].descriptor;
}

const CategoricalIdBinarySplit& CategoricalIdBinarySplit::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoricalIdBinarySplit* CategoricalIdBinarySplit::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CategoricalIdBinarySplit>(arena);
}

void CategoricalIdBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  ::memset(&feature_id_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_id_) + sizeof(right_id_));
}

bool CategoricalIdBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 feature_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return false;
#undef DO_
}

void CategoricalIdBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->feature_id(), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}

::google::protobuf::uint8* CategoricalIdBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->feature_id(), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return target;
}

size_t CategoricalIdBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  size_t total_size = 0;

  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->feature_id());
  }

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoricalIdBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoricalIdBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoricalIdBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
    MergeFrom(*source);
  }
}

void CategoricalIdBinarySplit::MergeFrom(const CategoricalIdBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.feature_id() != 0) {
    set_feature_id(from.feature_id());
  }
  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void CategoricalIdBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoricalIdBinarySplit::CopyFrom(const CategoricalIdBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoricalIdBinarySplit::IsInitialized() const {
  return true;
}

void CategoricalIdBinarySplit::Swap(CategoricalIdBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CategoricalIdBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CategoricalIdBinarySplit::UnsafeArenaSwap(CategoricalIdBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CategoricalIdBinarySplit::InternalSwap(CategoricalIdBinarySplit* other) {
  std::swap(feature_id_, other->feature_id_);
  std::swap(feature_column_, other->feature_column_);
  std::swap(left_id_, other->left_id_);
  std::swap(right_id_, other->right_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoricalIdBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoricalIdBinarySplit

// int32 feature_column = 1;
void CategoricalIdBinarySplit::clear_feature_column() {
  feature_column_ = 0;
}
::google::protobuf::int32 CategoricalIdBinarySplit::feature_column() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.feature_column)
  return feature_column_;
}
void CategoricalIdBinarySplit::set_feature_column(::google::protobuf::int32 value) {
  
  feature_column_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.feature_column)
}

// int64 feature_id = 2;
void CategoricalIdBinarySplit::clear_feature_id() {
  feature_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CategoricalIdBinarySplit::feature_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.feature_id)
  return feature_id_;
}
void CategoricalIdBinarySplit::set_feature_id(::google::protobuf::int64 value) {
  
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.feature_id)
}

// int32 left_id = 3;
void CategoricalIdBinarySplit::clear_left_id() {
  left_id_ = 0;
}
::google::protobuf::int32 CategoricalIdBinarySplit::left_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.left_id)
  return left_id_;
}
void CategoricalIdBinarySplit::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.left_id)
}

// int32 right_id = 4;
void CategoricalIdBinarySplit::clear_right_id() {
  right_id_ = 0;
}
::google::protobuf::int32 CategoricalIdBinarySplit::right_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.right_id)
  return right_id_;
}
void CategoricalIdBinarySplit::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit.right_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoricalIdSetMembershipBinarySplit::kFeatureColumnFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kFeatureIdsFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kLeftIdFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}
CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}
CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit(const CategoricalIdSetMembershipBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_ids_(from.feature_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_column_, &from.feature_column_,
    reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}

void CategoricalIdSetMembershipBinarySplit::SharedCtor() {
  ::memset(&feature_column_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
  _cached_size_ = 0;
}

CategoricalIdSetMembershipBinarySplit::~CategoricalIdSetMembershipBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  SharedDtor();
}

void CategoricalIdSetMembershipBinarySplit::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void CategoricalIdSetMembershipBinarySplit::ArenaDtor(void* object) {
  CategoricalIdSetMembershipBinarySplit* _this = reinterpret_cast< CategoricalIdSetMembershipBinarySplit* >(object);
  (void)_this;
}
void CategoricalIdSetMembershipBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CategoricalIdSetMembershipBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoricalIdSetMembershipBinarySplit::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[9].descriptor;
}

const CategoricalIdSetMembershipBinarySplit& CategoricalIdSetMembershipBinarySplit::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoricalIdSetMembershipBinarySplit* CategoricalIdSetMembershipBinarySplit::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CategoricalIdSetMembershipBinarySplit>(arena);
}

void CategoricalIdSetMembershipBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  feature_ids_.Clear();
  ::memset(&feature_column_, 0, reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_) + sizeof(right_id_));
}

bool CategoricalIdSetMembershipBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 feature_ids = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_feature_ids())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_feature_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return false;
#undef DO_
}

void CategoricalIdSetMembershipBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // repeated int64 feature_ids = 2;
  if (this->feature_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->feature_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->feature_ids(i), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}

::google::protobuf::uint8* CategoricalIdSetMembershipBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // repeated int64 feature_ids = 2;
  if (this->feature_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _feature_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->feature_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->feature_ids(i), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return target;
}

size_t CategoricalIdSetMembershipBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  size_t total_size = 0;

  // repeated int64 feature_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->feature_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoricalIdSetMembershipBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoricalIdSetMembershipBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoricalIdSetMembershipBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
    MergeFrom(*source);
  }
}

void CategoricalIdSetMembershipBinarySplit::MergeFrom(const CategoricalIdSetMembershipBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_ids_.MergeFrom(from.feature_ids_);
  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void CategoricalIdSetMembershipBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoricalIdSetMembershipBinarySplit::CopyFrom(const CategoricalIdSetMembershipBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoricalIdSetMembershipBinarySplit::IsInitialized() const {
  return true;
}

void CategoricalIdSetMembershipBinarySplit::Swap(CategoricalIdSetMembershipBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CategoricalIdSetMembershipBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CategoricalIdSetMembershipBinarySplit::UnsafeArenaSwap(CategoricalIdSetMembershipBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CategoricalIdSetMembershipBinarySplit::InternalSwap(CategoricalIdSetMembershipBinarySplit* other) {
  feature_ids_.UnsafeArenaSwap(&other->feature_ids_);
  std::swap(feature_column_, other->feature_column_);
  std::swap(left_id_, other->left_id_);
  std::swap(right_id_, other->right_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoricalIdSetMembershipBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoricalIdSetMembershipBinarySplit

// int32 feature_column = 1;
void CategoricalIdSetMembershipBinarySplit::clear_feature_column() {
  feature_column_ = 0;
}
::google::protobuf::int32 CategoricalIdSetMembershipBinarySplit::feature_column() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_column)
  return feature_column_;
}
void CategoricalIdSetMembershipBinarySplit::set_feature_column(::google::protobuf::int32 value) {
  
  feature_column_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_column)
}

// repeated int64 feature_ids = 2;
int CategoricalIdSetMembershipBinarySplit::feature_ids_size() const {
  return feature_ids_.size();
}
void CategoricalIdSetMembershipBinarySplit::clear_feature_ids() {
  feature_ids_.Clear();
}
::google::protobuf::int64 CategoricalIdSetMembershipBinarySplit::feature_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_ids)
  return feature_ids_.Get(index);
}
void CategoricalIdSetMembershipBinarySplit::set_feature_ids(int index, ::google::protobuf::int64 value) {
  feature_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_ids)
}
void CategoricalIdSetMembershipBinarySplit::add_feature_ids(::google::protobuf::int64 value) {
  feature_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CategoricalIdSetMembershipBinarySplit::feature_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_ids)
  return feature_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CategoricalIdSetMembershipBinarySplit::mutable_feature_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.feature_ids)
  return &feature_ids_;
}

// int32 left_id = 3;
void CategoricalIdSetMembershipBinarySplit::clear_left_id() {
  left_id_ = 0;
}
::google::protobuf::int32 CategoricalIdSetMembershipBinarySplit::left_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.left_id)
  return left_id_;
}
void CategoricalIdSetMembershipBinarySplit::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.left_id)
}

// int32 right_id = 4;
void CategoricalIdSetMembershipBinarySplit::clear_right_id() {
  right_id_ = 0;
}
::google::protobuf::int32 CategoricalIdSetMembershipBinarySplit::right_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.right_id)
  return right_id_;
}
void CategoricalIdSetMembershipBinarySplit::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit.right_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeConfig::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeConfig::DecisionTreeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}
DecisionTreeConfig::DecisionTreeConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}
DecisionTreeConfig::DecisionTreeConfig(const DecisionTreeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}

void DecisionTreeConfig::SharedCtor() {
  _cached_size_ = 0;
}

DecisionTreeConfig::~DecisionTreeConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  SharedDtor();
}

void DecisionTreeConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DecisionTreeConfig::ArenaDtor(void* object) {
  DecisionTreeConfig* _this = reinterpret_cast< DecisionTreeConfig* >(object);
  (void)_this;
}
void DecisionTreeConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[10].descriptor;
}

const DecisionTreeConfig& DecisionTreeConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionTreeConfig* DecisionTreeConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DecisionTreeConfig>(arena);
}

void DecisionTreeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  nodes_.Clear();
}

bool DecisionTreeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return false;
#undef DO_
}

void DecisionTreeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}

::google::protobuf::uint8* DecisionTreeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return target;
}

size_t DecisionTreeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  size_t total_size = 0;

  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeConfig)
    MergeFrom(*source);
  }
}

void DecisionTreeConfig::MergeFrom(const DecisionTreeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
}

void DecisionTreeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeConfig::CopyFrom(const DecisionTreeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeConfig::IsInitialized() const {
  return true;
}

void DecisionTreeConfig::Swap(DecisionTreeConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeConfig::UnsafeArenaSwap(DecisionTreeConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeConfig::InternalSwap(DecisionTreeConfig* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTreeConfig

// repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
int DecisionTreeConfig::nodes_size() const {
  return nodes_.size();
}
void DecisionTreeConfig::clear_nodes() {
  nodes_.Clear();
}
const ::tensorflow::boosted_trees::trees::TreeNode& DecisionTreeConfig::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeConfig.nodes)
  return nodes_.Get(index);
}
::tensorflow::boosted_trees::trees::TreeNode* DecisionTreeConfig::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.DecisionTreeConfig.nodes)
  return nodes_.Mutable(index);
}
::tensorflow::boosted_trees::trees::TreeNode* DecisionTreeConfig::add_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.DecisionTreeConfig.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::TreeNode >*
DecisionTreeConfig::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.DecisionTreeConfig.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::TreeNode >&
DecisionTreeConfig::nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.DecisionTreeConfig.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeMetadata::kNumTreeWeightUpdatesFieldNumber;
const int DecisionTreeMetadata::kNumLayersGrownFieldNumber;
const int DecisionTreeMetadata::kIsFinalizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeMetadata::DecisionTreeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}
DecisionTreeMetadata::DecisionTreeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}
DecisionTreeMetadata::DecisionTreeMetadata(const DecisionTreeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_tree_weight_updates_, &from.num_tree_weight_updates_,
    reinterpret_cast<char*>(&is_finalized_) -
    reinterpret_cast<char*>(&num_tree_weight_updates_) + sizeof(is_finalized_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}

void DecisionTreeMetadata::SharedCtor() {
  ::memset(&num_tree_weight_updates_, 0, reinterpret_cast<char*>(&is_finalized_) -
    reinterpret_cast<char*>(&num_tree_weight_updates_) + sizeof(is_finalized_));
  _cached_size_ = 0;
}

DecisionTreeMetadata::~DecisionTreeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  SharedDtor();
}

void DecisionTreeMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DecisionTreeMetadata::ArenaDtor(void* object) {
  DecisionTreeMetadata* _this = reinterpret_cast< DecisionTreeMetadata* >(object);
  (void)_this;
}
void DecisionTreeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeMetadata::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[11].descriptor;
}

const DecisionTreeMetadata& DecisionTreeMetadata::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionTreeMetadata* DecisionTreeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DecisionTreeMetadata>(arena);
}

void DecisionTreeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  ::memset(&num_tree_weight_updates_, 0, reinterpret_cast<char*>(&is_finalized_) -
    reinterpret_cast<char*>(&num_tree_weight_updates_) + sizeof(is_finalized_));
}

bool DecisionTreeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_tree_weight_updates = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tree_weight_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_layers_grown = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_grown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finalized = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return false;
#undef DO_
}

void DecisionTreeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tree_weight_updates(), output);
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_layers_grown(), output);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finalized(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}

::google::protobuf::uint8* DecisionTreeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tree_weight_updates(), target);
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_layers_grown(), target);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finalized(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return target;
}

size_t DecisionTreeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  size_t total_size = 0;

  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tree_weight_updates());
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_layers_grown());
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
    MergeFrom(*source);
  }
}

void DecisionTreeMetadata::MergeFrom(const DecisionTreeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.num_tree_weight_updates() != 0) {
    set_num_tree_weight_updates(from.num_tree_weight_updates());
  }
  if (from.num_layers_grown() != 0) {
    set_num_layers_grown(from.num_layers_grown());
  }
  if (from.is_finalized() != 0) {
    set_is_finalized(from.is_finalized());
  }
}

void DecisionTreeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeMetadata::CopyFrom(const DecisionTreeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeMetadata::IsInitialized() const {
  return true;
}

void DecisionTreeMetadata::Swap(DecisionTreeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeMetadata::UnsafeArenaSwap(DecisionTreeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeMetadata::InternalSwap(DecisionTreeMetadata* other) {
  std::swap(num_tree_weight_updates_, other->num_tree_weight_updates_);
  std::swap(num_layers_grown_, other->num_layers_grown_);
  std::swap(is_finalized_, other->is_finalized_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTreeMetadata

// int32 num_tree_weight_updates = 1;
void DecisionTreeMetadata::clear_num_tree_weight_updates() {
  num_tree_weight_updates_ = 0;
}
::google::protobuf::int32 DecisionTreeMetadata::num_tree_weight_updates() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeMetadata.num_tree_weight_updates)
  return num_tree_weight_updates_;
}
void DecisionTreeMetadata::set_num_tree_weight_updates(::google::protobuf::int32 value) {
  
  num_tree_weight_updates_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DecisionTreeMetadata.num_tree_weight_updates)
}

// int32 num_layers_grown = 2;
void DecisionTreeMetadata::clear_num_layers_grown() {
  num_layers_grown_ = 0;
}
::google::protobuf::int32 DecisionTreeMetadata::num_layers_grown() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeMetadata.num_layers_grown)
  return num_layers_grown_;
}
void DecisionTreeMetadata::set_num_layers_grown(::google::protobuf::int32 value) {
  
  num_layers_grown_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DecisionTreeMetadata.num_layers_grown)
}

// bool is_finalized = 3;
void DecisionTreeMetadata::clear_is_finalized() {
  is_finalized_ = false;
}
bool DecisionTreeMetadata::is_finalized() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeMetadata.is_finalized)
  return is_finalized_;
}
void DecisionTreeMetadata::set_is_finalized(bool value) {
  
  is_finalized_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DecisionTreeMetadata.is_finalized)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeEnsembleConfig::kTreesFieldNumber;
const int DecisionTreeEnsembleConfig::kTreeWeightsFieldNumber;
const int DecisionTreeEnsembleConfig::kTreeMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}
DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  trees_(arena),
  tree_weights_(arena),
  tree_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}
DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig(const DecisionTreeEnsembleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trees_(from.trees_),
      tree_weights_(from.tree_weights_),
      tree_metadata_(from.tree_metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}

void DecisionTreeEnsembleConfig::SharedCtor() {
  _cached_size_ = 0;
}

DecisionTreeEnsembleConfig::~DecisionTreeEnsembleConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  SharedDtor();
}

void DecisionTreeEnsembleConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DecisionTreeEnsembleConfig::ArenaDtor(void* object) {
  DecisionTreeEnsembleConfig* _this = reinterpret_cast< DecisionTreeEnsembleConfig* >(object);
  (void)_this;
}
void DecisionTreeEnsembleConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeEnsembleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeEnsembleConfig::descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[12].descriptor;
}

const DecisionTreeEnsembleConfig& DecisionTreeEnsembleConfig::default_instance() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionTreeEnsembleConfig* DecisionTreeEnsembleConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DecisionTreeEnsembleConfig>(arena);
}

void DecisionTreeEnsembleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  trees_.Clear();
  tree_weights_.Clear();
  tree_metadata_.Clear();
}

bool DecisionTreeEnsembleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trees()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated float tree_weights = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tree_weights())));
        } else if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tree_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tree_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return false;
#undef DO_
}

void DecisionTreeEnsembleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  for (unsigned int i = 0, n = this->trees_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trees(i), output);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tree_weights_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tree_weights().data(), this->tree_weights_size(), output);
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  for (unsigned int i = 0, n = this->tree_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tree_metadata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}

::google::protobuf::uint8* DecisionTreeEnsembleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  for (unsigned int i = 0, n = this->trees_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trees(i), false, target);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tree_weights_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tree_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tree_weights(i), target);
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  for (unsigned int i = 0, n = this->tree_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tree_metadata(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return target;
}

size_t DecisionTreeEnsembleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  size_t total_size = 0;

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  {
    unsigned int count = this->trees_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trees(i));
    }
  }

  // repeated float tree_weights = 2;
  {
    unsigned int count = this->tree_weights_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tree_weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  {
    unsigned int count = this->tree_metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree_metadata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeEnsembleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeEnsembleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeEnsembleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
    MergeFrom(*source);
  }
}

void DecisionTreeEnsembleConfig::MergeFrom(const DecisionTreeEnsembleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trees_.MergeFrom(from.trees_);
  tree_weights_.MergeFrom(from.tree_weights_);
  tree_metadata_.MergeFrom(from.tree_metadata_);
}

void DecisionTreeEnsembleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeEnsembleConfig::CopyFrom(const DecisionTreeEnsembleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeEnsembleConfig::IsInitialized() const {
  return true;
}

void DecisionTreeEnsembleConfig::Swap(DecisionTreeEnsembleConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeEnsembleConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeEnsembleConfig::UnsafeArenaSwap(DecisionTreeEnsembleConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeEnsembleConfig::InternalSwap(DecisionTreeEnsembleConfig* other) {
  trees_.UnsafeArenaSwap(&other->trees_);
  tree_weights_.UnsafeArenaSwap(&other->tree_weights_);
  tree_metadata_.UnsafeArenaSwap(&other->tree_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeEnsembleConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTreeEnsembleConfig

// repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
int DecisionTreeEnsembleConfig::trees_size() const {
  return trees_.size();
}
void DecisionTreeEnsembleConfig::clear_trees() {
  trees_.Clear();
}
const ::tensorflow::boosted_trees::trees::DecisionTreeConfig& DecisionTreeEnsembleConfig::trees(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.trees)
  return trees_.Get(index);
}
::tensorflow::boosted_trees::trees::DecisionTreeConfig* DecisionTreeEnsembleConfig::mutable_trees(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.trees)
  return trees_.Mutable(index);
}
::tensorflow::boosted_trees::trees::DecisionTreeConfig* DecisionTreeEnsembleConfig::add_trees() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.trees)
  return trees_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::DecisionTreeConfig >*
DecisionTreeEnsembleConfig::mutable_trees() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.trees)
  return &trees_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::DecisionTreeConfig >&
DecisionTreeEnsembleConfig::trees() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.trees)
  return trees_;
}

// repeated float tree_weights = 2;
int DecisionTreeEnsembleConfig::tree_weights_size() const {
  return tree_weights_.size();
}
void DecisionTreeEnsembleConfig::clear_tree_weights() {
  tree_weights_.Clear();
}
float DecisionTreeEnsembleConfig::tree_weights(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_weights)
  return tree_weights_.Get(index);
}
void DecisionTreeEnsembleConfig::set_tree_weights(int index, float value) {
  tree_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_weights)
}
void DecisionTreeEnsembleConfig::add_tree_weights(float value) {
  tree_weights_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_weights)
}
const ::google::protobuf::RepeatedField< float >&
DecisionTreeEnsembleConfig::tree_weights() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_weights)
  return tree_weights_;
}
::google::protobuf::RepeatedField< float >*
DecisionTreeEnsembleConfig::mutable_tree_weights() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_weights)
  return &tree_weights_;
}

// repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
int DecisionTreeEnsembleConfig::tree_metadata_size() const {
  return tree_metadata_.size();
}
void DecisionTreeEnsembleConfig::clear_tree_metadata() {
  tree_metadata_.Clear();
}
const ::tensorflow::boosted_trees::trees::DecisionTreeMetadata& DecisionTreeEnsembleConfig::tree_metadata(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_metadata)
  return tree_metadata_.Get(index);
}
::tensorflow::boosted_trees::trees::DecisionTreeMetadata* DecisionTreeEnsembleConfig::mutable_tree_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_metadata)
  return tree_metadata_.Mutable(index);
}
::tensorflow::boosted_trees::trees::DecisionTreeMetadata* DecisionTreeEnsembleConfig::add_tree_metadata() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_metadata)
  return tree_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::DecisionTreeMetadata >*
DecisionTreeEnsembleConfig::mutable_tree_metadata() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_metadata)
  return &tree_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::trees::DecisionTreeMetadata >&
DecisionTreeEnsembleConfig::tree_metadata() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.tree_metadata)
  return tree_metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trees
}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
