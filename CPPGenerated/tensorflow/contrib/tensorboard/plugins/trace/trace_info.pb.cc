// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/tensorboard/plugins/trace/trace_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace contrib {
namespace tensorboard {
class TraceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceInfo> {
} _TraceInfo_default_instance_;
class OpInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpInfo> {
} _OpInfo_default_instance_;
class LineTraceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LineTrace> {
} _LineTrace_default_instance_;
class TensorInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorInfo> {
} _TensorInfo_default_instance_;
class FileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileInfo> {
} _FileInfo_default_instance_;

namespace protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceInfo, ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceInfo, files_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, traceback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, outputs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineTrace, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineTrace, line_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorInfo, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorInfo, num_bytes_per_elem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorInfo, consumers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, source_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, multiline_statements_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TraceInfo)},
  { 6, -1, sizeof(OpInfo)},
  { 16, -1, sizeof(LineTrace)},
  { 22, -1, sizeof(TensorInfo)},
  { 30, -1, sizeof(FileInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LineTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
  const ::google::protobuf::Descriptor* FileInfo_MultilineStatementsEntry_descriptor = protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[4].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FileInfo_MultilineStatementsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::google::protobuf::uint32,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            0>::CreateDefaultInstance(
                FileInfo_MultilineStatementsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _TraceInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OpInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LineTrace_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TensorInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FileInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TraceInfo_default_instance_.DefaultConstruct();
  _OpInfo_default_instance_.DefaultConstruct();
  _LineTrace_default_instance_.DefaultConstruct();
  _TensorInfo_default_instance_.DefaultConstruct();
  _FileInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n=tensorflow/contrib/tensorboard/plugins"
      "/trace/trace_info.proto\022\036tensorflow.cont"
      "rib.tensorboard\"y\n\tTraceInfo\0223\n\003ops\030\001 \003("
      "\0132&.tensorflow.contrib.tensorboard.OpInf"
      "o\0227\n\005files\030\002 \003(\0132(.tensorflow.contrib.te"
      "nsorboard.FileInfo\"\356\001\n\006OpInfo\022\014\n\004name\030\001 "
      "\001(\t\022\017\n\007op_type\030\002 \001(\t\022\016\n\006device\030\003 \001(\t\022<\n\t"
      "traceback\030\004 \003(\0132).tensorflow.contrib.ten"
      "sorboard.LineTrace\022:\n\006inputs\030\005 \003(\0132*.ten"
      "sorflow.contrib.tensorboard.TensorInfo\022;"
      "\n\007outputs\030\006 \003(\0132*.tensorflow.contrib.ten"
      "sorboard.TensorInfo\"3\n\tLineTrace\022\021\n\tfile"
      "_path\030\001 \001(\t\022\023\n\013line_number\030\002 \001(\r\"Y\n\nTens"
      "orInfo\022\r\n\005shape\030\001 \003(\005\022\r\n\005dtype\030\002 \001(\t\022\032\n\022"
      "num_bytes_per_elem\030\003 \001(\r\022\021\n\tconsumers\030\004 "
      "\003(\t\"\317\001\n\010FileInfo\022\021\n\tfile_path\030\001 \001(\t\022\023\n\013s"
      "ource_code\030\002 \001(\t\022_\n\024multiline_statements"
      "\030\003 \003(\0132A.tensorflow.contrib.tensorboard."
      "FileInfo.MultilineStatementsEntry\032:\n\030Mul"
      "tilineStatementsEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005va"
      "lue\030\002 \001(\r:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceInfo::kOpsFieldNumber;
const int TraceInfo::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceInfo::TraceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.contrib.tensorboard.TraceInfo)
}
TraceInfo::TraceInfo(const TraceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ops_(from.ops_),
      files_(from.files_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.contrib.tensorboard.TraceInfo)
}

void TraceInfo::SharedCtor() {
  _cached_size_ = 0;
}

TraceInfo::~TraceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.contrib.tensorboard.TraceInfo)
  SharedDtor();
}

void TraceInfo::SharedDtor() {
}

void TraceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceInfo::descriptor() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[0].descriptor;
}

const TraceInfo& TraceInfo::default_instance() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceInfo* TraceInfo::New(::google::protobuf::Arena* arena) const {
  TraceInfo* n = new TraceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.contrib.tensorboard.TraceInfo)
  ops_.Clear();
  files_.Clear();
}

bool TraceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.contrib.tensorboard.TraceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.contrib.tensorboard.OpInfo ops = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.contrib.tensorboard.FileInfo files = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.contrib.tensorboard.TraceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.contrib.tensorboard.TraceInfo)
  return false;
#undef DO_
}

void TraceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.contrib.tensorboard.TraceInfo)
  // repeated .tensorflow.contrib.tensorboard.OpInfo ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ops(i), output);
  }

  // repeated .tensorflow.contrib.tensorboard.FileInfo files = 2;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->files(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.contrib.tensorboard.TraceInfo)
}

::google::protobuf::uint8* TraceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.contrib.tensorboard.TraceInfo)
  // repeated .tensorflow.contrib.tensorboard.OpInfo ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ops(i), false, target);
  }

  // repeated .tensorflow.contrib.tensorboard.FileInfo files = 2;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->files(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.contrib.tensorboard.TraceInfo)
  return target;
}

size_t TraceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.contrib.tensorboard.TraceInfo)
  size_t total_size = 0;

  // repeated .tensorflow.contrib.tensorboard.OpInfo ops = 1;
  {
    unsigned int count = this->ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ops(i));
    }
  }

  // repeated .tensorflow.contrib.tensorboard.FileInfo files = 2;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.contrib.tensorboard.TraceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.contrib.tensorboard.TraceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.contrib.tensorboard.TraceInfo)
    MergeFrom(*source);
  }
}

void TraceInfo::MergeFrom(const TraceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.contrib.tensorboard.TraceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ops_.MergeFrom(from.ops_);
  files_.MergeFrom(from.files_);
}

void TraceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.contrib.tensorboard.TraceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceInfo::CopyFrom(const TraceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.contrib.tensorboard.TraceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceInfo::IsInitialized() const {
  return true;
}

void TraceInfo::Swap(TraceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceInfo::InternalSwap(TraceInfo* other) {
  ops_.UnsafeArenaSwap(&other->ops_);
  files_.UnsafeArenaSwap(&other->files_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceInfo::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceInfo

// repeated .tensorflow.contrib.tensorboard.OpInfo ops = 1;
int TraceInfo::ops_size() const {
  return ops_.size();
}
void TraceInfo::clear_ops() {
  ops_.Clear();
}
const ::tensorflow::contrib::tensorboard::OpInfo& TraceInfo::ops(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TraceInfo.ops)
  return ops_.Get(index);
}
::tensorflow::contrib::tensorboard::OpInfo* TraceInfo::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.TraceInfo.ops)
  return ops_.Mutable(index);
}
::tensorflow::contrib::tensorboard::OpInfo* TraceInfo::add_ops() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.TraceInfo.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::OpInfo >*
TraceInfo::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.TraceInfo.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::OpInfo >&
TraceInfo::ops() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.TraceInfo.ops)
  return ops_;
}

// repeated .tensorflow.contrib.tensorboard.FileInfo files = 2;
int TraceInfo::files_size() const {
  return files_.size();
}
void TraceInfo::clear_files() {
  files_.Clear();
}
const ::tensorflow::contrib::tensorboard::FileInfo& TraceInfo::files(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TraceInfo.files)
  return files_.Get(index);
}
::tensorflow::contrib::tensorboard::FileInfo* TraceInfo::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.TraceInfo.files)
  return files_.Mutable(index);
}
::tensorflow::contrib::tensorboard::FileInfo* TraceInfo::add_files() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.TraceInfo.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::FileInfo >*
TraceInfo::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.TraceInfo.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::FileInfo >&
TraceInfo::files() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.TraceInfo.files)
  return files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInfo::kNameFieldNumber;
const int OpInfo::kOpTypeFieldNumber;
const int OpInfo::kDeviceFieldNumber;
const int OpInfo::kTracebackFieldNumber;
const int OpInfo::kInputsFieldNumber;
const int OpInfo::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInfo::OpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.contrib.tensorboard.OpInfo)
}
OpInfo::OpInfo(const OpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traceback_(from.traceback_),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_type().size() > 0) {
    op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.contrib.tensorboard.OpInfo)
}

void OpInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OpInfo::~OpInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.contrib.tensorboard.OpInfo)
  SharedDtor();
}

void OpInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpInfo::descriptor() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[1].descriptor;
}

const OpInfo& OpInfo::default_instance() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpInfo* OpInfo::New(::google::protobuf::Arena* arena) const {
  OpInfo* n = new OpInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.contrib.tensorboard.OpInfo)
  traceback_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.contrib.tensorboard.OpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.OpInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_type = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), this->op_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.OpInfo.op_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.OpInfo.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.contrib.tensorboard.LineTrace traceback = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traceback()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.contrib.tensorboard.TensorInfo inputs = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.contrib.tensorboard.TensorInfo outputs = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.contrib.tensorboard.OpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.contrib.tensorboard.OpInfo)
  return false;
#undef DO_
}

void OpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.contrib.tensorboard.OpInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string op_type = 2;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op_type(), output);
  }

  // string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  // repeated .tensorflow.contrib.tensorboard.LineTrace traceback = 4;
  for (unsigned int i = 0, n = this->traceback_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->traceback(i), output);
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo inputs = 5;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inputs(i), output);
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo outputs = 6;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->outputs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.contrib.tensorboard.OpInfo)
}

::google::protobuf::uint8* OpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.contrib.tensorboard.OpInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string op_type = 2;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.op_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op_type(), target);
  }

  // string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.OpInfo.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // repeated .tensorflow.contrib.tensorboard.LineTrace traceback = 4;
  for (unsigned int i = 0, n = this->traceback_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->traceback(i), false, target);
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo inputs = 5;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->inputs(i), false, target);
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo outputs = 6;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->outputs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.contrib.tensorboard.OpInfo)
  return target;
}

size_t OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.contrib.tensorboard.OpInfo)
  size_t total_size = 0;

  // repeated .tensorflow.contrib.tensorboard.LineTrace traceback = 4;
  {
    unsigned int count = this->traceback_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traceback(i));
    }
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo inputs = 5;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .tensorflow.contrib.tensorboard.TensorInfo outputs = 6;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string op_type = 2;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // string device = 3;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.contrib.tensorboard.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.contrib.tensorboard.OpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.contrib.tensorboard.OpInfo)
    MergeFrom(*source);
  }
}

void OpInfo::MergeFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.contrib.tensorboard.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traceback_.MergeFrom(from.traceback_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.op_type().size() > 0) {

    op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
}

void OpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.contrib.tensorboard.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo::CopyFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.contrib.tensorboard.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo::IsInitialized() const {
  return true;
}

void OpInfo::Swap(OpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpInfo::InternalSwap(OpInfo* other) {
  traceback_.UnsafeArenaSwap(&other->traceback_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  name_.Swap(&other->name_);
  op_type_.Swap(&other->op_type_);
  device_.Swap(&other->device_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpInfo::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpInfo

// string name = 1;
void OpInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.name)
  return name_.GetNoArena();
}
void OpInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.OpInfo.name)
}
#if LANG_CXX11
void OpInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.OpInfo.name)
}
#endif
void OpInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.OpInfo.name)
}
void OpInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.OpInfo.name)
}
::std::string* OpInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.OpInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.OpInfo.name)
}

// string op_type = 2;
void OpInfo::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpInfo::op_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.op_type)
  return op_type_.GetNoArena();
}
void OpInfo::set_op_type(const ::std::string& value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.OpInfo.op_type)
}
#if LANG_CXX11
void OpInfo::set_op_type(::std::string&& value) {
  
  op_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.OpInfo.op_type)
}
#endif
void OpInfo::set_op_type(const char* value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.OpInfo.op_type)
}
void OpInfo::set_op_type(const char* value, size_t size) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.OpInfo.op_type)
}
::std::string* OpInfo::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpInfo::release_op_type() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.OpInfo.op_type)
  
  return op_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpInfo::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.OpInfo.op_type)
}

// string device = 3;
void OpInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpInfo::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.device)
  return device_.GetNoArena();
}
void OpInfo::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.OpInfo.device)
}
#if LANG_CXX11
void OpInfo::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.OpInfo.device)
}
#endif
void OpInfo::set_device(const char* value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.OpInfo.device)
}
void OpInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.OpInfo.device)
}
::std::string* OpInfo::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpInfo::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.OpInfo.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpInfo::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.OpInfo.device)
}

// repeated .tensorflow.contrib.tensorboard.LineTrace traceback = 4;
int OpInfo::traceback_size() const {
  return traceback_.size();
}
void OpInfo::clear_traceback() {
  traceback_.Clear();
}
const ::tensorflow::contrib::tensorboard::LineTrace& OpInfo::traceback(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.traceback)
  return traceback_.Get(index);
}
::tensorflow::contrib::tensorboard::LineTrace* OpInfo::mutable_traceback(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.traceback)
  return traceback_.Mutable(index);
}
::tensorflow::contrib::tensorboard::LineTrace* OpInfo::add_traceback() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.OpInfo.traceback)
  return traceback_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::LineTrace >*
OpInfo::mutable_traceback() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.OpInfo.traceback)
  return &traceback_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::LineTrace >&
OpInfo::traceback() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.OpInfo.traceback)
  return traceback_;
}

// repeated .tensorflow.contrib.tensorboard.TensorInfo inputs = 5;
int OpInfo::inputs_size() const {
  return inputs_.size();
}
void OpInfo::clear_inputs() {
  inputs_.Clear();
}
const ::tensorflow::contrib::tensorboard::TensorInfo& OpInfo::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.inputs)
  return inputs_.Get(index);
}
::tensorflow::contrib::tensorboard::TensorInfo* OpInfo::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.inputs)
  return inputs_.Mutable(index);
}
::tensorflow::contrib::tensorboard::TensorInfo* OpInfo::add_inputs() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.OpInfo.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::TensorInfo >*
OpInfo::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.OpInfo.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::TensorInfo >&
OpInfo::inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.OpInfo.inputs)
  return inputs_;
}

// repeated .tensorflow.contrib.tensorboard.TensorInfo outputs = 6;
int OpInfo::outputs_size() const {
  return outputs_.size();
}
void OpInfo::clear_outputs() {
  outputs_.Clear();
}
const ::tensorflow::contrib::tensorboard::TensorInfo& OpInfo::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.OpInfo.outputs)
  return outputs_.Get(index);
}
::tensorflow::contrib::tensorboard::TensorInfo* OpInfo::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.OpInfo.outputs)
  return outputs_.Mutable(index);
}
::tensorflow::contrib::tensorboard::TensorInfo* OpInfo::add_outputs() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.OpInfo.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::TensorInfo >*
OpInfo::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.OpInfo.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::tensorboard::TensorInfo >&
OpInfo::outputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.OpInfo.outputs)
  return outputs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineTrace::kFilePathFieldNumber;
const int LineTrace::kLineNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineTrace::LineTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.contrib.tensorboard.LineTrace)
}
LineTrace::LineTrace(const LineTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  line_number_ = from.line_number_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.contrib.tensorboard.LineTrace)
}

void LineTrace::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = 0u;
  _cached_size_ = 0;
}

LineTrace::~LineTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.contrib.tensorboard.LineTrace)
  SharedDtor();
}

void LineTrace::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LineTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineTrace::descriptor() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[2].descriptor;
}

const LineTrace& LineTrace::default_instance() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineTrace* LineTrace::New(::google::protobuf::Arena* arena) const {
  LineTrace* n = new LineTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.contrib.tensorboard.LineTrace)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = 0u;
}

bool LineTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.contrib.tensorboard.LineTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.LineTrace.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_number = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.contrib.tensorboard.LineTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.contrib.tensorboard.LineTrace)
  return false;
#undef DO_
}

void LineTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.contrib.tensorboard.LineTrace)
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.LineTrace.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // uint32 line_number = 2;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->line_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.contrib.tensorboard.LineTrace)
}

::google::protobuf::uint8* LineTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.contrib.tensorboard.LineTrace)
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.LineTrace.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // uint32 line_number = 2;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->line_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.contrib.tensorboard.LineTrace)
  return target;
}

size_t LineTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.contrib.tensorboard.LineTrace)
  size_t total_size = 0;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // uint32 line_number = 2;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.contrib.tensorboard.LineTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const LineTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.contrib.tensorboard.LineTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.contrib.tensorboard.LineTrace)
    MergeFrom(*source);
  }
}

void LineTrace::MergeFrom(const LineTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.contrib.tensorboard.LineTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
}

void LineTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.contrib.tensorboard.LineTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineTrace::CopyFrom(const LineTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.contrib.tensorboard.LineTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineTrace::IsInitialized() const {
  return true;
}

void LineTrace::Swap(LineTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineTrace::InternalSwap(LineTrace* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(line_number_, other->line_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineTrace::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineTrace

// string file_path = 1;
void LineTrace::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LineTrace::file_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.LineTrace.file_path)
  return file_path_.GetNoArena();
}
void LineTrace::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.LineTrace.file_path)
}
#if LANG_CXX11
void LineTrace::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.LineTrace.file_path)
}
#endif
void LineTrace::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.LineTrace.file_path)
}
void LineTrace::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.LineTrace.file_path)
}
::std::string* LineTrace::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.LineTrace.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LineTrace::release_file_path() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.LineTrace.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LineTrace::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.LineTrace.file_path)
}

// uint32 line_number = 2;
void LineTrace::clear_line_number() {
  line_number_ = 0u;
}
::google::protobuf::uint32 LineTrace::line_number() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.LineTrace.line_number)
  return line_number_;
}
void LineTrace::set_line_number(::google::protobuf::uint32 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.LineTrace.line_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorInfo::kShapeFieldNumber;
const int TensorInfo::kDtypeFieldNumber;
const int TensorInfo::kNumBytesPerElemFieldNumber;
const int TensorInfo::kConsumersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorInfo::TensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.contrib.tensorboard.TensorInfo)
}
TensorInfo::TensorInfo(const TensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      consumers_(from.consumers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dtype().size() > 0) {
    dtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dtype_);
  }
  num_bytes_per_elem_ = from.num_bytes_per_elem_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.contrib.tensorboard.TensorInfo)
}

void TensorInfo::SharedCtor() {
  dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_bytes_per_elem_ = 0u;
  _cached_size_ = 0;
}

TensorInfo::~TensorInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.contrib.tensorboard.TensorInfo)
  SharedDtor();
}

void TensorInfo::SharedDtor() {
  dtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorInfo::descriptor() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[3].descriptor;
}

const TensorInfo& TensorInfo::default_instance() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorInfo* TensorInfo::New(::google::protobuf::Arena* arena) const {
  TensorInfo* n = new TensorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.contrib.tensorboard.TensorInfo)
  shape_.Clear();
  consumers_.Clear();
  dtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_bytes_per_elem_ = 0u;
}

bool TensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.contrib.tensorboard.TensorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dtype = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dtype().data(), this->dtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.TensorInfo.dtype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_bytes_per_elem = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_bytes_per_elem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string consumers = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_consumers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumers(this->consumers_size() - 1).data(),
            this->consumers(this->consumers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.TensorInfo.consumers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.contrib.tensorboard.TensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.contrib.tensorboard.TensorInfo)
  return false;
#undef DO_
}

void TensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.contrib.tensorboard.TensorInfo)
  // repeated int32 shape = 1;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shape(i), output);
  }

  // string dtype = 2;
  if (this->dtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.TensorInfo.dtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dtype(), output);
  }

  // uint32 num_bytes_per_elem = 3;
  if (this->num_bytes_per_elem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_bytes_per_elem(), output);
  }

  // repeated string consumers = 4;
  for (int i = 0; i < this->consumers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumers(i).data(), this->consumers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.TensorInfo.consumers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->consumers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.contrib.tensorboard.TensorInfo)
}

::google::protobuf::uint8* TensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.contrib.tensorboard.TensorInfo)
  // repeated int32 shape = 1;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shape(i), target);
  }

  // string dtype = 2;
  if (this->dtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.TensorInfo.dtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dtype(), target);
  }

  // uint32 num_bytes_per_elem = 3;
  if (this->num_bytes_per_elem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_bytes_per_elem(), target);
  }

  // repeated string consumers = 4;
  for (int i = 0; i < this->consumers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumers(i).data(), this->consumers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.TensorInfo.consumers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->consumers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.contrib.tensorboard.TensorInfo)
  return target;
}

size_t TensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.contrib.tensorboard.TensorInfo)
  size_t total_size = 0;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string consumers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->consumers_size());
  for (int i = 0; i < this->consumers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->consumers(i));
  }

  // string dtype = 2;
  if (this->dtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dtype());
  }

  // uint32 num_bytes_per_elem = 3;
  if (this->num_bytes_per_elem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_bytes_per_elem());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.contrib.tensorboard.TensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.contrib.tensorboard.TensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.contrib.tensorboard.TensorInfo)
    MergeFrom(*source);
  }
}

void TensorInfo::MergeFrom(const TensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.contrib.tensorboard.TensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shape_.MergeFrom(from.shape_);
  consumers_.MergeFrom(from.consumers_);
  if (from.dtype().size() > 0) {

    dtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dtype_);
  }
  if (from.num_bytes_per_elem() != 0) {
    set_num_bytes_per_elem(from.num_bytes_per_elem());
  }
}

void TensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.contrib.tensorboard.TensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorInfo::CopyFrom(const TensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.contrib.tensorboard.TensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorInfo::IsInitialized() const {
  return true;
}

void TensorInfo::Swap(TensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorInfo::InternalSwap(TensorInfo* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  consumers_.UnsafeArenaSwap(&other->consumers_);
  dtype_.Swap(&other->dtype_);
  std::swap(num_bytes_per_elem_, other->num_bytes_per_elem_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorInfo::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorInfo

// repeated int32 shape = 1;
int TensorInfo::shape_size() const {
  return shape_.size();
}
void TensorInfo::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int32 TensorInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TensorInfo.shape)
  return shape_.Get(index);
}
void TensorInfo::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.TensorInfo.shape)
}
void TensorInfo::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.TensorInfo.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.TensorInfo.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.TensorInfo.shape)
  return &shape_;
}

// string dtype = 2;
void TensorInfo::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TensorInfo.dtype)
  return dtype_.GetNoArena();
}
void TensorInfo::set_dtype(const ::std::string& value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.TensorInfo.dtype)
}
#if LANG_CXX11
void TensorInfo::set_dtype(::std::string&& value) {
  
  dtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.TensorInfo.dtype)
}
#endif
void TensorInfo::set_dtype(const char* value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.TensorInfo.dtype)
}
void TensorInfo::set_dtype(const char* value, size_t size) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.TensorInfo.dtype)
}
::std::string* TensorInfo::mutable_dtype() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.TensorInfo.dtype)
  return dtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorInfo::release_dtype() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.TensorInfo.dtype)
  
  return dtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorInfo::set_allocated_dtype(::std::string* dtype) {
  if (dtype != NULL) {
    
  } else {
    
  }
  dtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.TensorInfo.dtype)
}

// uint32 num_bytes_per_elem = 3;
void TensorInfo::clear_num_bytes_per_elem() {
  num_bytes_per_elem_ = 0u;
}
::google::protobuf::uint32 TensorInfo::num_bytes_per_elem() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TensorInfo.num_bytes_per_elem)
  return num_bytes_per_elem_;
}
void TensorInfo::set_num_bytes_per_elem(::google::protobuf::uint32 value) {
  
  num_bytes_per_elem_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.TensorInfo.num_bytes_per_elem)
}

// repeated string consumers = 4;
int TensorInfo::consumers_size() const {
  return consumers_.size();
}
void TensorInfo::clear_consumers() {
  consumers_.Clear();
}
const ::std::string& TensorInfo::consumers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  return consumers_.Get(index);
}
::std::string* TensorInfo::mutable_consumers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  return consumers_.Mutable(index);
}
void TensorInfo::set_consumers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  consumers_.Mutable(index)->assign(value);
}
void TensorInfo::set_consumers(int index, const char* value) {
  consumers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.TensorInfo.consumers)
}
void TensorInfo::set_consumers(int index, const char* value, size_t size) {
  consumers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.TensorInfo.consumers)
}
::std::string* TensorInfo::add_consumers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  return consumers_.Add();
}
void TensorInfo::add_consumers(const ::std::string& value) {
  consumers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.tensorboard.TensorInfo.consumers)
}
void TensorInfo::add_consumers(const char* value) {
  consumers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.tensorboard.TensorInfo.consumers)
}
void TensorInfo::add_consumers(const char* value, size_t size) {
  consumers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.tensorboard.TensorInfo.consumers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorInfo::consumers() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  return consumers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TensorInfo::mutable_consumers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.tensorboard.TensorInfo.consumers)
  return &consumers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kFilePathFieldNumber;
const int FileInfo::kSourceCodeFieldNumber;
const int FileInfo::kMultilineStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.contrib.tensorboard.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& FileInfo_MultilineStatementsEntry_descriptor = protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[4].descriptor;
  multiline_statements_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce);
  multiline_statements_.SetEntryDescriptor(
      &FileInfo_MultilineStatementsEntry_descriptor);
  multiline_statements_.MergeFrom(from.multiline_statements_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  source_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_code().size() > 0) {
    source_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_code_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.contrib.tensorboard.FileInfo)
}

void FileInfo::SharedCtor() {
  const ::google::protobuf::Descriptor*& FileInfo_MultilineStatementsEntry_descriptor = protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[4].descriptor;
  multiline_statements_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce);
  multiline_statements_.SetEntryDescriptor(
      &FileInfo_MultilineStatementsEntry_descriptor);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.contrib.tensorboard.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[5].descriptor;
}

const FileInfo& FileInfo::default_instance() {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileInfo* FileInfo::New(::google::protobuf::Arena* arena) const {
  FileInfo* n = new FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.contrib.tensorboard.FileInfo)
  multiline_statements_.Clear();
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.contrib.tensorboard.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.FileInfo.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_code = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_code().data(), this->source_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.contrib.tensorboard.FileInfo.source_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> multiline_statements = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          FileInfo_MultilineStatementsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&multiline_statements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.contrib.tensorboard.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.contrib.tensorboard.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.contrib.tensorboard.FileInfo)
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.FileInfo.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // string source_code = 2;
  if (this->source_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_code().data(), this->source_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.FileInfo.source_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_code(), output);
  }

  // map<uint32, uint32> multiline_statements = 3;
  if (!this->multiline_statements().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->multiline_statements().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->multiline_statements().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->multiline_statements().begin();
          it != this->multiline_statements().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileInfo_MultilineStatementsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(multiline_statements_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileInfo_MultilineStatementsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->multiline_statements().begin();
          it != this->multiline_statements().end(); ++it) {
        entry.reset(multiline_statements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.contrib.tensorboard.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.contrib.tensorboard.FileInfo)
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.FileInfo.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // string source_code = 2;
  if (this->source_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_code().data(), this->source_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.contrib.tensorboard.FileInfo.source_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_code(), target);
  }

  // map<uint32, uint32> multiline_statements = 3;
  if (!this->multiline_statements().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->multiline_statements().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->multiline_statements().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->multiline_statements().begin();
          it != this->multiline_statements().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileInfo_MultilineStatementsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(multiline_statements_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FileInfo_MultilineStatementsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->multiline_statements().begin();
          it != this->multiline_statements().end(); ++it) {
        entry.reset(multiline_statements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.contrib.tensorboard.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.contrib.tensorboard.FileInfo)
  size_t total_size = 0;

  // map<uint32, uint32> multiline_statements = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->multiline_statements_size());
  {
    ::google::protobuf::scoped_ptr<FileInfo_MultilineStatementsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->multiline_statements().begin();
        it != this->multiline_statements().end(); ++it) {
      entry.reset(multiline_statements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string source_code = 2;
  if (this->source_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.contrib.tensorboard.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.contrib.tensorboard.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.contrib.tensorboard.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.contrib.tensorboard.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  multiline_statements_.MergeFrom(from.multiline_statements_);
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.source_code().size() > 0) {

    source_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_code_);
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.contrib.tensorboard.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.contrib.tensorboard.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  multiline_statements_.Swap(&other->multiline_statements_);
  file_path_.Swap(&other->file_path_);
  source_code_.Swap(&other->source_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2ftensorboard_2fplugins_2ftrace_2ftrace_5finfo_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileInfo

// string file_path = 1;
void FileInfo::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::file_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.FileInfo.file_path)
  return file_path_.GetNoArena();
}
void FileInfo::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.FileInfo.file_path)
}
#if LANG_CXX11
void FileInfo::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.FileInfo.file_path)
}
#endif
void FileInfo::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.FileInfo.file_path)
}
void FileInfo::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.FileInfo.file_path)
}
::std::string* FileInfo::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.FileInfo.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.FileInfo.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.FileInfo.file_path)
}

// string source_code = 2;
void FileInfo::clear_source_code() {
  source_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::source_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.tensorboard.FileInfo.source_code)
  return source_code_.GetNoArena();
}
void FileInfo::set_source_code(const ::std::string& value) {
  
  source_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.tensorboard.FileInfo.source_code)
}
#if LANG_CXX11
void FileInfo::set_source_code(::std::string&& value) {
  
  source_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.tensorboard.FileInfo.source_code)
}
#endif
void FileInfo::set_source_code(const char* value) {
  
  source_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.tensorboard.FileInfo.source_code)
}
void FileInfo::set_source_code(const char* value, size_t size) {
  
  source_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.tensorboard.FileInfo.source_code)
}
::std::string* FileInfo::mutable_source_code() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.tensorboard.FileInfo.source_code)
  return source_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_source_code() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.tensorboard.FileInfo.source_code)
  
  return source_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_source_code(::std::string* source_code) {
  if (source_code != NULL) {
    
  } else {
    
  }
  source_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_code);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.tensorboard.FileInfo.source_code)
}

// map<uint32, uint32> multiline_statements = 3;
int FileInfo::multiline_statements_size() const {
  return multiline_statements_.size();
}
void FileInfo::clear_multiline_statements() {
  multiline_statements_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
FileInfo::multiline_statements() const {
  // @@protoc_insertion_point(field_map:tensorflow.contrib.tensorboard.FileInfo.multiline_statements)
  return multiline_statements_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
FileInfo::mutable_multiline_statements() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.contrib.tensorboard.FileInfo.multiline_statements)
  return multiline_statements_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorboard
}  // namespace contrib
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
