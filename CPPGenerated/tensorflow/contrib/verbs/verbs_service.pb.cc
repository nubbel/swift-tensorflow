// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/verbs/verbs_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/verbs/verbs_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class ChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Channel> {
} _Channel_default_instance_;
class MemoryRegionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryRegion> {
} _MemoryRegion_default_instance_;
class GetRemoteAddressRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRemoteAddressRequest> {
} _GetRemoteAddressRequest_default_instance_;
class GetRemoteAddressResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRemoteAddressResponse> {
} _GetRemoteAddressResponse_default_instance_;

namespace protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, lid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, qpn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, psn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRegion, remote_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRegion, rkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressRequest, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressRequest, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressRequest, mr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressResponse, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressResponse, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRemoteAddressResponse, mr_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Channel)},
  { 7, -1, sizeof(MemoryRegion)},
  { 13, -1, sizeof(GetRemoteAddressRequest)},
  { 20, -1, sizeof(GetRemoteAddressResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRemoteAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRemoteAddressResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/verbs/verbs_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Channel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MemoryRegion_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetRemoteAddressRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GetRemoteAddressResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Channel_default_instance_.DefaultConstruct();
  _MemoryRegion_default_instance_.DefaultConstruct();
  _GetRemoteAddressRequest_default_instance_.DefaultConstruct();
  _GetRemoteAddressResponse_default_instance_.DefaultConstruct();
  _GetRemoteAddressRequest_default_instance_.get_mutable()->channel_ = const_cast< ::tensorflow::Channel*>(
      ::tensorflow::Channel::internal_default_instance());
  _GetRemoteAddressResponse_default_instance_.get_mutable()->channel_ = const_cast< ::tensorflow::Channel*>(
      ::tensorflow::Channel::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,tensorflow/contrib/verbs/verbs_service"
      ".proto\022\ntensorflow\"0\n\007Channel\022\013\n\003lid\030\001 \001"
      "(\005\022\013\n\003qpn\030\002 \001(\005\022\013\n\003psn\030\003 \001(\005\"1\n\014MemoryRe"
      "gion\022\023\n\013remote_addr\030\001 \001(\004\022\014\n\004rkey\030\002 \001(\r\""
      "x\n\027GetRemoteAddressRequest\022\021\n\thost_name\030"
      "\001 \001(\t\022$\n\007channel\030\002 \001(\0132\023.tensorflow.Chan"
      "nel\022$\n\002mr\030\003 \003(\0132\030.tensorflow.MemoryRegio"
      "n\"y\n\030GetRemoteAddressResponse\022\021\n\thost_na"
      "me\030\001 \001(\t\022$\n\007channel\030\002 \001(\0132\023.tensorflow.C"
      "hannel\022$\n\002mr\030\003 \003(\0132\030.tensorflow.MemoryRe"
      "gion2m\n\014VerbsService\022]\n\020GetRemoteAddress"
      "\022#.tensorflow.GetRemoteAddressRequest\032$."
      "tensorflow.GetRemoteAddressResponseB4\n\034o"
      "rg.tensorflow.contrib.verbsB\022VerbsServic"
      "eProtosP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/verbs/verbs_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kLidFieldNumber;
const int Channel::kQpnFieldNumber;
const int Channel::kPsnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Channel)
}
Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    reinterpret_cast<char*>(&psn_) -
    reinterpret_cast<char*>(&lid_) + sizeof(psn_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.Channel)
}

void Channel::SharedCtor() {
  ::memset(&lid_, 0, reinterpret_cast<char*>(&psn_) -
    reinterpret_cast<char*>(&lid_) + sizeof(psn_));
  _cached_size_ = 0;
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:tensorflow.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[0].descriptor;
}

const Channel& Channel::default_instance() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Channel)
  ::memset(&lid_, 0, reinterpret_cast<char*>(&psn_) -
    reinterpret_cast<char*>(&lid_) + sizeof(psn_));
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 qpn = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 psn = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Channel)
  // int32 lid = 1;
  if (this->lid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lid(), output);
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qpn(), output);
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->psn(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Channel)
  // int32 lid = 1;
  if (this->lid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lid(), target);
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qpn(), target);
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->psn(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Channel)
  size_t total_size = 0;

  // int32 lid = 1;
  if (this->lid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lid());
  }

  // int32 qpn = 2;
  if (this->qpn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qpn());
  }

  // int32 psn = 3;
  if (this->psn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->psn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.lid() != 0) {
    set_lid(from.lid());
  }
  if (from.qpn() != 0) {
    set_qpn(from.qpn());
  }
  if (from.psn() != 0) {
    set_psn(from.psn());
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  std::swap(lid_, other->lid_);
  std::swap(qpn_, other->qpn_);
  std::swap(psn_, other->psn_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// int32 lid = 1;
void Channel::clear_lid() {
  lid_ = 0;
}
::google::protobuf::int32 Channel::lid() const {
  // @@protoc_insertion_point(field_get:tensorflow.Channel.lid)
  return lid_;
}
void Channel::set_lid(::google::protobuf::int32 value) {
  
  lid_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Channel.lid)
}

// int32 qpn = 2;
void Channel::clear_qpn() {
  qpn_ = 0;
}
::google::protobuf::int32 Channel::qpn() const {
  // @@protoc_insertion_point(field_get:tensorflow.Channel.qpn)
  return qpn_;
}
void Channel::set_qpn(::google::protobuf::int32 value) {
  
  qpn_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Channel.qpn)
}

// int32 psn = 3;
void Channel::clear_psn() {
  psn_ = 0;
}
::google::protobuf::int32 Channel::psn() const {
  // @@protoc_insertion_point(field_get:tensorflow.Channel.psn)
  return psn_;
}
void Channel::set_psn(::google::protobuf::int32 value) {
  
  psn_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Channel.psn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryRegion::kRemoteAddrFieldNumber;
const int MemoryRegion::kRkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryRegion::MemoryRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryRegion)
}
MemoryRegion::MemoryRegion(const MemoryRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remote_addr_, &from.remote_addr_,
    reinterpret_cast<char*>(&rkey_) -
    reinterpret_cast<char*>(&remote_addr_) + sizeof(rkey_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryRegion)
}

void MemoryRegion::SharedCtor() {
  ::memset(&remote_addr_, 0, reinterpret_cast<char*>(&rkey_) -
    reinterpret_cast<char*>(&remote_addr_) + sizeof(rkey_));
  _cached_size_ = 0;
}

MemoryRegion::~MemoryRegion() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryRegion)
  SharedDtor();
}

void MemoryRegion::SharedDtor() {
}

void MemoryRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryRegion::descriptor() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[1].descriptor;
}

const MemoryRegion& MemoryRegion::default_instance() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryRegion* MemoryRegion::New(::google::protobuf::Arena* arena) const {
  MemoryRegion* n = new MemoryRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryRegion)
  ::memset(&remote_addr_, 0, reinterpret_cast<char*>(&rkey_) -
    reinterpret_cast<char*>(&remote_addr_) + sizeof(rkey_));
}

bool MemoryRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 remote_addr = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rkey = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryRegion)
  return false;
#undef DO_
}

void MemoryRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryRegion)
  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->remote_addr(), output);
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryRegion)
}

::google::protobuf::uint8* MemoryRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryRegion)
  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->remote_addr(), target);
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryRegion)
  return target;
}

size_t MemoryRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryRegion)
  size_t total_size = 0;

  // uint64 remote_addr = 1;
  if (this->remote_addr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remote_addr());
  }

  // uint32 rkey = 2;
  if (this->rkey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryRegion)
    MergeFrom(*source);
  }
}

void MemoryRegion::MergeFrom(const MemoryRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.remote_addr() != 0) {
    set_remote_addr(from.remote_addr());
  }
  if (from.rkey() != 0) {
    set_rkey(from.rkey());
  }
}

void MemoryRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRegion::CopyFrom(const MemoryRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRegion::IsInitialized() const {
  return true;
}

void MemoryRegion::Swap(MemoryRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryRegion::InternalSwap(MemoryRegion* other) {
  std::swap(remote_addr_, other->remote_addr_);
  std::swap(rkey_, other->rkey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryRegion::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryRegion

// uint64 remote_addr = 1;
void MemoryRegion::clear_remote_addr() {
  remote_addr_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemoryRegion::remote_addr() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryRegion.remote_addr)
  return remote_addr_;
}
void MemoryRegion::set_remote_addr(::google::protobuf::uint64 value) {
  
  remote_addr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryRegion.remote_addr)
}

// uint32 rkey = 2;
void MemoryRegion::clear_rkey() {
  rkey_ = 0u;
}
::google::protobuf::uint32 MemoryRegion::rkey() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryRegion.rkey)
  return rkey_;
}
void MemoryRegion::set_rkey(::google::protobuf::uint32 value) {
  
  rkey_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryRegion.rkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteAddressRequest::kHostNameFieldNumber;
const int GetRemoteAddressRequest::kChannelFieldNumber;
const int GetRemoteAddressRequest::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteAddressRequest::GetRemoteAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetRemoteAddressRequest)
}
GetRemoteAddressRequest::GetRemoteAddressRequest(const GetRemoteAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mr_(from.mr_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_channel()) {
    channel_ = new ::tensorflow::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetRemoteAddressRequest)
}

void GetRemoteAddressRequest::SharedCtor() {
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = NULL;
  _cached_size_ = 0;
}

GetRemoteAddressRequest::~GetRemoteAddressRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetRemoteAddressRequest)
  SharedDtor();
}

void GetRemoteAddressRequest::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete channel_;
  }
}

void GetRemoteAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRemoteAddressRequest::descriptor() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[2].descriptor;
}

const GetRemoteAddressRequest& GetRemoteAddressRequest::default_instance() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRemoteAddressRequest* GetRemoteAddressRequest::New(::google::protobuf::Arena* arena) const {
  GetRemoteAddressRequest* n = new GetRemoteAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRemoteAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetRemoteAddressRequest)
  mr_.Clear();
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}

bool GetRemoteAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetRemoteAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GetRemoteAddressRequest.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.Channel channel = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.MemoryRegion mr = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mr()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetRemoteAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetRemoteAddressRequest)
  return false;
#undef DO_
}

void GetRemoteAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetRemoteAddressRequest)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetRemoteAddressRequest.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_, output);
  }

  // repeated .tensorflow.MemoryRegion mr = 3;
  for (unsigned int i = 0, n = this->mr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mr(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GetRemoteAddressRequest)
}

::google::protobuf::uint8* GetRemoteAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetRemoteAddressRequest)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetRemoteAddressRequest.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_, false, target);
  }

  // repeated .tensorflow.MemoryRegion mr = 3;
  for (unsigned int i = 0, n = this->mr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mr(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetRemoteAddressRequest)
  return target;
}

size_t GetRemoteAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetRemoteAddressRequest)
  size_t total_size = 0;

  // repeated .tensorflow.MemoryRegion mr = 3;
  {
    unsigned int count = this->mr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mr(i));
    }
  }

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRemoteAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetRemoteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRemoteAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetRemoteAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetRemoteAddressRequest)
    MergeFrom(*source);
  }
}

void GetRemoteAddressRequest::MergeFrom(const GetRemoteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetRemoteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mr_.MergeFrom(from.mr_);
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_channel()) {
    mutable_channel()->::tensorflow::Channel::MergeFrom(from.channel());
  }
}

void GetRemoteAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetRemoteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteAddressRequest::CopyFrom(const GetRemoteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetRemoteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteAddressRequest::IsInitialized() const {
  return true;
}

void GetRemoteAddressRequest::Swap(GetRemoteAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteAddressRequest::InternalSwap(GetRemoteAddressRequest* other) {
  mr_.UnsafeArenaSwap(&other->mr_);
  host_name_.Swap(&other->host_name_);
  std::swap(channel_, other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRemoteAddressRequest::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRemoteAddressRequest

// string host_name = 1;
void GetRemoteAddressRequest::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRemoteAddressRequest::host_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressRequest.host_name)
  return host_name_.GetNoArena();
}
void GetRemoteAddressRequest::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.GetRemoteAddressRequest.host_name)
}
#if LANG_CXX11
void GetRemoteAddressRequest::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GetRemoteAddressRequest.host_name)
}
#endif
void GetRemoteAddressRequest::set_host_name(const char* value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.GetRemoteAddressRequest.host_name)
}
void GetRemoteAddressRequest::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GetRemoteAddressRequest.host_name)
}
::std::string* GetRemoteAddressRequest::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressRequest.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRemoteAddressRequest::release_host_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GetRemoteAddressRequest.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRemoteAddressRequest::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GetRemoteAddressRequest.host_name)
}

// .tensorflow.Channel channel = 2;
bool GetRemoteAddressRequest::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
void GetRemoteAddressRequest::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
const ::tensorflow::Channel& GetRemoteAddressRequest::channel() const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressRequest.channel)
  return channel_ != NULL ? *channel_
                         : *::tensorflow::Channel::internal_default_instance();
}
::tensorflow::Channel* GetRemoteAddressRequest::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::tensorflow::Channel;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressRequest.channel)
  return channel_;
}
::tensorflow::Channel* GetRemoteAddressRequest::release_channel() {
  // @@protoc_insertion_point(field_release:tensorflow.GetRemoteAddressRequest.channel)
  
  ::tensorflow::Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
void GetRemoteAddressRequest::set_allocated_channel(::tensorflow::Channel* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GetRemoteAddressRequest.channel)
}

// repeated .tensorflow.MemoryRegion mr = 3;
int GetRemoteAddressRequest::mr_size() const {
  return mr_.size();
}
void GetRemoteAddressRequest::clear_mr() {
  mr_.Clear();
}
const ::tensorflow::MemoryRegion& GetRemoteAddressRequest::mr(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressRequest.mr)
  return mr_.Get(index);
}
::tensorflow::MemoryRegion* GetRemoteAddressRequest::mutable_mr(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressRequest.mr)
  return mr_.Mutable(index);
}
::tensorflow::MemoryRegion* GetRemoteAddressRequest::add_mr() {
  // @@protoc_insertion_point(field_add:tensorflow.GetRemoteAddressRequest.mr)
  return mr_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::MemoryRegion >*
GetRemoteAddressRequest::mutable_mr() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetRemoteAddressRequest.mr)
  return &mr_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemoryRegion >&
GetRemoteAddressRequest::mr() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetRemoteAddressRequest.mr)
  return mr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRemoteAddressResponse::kHostNameFieldNumber;
const int GetRemoteAddressResponse::kChannelFieldNumber;
const int GetRemoteAddressResponse::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRemoteAddressResponse::GetRemoteAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetRemoteAddressResponse)
}
GetRemoteAddressResponse::GetRemoteAddressResponse(const GetRemoteAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mr_(from.mr_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_channel()) {
    channel_ = new ::tensorflow::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetRemoteAddressResponse)
}

void GetRemoteAddressResponse::SharedCtor() {
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = NULL;
  _cached_size_ = 0;
}

GetRemoteAddressResponse::~GetRemoteAddressResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetRemoteAddressResponse)
  SharedDtor();
}

void GetRemoteAddressResponse::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete channel_;
  }
}

void GetRemoteAddressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRemoteAddressResponse::descriptor() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[3].descriptor;
}

const GetRemoteAddressResponse& GetRemoteAddressResponse::default_instance() {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRemoteAddressResponse* GetRemoteAddressResponse::New(::google::protobuf::Arena* arena) const {
  GetRemoteAddressResponse* n = new GetRemoteAddressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRemoteAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetRemoteAddressResponse)
  mr_.Clear();
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}

bool GetRemoteAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetRemoteAddressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GetRemoteAddressResponse.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.Channel channel = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.MemoryRegion mr = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mr()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetRemoteAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetRemoteAddressResponse)
  return false;
#undef DO_
}

void GetRemoteAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetRemoteAddressResponse)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetRemoteAddressResponse.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_, output);
  }

  // repeated .tensorflow.MemoryRegion mr = 3;
  for (unsigned int i = 0, n = this->mr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mr(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GetRemoteAddressResponse)
}

::google::protobuf::uint8* GetRemoteAddressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetRemoteAddressResponse)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetRemoteAddressResponse.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_, false, target);
  }

  // repeated .tensorflow.MemoryRegion mr = 3;
  for (unsigned int i = 0, n = this->mr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mr(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetRemoteAddressResponse)
  return target;
}

size_t GetRemoteAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetRemoteAddressResponse)
  size_t total_size = 0;

  // repeated .tensorflow.MemoryRegion mr = 3;
  {
    unsigned int count = this->mr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mr(i));
    }
  }

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // .tensorflow.Channel channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRemoteAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetRemoteAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRemoteAddressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRemoteAddressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetRemoteAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetRemoteAddressResponse)
    MergeFrom(*source);
  }
}

void GetRemoteAddressResponse::MergeFrom(const GetRemoteAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetRemoteAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mr_.MergeFrom(from.mr_);
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_channel()) {
    mutable_channel()->::tensorflow::Channel::MergeFrom(from.channel());
  }
}

void GetRemoteAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetRemoteAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRemoteAddressResponse::CopyFrom(const GetRemoteAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetRemoteAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteAddressResponse::IsInitialized() const {
  return true;
}

void GetRemoteAddressResponse::Swap(GetRemoteAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRemoteAddressResponse::InternalSwap(GetRemoteAddressResponse* other) {
  mr_.UnsafeArenaSwap(&other->mr_);
  host_name_.Swap(&other->host_name_);
  std::swap(channel_, other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRemoteAddressResponse::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fverbs_2fverbs_5fservice_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRemoteAddressResponse

// string host_name = 1;
void GetRemoteAddressResponse::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRemoteAddressResponse::host_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressResponse.host_name)
  return host_name_.GetNoArena();
}
void GetRemoteAddressResponse::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.GetRemoteAddressResponse.host_name)
}
#if LANG_CXX11
void GetRemoteAddressResponse::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GetRemoteAddressResponse.host_name)
}
#endif
void GetRemoteAddressResponse::set_host_name(const char* value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.GetRemoteAddressResponse.host_name)
}
void GetRemoteAddressResponse::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GetRemoteAddressResponse.host_name)
}
::std::string* GetRemoteAddressResponse::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressResponse.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRemoteAddressResponse::release_host_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GetRemoteAddressResponse.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRemoteAddressResponse::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GetRemoteAddressResponse.host_name)
}

// .tensorflow.Channel channel = 2;
bool GetRemoteAddressResponse::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
void GetRemoteAddressResponse::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
const ::tensorflow::Channel& GetRemoteAddressResponse::channel() const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressResponse.channel)
  return channel_ != NULL ? *channel_
                         : *::tensorflow::Channel::internal_default_instance();
}
::tensorflow::Channel* GetRemoteAddressResponse::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::tensorflow::Channel;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressResponse.channel)
  return channel_;
}
::tensorflow::Channel* GetRemoteAddressResponse::release_channel() {
  // @@protoc_insertion_point(field_release:tensorflow.GetRemoteAddressResponse.channel)
  
  ::tensorflow::Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
void GetRemoteAddressResponse::set_allocated_channel(::tensorflow::Channel* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GetRemoteAddressResponse.channel)
}

// repeated .tensorflow.MemoryRegion mr = 3;
int GetRemoteAddressResponse::mr_size() const {
  return mr_.size();
}
void GetRemoteAddressResponse::clear_mr() {
  mr_.Clear();
}
const ::tensorflow::MemoryRegion& GetRemoteAddressResponse::mr(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetRemoteAddressResponse.mr)
  return mr_.Get(index);
}
::tensorflow::MemoryRegion* GetRemoteAddressResponse::mutable_mr(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GetRemoteAddressResponse.mr)
  return mr_.Mutable(index);
}
::tensorflow::MemoryRegion* GetRemoteAddressResponse::add_mr() {
  // @@protoc_insertion_point(field_add:tensorflow.GetRemoteAddressResponse.mr)
  return mr_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::MemoryRegion >*
GetRemoteAddressResponse::mutable_mr() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetRemoteAddressResponse.mr)
  return &mr_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemoryRegion >&
GetRemoteAddressResponse::mr() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetRemoteAddressResponse.mr)
  return mr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
