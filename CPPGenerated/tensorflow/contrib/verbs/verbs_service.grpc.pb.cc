// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/contrib/verbs/verbs_service.proto

#include "tensorflow/contrib/verbs/verbs_service.pb.h"
#include "tensorflow/contrib/verbs/verbs_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tensorflow {

static const char* VerbsService_method_names[] = {
  "/tensorflow.VerbsService/GetRemoteAddress",
};

std::unique_ptr< VerbsService::Stub> VerbsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< VerbsService::Stub> stub(new VerbsService::Stub(channel));
  return stub;
}

VerbsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRemoteAddress_(VerbsService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VerbsService::Stub::GetRemoteAddress(::grpc::ClientContext* context, const ::tensorflow::GetRemoteAddressRequest& request, ::tensorflow::GetRemoteAddressResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteAddress_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetRemoteAddressResponse>* VerbsService::Stub::AsyncGetRemoteAddressRaw(::grpc::ClientContext* context, const ::tensorflow::GetRemoteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::GetRemoteAddressResponse>(channel_.get(), cq, rpcmethod_GetRemoteAddress_, context, request);
}

VerbsService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      VerbsService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< VerbsService::Service, ::tensorflow::GetRemoteAddressRequest, ::tensorflow::GetRemoteAddressResponse>(
          std::mem_fn(&VerbsService::Service::GetRemoteAddress), this)));
}

VerbsService::Service::~Service() {
}

::grpc::Status VerbsService::Service::GetRemoteAddress(::grpc::ServerContext* context, const ::tensorflow::GetRemoteAddressRequest* request, ::tensorflow::GetRemoteAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow

