// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/session_bundle/manifest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/session_bundle/manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
class SignaturesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signatures> {
} _Signatures_default_instance_;
class TensorBindingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorBinding> {
} _TensorBinding_default_instance_;
class AssetFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AssetFile> {
} _AssetFile_default_instance_;
class SignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signature> {
  public:
  const ::tensorflow::serving::RegressionSignature* regression_signature_;
  const ::tensorflow::serving::ClassificationSignature* classification_signature_;
  const ::tensorflow::serving::GenericSignature* generic_signature_;
} _Signature_default_instance_;
class RegressionSignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegressionSignature> {
} _RegressionSignature_default_instance_;
class ClassificationSignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClassificationSignature> {
} _ClassificationSignature_default_instance_;
class GenericSignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericSignature> {
} _GenericSignature_default_instance_;

namespace protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signatures, default_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signatures, named_signatures_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorBinding, tensor_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetFile, tensor_binding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetFile, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Signature_default_instance_), regression_signature_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Signature_default_instance_), classification_signature_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Signature_default_instance_), generic_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegressionSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegressionSignature, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegressionSignature, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationSignature, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationSignature, classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationSignature, scores_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSignature, map_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Signatures)},
  { 6, -1, sizeof(TensorBinding)},
  { 11, -1, sizeof(AssetFile)},
  { 17, -1, sizeof(Signature)},
  { 25, -1, sizeof(RegressionSignature)},
  { 31, -1, sizeof(ClassificationSignature)},
  { 38, -1, sizeof(GenericSignature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorBinding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AssetFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegressionSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClassificationSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenericSignature_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/session_bundle/manifest.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
  const ::google::protobuf::Descriptor* Signatures_NamedSignaturesEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Signatures_NamedSignaturesEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::serving::Signature,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Signatures_NamedSignaturesEntry_descriptor));
  const ::google::protobuf::Descriptor* GenericSignature_MapEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[7].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GenericSignature_MapEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::serving::TensorBinding,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GenericSignature_MapEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _Signatures_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TensorBinding_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AssetFile_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Signature_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RegressionSignature_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ClassificationSignature_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GenericSignature_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Signatures_default_instance_.DefaultConstruct();
  _TensorBinding_default_instance_.DefaultConstruct();
  _AssetFile_default_instance_.DefaultConstruct();
  _Signature_default_instance_.DefaultConstruct();
  _RegressionSignature_default_instance_.DefaultConstruct();
  _ClassificationSignature_default_instance_.DefaultConstruct();
  _GenericSignature_default_instance_.DefaultConstruct();
  _Signatures_default_instance_.get_mutable()->default_signature_ = const_cast< ::tensorflow::serving::Signature*>(
      ::tensorflow::serving::Signature::internal_default_instance());
  _AssetFile_default_instance_.get_mutable()->tensor_binding_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
  _Signature_default_instance_.regression_signature_ = const_cast< ::tensorflow::serving::RegressionSignature*>(
      ::tensorflow::serving::RegressionSignature::internal_default_instance());
  _Signature_default_instance_.classification_signature_ = const_cast< ::tensorflow::serving::ClassificationSignature*>(
      ::tensorflow::serving::ClassificationSignature::internal_default_instance());
  _Signature_default_instance_.generic_signature_ = const_cast< ::tensorflow::serving::GenericSignature*>(
      ::tensorflow::serving::GenericSignature::internal_default_instance());
  _RegressionSignature_default_instance_.get_mutable()->input_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
  _RegressionSignature_default_instance_.get_mutable()->output_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
  _ClassificationSignature_default_instance_.get_mutable()->input_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
  _ClassificationSignature_default_instance_.get_mutable()->classes_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
  _ClassificationSignature_default_instance_.get_mutable()->scores_ = const_cast< ::tensorflow::serving::TensorBinding*>(
      ::tensorflow::serving::TensorBinding::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n0tensorflow/contrib/session_bundle/mani"
      "fest.proto\022\022tensorflow.serving\"\354\001\n\nSigna"
      "tures\0228\n\021default_signature\030\001 \001(\0132\035.tenso"
      "rflow.serving.Signature\022M\n\020named_signatu"
      "res\030\002 \003(\01323.tensorflow.serving.Signature"
      "s.NamedSignaturesEntry\032U\n\024NamedSignature"
      "sEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.ten"
      "sorflow.serving.Signature:\0028\001\"$\n\rTensorB"
      "inding\022\023\n\013tensor_name\030\001 \001(\t\"X\n\tAssetFile"
      "\0229\n\016tensor_binding\030\001 \001(\0132!.tensorflow.se"
      "rving.TensorBinding\022\020\n\010filename\030\002 \001(\t\"\360\001"
      "\n\tSignature\022G\n\024regression_signature\030\001 \001("
      "\0132\'.tensorflow.serving.RegressionSignatu"
      "reH\000\022O\n\030classification_signature\030\002 \001(\0132+"
      ".tensorflow.serving.ClassificationSignat"
      "ureH\000\022A\n\021generic_signature\030\003 \001(\0132$.tenso"
      "rflow.serving.GenericSignatureH\000B\006\n\004type"
      "\"z\n\023RegressionSignature\0220\n\005input\030\001 \001(\0132!"
      ".tensorflow.serving.TensorBinding\0221\n\006out"
      "put\030\002 \001(\0132!.tensorflow.serving.TensorBin"
      "ding\"\262\001\n\027ClassificationSignature\0220\n\005inpu"
      "t\030\001 \001(\0132!.tensorflow.serving.TensorBindi"
      "ng\0222\n\007classes\030\002 \001(\0132!.tensorflow.serving"
      ".TensorBinding\0221\n\006scores\030\003 \001(\0132!.tensorf"
      "low.serving.TensorBinding\"\235\001\n\020GenericSig"
      "nature\022:\n\003map\030\001 \003(\0132-.tensorflow.serving"
      ".GenericSignature.MapEntry\032M\n\010MapEntry\022\013"
      "\n\003key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.tensorflow."
      "serving.TensorBinding:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/session_bundle/manifest.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signatures::kDefaultSignatureFieldNumber;
const int Signatures::kNamedSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signatures::Signatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Signatures)
}
Signatures::Signatures(const Signatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Signatures_NamedSignaturesEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[0].descriptor;
  named_signatures_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce);
  named_signatures_.SetEntryDescriptor(
      &Signatures_NamedSignaturesEntry_descriptor);
  named_signatures_.MergeFrom(from.named_signatures_);
  if (from.has_default_signature()) {
    default_signature_ = new ::tensorflow::serving::Signature(*from.default_signature_);
  } else {
    default_signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Signatures)
}

void Signatures::SharedCtor() {
  const ::google::protobuf::Descriptor*& Signatures_NamedSignaturesEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[0].descriptor;
  named_signatures_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce);
  named_signatures_.SetEntryDescriptor(
      &Signatures_NamedSignaturesEntry_descriptor);
  default_signature_ = NULL;
  _cached_size_ = 0;
}

Signatures::~Signatures() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Signatures)
  SharedDtor();
}

void Signatures::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_signature_;
  }
}

void Signatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signatures::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[1].descriptor;
}

const Signatures& Signatures::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signatures* Signatures::New(::google::protobuf::Arena* arena) const {
  Signatures* n = new Signatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signatures::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Signatures)
  named_signatures_.Clear();
  if (GetArenaNoVirtual() == NULL && default_signature_ != NULL) {
    delete default_signature_;
  }
  default_signature_ = NULL;
}

bool Signatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.Signatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.Signature default_signature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.serving.Signature> named_signatures = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          Signatures_NamedSignaturesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::serving::Signature,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature > > parser(&named_signatures_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.Signatures.NamedSignaturesEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.Signatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.Signatures)
  return false;
#undef DO_
}

void Signatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.Signatures)
  // .tensorflow.serving.Signature default_signature = 1;
  if (this->has_default_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_signature_, output);
  }

  // map<string, .tensorflow.serving.Signature> named_signatures = 2;
  if (!this->named_signatures().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.Signatures.NamedSignaturesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->named_signatures().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->named_signatures().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_iterator
          it = this->named_signatures().begin();
          it != this->named_signatures().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Signatures_NamedSignaturesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(named_signatures_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Signatures_NamedSignaturesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_iterator
          it = this->named_signatures().begin();
          it != this->named_signatures().end(); ++it) {
        entry.reset(named_signatures_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.Signatures)
}

::google::protobuf::uint8* Signatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Signatures)
  // .tensorflow.serving.Signature default_signature = 1;
  if (this->has_default_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->default_signature_, false, target);
  }

  // map<string, .tensorflow.serving.Signature> named_signatures = 2;
  if (!this->named_signatures().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.Signatures.NamedSignaturesEntry.key");
      }
    };

    if (deterministic &&
        this->named_signatures().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->named_signatures().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_iterator
          it = this->named_signatures().begin();
          it != this->named_signatures().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Signatures_NamedSignaturesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(named_signatures_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Signatures_NamedSignaturesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_iterator
          it = this->named_signatures().begin();
          it != this->named_signatures().end(); ++it) {
        entry.reset(named_signatures_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Signatures)
  return target;
}

size_t Signatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Signatures)
  size_t total_size = 0;

  // map<string, .tensorflow.serving.Signature> named_signatures = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->named_signatures_size());
  {
    ::google::protobuf::scoped_ptr<Signatures_NamedSignaturesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >::const_iterator
        it = this->named_signatures().begin();
        it != this->named_signatures().end(); ++it) {
      entry.reset(named_signatures_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .tensorflow.serving.Signature default_signature = 1;
  if (this->has_default_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Signatures)
  GOOGLE_DCHECK_NE(&from, this);
  const Signatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Signatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Signatures)
    MergeFrom(*source);
  }
}

void Signatures::MergeFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Signatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  named_signatures_.MergeFrom(from.named_signatures_);
  if (from.has_default_signature()) {
    mutable_default_signature()->::tensorflow::serving::Signature::MergeFrom(from.default_signature());
  }
}

void Signatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Signatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signatures::CopyFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Signatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signatures::IsInitialized() const {
  return true;
}

void Signatures::Swap(Signatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signatures::InternalSwap(Signatures* other) {
  named_signatures_.Swap(&other->named_signatures_);
  std::swap(default_signature_, other->default_signature_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signatures::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signatures

// .tensorflow.serving.Signature default_signature = 1;
bool Signatures::has_default_signature() const {
  return this != internal_default_instance() && default_signature_ != NULL;
}
void Signatures::clear_default_signature() {
  if (GetArenaNoVirtual() == NULL && default_signature_ != NULL) delete default_signature_;
  default_signature_ = NULL;
}
const ::tensorflow::serving::Signature& Signatures::default_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signatures.default_signature)
  return default_signature_ != NULL ? *default_signature_
                         : *::tensorflow::serving::Signature::internal_default_instance();
}
::tensorflow::serving::Signature* Signatures::mutable_default_signature() {
  
  if (default_signature_ == NULL) {
    default_signature_ = new ::tensorflow::serving::Signature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signatures.default_signature)
  return default_signature_;
}
::tensorflow::serving::Signature* Signatures::release_default_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signatures.default_signature)
  
  ::tensorflow::serving::Signature* temp = default_signature_;
  default_signature_ = NULL;
  return temp;
}
void Signatures::set_allocated_default_signature(::tensorflow::serving::Signature* default_signature) {
  delete default_signature_;
  default_signature_ = default_signature;
  if (default_signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signatures.default_signature)
}

// map<string, .tensorflow.serving.Signature> named_signatures = 2;
int Signatures::named_signatures_size() const {
  return named_signatures_.size();
}
void Signatures::clear_named_signatures() {
  named_signatures_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >&
Signatures::named_signatures() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >*
Signatures::mutable_named_signatures() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorBinding::kTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorBinding::TensorBinding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.TensorBinding)
}
TensorBinding::TensorBinding(const TensorBinding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.TensorBinding)
}

void TensorBinding::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TensorBinding::~TensorBinding() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.TensorBinding)
  SharedDtor();
}

void TensorBinding::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorBinding::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[2].descriptor;
}

const TensorBinding& TensorBinding::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorBinding* TensorBinding::New(::google::protobuf::Arena* arena) const {
  TensorBinding* n = new TensorBinding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.TensorBinding)
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TensorBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.TensorBinding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tensor_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), this->tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.TensorBinding.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.TensorBinding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.TensorBinding)
  return false;
#undef DO_
}

void TensorBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.TensorBinding)
  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), this->tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.TensorBinding.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tensor_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.TensorBinding)
}

::google::protobuf::uint8* TensorBinding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.TensorBinding)
  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), this->tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.TensorBinding.tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tensor_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.TensorBinding)
  return target;
}

size_t TensorBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.TensorBinding)
  size_t total_size = 0;

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorBinding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.TensorBinding)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorBinding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorBinding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.TensorBinding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.TensorBinding)
    MergeFrom(*source);
  }
}

void TensorBinding::MergeFrom(const TensorBinding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.TensorBinding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
}

void TensorBinding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.TensorBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorBinding::CopyFrom(const TensorBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.TensorBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorBinding::IsInitialized() const {
  return true;
}

void TensorBinding::Swap(TensorBinding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorBinding::InternalSwap(TensorBinding* other) {
  tensor_name_.Swap(&other->tensor_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorBinding::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorBinding

// string tensor_name = 1;
void TensorBinding::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorBinding::tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.GetNoArena();
}
void TensorBinding::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.TensorBinding.tensor_name)
}
#if LANG_CXX11
void TensorBinding::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.TensorBinding.tensor_name)
}
#endif
void TensorBinding::set_tensor_name(const char* value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.TensorBinding.tensor_name)
}
void TensorBinding::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.TensorBinding.tensor_name)
}
::std::string* TensorBinding::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorBinding::release_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.TensorBinding.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorBinding::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.TensorBinding.tensor_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetFile::kTensorBindingFieldNumber;
const int AssetFile::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetFile::AssetFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.AssetFile)
}
AssetFile::AssetFile(const AssetFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_tensor_binding()) {
    tensor_binding_ = new ::tensorflow::serving::TensorBinding(*from.tensor_binding_);
  } else {
    tensor_binding_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.AssetFile)
}

void AssetFile::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_binding_ = NULL;
  _cached_size_ = 0;
}

AssetFile::~AssetFile() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.AssetFile)
  SharedDtor();
}

void AssetFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_binding_;
  }
}

void AssetFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetFile::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[3].descriptor;
}

const AssetFile& AssetFile::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

AssetFile* AssetFile::New(::google::protobuf::Arena* arena) const {
  AssetFile* n = new AssetFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.AssetFile)
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_binding_ != NULL) {
    delete tensor_binding_;
  }
  tensor_binding_ = NULL;
}

bool AssetFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.AssetFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.TensorBinding tensor_binding = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_binding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.AssetFile.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.AssetFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.AssetFile)
  return false;
#undef DO_
}

void AssetFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.AssetFile)
  // .tensorflow.serving.TensorBinding tensor_binding = 1;
  if (this->has_tensor_binding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_binding_, output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.AssetFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.AssetFile)
}

::google::protobuf::uint8* AssetFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.AssetFile)
  // .tensorflow.serving.TensorBinding tensor_binding = 1;
  if (this->has_tensor_binding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_binding_, false, target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.AssetFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.AssetFile)
  return target;
}

size_t AssetFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.AssetFile)
  size_t total_size = 0;

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // .tensorflow.serving.TensorBinding tensor_binding = 1;
  if (this->has_tensor_binding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_binding_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.AssetFile)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.AssetFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.AssetFile)
    MergeFrom(*source);
  }
}

void AssetFile::MergeFrom(const AssetFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.AssetFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_tensor_binding()) {
    mutable_tensor_binding()->::tensorflow::serving::TensorBinding::MergeFrom(from.tensor_binding());
  }
}

void AssetFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.AssetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetFile::CopyFrom(const AssetFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.AssetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetFile::IsInitialized() const {
  return true;
}

void AssetFile::Swap(AssetFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetFile::InternalSwap(AssetFile* other) {
  filename_.Swap(&other->filename_);
  std::swap(tensor_binding_, other->tensor_binding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetFile::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetFile

// .tensorflow.serving.TensorBinding tensor_binding = 1;
bool AssetFile::has_tensor_binding() const {
  return this != internal_default_instance() && tensor_binding_ != NULL;
}
void AssetFile::clear_tensor_binding() {
  if (GetArenaNoVirtual() == NULL && tensor_binding_ != NULL) delete tensor_binding_;
  tensor_binding_ = NULL;
}
const ::tensorflow::serving::TensorBinding& AssetFile::tensor_binding() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.AssetFile.tensor_binding)
  return tensor_binding_ != NULL ? *tensor_binding_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* AssetFile::mutable_tensor_binding() {
  
  if (tensor_binding_ == NULL) {
    tensor_binding_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.AssetFile.tensor_binding)
  return tensor_binding_;
}
::tensorflow::serving::TensorBinding* AssetFile::release_tensor_binding() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.AssetFile.tensor_binding)
  
  ::tensorflow::serving::TensorBinding* temp = tensor_binding_;
  tensor_binding_ = NULL;
  return temp;
}
void AssetFile::set_allocated_tensor_binding(::tensorflow::serving::TensorBinding* tensor_binding) {
  delete tensor_binding_;
  tensor_binding_ = tensor_binding;
  if (tensor_binding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.AssetFile.tensor_binding)
}

// string filename = 2;
void AssetFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AssetFile::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.AssetFile.filename)
  return filename_.GetNoArena();
}
void AssetFile::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.AssetFile.filename)
}
#if LANG_CXX11
void AssetFile::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.AssetFile.filename)
}
#endif
void AssetFile::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.AssetFile.filename)
}
void AssetFile::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.AssetFile.filename)
}
::std::string* AssetFile::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.AssetFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetFile::release_filename() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.AssetFile.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.AssetFile.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kRegressionSignatureFieldNumber;
const int Signature::kClassificationSignatureFieldNumber;
const int Signature::kGenericSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Signature)
}
Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kRegressionSignature: {
      mutable_regression_signature()->::tensorflow::serving::RegressionSignature::MergeFrom(from.regression_signature());
      break;
    }
    case kClassificationSignature: {
      mutable_classification_signature()->::tensorflow::serving::ClassificationSignature::MergeFrom(from.classification_signature());
      break;
    }
    case kGenericSignature: {
      mutable_generic_signature()->::tensorflow::serving::GenericSignature::MergeFrom(from.generic_signature());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Signature)
}

void Signature::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[4].descriptor;
}

const Signature& Signature::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signature* Signature::New(::google::protobuf::Arena* arena) const {
  Signature* n = new Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signature::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.Signature)
  switch (type_case()) {
    case kRegressionSignature: {
      delete type_.regression_signature_;
      break;
    }
    case kClassificationSignature: {
      delete type_.classification_signature_;
      break;
    }
    case kGenericSignature: {
      delete type_.generic_signature_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Signature)
  clear_type();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.RegressionSignature regression_signature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regression_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.ClassificationSignature classification_signature = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.GenericSignature generic_signature = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.Signature)
  // .tensorflow.serving.RegressionSignature regression_signature = 1;
  if (has_regression_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.regression_signature_, output);
  }

  // .tensorflow.serving.ClassificationSignature classification_signature = 2;
  if (has_classification_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.classification_signature_, output);
  }

  // .tensorflow.serving.GenericSignature generic_signature = 3;
  if (has_generic_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.generic_signature_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Signature)
  // .tensorflow.serving.RegressionSignature regression_signature = 1;
  if (has_regression_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.regression_signature_, false, target);
  }

  // .tensorflow.serving.ClassificationSignature classification_signature = 2;
  if (has_classification_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.classification_signature_, false, target);
  }

  // .tensorflow.serving.GenericSignature generic_signature = 3;
  if (has_generic_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.generic_signature_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Signature)
  size_t total_size = 0;

  switch (type_case()) {
    // .tensorflow.serving.RegressionSignature regression_signature = 1;
    case kRegressionSignature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.regression_signature_);
      break;
    }
    // .tensorflow.serving.ClassificationSignature classification_signature = 2;
    case kClassificationSignature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.classification_signature_);
      break;
    }
    // .tensorflow.serving.GenericSignature generic_signature = 3;
    case kGenericSignature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.generic_signature_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.type_case()) {
    case kRegressionSignature: {
      mutable_regression_signature()->::tensorflow::serving::RegressionSignature::MergeFrom(from.regression_signature());
      break;
    }
    case kClassificationSignature: {
      mutable_classification_signature()->::tensorflow::serving::ClassificationSignature::MergeFrom(from.classification_signature());
      break;
    }
    case kGenericSignature: {
      mutable_generic_signature()->::tensorflow::serving::GenericSignature::MergeFrom(from.generic_signature());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// .tensorflow.serving.RegressionSignature regression_signature = 1;
bool Signature::has_regression_signature() const {
  return type_case() == kRegressionSignature;
}
void Signature::set_has_regression_signature() {
  _oneof_case_[0] = kRegressionSignature;
}
void Signature::clear_regression_signature() {
  if (has_regression_signature()) {
    delete type_.regression_signature_;
    clear_has_type();
  }
}
 const ::tensorflow::serving::RegressionSignature& Signature::regression_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.regression_signature)
  return has_regression_signature()
      ? *type_.regression_signature_
      : ::tensorflow::serving::RegressionSignature::default_instance();
}
::tensorflow::serving::RegressionSignature* Signature::mutable_regression_signature() {
  if (!has_regression_signature()) {
    clear_type();
    set_has_regression_signature();
    type_.regression_signature_ = new ::tensorflow::serving::RegressionSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.regression_signature)
  return type_.regression_signature_;
}
::tensorflow::serving::RegressionSignature* Signature::release_regression_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.regression_signature)
  if (has_regression_signature()) {
    clear_has_type();
    ::tensorflow::serving::RegressionSignature* temp = type_.regression_signature_;
    type_.regression_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Signature::set_allocated_regression_signature(::tensorflow::serving::RegressionSignature* regression_signature) {
  clear_type();
  if (regression_signature) {
    set_has_regression_signature();
    type_.regression_signature_ = regression_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.regression_signature)
}

// .tensorflow.serving.ClassificationSignature classification_signature = 2;
bool Signature::has_classification_signature() const {
  return type_case() == kClassificationSignature;
}
void Signature::set_has_classification_signature() {
  _oneof_case_[0] = kClassificationSignature;
}
void Signature::clear_classification_signature() {
  if (has_classification_signature()) {
    delete type_.classification_signature_;
    clear_has_type();
  }
}
 const ::tensorflow::serving::ClassificationSignature& Signature::classification_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.classification_signature)
  return has_classification_signature()
      ? *type_.classification_signature_
      : ::tensorflow::serving::ClassificationSignature::default_instance();
}
::tensorflow::serving::ClassificationSignature* Signature::mutable_classification_signature() {
  if (!has_classification_signature()) {
    clear_type();
    set_has_classification_signature();
    type_.classification_signature_ = new ::tensorflow::serving::ClassificationSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.classification_signature)
  return type_.classification_signature_;
}
::tensorflow::serving::ClassificationSignature* Signature::release_classification_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.classification_signature)
  if (has_classification_signature()) {
    clear_has_type();
    ::tensorflow::serving::ClassificationSignature* temp = type_.classification_signature_;
    type_.classification_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Signature::set_allocated_classification_signature(::tensorflow::serving::ClassificationSignature* classification_signature) {
  clear_type();
  if (classification_signature) {
    set_has_classification_signature();
    type_.classification_signature_ = classification_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.classification_signature)
}

// .tensorflow.serving.GenericSignature generic_signature = 3;
bool Signature::has_generic_signature() const {
  return type_case() == kGenericSignature;
}
void Signature::set_has_generic_signature() {
  _oneof_case_[0] = kGenericSignature;
}
void Signature::clear_generic_signature() {
  if (has_generic_signature()) {
    delete type_.generic_signature_;
    clear_has_type();
  }
}
 const ::tensorflow::serving::GenericSignature& Signature::generic_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.generic_signature)
  return has_generic_signature()
      ? *type_.generic_signature_
      : ::tensorflow::serving::GenericSignature::default_instance();
}
::tensorflow::serving::GenericSignature* Signature::mutable_generic_signature() {
  if (!has_generic_signature()) {
    clear_type();
    set_has_generic_signature();
    type_.generic_signature_ = new ::tensorflow::serving::GenericSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.generic_signature)
  return type_.generic_signature_;
}
::tensorflow::serving::GenericSignature* Signature::release_generic_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.generic_signature)
  if (has_generic_signature()) {
    clear_has_type();
    ::tensorflow::serving::GenericSignature* temp = type_.generic_signature_;
    type_.generic_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Signature::set_allocated_generic_signature(::tensorflow::serving::GenericSignature* generic_signature) {
  clear_type();
  if (generic_signature) {
    set_has_generic_signature();
    type_.generic_signature_ = generic_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.generic_signature)
}

bool Signature::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Signature::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Signature::TypeCase Signature::type_case() const {
  return Signature::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegressionSignature::kInputFieldNumber;
const int RegressionSignature::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegressionSignature::RegressionSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.RegressionSignature)
}
RegressionSignature::RegressionSignature(const RegressionSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::tensorflow::serving::TensorBinding(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::tensorflow::serving::TensorBinding(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.RegressionSignature)
}

void RegressionSignature::SharedCtor() {
  ::memset(&input_, 0, reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&input_) + sizeof(output_));
  _cached_size_ = 0;
}

RegressionSignature::~RegressionSignature() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.RegressionSignature)
  SharedDtor();
}

void RegressionSignature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete input_;
  }
  if (this != internal_default_instance()) {
    delete output_;
  }
}

void RegressionSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegressionSignature::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[5].descriptor;
}

const RegressionSignature& RegressionSignature::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegressionSignature* RegressionSignature::New(::google::protobuf::Arena* arena) const {
  RegressionSignature* n = new RegressionSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegressionSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.RegressionSignature)
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}

bool RegressionSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.RegressionSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.TensorBinding input = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.TensorBinding output = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.RegressionSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.RegressionSignature)
  return false;
#undef DO_
}

void RegressionSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.RegressionSignature)
  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_, output);
  }

  // .tensorflow.serving.TensorBinding output = 2;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->output_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.RegressionSignature)
}

::google::protobuf::uint8* RegressionSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.RegressionSignature)
  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_, false, target);
  }

  // .tensorflow.serving.TensorBinding output = 2;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->output_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.RegressionSignature)
  return target;
}

size_t RegressionSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.RegressionSignature)
  size_t total_size = 0;

  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // .tensorflow.serving.TensorBinding output = 2;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegressionSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.RegressionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const RegressionSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegressionSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.RegressionSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.RegressionSignature)
    MergeFrom(*source);
  }
}

void RegressionSignature::MergeFrom(const RegressionSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.RegressionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    mutable_input()->::tensorflow::serving::TensorBinding::MergeFrom(from.input());
  }
  if (from.has_output()) {
    mutable_output()->::tensorflow::serving::TensorBinding::MergeFrom(from.output());
  }
}

void RegressionSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.RegressionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegressionSignature::CopyFrom(const RegressionSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.RegressionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegressionSignature::IsInitialized() const {
  return true;
}

void RegressionSignature::Swap(RegressionSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegressionSignature::InternalSwap(RegressionSignature* other) {
  std::swap(input_, other->input_);
  std::swap(output_, other->output_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegressionSignature::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegressionSignature

// .tensorflow.serving.TensorBinding input = 1;
bool RegressionSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
void RegressionSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::tensorflow::serving::TensorBinding& RegressionSignature::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressionSignature.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* RegressionSignature::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressionSignature.input)
  return input_;
}
::tensorflow::serving::TensorBinding* RegressionSignature::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressionSignature.input)
  
  ::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
void RegressionSignature::set_allocated_input(::tensorflow::serving::TensorBinding* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressionSignature.input)
}

// .tensorflow.serving.TensorBinding output = 2;
bool RegressionSignature::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
void RegressionSignature::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::tensorflow::serving::TensorBinding& RegressionSignature::output() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressionSignature.output)
  return output_ != NULL ? *output_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* RegressionSignature::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressionSignature.output)
  return output_;
}
::tensorflow::serving::TensorBinding* RegressionSignature::release_output() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressionSignature.output)
  
  ::tensorflow::serving::TensorBinding* temp = output_;
  output_ = NULL;
  return temp;
}
void RegressionSignature::set_allocated_output(::tensorflow::serving::TensorBinding* output) {
  delete output_;
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressionSignature.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationSignature::kInputFieldNumber;
const int ClassificationSignature::kClassesFieldNumber;
const int ClassificationSignature::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationSignature::ClassificationSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationSignature)
}
ClassificationSignature::ClassificationSignature(const ClassificationSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::tensorflow::serving::TensorBinding(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_classes()) {
    classes_ = new ::tensorflow::serving::TensorBinding(*from.classes_);
  } else {
    classes_ = NULL;
  }
  if (from.has_scores()) {
    scores_ = new ::tensorflow::serving::TensorBinding(*from.scores_);
  } else {
    scores_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationSignature)
}

void ClassificationSignature::SharedCtor() {
  ::memset(&input_, 0, reinterpret_cast<char*>(&scores_) -
    reinterpret_cast<char*>(&input_) + sizeof(scores_));
  _cached_size_ = 0;
}

ClassificationSignature::~ClassificationSignature() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationSignature)
  SharedDtor();
}

void ClassificationSignature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete input_;
  }
  if (this != internal_default_instance()) {
    delete classes_;
  }
  if (this != internal_default_instance()) {
    delete scores_;
  }
}

void ClassificationSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationSignature::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[6].descriptor;
}

const ClassificationSignature& ClassificationSignature::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClassificationSignature* ClassificationSignature::New(::google::protobuf::Arena* arena) const {
  ClassificationSignature* n = new ClassificationSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassificationSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationSignature)
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && classes_ != NULL) {
    delete classes_;
  }
  classes_ = NULL;
  if (GetArenaNoVirtual() == NULL && scores_ != NULL) {
    delete scores_;
  }
  scores_ = NULL;
}

bool ClassificationSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ClassificationSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.serving.TensorBinding input = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.TensorBinding classes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.serving.TensorBinding scores = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ClassificationSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ClassificationSignature)
  return false;
#undef DO_
}

void ClassificationSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ClassificationSignature)
  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_, output);
  }

  // .tensorflow.serving.TensorBinding classes = 2;
  if (this->has_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classes_, output);
  }

  // .tensorflow.serving.TensorBinding scores = 3;
  if (this->has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->scores_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ClassificationSignature)
}

::google::protobuf::uint8* ClassificationSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationSignature)
  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_, false, target);
  }

  // .tensorflow.serving.TensorBinding classes = 2;
  if (this->has_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classes_, false, target);
  }

  // .tensorflow.serving.TensorBinding scores = 3;
  if (this->has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->scores_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationSignature)
  return target;
}

size_t ClassificationSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationSignature)
  size_t total_size = 0;

  // .tensorflow.serving.TensorBinding input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // .tensorflow.serving.TensorBinding classes = 2;
  if (this->has_classes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->classes_);
  }

  // .tensorflow.serving.TensorBinding scores = 3;
  if (this->has_scores()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scores_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationSignature)
    MergeFrom(*source);
  }
}

void ClassificationSignature::MergeFrom(const ClassificationSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    mutable_input()->::tensorflow::serving::TensorBinding::MergeFrom(from.input());
  }
  if (from.has_classes()) {
    mutable_classes()->::tensorflow::serving::TensorBinding::MergeFrom(from.classes());
  }
  if (from.has_scores()) {
    mutable_scores()->::tensorflow::serving::TensorBinding::MergeFrom(from.scores());
  }
}

void ClassificationSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationSignature::CopyFrom(const ClassificationSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationSignature::IsInitialized() const {
  return true;
}

void ClassificationSignature::Swap(ClassificationSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassificationSignature::InternalSwap(ClassificationSignature* other) {
  std::swap(input_, other->input_);
  std::swap(classes_, other->classes_);
  std::swap(scores_, other->scores_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationSignature::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationSignature

// .tensorflow.serving.TensorBinding input = 1;
bool ClassificationSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
void ClassificationSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::tensorflow::serving::TensorBinding& ClassificationSignature::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.input)
  return input_;
}
::tensorflow::serving::TensorBinding* ClassificationSignature::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.input)
  
  ::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
void ClassificationSignature::set_allocated_input(::tensorflow::serving::TensorBinding* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.input)
}

// .tensorflow.serving.TensorBinding classes = 2;
bool ClassificationSignature::has_classes() const {
  return this != internal_default_instance() && classes_ != NULL;
}
void ClassificationSignature::clear_classes() {
  if (GetArenaNoVirtual() == NULL && classes_ != NULL) delete classes_;
  classes_ = NULL;
}
const ::tensorflow::serving::TensorBinding& ClassificationSignature::classes() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.classes)
  return classes_ != NULL ? *classes_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_classes() {
  
  if (classes_ == NULL) {
    classes_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.classes)
  return classes_;
}
::tensorflow::serving::TensorBinding* ClassificationSignature::release_classes() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.classes)
  
  ::tensorflow::serving::TensorBinding* temp = classes_;
  classes_ = NULL;
  return temp;
}
void ClassificationSignature::set_allocated_classes(::tensorflow::serving::TensorBinding* classes) {
  delete classes_;
  classes_ = classes;
  if (classes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.classes)
}

// .tensorflow.serving.TensorBinding scores = 3;
bool ClassificationSignature::has_scores() const {
  return this != internal_default_instance() && scores_ != NULL;
}
void ClassificationSignature::clear_scores() {
  if (GetArenaNoVirtual() == NULL && scores_ != NULL) delete scores_;
  scores_ = NULL;
}
const ::tensorflow::serving::TensorBinding& ClassificationSignature::scores() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.scores)
  return scores_ != NULL ? *scores_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_scores() {
  
  if (scores_ == NULL) {
    scores_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.scores)
  return scores_;
}
::tensorflow::serving::TensorBinding* ClassificationSignature::release_scores() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.scores)
  
  ::tensorflow::serving::TensorBinding* temp = scores_;
  scores_ = NULL;
  return temp;
}
void ClassificationSignature::set_allocated_scores(::tensorflow::serving::TensorBinding* scores) {
  delete scores_;
  scores_ = scores;
  if (scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.scores)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericSignature::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericSignature::GenericSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.GenericSignature)
}
GenericSignature::GenericSignature(const GenericSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& GenericSignature_MapEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[7].descriptor;
  map_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce);
  map_.SetEntryDescriptor(
      &GenericSignature_MapEntry_descriptor);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.GenericSignature)
}

void GenericSignature::SharedCtor() {
  const ::google::protobuf::Descriptor*& GenericSignature_MapEntry_descriptor = protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[7].descriptor;
  map_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce);
  map_.SetEntryDescriptor(
      &GenericSignature_MapEntry_descriptor);
  _cached_size_ = 0;
}

GenericSignature::~GenericSignature() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.GenericSignature)
  SharedDtor();
}

void GenericSignature::SharedDtor() {
}

void GenericSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericSignature::descriptor() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[8].descriptor;
}

const GenericSignature& GenericSignature::default_instance() {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenericSignature* GenericSignature::New(::google::protobuf::Arena* arena) const {
  GenericSignature* n = new GenericSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.GenericSignature)
  map_.Clear();
}

bool GenericSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.GenericSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.serving.TensorBinding> map = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          GenericSignature_MapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::serving::TensorBinding,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding > > parser(&map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.GenericSignature.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.GenericSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.GenericSignature)
  return false;
#undef DO_
}

void GenericSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.GenericSignature)
  // map<string, .tensorflow.serving.TensorBinding> map = 1;
  if (!this->map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.GenericSignature.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GenericSignature_MapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GenericSignature_MapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        entry.reset(map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.GenericSignature)
}

::google::protobuf::uint8* GenericSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.GenericSignature)
  // map<string, .tensorflow.serving.TensorBinding> map = 1;
  if (!this->map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.GenericSignature.MapEntry.key");
      }
    };

    if (deterministic &&
        this->map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GenericSignature_MapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GenericSignature_MapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        entry.reset(map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.GenericSignature)
  return target;
}

size_t GenericSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.GenericSignature)
  size_t total_size = 0;

  // map<string, .tensorflow.serving.TensorBinding> map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_size());
  {
    ::google::protobuf::scoped_ptr<GenericSignature_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.GenericSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.GenericSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.GenericSignature)
    MergeFrom(*source);
  }
}

void GenericSignature::MergeFrom(const GenericSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.GenericSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
}

void GenericSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.GenericSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericSignature::CopyFrom(const GenericSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.GenericSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSignature::IsInitialized() const {
  return true;
}

void GenericSignature::Swap(GenericSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericSignature::InternalSwap(GenericSignature* other) {
  map_.Swap(&other->map_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericSignature::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericSignature

// map<string, .tensorflow.serving.TensorBinding> map = 1;
int GenericSignature::map_size() const {
  return map_.size();
}
void GenericSignature::clear_map() {
  map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >&
GenericSignature::map() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.GenericSignature.map)
  return map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >*
GenericSignature::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.GenericSignature.map)
  return map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
