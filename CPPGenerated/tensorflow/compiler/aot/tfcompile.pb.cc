// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/aot/tfcompile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/compiler/aot/tfcompile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfcompile {
class TensorIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorId> {
} _TensorId_default_instance_;
class FeedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feed> {
} _Feed_default_instance_;
class FetchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fetch> {
} _Fetch_default_instance_;
class ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Config> {
} _Config_default_instance_;

namespace protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorId, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorId, output_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feed, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feed, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feed, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, feed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, fetch_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TensorId)},
  { 6, -1, sizeof(Feed)},
  { 13, -1, sizeof(Fetch)},
  { 19, -1, sizeof(Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Fetch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Config_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/compiler/aot/tfcompile.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TensorId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Feed_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Fetch_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Config_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::InitDefaults();
  _TensorId_default_instance_.DefaultConstruct();
  _Feed_default_instance_.DefaultConstruct();
  _Fetch_default_instance_.DefaultConstruct();
  _Config_default_instance_.DefaultConstruct();
  _Feed_default_instance_.get_mutable()->id_ = const_cast< ::tensorflow::tfcompile::TensorId*>(
      ::tensorflow::tfcompile::TensorId::internal_default_instance());
  _Feed_default_instance_.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  _Fetch_default_instance_.get_mutable()->id_ = const_cast< ::tensorflow::tfcompile::TensorId*>(
      ::tensorflow::tfcompile::TensorId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'tensorflow/compiler/aot/tfcompile.prot"
      "o\022\024tensorflow.tfcompile\032,tensorflow/core"
      "/framework/tensor_shape.proto\"3\n\010TensorI"
      "d\022\021\n\tnode_name\030\001 \001(\t\022\024\n\014output_index\030\002 \001"
      "(\003\"m\n\004Feed\022*\n\002id\030\001 \001(\0132\036.tensorflow.tfco"
      "mpile.TensorId\022+\n\005shape\030\002 \001(\0132\034.tensorfl"
      "ow.TensorShapeProto\022\014\n\004name\030\003 \001(\t\"A\n\005Fet"
      "ch\022*\n\002id\030\001 \001(\0132\036.tensorflow.tfcompile.Te"
      "nsorId\022\014\n\004name\030\002 \001(\t\"^\n\006Config\022(\n\004feed\030\001"
      " \003(\0132\032.tensorflow.tfcompile.Feed\022*\n\005fetc"
      "h\030\002 \003(\0132\033.tensorflow.tfcompile.FetchB.\n\030"
      "org.tensorflow.tfcompileB\rCompileProtosP"
      "\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 492);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/compiler/aot/tfcompile.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorId::kNodeNameFieldNumber;
const int TensorId::kOutputIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorId::TensorId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfcompile.TensorId)
}
TensorId::TensorId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tfcompile.TensorId)
}
TensorId::TensorId(const TensorId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name(),
      GetArenaNoVirtual());
  }
  output_index_ = from.output_index_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfcompile.TensorId)
}

void TensorId::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_index_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TensorId::~TensorId() {
  // @@protoc_insertion_point(destructor:tensorflow.tfcompile.TensorId)
  SharedDtor();
}

void TensorId::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void TensorId::ArenaDtor(void* object) {
  TensorId* _this = reinterpret_cast< TensorId* >(object);
  (void)_this;
}
void TensorId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TensorId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorId::descriptor() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[0].descriptor;
}

const TensorId& TensorId::default_instance() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorId* TensorId::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TensorId>(arena);
}

void TensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfcompile.TensorId)
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  output_index_ = GOOGLE_LONGLONG(0);
}

bool TensorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfcompile.TensorId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfcompile.TensorId.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 output_index = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfcompile.TensorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfcompile.TensorId)
  return false;
#undef DO_
}

void TensorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfcompile.TensorId)
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.TensorId.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // int64 output_index = 2;
  if (this->output_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->output_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfcompile.TensorId)
}

::google::protobuf::uint8* TensorId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfcompile.TensorId)
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.TensorId.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // int64 output_index = 2;
  if (this->output_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->output_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfcompile.TensorId)
  return target;
}

size_t TensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfcompile.TensorId)
  size_t total_size = 0;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // int64 output_index = 2;
  if (this->output_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfcompile.TensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfcompile.TensorId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfcompile.TensorId)
    MergeFrom(*source);
  }
}

void TensorId::MergeFrom(const TensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfcompile.TensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_name().size() > 0) {
    set_node_name(from.node_name());
  }
  if (from.output_index() != 0) {
    set_output_index(from.output_index());
  }
}

void TensorId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfcompile.TensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorId::CopyFrom(const TensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfcompile.TensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorId::IsInitialized() const {
  return true;
}

void TensorId::Swap(TensorId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TensorId* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TensorId::UnsafeArenaSwap(TensorId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TensorId::InternalSwap(TensorId* other) {
  node_name_.Swap(&other->node_name_);
  std::swap(output_index_, other->output_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorId::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorId

// string node_name = 1;
void TensorId::clear_node_name() {
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TensorId::node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.TensorId.node_name)
  return node_name_.Get();
}
void TensorId::set_node_name(const ::std::string& value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tfcompile.TensorId.node_name)
}
void TensorId::set_node_name(const char* value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tfcompile.TensorId.node_name)
}
void TensorId::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfcompile.TensorId.node_name)
}
::std::string* TensorId::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.TensorId.node_name)
  return node_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TensorId::release_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.TensorId.node_name)
  
  return node_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TensorId::unsafe_arena_release_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.TensorId.node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TensorId::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.TensorId.node_name)
}
void TensorId::unsafe_arena_set_allocated_node_name(
    ::std::string* node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.TensorId.node_name)
}

// int64 output_index = 2;
void TensorId::clear_output_index() {
  output_index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TensorId::output_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.TensorId.output_index)
  return output_index_;
}
void TensorId::set_output_index(::google::protobuf::int64 value) {
  
  output_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfcompile.TensorId.output_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Feed::_slow_mutable_id() {
  id_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::tfcompile::TensorId >(
      GetArenaNoVirtual());
}
::tensorflow::tfcompile::TensorId* Feed::_slow_release_id() {
  if (id_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::tfcompile::TensorId* temp = new ::tensorflow::tfcompile::TensorId(*id_);
    id_ = NULL;
    return temp;
  }
}
::tensorflow::tfcompile::TensorId* Feed::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.Feed.id)
  
  ::tensorflow::tfcompile::TensorId* temp = id_;
  id_ = NULL;
  return temp;
}
void Feed::_slow_set_allocated_id(
    ::google::protobuf::Arena* message_arena, ::tensorflow::tfcompile::TensorId** id) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*id) == NULL) {
      message_arena->Own(*id);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*id)) {
      ::tensorflow::tfcompile::TensorId* new_id = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::tfcompile::TensorId >(
            message_arena);
      new_id->CopyFrom(**id);
      *id = new_id;
    }
}
void Feed::unsafe_arena_set_allocated_id(
    ::tensorflow::tfcompile::TensorId* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.Feed.id)
}
void Feed::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* Feed::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* Feed::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.Feed.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void Feed::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void Feed::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.Feed.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feed::kIdFieldNumber;
const int Feed::kShapeFieldNumber;
const int Feed::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feed::Feed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfcompile.Feed)
}
Feed::Feed(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tfcompile.Feed)
}
Feed::Feed(const Feed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_id()) {
    id_ = new ::tensorflow::tfcompile::TensorId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfcompile.Feed)
}

void Feed::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&shape_) -
    reinterpret_cast<char*>(&id_) + sizeof(shape_));
  _cached_size_ = 0;
}

Feed::~Feed() {
  // @@protoc_insertion_point(destructor:tensorflow.tfcompile.Feed)
  SharedDtor();
}

void Feed::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void Feed::ArenaDtor(void* object) {
  Feed* _this = reinterpret_cast< Feed* >(object);
  (void)_this;
}
void Feed::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Feed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feed::descriptor() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[1].descriptor;
}

const Feed& Feed::default_instance() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feed* Feed::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Feed>(arena);
}

void Feed::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfcompile.Feed)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool Feed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfcompile.Feed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.tfcompile.TensorId id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfcompile.Feed.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfcompile.Feed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfcompile.Feed)
  return false;
#undef DO_
}

void Feed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfcompile.Feed)
  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.Feed.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfcompile.Feed)
}

::google::protobuf::uint8* Feed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfcompile.Feed)
  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.Feed.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfcompile.Feed)
  return target;
}

size_t Feed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfcompile.Feed)
  size_t total_size = 0;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfcompile.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  const Feed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfcompile.Feed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfcompile.Feed)
    MergeFrom(*source);
  }
}

void Feed::MergeFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfcompile.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_id()) {
    mutable_id()->::tensorflow::tfcompile::TensorId::MergeFrom(from.id());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
}

void Feed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfcompile.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feed::CopyFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfcompile.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feed::IsInitialized() const {
  return true;
}

void Feed::Swap(Feed* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Feed* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Feed::UnsafeArenaSwap(Feed* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Feed::InternalSwap(Feed* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feed::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feed

// .tensorflow.tfcompile.TensorId id = 1;
bool Feed::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void Feed::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::tensorflow::tfcompile::TensorId& Feed::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Feed.id)
  return id_ != NULL ? *id_
                         : *::tensorflow::tfcompile::TensorId::internal_default_instance();
}
::tensorflow::tfcompile::TensorId* Feed::mutable_id() {
  
  if (id_ == NULL) {
    _slow_mutable_id();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Feed.id)
  return id_;
}
::tensorflow::tfcompile::TensorId* Feed::release_id() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.Feed.id)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_id();
  } else {
    ::tensorflow::tfcompile::TensorId* temp = id_;
    id_ = NULL;
    return temp;
  }
}
 void Feed::set_allocated_id(::tensorflow::tfcompile::TensorId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id != NULL) {
    _slow_set_allocated_id(message_arena, &id);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.Feed.id)
}

// .tensorflow.TensorShapeProto shape = 2;
bool Feed::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void Feed::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& Feed::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Feed.shape)
  return shape_ != NULL ? *shape_
                         : *::tensorflow::TensorShapeProto::internal_default_instance();
}
::tensorflow::TensorShapeProto* Feed::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Feed.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* Feed::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.Feed.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void Feed::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.Feed.shape)
}

// string name = 3;
void Feed::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Feed::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Feed.name)
  return name_.Get();
}
void Feed::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tfcompile.Feed.name)
}
void Feed::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tfcompile.Feed.name)
}
void Feed::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfcompile.Feed.name)
}
::std::string* Feed::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Feed.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Feed::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.Feed.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Feed::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.Feed.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Feed::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.Feed.name)
}
void Feed::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.Feed.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Fetch::_slow_mutable_id() {
  id_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::tfcompile::TensorId >(
      GetArenaNoVirtual());
}
::tensorflow::tfcompile::TensorId* Fetch::_slow_release_id() {
  if (id_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::tfcompile::TensorId* temp = new ::tensorflow::tfcompile::TensorId(*id_);
    id_ = NULL;
    return temp;
  }
}
::tensorflow::tfcompile::TensorId* Fetch::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.Fetch.id)
  
  ::tensorflow::tfcompile::TensorId* temp = id_;
  id_ = NULL;
  return temp;
}
void Fetch::_slow_set_allocated_id(
    ::google::protobuf::Arena* message_arena, ::tensorflow::tfcompile::TensorId** id) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*id) == NULL) {
      message_arena->Own(*id);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*id)) {
      ::tensorflow::tfcompile::TensorId* new_id = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::tfcompile::TensorId >(
            message_arena);
      new_id->CopyFrom(**id);
      *id = new_id;
    }
}
void Fetch::unsafe_arena_set_allocated_id(
    ::tensorflow::tfcompile::TensorId* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.Fetch.id)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fetch::kIdFieldNumber;
const int Fetch::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fetch::Fetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfcompile.Fetch)
}
Fetch::Fetch(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tfcompile.Fetch)
}
Fetch::Fetch(const Fetch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_id()) {
    id_ = new ::tensorflow::tfcompile::TensorId(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfcompile.Fetch)
}

void Fetch::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = NULL;
  _cached_size_ = 0;
}

Fetch::~Fetch() {
  // @@protoc_insertion_point(destructor:tensorflow.tfcompile.Fetch)
  SharedDtor();
}

void Fetch::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void Fetch::ArenaDtor(void* object) {
  Fetch* _this = reinterpret_cast< Fetch* >(object);
  (void)_this;
}
void Fetch::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fetch::descriptor() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[2].descriptor;
}

const Fetch& Fetch::default_instance() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fetch* Fetch::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Fetch>(arena);
}

void Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfcompile.Fetch)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}

bool Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfcompile.Fetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.tfcompile.TensorId id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfcompile.Fetch.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfcompile.Fetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfcompile.Fetch)
  return false;
#undef DO_
}

void Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfcompile.Fetch)
  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.Fetch.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfcompile.Fetch)
}

::google::protobuf::uint8* Fetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfcompile.Fetch)
  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfcompile.Fetch.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfcompile.Fetch)
  return target;
}

size_t Fetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfcompile.Fetch)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.tfcompile.TensorId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfcompile.Fetch)
  GOOGLE_DCHECK_NE(&from, this);
  const Fetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfcompile.Fetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfcompile.Fetch)
    MergeFrom(*source);
  }
}

void Fetch::MergeFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfcompile.Fetch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_id()) {
    mutable_id()->::tensorflow::tfcompile::TensorId::MergeFrom(from.id());
  }
}

void Fetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfcompile.Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fetch::CopyFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfcompile.Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetch::IsInitialized() const {
  return true;
}

void Fetch::Swap(Fetch* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Fetch* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Fetch::UnsafeArenaSwap(Fetch* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Fetch::InternalSwap(Fetch* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fetch::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fetch

// .tensorflow.tfcompile.TensorId id = 1;
bool Fetch::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void Fetch::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::tensorflow::tfcompile::TensorId& Fetch::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Fetch.id)
  return id_ != NULL ? *id_
                         : *::tensorflow::tfcompile::TensorId::internal_default_instance();
}
::tensorflow::tfcompile::TensorId* Fetch::mutable_id() {
  
  if (id_ == NULL) {
    _slow_mutable_id();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Fetch.id)
  return id_;
}
::tensorflow::tfcompile::TensorId* Fetch::release_id() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.Fetch.id)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_id();
  } else {
    ::tensorflow::tfcompile::TensorId* temp = id_;
    id_ = NULL;
    return temp;
  }
}
 void Fetch::set_allocated_id(::tensorflow::tfcompile::TensorId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id != NULL) {
    _slow_set_allocated_id(message_arena, &id);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.Fetch.id)
}

// string name = 2;
void Fetch::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Fetch::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Fetch.name)
  return name_.Get();
}
void Fetch::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tfcompile.Fetch.name)
}
void Fetch::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tfcompile.Fetch.name)
}
void Fetch::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfcompile.Fetch.name)
}
::std::string* Fetch::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Fetch.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Fetch::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfcompile.Fetch.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Fetch::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tfcompile.Fetch.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Fetch::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfcompile.Fetch.name)
}
void Fetch::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tfcompile.Fetch.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kFeedFieldNumber;
const int Config::kFetchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfcompile.Config)
}
Config::Config(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tfcompile.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feed_(from.feed_),
      fetch_(from.fetch_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfcompile.Config)
}

void Config::SharedCtor() {
  _cached_size_ = 0;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:tensorflow.tfcompile.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[3].descriptor;
}

const Config& Config::default_instance() {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Config>(arena);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfcompile.Config)
  feed_.Clear();
  fetch_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfcompile.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfcompile.Feed feed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.tfcompile.Fetch fetch = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fetch()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfcompile.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfcompile.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfcompile.Config)
  // repeated .tensorflow.tfcompile.Feed feed = 1;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feed(i), output);
  }

  // repeated .tensorflow.tfcompile.Fetch fetch = 2;
  for (unsigned int i = 0, n = this->fetch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fetch(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfcompile.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfcompile.Config)
  // repeated .tensorflow.tfcompile.Feed feed = 1;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->feed(i), false, target);
  }

  // repeated .tensorflow.tfcompile.Fetch fetch = 2;
  for (unsigned int i = 0, n = this->fetch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->fetch(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfcompile.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfcompile.Config)
  size_t total_size = 0;

  // repeated .tensorflow.tfcompile.Feed feed = 1;
  {
    unsigned int count = this->feed_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feed(i));
    }
  }

  // repeated .tensorflow.tfcompile.Fetch fetch = 2;
  {
    unsigned int count = this->fetch_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfcompile.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfcompile.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfcompile.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfcompile.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfcompile.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfcompile.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Config* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Config::UnsafeArenaSwap(Config* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2faot_2ftfcompile_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// repeated .tensorflow.tfcompile.Feed feed = 1;
int Config::feed_size() const {
  return feed_.size();
}
void Config::clear_feed() {
  feed_.Clear();
}
const ::tensorflow::tfcompile::Feed& Config::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Config.feed)
  return feed_.Get(index);
}
::tensorflow::tfcompile::Feed* Config::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Config.feed)
  return feed_.Mutable(index);
}
::tensorflow::tfcompile::Feed* Config::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.tfcompile.Config.feed)
  return feed_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfcompile::Feed >*
Config::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfcompile.Config.feed)
  return &feed_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfcompile::Feed >&
Config::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfcompile.Config.feed)
  return feed_;
}

// repeated .tensorflow.tfcompile.Fetch fetch = 2;
int Config::fetch_size() const {
  return fetch_.size();
}
void Config::clear_fetch() {
  fetch_.Clear();
}
const ::tensorflow::tfcompile::Fetch& Config::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfcompile.Config.fetch)
  return fetch_.Get(index);
}
::tensorflow::tfcompile::Fetch* Config::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfcompile.Config.fetch)
  return fetch_.Mutable(index);
}
::tensorflow::tfcompile::Fetch* Config::add_fetch() {
  // @@protoc_insertion_point(field_add:tensorflow.tfcompile.Config.fetch)
  return fetch_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfcompile::Fetch >*
Config::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfcompile.Config.fetch)
  return &fetch_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfcompile::Fetch >&
Config::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfcompile.Config.fetch)
  return fetch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfcompile
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
