// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/xla_data.proto

#ifndef PROTOBUF_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace xla {
class BinaryOpRequest;
class BinaryOpRequestDefaultTypeInternal;
extern BinaryOpRequestDefaultTypeInternal _BinaryOpRequest_default_instance_;
class BroadcastRequest;
class BroadcastRequestDefaultTypeInternal;
extern BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
class CallRequest;
class CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class ChannelHandle;
class ChannelHandleDefaultTypeInternal;
extern ChannelHandleDefaultTypeInternal _ChannelHandle_default_instance_;
class ComputationDataHandle;
class ComputationDataHandleDefaultTypeInternal;
extern ComputationDataHandleDefaultTypeInternal _ComputationDataHandle_default_instance_;
class ComputationHandle;
class ComputationHandleDefaultTypeInternal;
extern ComputationHandleDefaultTypeInternal _ComputationHandle_default_instance_;
class ComputationStats;
class ComputationStatsDefaultTypeInternal;
extern ComputationStatsDefaultTypeInternal _ComputationStats_default_instance_;
class ConcatenateRequest;
class ConcatenateRequestDefaultTypeInternal;
extern ConcatenateRequestDefaultTypeInternal _ConcatenateRequest_default_instance_;
class ConstantRequest;
class ConstantRequestDefaultTypeInternal;
extern ConstantRequestDefaultTypeInternal _ConstantRequest_default_instance_;
class ConvertRequest;
class ConvertRequestDefaultTypeInternal;
extern ConvertRequestDefaultTypeInternal _ConvertRequest_default_instance_;
class ConvolutionDimensionNumbers;
class ConvolutionDimensionNumbersDefaultTypeInternal;
extern ConvolutionDimensionNumbersDefaultTypeInternal _ConvolutionDimensionNumbers_default_instance_;
class ConvolveRequest;
class ConvolveRequestDefaultTypeInternal;
extern ConvolveRequestDefaultTypeInternal _ConvolveRequest_default_instance_;
class CrossReplicaSumRequest;
class CrossReplicaSumRequestDefaultTypeInternal;
extern CrossReplicaSumRequestDefaultTypeInternal _CrossReplicaSumRequest_default_instance_;
class CustomCallRequest;
class CustomCallRequestDefaultTypeInternal;
extern CustomCallRequestDefaultTypeInternal _CustomCallRequest_default_instance_;
class DeviceHandle;
class DeviceHandleDefaultTypeInternal;
extern DeviceHandleDefaultTypeInternal _DeviceHandle_default_instance_;
class DynamicSliceRequest;
class DynamicSliceRequestDefaultTypeInternal;
extern DynamicSliceRequestDefaultTypeInternal _DynamicSliceRequest_default_instance_;
class DynamicUpdateSliceRequest;
class DynamicUpdateSliceRequestDefaultTypeInternal;
extern DynamicUpdateSliceRequestDefaultTypeInternal _DynamicUpdateSliceRequest_default_instance_;
class ExecutionHandle;
class ExecutionHandleDefaultTypeInternal;
extern ExecutionHandleDefaultTypeInternal _ExecutionHandle_default_instance_;
class ExecutionProfile;
class ExecutionProfileDefaultTypeInternal;
extern ExecutionProfileDefaultTypeInternal _ExecutionProfile_default_instance_;
class GetLocalShapeRequest;
class GetLocalShapeRequestDefaultTypeInternal;
extern GetLocalShapeRequestDefaultTypeInternal _GetLocalShapeRequest_default_instance_;
class GetLocalShapeResponse;
class GetLocalShapeResponseDefaultTypeInternal;
extern GetLocalShapeResponseDefaultTypeInternal _GetLocalShapeResponse_default_instance_;
class GetTupleElementRequest;
class GetTupleElementRequestDefaultTypeInternal;
extern GetTupleElementRequestDefaultTypeInternal _GetTupleElementRequest_default_instance_;
class GlobalDataHandle;
class GlobalDataHandleDefaultTypeInternal;
extern GlobalDataHandleDefaultTypeInternal _GlobalDataHandle_default_instance_;
class InfeedRequest;
class InfeedRequestDefaultTypeInternal;
extern InfeedRequestDefaultTypeInternal _InfeedRequest_default_instance_;
class Layout;
class LayoutDefaultTypeInternal;
extern LayoutDefaultTypeInternal _Layout_default_instance_;
class Literal;
class LiteralDefaultTypeInternal;
extern LiteralDefaultTypeInternal _Literal_default_instance_;
class MapRequest;
class MapRequestDefaultTypeInternal;
extern MapRequestDefaultTypeInternal _MapRequest_default_instance_;
class OpMetadata;
class OpMetadataDefaultTypeInternal;
extern OpMetadataDefaultTypeInternal _OpMetadata_default_instance_;
class OpRequest;
class OpRequestDefaultTypeInternal;
extern OpRequestDefaultTypeInternal _OpRequest_default_instance_;
class OpResponse;
class OpResponseDefaultTypeInternal;
extern OpResponseDefaultTypeInternal _OpResponse_default_instance_;
class OutfeedRequest;
class OutfeedRequestDefaultTypeInternal;
extern OutfeedRequestDefaultTypeInternal _OutfeedRequest_default_instance_;
class PadRequest;
class PadRequestDefaultTypeInternal;
extern PadRequestDefaultTypeInternal _PadRequest_default_instance_;
class PaddingConfig;
class PaddingConfigDefaultTypeInternal;
extern PaddingConfigDefaultTypeInternal _PaddingConfig_default_instance_;
class PaddingConfig_PaddingConfigDimension;
class PaddingConfig_PaddingConfigDimensionDefaultTypeInternal;
extern PaddingConfig_PaddingConfigDimensionDefaultTypeInternal _PaddingConfig_PaddingConfigDimension_default_instance_;
class ParameterRequest;
class ParameterRequestDefaultTypeInternal;
extern ParameterRequestDefaultTypeInternal _ParameterRequest_default_instance_;
class ProgramShape;
class ProgramShapeDefaultTypeInternal;
extern ProgramShapeDefaultTypeInternal _ProgramShape_default_instance_;
class RecvRequest;
class RecvRequestDefaultTypeInternal;
extern RecvRequestDefaultTypeInternal _RecvRequest_default_instance_;
class ReduceRequest;
class ReduceRequestDefaultTypeInternal;
extern ReduceRequestDefaultTypeInternal _ReduceRequest_default_instance_;
class ReduceWindowRequest;
class ReduceWindowRequestDefaultTypeInternal;
extern ReduceWindowRequestDefaultTypeInternal _ReduceWindowRequest_default_instance_;
class ReshapeRequest;
class ReshapeRequestDefaultTypeInternal;
extern ReshapeRequestDefaultTypeInternal _ReshapeRequest_default_instance_;
class ReverseRequest;
class ReverseRequestDefaultTypeInternal;
extern ReverseRequestDefaultTypeInternal _ReverseRequest_default_instance_;
class RngRequest;
class RngRequestDefaultTypeInternal;
extern RngRequestDefaultTypeInternal _RngRequest_default_instance_;
class SelectAndScatterRequest;
class SelectAndScatterRequestDefaultTypeInternal;
extern SelectAndScatterRequestDefaultTypeInternal _SelectAndScatterRequest_default_instance_;
class SendRequest;
class SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class SliceRequest;
class SliceRequestDefaultTypeInternal;
extern SliceRequestDefaultTypeInternal _SliceRequest_default_instance_;
class TernaryOpRequest;
class TernaryOpRequestDefaultTypeInternal;
extern TernaryOpRequestDefaultTypeInternal _TernaryOpRequest_default_instance_;
class TraceRequest;
class TraceRequestDefaultTypeInternal;
extern TraceRequestDefaultTypeInternal _TraceRequest_default_instance_;
class TransposeRequest;
class TransposeRequestDefaultTypeInternal;
extern TransposeRequestDefaultTypeInternal _TransposeRequest_default_instance_;
class UnaryOpRequest;
class UnaryOpRequestDefaultTypeInternal;
extern UnaryOpRequestDefaultTypeInternal _UnaryOpRequest_default_instance_;
class VariadicOpRequest;
class VariadicOpRequestDefaultTypeInternal;
extern VariadicOpRequestDefaultTypeInternal _VariadicOpRequest_default_instance_;
class WhileRequest;
class WhileRequestDefaultTypeInternal;
extern WhileRequestDefaultTypeInternal _WhileRequest_default_instance_;
class Window;
class WindowDefaultTypeInternal;
extern WindowDefaultTypeInternal _Window_default_instance_;
class WindowDimension;
class WindowDimensionDefaultTypeInternal;
extern WindowDimensionDefaultTypeInternal _WindowDimension_default_instance_;
}  // namespace xla

namespace xla {

namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto

enum PrimitiveType {
  PRIMITIVE_TYPE_INVALID = 0,
  PRED = 1,
  S8 = 2,
  S16 = 3,
  S32 = 4,
  S64 = 5,
  U8 = 6,
  U16 = 7,
  U32 = 8,
  U64 = 9,
  F16 = 10,
  F32 = 11,
  F64 = 12,
  TUPLE = 13,
  OPAQUE = 14,
  PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PrimitiveType_IsValid(int value);
const PrimitiveType PrimitiveType_MIN = PRIMITIVE_TYPE_INVALID;
const PrimitiveType PrimitiveType_MAX = OPAQUE;
const int PrimitiveType_ARRAYSIZE = PrimitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrimitiveType_descriptor();
inline const ::std::string& PrimitiveType_Name(PrimitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrimitiveType_descriptor(), value);
}
inline bool PrimitiveType_Parse(
    const ::std::string& name, PrimitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrimitiveType>(
    PrimitiveType_descriptor(), name, value);
}
enum PaddingValue {
  INVALID_PAD = 0,
  ZERO_PAD = 1,
  ONE_PAD = 2,
  LOWEST_PAD = 3,
  HIGHEST_PAD = 4,
  UNKNOWN_PAD = 5,
  PaddingValue_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PaddingValue_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PaddingValue_IsValid(int value);
const PaddingValue PaddingValue_MIN = INVALID_PAD;
const PaddingValue PaddingValue_MAX = UNKNOWN_PAD;
const int PaddingValue_ARRAYSIZE = PaddingValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* PaddingValue_descriptor();
inline const ::std::string& PaddingValue_Name(PaddingValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    PaddingValue_descriptor(), value);
}
inline bool PaddingValue_Parse(
    const ::std::string& name, PaddingValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PaddingValue>(
    PaddingValue_descriptor(), name, value);
}
enum UnaryOperation {
  UNOP_INVALID = 0,
  UNOP_LOGICAL_NOT = 1,
  UNOP_EXP = 2,
  UNOP_NEGATE = 3,
  UNOP_SORT = 4,
  UNOP_TANH = 5,
  UNOP_LOG = 6,
  UNOP_FLOOR = 7,
  UNOP_CEIL = 8,
  UNOP_ABS = 9,
  UNOP_SIGN = 10,
  UNOP_IS_FINITE = 11,
  UnaryOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UnaryOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UnaryOperation_IsValid(int value);
const UnaryOperation UnaryOperation_MIN = UNOP_INVALID;
const UnaryOperation UnaryOperation_MAX = UNOP_IS_FINITE;
const int UnaryOperation_ARRAYSIZE = UnaryOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnaryOperation_descriptor();
inline const ::std::string& UnaryOperation_Name(UnaryOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnaryOperation_descriptor(), value);
}
inline bool UnaryOperation_Parse(
    const ::std::string& name, UnaryOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnaryOperation>(
    UnaryOperation_descriptor(), name, value);
}
enum BinaryOperation {
  BINOP_INVALID = 0,
  BINOP_ADD = 1,
  BINOP_DIV = 2,
  BINOP_MUL = 3,
  BINOP_SUB = 4,
  BINOP_EQ = 5,
  BINOP_GE = 6,
  BINOP_GT = 7,
  BINOP_LE = 8,
  BINOP_LT = 9,
  BINOP_NE = 10,
  BINOP_DOT = 12,
  BINOP_INDEX = 13,
  BINOP_MAX = 14,
  BINOP_MIN = 15,
  BINOP_POW = 16,
  BINOP_REM = 17,
  BINOP_LOGICAL_AND = 18,
  BINOP_LOGICAL_OR = 19,
  BinaryOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BinaryOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BinaryOperation_IsValid(int value);
const BinaryOperation BinaryOperation_MIN = BINOP_INVALID;
const BinaryOperation BinaryOperation_MAX = BINOP_LOGICAL_OR;
const int BinaryOperation_ARRAYSIZE = BinaryOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* BinaryOperation_descriptor();
inline const ::std::string& BinaryOperation_Name(BinaryOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    BinaryOperation_descriptor(), value);
}
inline bool BinaryOperation_Parse(
    const ::std::string& name, BinaryOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BinaryOperation>(
    BinaryOperation_descriptor(), name, value);
}
enum RandomDistribution {
  RNG_INVALID = 0,
  RNG_UNIFORM = 1,
  RNG_NORMAL = 2,
  RNG_BERNOULLI = 3,
  RandomDistribution_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RandomDistribution_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RandomDistribution_IsValid(int value);
const RandomDistribution RandomDistribution_MIN = RNG_INVALID;
const RandomDistribution RandomDistribution_MAX = RNG_BERNOULLI;
const int RandomDistribution_ARRAYSIZE = RandomDistribution_MAX + 1;

const ::google::protobuf::EnumDescriptor* RandomDistribution_descriptor();
inline const ::std::string& RandomDistribution_Name(RandomDistribution value) {
  return ::google::protobuf::internal::NameOfEnum(
    RandomDistribution_descriptor(), value);
}
inline bool RandomDistribution_Parse(
    const ::std::string& name, RandomDistribution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RandomDistribution>(
    RandomDistribution_descriptor(), name, value);
}
enum TernaryOperation {
  TRIOP_INVALID = 0,
  TRIOP_SELECT = 1,
  TRIOP_UPDATE = 2,
  TRIOP_CLAMP = 3,
  TernaryOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TernaryOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TernaryOperation_IsValid(int value);
const TernaryOperation TernaryOperation_MIN = TRIOP_INVALID;
const TernaryOperation TernaryOperation_MAX = TRIOP_CLAMP;
const int TernaryOperation_ARRAYSIZE = TernaryOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* TernaryOperation_descriptor();
inline const ::std::string& TernaryOperation_Name(TernaryOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    TernaryOperation_descriptor(), value);
}
inline bool TernaryOperation_Parse(
    const ::std::string& name, TernaryOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TernaryOperation>(
    TernaryOperation_descriptor(), name, value);
}
enum VariadicOperation {
  VAROP_INVALID = 0,
  VAROP_TUPLE = 1,
  VariadicOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VariadicOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VariadicOperation_IsValid(int value);
const VariadicOperation VariadicOperation_MIN = VAROP_INVALID;
const VariadicOperation VariadicOperation_MAX = VAROP_TUPLE;
const int VariadicOperation_ARRAYSIZE = VariadicOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* VariadicOperation_descriptor();
inline const ::std::string& VariadicOperation_Name(VariadicOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    VariadicOperation_descriptor(), value);
}
inline bool VariadicOperation_Parse(
    const ::std::string& name, VariadicOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VariadicOperation>(
    VariadicOperation_descriptor(), name, value);
}
// ===================================================================

class PaddingConfig_PaddingConfigDimension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.PaddingConfig.PaddingConfigDimension) */ {
 public:
  PaddingConfig_PaddingConfigDimension();
  virtual ~PaddingConfig_PaddingConfigDimension();

  PaddingConfig_PaddingConfigDimension(const PaddingConfig_PaddingConfigDimension& from);

  inline PaddingConfig_PaddingConfigDimension& operator=(const PaddingConfig_PaddingConfigDimension& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PaddingConfig_PaddingConfigDimension& default_instance();

  static inline const PaddingConfig_PaddingConfigDimension* internal_default_instance() {
    return reinterpret_cast<const PaddingConfig_PaddingConfigDimension*>(
               &_PaddingConfig_PaddingConfigDimension_default_instance_);
  }

  void UnsafeArenaSwap(PaddingConfig_PaddingConfigDimension* other);
  void Swap(PaddingConfig_PaddingConfigDimension* other);

  // implements Message ----------------------------------------------

  inline PaddingConfig_PaddingConfigDimension* New() const PROTOBUF_FINAL { return New(NULL); }

  PaddingConfig_PaddingConfigDimension* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PaddingConfig_PaddingConfigDimension& from);
  void MergeFrom(const PaddingConfig_PaddingConfigDimension& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PaddingConfig_PaddingConfigDimension* other);
  protected:
  explicit PaddingConfig_PaddingConfigDimension(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 edge_padding_low = 1;
  void clear_edge_padding_low();
  static const int kEdgePaddingLowFieldNumber = 1;
  ::google::protobuf::int64 edge_padding_low() const;
  void set_edge_padding_low(::google::protobuf::int64 value);

  // int64 edge_padding_high = 2;
  void clear_edge_padding_high();
  static const int kEdgePaddingHighFieldNumber = 2;
  ::google::protobuf::int64 edge_padding_high() const;
  void set_edge_padding_high(::google::protobuf::int64 value);

  // int64 interior_padding = 3;
  void clear_interior_padding();
  static const int kInteriorPaddingFieldNumber = 3;
  ::google::protobuf::int64 interior_padding() const;
  void set_interior_padding(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.PaddingConfig.PaddingConfigDimension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 edge_padding_low_;
  ::google::protobuf::int64 edge_padding_high_;
  ::google::protobuf::int64 interior_padding_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PaddingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.PaddingConfig) */ {
 public:
  PaddingConfig();
  virtual ~PaddingConfig();

  PaddingConfig(const PaddingConfig& from);

  inline PaddingConfig& operator=(const PaddingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PaddingConfig& default_instance();

  static inline const PaddingConfig* internal_default_instance() {
    return reinterpret_cast<const PaddingConfig*>(
               &_PaddingConfig_default_instance_);
  }

  void UnsafeArenaSwap(PaddingConfig* other);
  void Swap(PaddingConfig* other);

  // implements Message ----------------------------------------------

  inline PaddingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PaddingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PaddingConfig& from);
  void MergeFrom(const PaddingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PaddingConfig* other);
  protected:
  explicit PaddingConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PaddingConfig_PaddingConfigDimension PaddingConfigDimension;

  // accessors -------------------------------------------------------

  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 1;
  const ::xla::PaddingConfig_PaddingConfigDimension& dimensions(int index) const;
  ::xla::PaddingConfig_PaddingConfigDimension* mutable_dimensions(int index);
  ::xla::PaddingConfig_PaddingConfigDimension* add_dimensions();
  ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >*
      mutable_dimensions();
  const ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >&
      dimensions() const;

  // @@protoc_insertion_point(class_scope:xla.PaddingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension > dimensions_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Layout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.Layout) */ {
 public:
  Layout();
  virtual ~Layout();

  Layout(const Layout& from);

  inline Layout& operator=(const Layout& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Layout& default_instance();

  static inline const Layout* internal_default_instance() {
    return reinterpret_cast<const Layout*>(
               &_Layout_default_instance_);
  }

  void UnsafeArenaSwap(Layout* other);
  void Swap(Layout* other);

  // implements Message ----------------------------------------------

  inline Layout* New() const PROTOBUF_FINAL { return New(NULL); }

  Layout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layout& from);
  void MergeFrom(const Layout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layout* other);
  protected:
  explicit Layout(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 minor_to_major = 1;
  int minor_to_major_size() const;
  void clear_minor_to_major();
  static const int kMinorToMajorFieldNumber = 1;
  ::google::protobuf::int64 minor_to_major(int index) const;
  void set_minor_to_major(int index, ::google::protobuf::int64 value);
  void add_minor_to_major(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      minor_to_major() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_minor_to_major();

  // repeated int64 padded_dimensions = 2;
  int padded_dimensions_size() const;
  void clear_padded_dimensions();
  static const int kPaddedDimensionsFieldNumber = 2;
  ::google::protobuf::int64 padded_dimensions(int index) const;
  void set_padded_dimensions(int index, ::google::protobuf::int64 value);
  void add_padded_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      padded_dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_padded_dimensions();

  // .xla.PaddingValue padding_value = 3;
  void clear_padding_value();
  static const int kPaddingValueFieldNumber = 3;
  ::xla::PaddingValue padding_value() const;
  void set_padding_value(::xla::PaddingValue value);

  // @@protoc_insertion_point(class_scope:xla.Layout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > minor_to_major_;
  mutable int _minor_to_major_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > padded_dimensions_;
  mutable int _padded_dimensions_cached_byte_size_;
  int padding_value_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }

  void UnsafeArenaSwap(Shape* other);
  void Swap(Shape* other);

  // implements Message ----------------------------------------------

  inline Shape* New() const PROTOBUF_FINAL { return New(NULL); }

  Shape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shape* other);
  protected:
  explicit Shape(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dimensions = 3;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 3;
  ::google::protobuf::int64 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int64 value);
  void add_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dimensions();

  // repeated .xla.Shape tuple_shapes = 4;
  int tuple_shapes_size() const;
  void clear_tuple_shapes();
  static const int kTupleShapesFieldNumber = 4;
  const ::xla::Shape& tuple_shapes(int index) const;
  ::xla::Shape* mutable_tuple_shapes(int index);
  ::xla::Shape* add_tuple_shapes();
  ::google::protobuf::RepeatedPtrField< ::xla::Shape >*
      mutable_tuple_shapes();
  const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
      tuple_shapes() const;

  // .xla.Layout layout = 5;
  bool has_layout() const;
  void clear_layout();
  static const int kLayoutFieldNumber = 5;
  private:
  void _slow_mutable_layout();
  void _slow_set_allocated_layout(
      ::google::protobuf::Arena* message_arena, ::xla::Layout** layout);
  ::xla::Layout* _slow_release_layout();
  public:
  const ::xla::Layout& layout() const;
  ::xla::Layout* mutable_layout();
  ::xla::Layout* release_layout();
  void set_allocated_layout(::xla::Layout* layout);
  ::xla::Layout* unsafe_arena_release_layout();
  void unsafe_arena_set_allocated_layout(
      ::xla::Layout* layout);

  // .xla.PrimitiveType element_type = 2;
  void clear_element_type();
  static const int kElementTypeFieldNumber = 2;
  ::xla::PrimitiveType element_type() const;
  void set_element_type(::xla::PrimitiveType value);

  // @@protoc_insertion_point(class_scope:xla.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::xla::Shape > tuple_shapes_;
  ::xla::Layout* layout_;
  int element_type_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ProgramShape) */ {
 public:
  ProgramShape();
  virtual ~ProgramShape();

  ProgramShape(const ProgramShape& from);

  inline ProgramShape& operator=(const ProgramShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramShape& default_instance();

  static inline const ProgramShape* internal_default_instance() {
    return reinterpret_cast<const ProgramShape*>(
               &_ProgramShape_default_instance_);
  }

  void UnsafeArenaSwap(ProgramShape* other);
  void Swap(ProgramShape* other);

  // implements Message ----------------------------------------------

  inline ProgramShape* New() const PROTOBUF_FINAL { return New(NULL); }

  ProgramShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProgramShape& from);
  void MergeFrom(const ProgramShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProgramShape* other);
  protected:
  explicit ProgramShape(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.Shape parameters = 1;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  const ::xla::Shape& parameters(int index) const;
  ::xla::Shape* mutable_parameters(int index);
  ::xla::Shape* add_parameters();
  ::google::protobuf::RepeatedPtrField< ::xla::Shape >*
      mutable_parameters();
  const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
      parameters() const;

  // repeated string parameter_names = 3;
  int parameter_names_size() const;
  void clear_parameter_names();
  static const int kParameterNamesFieldNumber = 3;
  const ::std::string& parameter_names(int index) const;
  ::std::string* mutable_parameter_names(int index);
  void set_parameter_names(int index, const ::std::string& value);
  void set_parameter_names(int index, const char* value);
  void set_parameter_names(int index, const char* value, size_t size);
  ::std::string* add_parameter_names();
  void add_parameter_names(const ::std::string& value);
  void add_parameter_names(const char* value);
  void add_parameter_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parameter_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameter_names();

  // .xla.Shape result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  private:
  void _slow_mutable_result();
  void _slow_set_allocated_result(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** result);
  ::xla::Shape* _slow_release_result();
  public:
  const ::xla::Shape& result() const;
  ::xla::Shape* mutable_result();
  ::xla::Shape* release_result();
  void set_allocated_result(::xla::Shape* result);
  ::xla::Shape* unsafe_arena_release_result();
  void unsafe_arena_set_allocated_result(
      ::xla::Shape* result);

  // @@protoc_insertion_point(class_scope:xla.ProgramShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::Shape > parameters_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameter_names_;
  ::xla::Shape* result_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputationStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ComputationStats) */ {
 public:
  ComputationStats();
  virtual ~ComputationStats();

  ComputationStats(const ComputationStats& from);

  inline ComputationStats& operator=(const ComputationStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputationStats& default_instance();

  static inline const ComputationStats* internal_default_instance() {
    return reinterpret_cast<const ComputationStats*>(
               &_ComputationStats_default_instance_);
  }

  void UnsafeArenaSwap(ComputationStats* other);
  void Swap(ComputationStats* other);

  // implements Message ----------------------------------------------

  inline ComputationStats* New() const PROTOBUF_FINAL { return New(NULL); }

  ComputationStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComputationStats& from);
  void MergeFrom(const ComputationStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComputationStats* other);
  protected:
  explicit ComputationStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double flop_count = 1;
  void clear_flop_count();
  static const int kFlopCountFieldNumber = 1;
  double flop_count() const;
  void set_flop_count(double value);

  // double transcendental_count = 2;
  void clear_transcendental_count();
  static const int kTranscendentalCountFieldNumber = 2;
  double transcendental_count() const;
  void set_transcendental_count(double value);

  // @@protoc_insertion_point(class_scope:xla.ComputationStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double flop_count_;
  double transcendental_count_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.OpMetadata) */ {
 public:
  OpMetadata();
  virtual ~OpMetadata();

  OpMetadata(const OpMetadata& from);

  inline OpMetadata& operator=(const OpMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpMetadata& default_instance();

  static inline const OpMetadata* internal_default_instance() {
    return reinterpret_cast<const OpMetadata*>(
               &_OpMetadata_default_instance_);
  }

  void UnsafeArenaSwap(OpMetadata* other);
  void Swap(OpMetadata* other);

  // implements Message ----------------------------------------------

  inline OpMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  OpMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpMetadata& from);
  void MergeFrom(const OpMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpMetadata* other);
  protected:
  explicit OpMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string op_type = 1;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  const ::std::string& op_type() const;
  void set_op_type(const ::std::string& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  ::std::string* mutable_op_type();
  ::std::string* release_op_type();
  void set_allocated_op_type(::std::string* op_type);
  ::std::string* unsafe_arena_release_op_type();
  void unsafe_arena_set_allocated_op_type(
      ::std::string* op_type);

  // string op_name = 2;
  void clear_op_name();
  static const int kOpNameFieldNumber = 2;
  const ::std::string& op_name() const;
  void set_op_name(const ::std::string& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  ::std::string* mutable_op_name();
  ::std::string* release_op_name();
  void set_allocated_op_name(::std::string* op_name);
  ::std::string* unsafe_arena_release_op_name();
  void unsafe_arena_set_allocated_op_name(
      ::std::string* op_name);

  // string source_file = 3;
  void clear_source_file();
  static const int kSourceFileFieldNumber = 3;
  const ::std::string& source_file() const;
  void set_source_file(const ::std::string& value);
  void set_source_file(const char* value);
  void set_source_file(const char* value, size_t size);
  ::std::string* mutable_source_file();
  ::std::string* release_source_file();
  void set_allocated_source_file(::std::string* source_file);
  ::std::string* unsafe_arena_release_source_file();
  void unsafe_arena_set_allocated_source_file(
      ::std::string* source_file);

  // int32 source_line = 4;
  void clear_source_line();
  static const int kSourceLineFieldNumber = 4;
  ::google::protobuf::int32 source_line() const;
  void set_source_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xla.OpMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr op_type_;
  ::google::protobuf::internal::ArenaStringPtr op_name_;
  ::google::protobuf::internal::ArenaStringPtr source_file_;
  ::google::protobuf::int32 source_line_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecutionProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ExecutionProfile) */ {
 public:
  ExecutionProfile();
  virtual ~ExecutionProfile();

  ExecutionProfile(const ExecutionProfile& from);

  inline ExecutionProfile& operator=(const ExecutionProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionProfile& default_instance();

  static inline const ExecutionProfile* internal_default_instance() {
    return reinterpret_cast<const ExecutionProfile*>(
               &_ExecutionProfile_default_instance_);
  }

  void UnsafeArenaSwap(ExecutionProfile* other);
  void Swap(ExecutionProfile* other);

  // implements Message ----------------------------------------------

  inline ExecutionProfile* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionProfile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionProfile& from);
  void MergeFrom(const ExecutionProfile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionProfile* other);
  protected:
  explicit ExecutionProfile(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 compile_time_ms = 2;
  void clear_compile_time_ms();
  static const int kCompileTimeMsFieldNumber = 2;
  ::google::protobuf::int64 compile_time_ms() const;
  void set_compile_time_ms(::google::protobuf::int64 value);

  // int64 compute_cycle_count = 3;
  void clear_compute_cycle_count();
  static const int kComputeCycleCountFieldNumber = 3;
  ::google::protobuf::int64 compute_cycle_count() const;
  void set_compute_cycle_count(::google::protobuf::int64 value);

  // int64 compute_time_ns = 4;
  void clear_compute_time_ns();
  static const int kComputeTimeNsFieldNumber = 4;
  ::google::protobuf::int64 compute_time_ns() const;
  void set_compute_time_ns(::google::protobuf::int64 value);

  // int64 compute_and_transfer_time_ns = 5;
  void clear_compute_and_transfer_time_ns();
  static const int kComputeAndTransferTimeNsFieldNumber = 5;
  ::google::protobuf::int64 compute_and_transfer_time_ns() const;
  void set_compute_and_transfer_time_ns(::google::protobuf::int64 value);

  // bool compilation_cache_hit = 1;
  void clear_compilation_cache_hit();
  static const int kCompilationCacheHitFieldNumber = 1;
  bool compilation_cache_hit() const;
  void set_compilation_cache_hit(bool value);

  // @@protoc_insertion_point(class_scope:xla.ExecutionProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 compile_time_ms_;
  ::google::protobuf::int64 compute_cycle_count_;
  ::google::protobuf::int64 compute_time_ns_;
  ::google::protobuf::int64 compute_and_transfer_time_ns_;
  bool compilation_cache_hit_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputationHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ComputationHandle) */ {
 public:
  ComputationHandle();
  virtual ~ComputationHandle();

  ComputationHandle(const ComputationHandle& from);

  inline ComputationHandle& operator=(const ComputationHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputationHandle& default_instance();

  static inline const ComputationHandle* internal_default_instance() {
    return reinterpret_cast<const ComputationHandle*>(
               &_ComputationHandle_default_instance_);
  }

  void UnsafeArenaSwap(ComputationHandle* other);
  void Swap(ComputationHandle* other);

  // implements Message ----------------------------------------------

  inline ComputationHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  ComputationHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComputationHandle& from);
  void MergeFrom(const ComputationHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComputationHandle* other);
  protected:
  explicit ComputationHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ComputationHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecutionHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ExecutionHandle) */ {
 public:
  ExecutionHandle();
  virtual ~ExecutionHandle();

  ExecutionHandle(const ExecutionHandle& from);

  inline ExecutionHandle& operator=(const ExecutionHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionHandle& default_instance();

  static inline const ExecutionHandle* internal_default_instance() {
    return reinterpret_cast<const ExecutionHandle*>(
               &_ExecutionHandle_default_instance_);
  }

  void UnsafeArenaSwap(ExecutionHandle* other);
  void Swap(ExecutionHandle* other);

  // implements Message ----------------------------------------------

  inline ExecutionHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionHandle& from);
  void MergeFrom(const ExecutionHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionHandle* other);
  protected:
  explicit ExecutionHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ExecutionHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalDataHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.GlobalDataHandle) */ {
 public:
  GlobalDataHandle();
  virtual ~GlobalDataHandle();

  GlobalDataHandle(const GlobalDataHandle& from);

  inline GlobalDataHandle& operator=(const GlobalDataHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDataHandle& default_instance();

  static inline const GlobalDataHandle* internal_default_instance() {
    return reinterpret_cast<const GlobalDataHandle*>(
               &_GlobalDataHandle_default_instance_);
  }

  void UnsafeArenaSwap(GlobalDataHandle* other);
  void Swap(GlobalDataHandle* other);

  // implements Message ----------------------------------------------

  inline GlobalDataHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalDataHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalDataHandle& from);
  void MergeFrom(const GlobalDataHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalDataHandle* other);
  protected:
  explicit GlobalDataHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.GlobalDataHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputationDataHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ComputationDataHandle) */ {
 public:
  ComputationDataHandle();
  virtual ~ComputationDataHandle();

  ComputationDataHandle(const ComputationDataHandle& from);

  inline ComputationDataHandle& operator=(const ComputationDataHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputationDataHandle& default_instance();

  static inline const ComputationDataHandle* internal_default_instance() {
    return reinterpret_cast<const ComputationDataHandle*>(
               &_ComputationDataHandle_default_instance_);
  }

  void UnsafeArenaSwap(ComputationDataHandle* other);
  void Swap(ComputationDataHandle* other);

  // implements Message ----------------------------------------------

  inline ComputationDataHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  ComputationDataHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComputationDataHandle& from);
  void MergeFrom(const ComputationDataHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComputationDataHandle* other);
  protected:
  explicit ComputationDataHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ComputationDataHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.DeviceHandle) */ {
 public:
  DeviceHandle();
  virtual ~DeviceHandle();

  DeviceHandle(const DeviceHandle& from);

  inline DeviceHandle& operator=(const DeviceHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceHandle& default_instance();

  static inline const DeviceHandle* internal_default_instance() {
    return reinterpret_cast<const DeviceHandle*>(
               &_DeviceHandle_default_instance_);
  }

  void UnsafeArenaSwap(DeviceHandle* other);
  void Swap(DeviceHandle* other);

  // implements Message ----------------------------------------------

  inline DeviceHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceHandle& from);
  void MergeFrom(const DeviceHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceHandle* other);
  protected:
  explicit DeviceHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.DeviceHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ChannelHandle) */ {
 public:
  ChannelHandle();
  virtual ~ChannelHandle();

  ChannelHandle(const ChannelHandle& from);

  inline ChannelHandle& operator=(const ChannelHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelHandle& default_instance();

  static inline const ChannelHandle* internal_default_instance() {
    return reinterpret_cast<const ChannelHandle*>(
               &_ChannelHandle_default_instance_);
  }

  void UnsafeArenaSwap(ChannelHandle* other);
  void Swap(ChannelHandle* other);

  // implements Message ----------------------------------------------

  inline ChannelHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelHandle& from);
  void MergeFrom(const ChannelHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelHandle* other);
  protected:
  explicit ChannelHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ChannelHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Literal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.Literal) */ {
 public:
  Literal();
  virtual ~Literal();

  Literal(const Literal& from);

  inline Literal& operator=(const Literal& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Literal& default_instance();

  static inline const Literal* internal_default_instance() {
    return reinterpret_cast<const Literal*>(
               &_Literal_default_instance_);
  }

  void UnsafeArenaSwap(Literal* other);
  void Swap(Literal* other);

  // implements Message ----------------------------------------------

  inline Literal* New() const PROTOBUF_FINAL { return New(NULL); }

  Literal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Literal& from);
  void MergeFrom(const Literal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Literal* other);
  protected:
  explicit Literal(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool preds = 2;
  int preds_size() const;
  void clear_preds();
  static const int kPredsFieldNumber = 2;
  bool preds(int index) const;
  void set_preds(int index, bool value);
  void add_preds(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      preds() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_preds();

  // repeated int32 s32s = 4;
  int s32s_size() const;
  void clear_s32s();
  static const int kS32SFieldNumber = 4;
  ::google::protobuf::int32 s32s(int index) const;
  void set_s32s(int index, ::google::protobuf::int32 value);
  void add_s32s(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s32s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s32s();

  // repeated int64 s64s = 5;
  int s64s_size() const;
  void clear_s64s();
  static const int kS64SFieldNumber = 5;
  ::google::protobuf::int64 s64s(int index) const;
  void set_s64s(int index, ::google::protobuf::int64 value);
  void add_s64s(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      s64s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_s64s();

  // repeated uint32 u32s = 6;
  int u32s_size() const;
  void clear_u32s();
  static const int kU32SFieldNumber = 6;
  ::google::protobuf::uint32 u32s(int index) const;
  void set_u32s(int index, ::google::protobuf::uint32 value);
  void add_u32s(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      u32s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_u32s();

  // repeated uint64 u64s = 7;
  int u64s_size() const;
  void clear_u64s();
  static const int kU64SFieldNumber = 7;
  ::google::protobuf::uint64 u64s(int index) const;
  void set_u64s(int index, ::google::protobuf::uint64 value);
  void add_u64s(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      u64s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_u64s();

  // repeated float f32s = 8;
  int f32s_size() const;
  void clear_f32s();
  static const int kF32SFieldNumber = 8;
  float f32s(int index) const;
  void set_f32s(int index, float value);
  void add_f32s(float value);
  const ::google::protobuf::RepeatedField< float >&
      f32s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_f32s();

  // repeated double f64s = 9;
  int f64s_size() const;
  void clear_f64s();
  static const int kF64SFieldNumber = 9;
  double f64s(int index) const;
  void set_f64s(int index, double value);
  void add_f64s(double value);
  const ::google::protobuf::RepeatedField< double >&
      f64s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_f64s();

  // repeated .xla.Literal tuple_literals = 10;
  int tuple_literals_size() const;
  void clear_tuple_literals();
  static const int kTupleLiteralsFieldNumber = 10;
  const ::xla::Literal& tuple_literals(int index) const;
  ::xla::Literal* mutable_tuple_literals(int index);
  ::xla::Literal* add_tuple_literals();
  ::google::protobuf::RepeatedPtrField< ::xla::Literal >*
      mutable_tuple_literals();
  const ::google::protobuf::RepeatedPtrField< ::xla::Literal >&
      tuple_literals() const;

  // bytes u8s = 3;
  void clear_u8s();
  static const int kU8SFieldNumber = 3;
  const ::std::string& u8s() const;
  void set_u8s(const ::std::string& value);
  void set_u8s(const char* value);
  void set_u8s(const void* value, size_t size);
  ::std::string* mutable_u8s();
  ::std::string* release_u8s();
  void set_allocated_u8s(::std::string* u8s);
  ::std::string* unsafe_arena_release_u8s();
  void unsafe_arena_set_allocated_u8s(
      ::std::string* u8s);

  // .xla.Shape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // @@protoc_insertion_point(class_scope:xla.Literal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< bool > preds_;
  mutable int _preds_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s32s_;
  mutable int _s32s_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > s64s_;
  mutable int _s64s_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > u32s_;
  mutable int _u32s_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > u64s_;
  mutable int _u64s_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > f32s_;
  mutable int _f32s_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > f64s_;
  mutable int _f64s_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::xla::Literal > tuple_literals_;
  ::google::protobuf::internal::ArenaStringPtr u8s_;
  ::xla::Shape* shape_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WindowDimension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.WindowDimension) */ {
 public:
  WindowDimension();
  virtual ~WindowDimension();

  WindowDimension(const WindowDimension& from);

  inline WindowDimension& operator=(const WindowDimension& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDimension& default_instance();

  static inline const WindowDimension* internal_default_instance() {
    return reinterpret_cast<const WindowDimension*>(
               &_WindowDimension_default_instance_);
  }

  void UnsafeArenaSwap(WindowDimension* other);
  void Swap(WindowDimension* other);

  // implements Message ----------------------------------------------

  inline WindowDimension* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowDimension* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WindowDimension& from);
  void MergeFrom(const WindowDimension& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WindowDimension* other);
  protected:
  explicit WindowDimension(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // int64 stride = 2;
  void clear_stride();
  static const int kStrideFieldNumber = 2;
  ::google::protobuf::int64 stride() const;
  void set_stride(::google::protobuf::int64 value);

  // int64 padding_low = 3;
  void clear_padding_low();
  static const int kPaddingLowFieldNumber = 3;
  ::google::protobuf::int64 padding_low() const;
  void set_padding_low(::google::protobuf::int64 value);

  // int64 padding_high = 4;
  void clear_padding_high();
  static const int kPaddingHighFieldNumber = 4;
  ::google::protobuf::int64 padding_high() const;
  void set_padding_high(::google::protobuf::int64 value);

  // int64 window_dilation = 5;
  void clear_window_dilation();
  static const int kWindowDilationFieldNumber = 5;
  ::google::protobuf::int64 window_dilation() const;
  void set_window_dilation(::google::protobuf::int64 value);

  // int64 base_dilation = 6;
  void clear_base_dilation();
  static const int kBaseDilationFieldNumber = 6;
  ::google::protobuf::int64 base_dilation() const;
  void set_base_dilation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.WindowDimension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 stride_;
  ::google::protobuf::int64 padding_low_;
  ::google::protobuf::int64 padding_high_;
  ::google::protobuf::int64 window_dilation_;
  ::google::protobuf::int64 base_dilation_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Window : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.Window) */ {
 public:
  Window();
  virtual ~Window();

  Window(const Window& from);

  inline Window& operator=(const Window& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Window& default_instance();

  static inline const Window* internal_default_instance() {
    return reinterpret_cast<const Window*>(
               &_Window_default_instance_);
  }

  void UnsafeArenaSwap(Window* other);
  void Swap(Window* other);

  // implements Message ----------------------------------------------

  inline Window* New() const PROTOBUF_FINAL { return New(NULL); }

  Window* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Window& from);
  void MergeFrom(const Window& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Window* other);
  protected:
  explicit Window(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.WindowDimension dimensions = 1;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 1;
  const ::xla::WindowDimension& dimensions(int index) const;
  ::xla::WindowDimension* mutable_dimensions(int index);
  ::xla::WindowDimension* add_dimensions();
  ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >*
      mutable_dimensions();
  const ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >&
      dimensions() const;

  // @@protoc_insertion_point(class_scope:xla.Window)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension > dimensions_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConstantRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ConstantRequest) */ {
 public:
  ConstantRequest();
  virtual ~ConstantRequest();

  ConstantRequest(const ConstantRequest& from);

  inline ConstantRequest& operator=(const ConstantRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstantRequest& default_instance();

  static inline const ConstantRequest* internal_default_instance() {
    return reinterpret_cast<const ConstantRequest*>(
               &_ConstantRequest_default_instance_);
  }

  void UnsafeArenaSwap(ConstantRequest* other);
  void Swap(ConstantRequest* other);

  // implements Message ----------------------------------------------

  inline ConstantRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConstantRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConstantRequest& from);
  void MergeFrom(const ConstantRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConstantRequest* other);
  protected:
  explicit ConstantRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.Literal literal = 2;
  bool has_literal() const;
  void clear_literal();
  static const int kLiteralFieldNumber = 2;
  private:
  void _slow_mutable_literal();
  void _slow_set_allocated_literal(
      ::google::protobuf::Arena* message_arena, ::xla::Literal** literal);
  ::xla::Literal* _slow_release_literal();
  public:
  const ::xla::Literal& literal() const;
  ::xla::Literal* mutable_literal();
  ::xla::Literal* release_literal();
  void set_allocated_literal(::xla::Literal* literal);
  ::xla::Literal* unsafe_arena_release_literal();
  void unsafe_arena_set_allocated_literal(
      ::xla::Literal* literal);

  // @@protoc_insertion_point(class_scope:xla.ConstantRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::Literal* literal_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTupleElementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.GetTupleElementRequest) */ {
 public:
  GetTupleElementRequest();
  virtual ~GetTupleElementRequest();

  GetTupleElementRequest(const GetTupleElementRequest& from);

  inline GetTupleElementRequest& operator=(const GetTupleElementRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTupleElementRequest& default_instance();

  static inline const GetTupleElementRequest* internal_default_instance() {
    return reinterpret_cast<const GetTupleElementRequest*>(
               &_GetTupleElementRequest_default_instance_);
  }

  void UnsafeArenaSwap(GetTupleElementRequest* other);
  void Swap(GetTupleElementRequest* other);

  // implements Message ----------------------------------------------

  inline GetTupleElementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTupleElementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTupleElementRequest& from);
  void MergeFrom(const GetTupleElementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTupleElementRequest* other);
  protected:
  explicit GetTupleElementRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // int64 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.GetTupleElementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::google::protobuf::int64 index_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SliceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.SliceRequest) */ {
 public:
  SliceRequest();
  virtual ~SliceRequest();

  SliceRequest(const SliceRequest& from);

  inline SliceRequest& operator=(const SliceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceRequest& default_instance();

  static inline const SliceRequest* internal_default_instance() {
    return reinterpret_cast<const SliceRequest*>(
               &_SliceRequest_default_instance_);
  }

  void UnsafeArenaSwap(SliceRequest* other);
  void Swap(SliceRequest* other);

  // implements Message ----------------------------------------------

  inline SliceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SliceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SliceRequest& from);
  void MergeFrom(const SliceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SliceRequest* other);
  protected:
  explicit SliceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 start_indices = 3;
  int start_indices_size() const;
  void clear_start_indices();
  static const int kStartIndicesFieldNumber = 3;
  ::google::protobuf::int64 start_indices(int index) const;
  void set_start_indices(int index, ::google::protobuf::int64 value);
  void add_start_indices(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      start_indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_start_indices();

  // repeated int64 limit_indices = 4;
  int limit_indices_size() const;
  void clear_limit_indices();
  static const int kLimitIndicesFieldNumber = 4;
  ::google::protobuf::int64 limit_indices(int index) const;
  void set_limit_indices(int index, ::google::protobuf::int64 value);
  void add_limit_indices(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      limit_indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_limit_indices();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.SliceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > start_indices_;
  mutable int _start_indices_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > limit_indices_;
  mutable int _limit_indices_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynamicSliceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.DynamicSliceRequest) */ {
 public:
  DynamicSliceRequest();
  virtual ~DynamicSliceRequest();

  DynamicSliceRequest(const DynamicSliceRequest& from);

  inline DynamicSliceRequest& operator=(const DynamicSliceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicSliceRequest& default_instance();

  static inline const DynamicSliceRequest* internal_default_instance() {
    return reinterpret_cast<const DynamicSliceRequest*>(
               &_DynamicSliceRequest_default_instance_);
  }

  void UnsafeArenaSwap(DynamicSliceRequest* other);
  void Swap(DynamicSliceRequest* other);

  // implements Message ----------------------------------------------

  inline DynamicSliceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DynamicSliceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DynamicSliceRequest& from);
  void MergeFrom(const DynamicSliceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DynamicSliceRequest* other);
  protected:
  explicit DynamicSliceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 slice_sizes = 4;
  int slice_sizes_size() const;
  void clear_slice_sizes();
  static const int kSliceSizesFieldNumber = 4;
  ::google::protobuf::int64 slice_sizes(int index) const;
  void set_slice_sizes(int index, ::google::protobuf::int64 value);
  void add_slice_sizes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      slice_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_slice_sizes();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle start_indices = 3;
  bool has_start_indices() const;
  void clear_start_indices();
  static const int kStartIndicesFieldNumber = 3;
  private:
  void _slow_mutable_start_indices();
  void _slow_set_allocated_start_indices(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** start_indices);
  ::xla::ComputationDataHandle* _slow_release_start_indices();
  public:
  const ::xla::ComputationDataHandle& start_indices() const;
  ::xla::ComputationDataHandle* mutable_start_indices();
  ::xla::ComputationDataHandle* release_start_indices();
  void set_allocated_start_indices(::xla::ComputationDataHandle* start_indices);
  ::xla::ComputationDataHandle* unsafe_arena_release_start_indices();
  void unsafe_arena_set_allocated_start_indices(
      ::xla::ComputationDataHandle* start_indices);

  // @@protoc_insertion_point(class_scope:xla.DynamicSliceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > slice_sizes_;
  mutable int _slice_sizes_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* start_indices_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynamicUpdateSliceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.DynamicUpdateSliceRequest) */ {
 public:
  DynamicUpdateSliceRequest();
  virtual ~DynamicUpdateSliceRequest();

  DynamicUpdateSliceRequest(const DynamicUpdateSliceRequest& from);

  inline DynamicUpdateSliceRequest& operator=(const DynamicUpdateSliceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicUpdateSliceRequest& default_instance();

  static inline const DynamicUpdateSliceRequest* internal_default_instance() {
    return reinterpret_cast<const DynamicUpdateSliceRequest*>(
               &_DynamicUpdateSliceRequest_default_instance_);
  }

  void UnsafeArenaSwap(DynamicUpdateSliceRequest* other);
  void Swap(DynamicUpdateSliceRequest* other);

  // implements Message ----------------------------------------------

  inline DynamicUpdateSliceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DynamicUpdateSliceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DynamicUpdateSliceRequest& from);
  void MergeFrom(const DynamicUpdateSliceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DynamicUpdateSliceRequest* other);
  protected:
  explicit DynamicUpdateSliceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle update = 3;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 3;
  private:
  void _slow_mutable_update();
  void _slow_set_allocated_update(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** update);
  ::xla::ComputationDataHandle* _slow_release_update();
  public:
  const ::xla::ComputationDataHandle& update() const;
  ::xla::ComputationDataHandle* mutable_update();
  ::xla::ComputationDataHandle* release_update();
  void set_allocated_update(::xla::ComputationDataHandle* update);
  ::xla::ComputationDataHandle* unsafe_arena_release_update();
  void unsafe_arena_set_allocated_update(
      ::xla::ComputationDataHandle* update);

  // .xla.ComputationDataHandle start_indices = 4;
  bool has_start_indices() const;
  void clear_start_indices();
  static const int kStartIndicesFieldNumber = 4;
  private:
  void _slow_mutable_start_indices();
  void _slow_set_allocated_start_indices(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** start_indices);
  ::xla::ComputationDataHandle* _slow_release_start_indices();
  public:
  const ::xla::ComputationDataHandle& start_indices() const;
  ::xla::ComputationDataHandle* mutable_start_indices();
  ::xla::ComputationDataHandle* release_start_indices();
  void set_allocated_start_indices(::xla::ComputationDataHandle* start_indices);
  ::xla::ComputationDataHandle* unsafe_arena_release_start_indices();
  void unsafe_arena_set_allocated_start_indices(
      ::xla::ComputationDataHandle* start_indices);

  // @@protoc_insertion_point(class_scope:xla.DynamicUpdateSliceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* update_;
  ::xla::ComputationDataHandle* start_indices_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionDimensionNumbers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ConvolutionDimensionNumbers) */ {
 public:
  ConvolutionDimensionNumbers();
  virtual ~ConvolutionDimensionNumbers();

  ConvolutionDimensionNumbers(const ConvolutionDimensionNumbers& from);

  inline ConvolutionDimensionNumbers& operator=(const ConvolutionDimensionNumbers& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionDimensionNumbers& default_instance();

  static inline const ConvolutionDimensionNumbers* internal_default_instance() {
    return reinterpret_cast<const ConvolutionDimensionNumbers*>(
               &_ConvolutionDimensionNumbers_default_instance_);
  }

  void UnsafeArenaSwap(ConvolutionDimensionNumbers* other);
  void Swap(ConvolutionDimensionNumbers* other);

  // implements Message ----------------------------------------------

  inline ConvolutionDimensionNumbers* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionDimensionNumbers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionDimensionNumbers& from);
  void MergeFrom(const ConvolutionDimensionNumbers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionDimensionNumbers* other);
  protected:
  explicit ConvolutionDimensionNumbers(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 spatial_dimensions = 5;
  int spatial_dimensions_size() const;
  void clear_spatial_dimensions();
  static const int kSpatialDimensionsFieldNumber = 5;
  ::google::protobuf::int64 spatial_dimensions(int index) const;
  void set_spatial_dimensions(int index, ::google::protobuf::int64 value);
  void add_spatial_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      spatial_dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_spatial_dimensions();

  // repeated int64 kernel_spatial_dimensions = 6;
  int kernel_spatial_dimensions_size() const;
  void clear_kernel_spatial_dimensions();
  static const int kKernelSpatialDimensionsFieldNumber = 6;
  ::google::protobuf::int64 kernel_spatial_dimensions(int index) const;
  void set_kernel_spatial_dimensions(int index, ::google::protobuf::int64 value);
  void add_kernel_spatial_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      kernel_spatial_dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_kernel_spatial_dimensions();

  // int64 batch_dimension = 1;
  void clear_batch_dimension();
  static const int kBatchDimensionFieldNumber = 1;
  ::google::protobuf::int64 batch_dimension() const;
  void set_batch_dimension(::google::protobuf::int64 value);

  // int64 feature_dimension = 2;
  void clear_feature_dimension();
  static const int kFeatureDimensionFieldNumber = 2;
  ::google::protobuf::int64 feature_dimension() const;
  void set_feature_dimension(::google::protobuf::int64 value);

  // int64 kernel_input_feature_dimension = 3;
  void clear_kernel_input_feature_dimension();
  static const int kKernelInputFeatureDimensionFieldNumber = 3;
  ::google::protobuf::int64 kernel_input_feature_dimension() const;
  void set_kernel_input_feature_dimension(::google::protobuf::int64 value);

  // int64 kernel_output_feature_dimension = 4;
  void clear_kernel_output_feature_dimension();
  static const int kKernelOutputFeatureDimensionFieldNumber = 4;
  ::google::protobuf::int64 kernel_output_feature_dimension() const;
  void set_kernel_output_feature_dimension(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ConvolutionDimensionNumbers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > spatial_dimensions_;
  mutable int _spatial_dimensions_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > kernel_spatial_dimensions_;
  mutable int _kernel_spatial_dimensions_cached_byte_size_;
  ::google::protobuf::int64 batch_dimension_;
  ::google::protobuf::int64 feature_dimension_;
  ::google::protobuf::int64 kernel_input_feature_dimension_;
  ::google::protobuf::int64 kernel_output_feature_dimension_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ConvolveRequest) */ {
 public:
  ConvolveRequest();
  virtual ~ConvolveRequest();

  ConvolveRequest(const ConvolveRequest& from);

  inline ConvolveRequest& operator=(const ConvolveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolveRequest& default_instance();

  static inline const ConvolveRequest* internal_default_instance() {
    return reinterpret_cast<const ConvolveRequest*>(
               &_ConvolveRequest_default_instance_);
  }

  void UnsafeArenaSwap(ConvolveRequest* other);
  void Swap(ConvolveRequest* other);

  // implements Message ----------------------------------------------

  inline ConvolveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolveRequest& from);
  void MergeFrom(const ConvolveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolveRequest* other);
  protected:
  explicit ConvolveRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle lhs = 2;
  bool has_lhs() const;
  void clear_lhs();
  static const int kLhsFieldNumber = 2;
  private:
  void _slow_mutable_lhs();
  void _slow_set_allocated_lhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs);
  ::xla::ComputationDataHandle* _slow_release_lhs();
  public:
  const ::xla::ComputationDataHandle& lhs() const;
  ::xla::ComputationDataHandle* mutable_lhs();
  ::xla::ComputationDataHandle* release_lhs();
  void set_allocated_lhs(::xla::ComputationDataHandle* lhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_lhs();
  void unsafe_arena_set_allocated_lhs(
      ::xla::ComputationDataHandle* lhs);

  // .xla.ComputationDataHandle rhs = 3;
  bool has_rhs() const;
  void clear_rhs();
  static const int kRhsFieldNumber = 3;
  private:
  void _slow_mutable_rhs();
  void _slow_set_allocated_rhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs);
  ::xla::ComputationDataHandle* _slow_release_rhs();
  public:
  const ::xla::ComputationDataHandle& rhs() const;
  ::xla::ComputationDataHandle* mutable_rhs();
  ::xla::ComputationDataHandle* release_rhs();
  void set_allocated_rhs(::xla::ComputationDataHandle* rhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_rhs();
  void unsafe_arena_set_allocated_rhs(
      ::xla::ComputationDataHandle* rhs);

  // .xla.Window window = 4;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 4;
  private:
  void _slow_mutable_window();
  void _slow_set_allocated_window(
      ::google::protobuf::Arena* message_arena, ::xla::Window** window);
  ::xla::Window* _slow_release_window();
  public:
  const ::xla::Window& window() const;
  ::xla::Window* mutable_window();
  ::xla::Window* release_window();
  void set_allocated_window(::xla::Window* window);
  ::xla::Window* unsafe_arena_release_window();
  void unsafe_arena_set_allocated_window(
      ::xla::Window* window);

  // .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
  bool has_dimension_numbers() const;
  void clear_dimension_numbers();
  static const int kDimensionNumbersFieldNumber = 5;
  private:
  void _slow_mutable_dimension_numbers();
  void _slow_set_allocated_dimension_numbers(
      ::google::protobuf::Arena* message_arena, ::xla::ConvolutionDimensionNumbers** dimension_numbers);
  ::xla::ConvolutionDimensionNumbers* _slow_release_dimension_numbers();
  public:
  const ::xla::ConvolutionDimensionNumbers& dimension_numbers() const;
  ::xla::ConvolutionDimensionNumbers* mutable_dimension_numbers();
  ::xla::ConvolutionDimensionNumbers* release_dimension_numbers();
  void set_allocated_dimension_numbers(::xla::ConvolutionDimensionNumbers* dimension_numbers);
  ::xla::ConvolutionDimensionNumbers* unsafe_arena_release_dimension_numbers();
  void unsafe_arena_set_allocated_dimension_numbers(
      ::xla::ConvolutionDimensionNumbers* dimension_numbers);

  // @@protoc_insertion_point(class_scope:xla.ConvolveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* lhs_;
  ::xla::ComputationDataHandle* rhs_;
  ::xla::Window* window_;
  ::xla::ConvolutionDimensionNumbers* dimension_numbers_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfeedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.InfeedRequest) */ {
 public:
  InfeedRequest();
  virtual ~InfeedRequest();

  InfeedRequest(const InfeedRequest& from);

  inline InfeedRequest& operator=(const InfeedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfeedRequest& default_instance();

  static inline const InfeedRequest* internal_default_instance() {
    return reinterpret_cast<const InfeedRequest*>(
               &_InfeedRequest_default_instance_);
  }

  void UnsafeArenaSwap(InfeedRequest* other);
  void Swap(InfeedRequest* other);

  // implements Message ----------------------------------------------

  inline InfeedRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InfeedRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfeedRequest& from);
  void MergeFrom(const InfeedRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfeedRequest* other);
  protected:
  explicit InfeedRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes config = 3;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);
  ::std::string* unsafe_arena_release_config();
  void unsafe_arena_set_allocated_config(
      ::std::string* config);

  // .xla.Shape shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // @@protoc_insertion_point(class_scope:xla.InfeedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::xla::Shape* shape_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutfeedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.OutfeedRequest) */ {
 public:
  OutfeedRequest();
  virtual ~OutfeedRequest();

  OutfeedRequest(const OutfeedRequest& from);

  inline OutfeedRequest& operator=(const OutfeedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutfeedRequest& default_instance();

  static inline const OutfeedRequest* internal_default_instance() {
    return reinterpret_cast<const OutfeedRequest*>(
               &_OutfeedRequest_default_instance_);
  }

  void UnsafeArenaSwap(OutfeedRequest* other);
  void Swap(OutfeedRequest* other);

  // implements Message ----------------------------------------------

  inline OutfeedRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  OutfeedRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutfeedRequest& from);
  void MergeFrom(const OutfeedRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutfeedRequest* other);
  protected:
  explicit OutfeedRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes outfeed_config = 3;
  void clear_outfeed_config();
  static const int kOutfeedConfigFieldNumber = 3;
  const ::std::string& outfeed_config() const;
  void set_outfeed_config(const ::std::string& value);
  void set_outfeed_config(const char* value);
  void set_outfeed_config(const void* value, size_t size);
  ::std::string* mutable_outfeed_config();
  ::std::string* release_outfeed_config();
  void set_allocated_outfeed_config(::std::string* outfeed_config);
  ::std::string* unsafe_arena_release_outfeed_config();
  void unsafe_arena_set_allocated_outfeed_config(
      ::std::string* outfeed_config);

  // .xla.Shape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.OutfeedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr outfeed_config_;
  ::xla::Shape* shape_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.CallRequest) */ {
 public:
  CallRequest();
  virtual ~CallRequest();

  CallRequest(const CallRequest& from);

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRequest& default_instance();

  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }

  void UnsafeArenaSwap(CallRequest* other);
  void Swap(CallRequest* other);

  // implements Message ----------------------------------------------

  inline CallRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CallRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallRequest& from);
  void MergeFrom(const CallRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallRequest* other);
  protected:
  explicit CallRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle operands = 3;
  int operands_size() const;
  void clear_operands();
  static const int kOperandsFieldNumber = 3;
  const ::xla::ComputationDataHandle& operands(int index) const;
  ::xla::ComputationDataHandle* mutable_operands(int index);
  ::xla::ComputationDataHandle* add_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      operands() const;

  // .xla.ComputationHandle to_apply = 2;
  bool has_to_apply() const;
  void clear_to_apply();
  static const int kToApplyFieldNumber = 2;
  private:
  void _slow_mutable_to_apply();
  void _slow_set_allocated_to_apply(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply);
  ::xla::ComputationHandle* _slow_release_to_apply();
  public:
  const ::xla::ComputationHandle& to_apply() const;
  ::xla::ComputationHandle* mutable_to_apply();
  ::xla::ComputationHandle* release_to_apply();
  void set_allocated_to_apply(::xla::ComputationHandle* to_apply);
  ::xla::ComputationHandle* unsafe_arena_release_to_apply();
  void unsafe_arena_set_allocated_to_apply(
      ::xla::ComputationHandle* to_apply);

  // @@protoc_insertion_point(class_scope:xla.CallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > operands_;
  ::xla::ComputationHandle* to_apply_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomCallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.CustomCallRequest) */ {
 public:
  CustomCallRequest();
  virtual ~CustomCallRequest();

  CustomCallRequest(const CustomCallRequest& from);

  inline CustomCallRequest& operator=(const CustomCallRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomCallRequest& default_instance();

  static inline const CustomCallRequest* internal_default_instance() {
    return reinterpret_cast<const CustomCallRequest*>(
               &_CustomCallRequest_default_instance_);
  }

  void UnsafeArenaSwap(CustomCallRequest* other);
  void Swap(CustomCallRequest* other);

  // implements Message ----------------------------------------------

  inline CustomCallRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomCallRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomCallRequest& from);
  void MergeFrom(const CustomCallRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomCallRequest* other);
  protected:
  explicit CustomCallRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle operands = 3;
  int operands_size() const;
  void clear_operands();
  static const int kOperandsFieldNumber = 3;
  const ::xla::ComputationDataHandle& operands(int index) const;
  ::xla::ComputationDataHandle* mutable_operands(int index);
  ::xla::ComputationDataHandle* add_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      operands() const;

  // string call_target_name = 2;
  void clear_call_target_name();
  static const int kCallTargetNameFieldNumber = 2;
  const ::std::string& call_target_name() const;
  void set_call_target_name(const ::std::string& value);
  void set_call_target_name(const char* value);
  void set_call_target_name(const char* value, size_t size);
  ::std::string* mutable_call_target_name();
  ::std::string* release_call_target_name();
  void set_allocated_call_target_name(::std::string* call_target_name);
  ::std::string* unsafe_arena_release_call_target_name();
  void unsafe_arena_set_allocated_call_target_name(
      ::std::string* call_target_name);

  // .xla.Shape shape = 4;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // @@protoc_insertion_point(class_scope:xla.CustomCallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > operands_;
  ::google::protobuf::internal::ArenaStringPtr call_target_name_;
  ::xla::Shape* shape_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.MapRequest) */ {
 public:
  MapRequest();
  virtual ~MapRequest();

  MapRequest(const MapRequest& from);

  inline MapRequest& operator=(const MapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapRequest& default_instance();

  static inline const MapRequest* internal_default_instance() {
    return reinterpret_cast<const MapRequest*>(
               &_MapRequest_default_instance_);
  }

  void UnsafeArenaSwap(MapRequest* other);
  void Swap(MapRequest* other);

  // implements Message ----------------------------------------------

  inline MapRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MapRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapRequest& from);
  void MergeFrom(const MapRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapRequest* other);
  protected:
  explicit MapRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle operands = 2;
  int operands_size() const;
  void clear_operands();
  static const int kOperandsFieldNumber = 2;
  const ::xla::ComputationDataHandle& operands(int index) const;
  ::xla::ComputationDataHandle* mutable_operands(int index);
  ::xla::ComputationDataHandle* add_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      operands() const;

  // repeated .xla.ComputationDataHandle static_operands = 4;
  int static_operands_size() const;
  void clear_static_operands();
  static const int kStaticOperandsFieldNumber = 4;
  const ::xla::ComputationDataHandle& static_operands(int index) const;
  ::xla::ComputationDataHandle* mutable_static_operands(int index);
  ::xla::ComputationDataHandle* add_static_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_static_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      static_operands() const;

  // .xla.ComputationHandle to_apply = 3;
  bool has_to_apply() const;
  void clear_to_apply();
  static const int kToApplyFieldNumber = 3;
  private:
  void _slow_mutable_to_apply();
  void _slow_set_allocated_to_apply(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply);
  ::xla::ComputationHandle* _slow_release_to_apply();
  public:
  const ::xla::ComputationHandle& to_apply() const;
  ::xla::ComputationHandle* mutable_to_apply();
  ::xla::ComputationHandle* release_to_apply();
  void set_allocated_to_apply(::xla::ComputationHandle* to_apply);
  ::xla::ComputationHandle* unsafe_arena_release_to_apply();
  void unsafe_arena_set_allocated_to_apply(
      ::xla::ComputationHandle* to_apply);

  // @@protoc_insertion_point(class_scope:xla.MapRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > operands_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > static_operands_;
  ::xla::ComputationHandle* to_apply_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReduceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ReduceRequest) */ {
 public:
  ReduceRequest();
  virtual ~ReduceRequest();

  ReduceRequest(const ReduceRequest& from);

  inline ReduceRequest& operator=(const ReduceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReduceRequest& default_instance();

  static inline const ReduceRequest* internal_default_instance() {
    return reinterpret_cast<const ReduceRequest*>(
               &_ReduceRequest_default_instance_);
  }

  void UnsafeArenaSwap(ReduceRequest* other);
  void Swap(ReduceRequest* other);

  // implements Message ----------------------------------------------

  inline ReduceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReduceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReduceRequest& from);
  void MergeFrom(const ReduceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReduceRequest* other);
  protected:
  explicit ReduceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dimensions = 4;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 4;
  ::google::protobuf::int64 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int64 value);
  void add_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dimensions();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle init_value = 3;
  bool has_init_value() const;
  void clear_init_value();
  static const int kInitValueFieldNumber = 3;
  private:
  void _slow_mutable_init_value();
  void _slow_set_allocated_init_value(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value);
  ::xla::ComputationDataHandle* _slow_release_init_value();
  public:
  const ::xla::ComputationDataHandle& init_value() const;
  ::xla::ComputationDataHandle* mutable_init_value();
  ::xla::ComputationDataHandle* release_init_value();
  void set_allocated_init_value(::xla::ComputationDataHandle* init_value);
  ::xla::ComputationDataHandle* unsafe_arena_release_init_value();
  void unsafe_arena_set_allocated_init_value(
      ::xla::ComputationDataHandle* init_value);

  // .xla.ComputationHandle to_apply = 5;
  bool has_to_apply() const;
  void clear_to_apply();
  static const int kToApplyFieldNumber = 5;
  private:
  void _slow_mutable_to_apply();
  void _slow_set_allocated_to_apply(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply);
  ::xla::ComputationHandle* _slow_release_to_apply();
  public:
  const ::xla::ComputationHandle& to_apply() const;
  ::xla::ComputationHandle* mutable_to_apply();
  ::xla::ComputationHandle* release_to_apply();
  void set_allocated_to_apply(::xla::ComputationHandle* to_apply);
  ::xla::ComputationHandle* unsafe_arena_release_to_apply();
  void unsafe_arena_set_allocated_to_apply(
      ::xla::ComputationHandle* to_apply);

  // @@protoc_insertion_point(class_scope:xla.ReduceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* init_value_;
  ::xla::ComputationHandle* to_apply_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReduceWindowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ReduceWindowRequest) */ {
 public:
  ReduceWindowRequest();
  virtual ~ReduceWindowRequest();

  ReduceWindowRequest(const ReduceWindowRequest& from);

  inline ReduceWindowRequest& operator=(const ReduceWindowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReduceWindowRequest& default_instance();

  static inline const ReduceWindowRequest* internal_default_instance() {
    return reinterpret_cast<const ReduceWindowRequest*>(
               &_ReduceWindowRequest_default_instance_);
  }

  void UnsafeArenaSwap(ReduceWindowRequest* other);
  void Swap(ReduceWindowRequest* other);

  // implements Message ----------------------------------------------

  inline ReduceWindowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReduceWindowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReduceWindowRequest& from);
  void MergeFrom(const ReduceWindowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReduceWindowRequest* other);
  protected:
  explicit ReduceWindowRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle init_value = 3;
  bool has_init_value() const;
  void clear_init_value();
  static const int kInitValueFieldNumber = 3;
  private:
  void _slow_mutable_init_value();
  void _slow_set_allocated_init_value(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value);
  ::xla::ComputationDataHandle* _slow_release_init_value();
  public:
  const ::xla::ComputationDataHandle& init_value() const;
  ::xla::ComputationDataHandle* mutable_init_value();
  ::xla::ComputationDataHandle* release_init_value();
  void set_allocated_init_value(::xla::ComputationDataHandle* init_value);
  ::xla::ComputationDataHandle* unsafe_arena_release_init_value();
  void unsafe_arena_set_allocated_init_value(
      ::xla::ComputationDataHandle* init_value);

  // .xla.Window window = 4;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 4;
  private:
  void _slow_mutable_window();
  void _slow_set_allocated_window(
      ::google::protobuf::Arena* message_arena, ::xla::Window** window);
  ::xla::Window* _slow_release_window();
  public:
  const ::xla::Window& window() const;
  ::xla::Window* mutable_window();
  ::xla::Window* release_window();
  void set_allocated_window(::xla::Window* window);
  ::xla::Window* unsafe_arena_release_window();
  void unsafe_arena_set_allocated_window(
      ::xla::Window* window);

  // .xla.ComputationHandle to_apply = 5;
  bool has_to_apply() const;
  void clear_to_apply();
  static const int kToApplyFieldNumber = 5;
  private:
  void _slow_mutable_to_apply();
  void _slow_set_allocated_to_apply(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply);
  ::xla::ComputationHandle* _slow_release_to_apply();
  public:
  const ::xla::ComputationHandle& to_apply() const;
  ::xla::ComputationHandle* mutable_to_apply();
  ::xla::ComputationHandle* release_to_apply();
  void set_allocated_to_apply(::xla::ComputationHandle* to_apply);
  ::xla::ComputationHandle* unsafe_arena_release_to_apply();
  void unsafe_arena_set_allocated_to_apply(
      ::xla::ComputationHandle* to_apply);

  // @@protoc_insertion_point(class_scope:xla.ReduceWindowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* init_value_;
  ::xla::Window* window_;
  ::xla::ComputationHandle* to_apply_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrossReplicaSumRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.CrossReplicaSumRequest) */ {
 public:
  CrossReplicaSumRequest();
  virtual ~CrossReplicaSumRequest();

  CrossReplicaSumRequest(const CrossReplicaSumRequest& from);

  inline CrossReplicaSumRequest& operator=(const CrossReplicaSumRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossReplicaSumRequest& default_instance();

  static inline const CrossReplicaSumRequest* internal_default_instance() {
    return reinterpret_cast<const CrossReplicaSumRequest*>(
               &_CrossReplicaSumRequest_default_instance_);
  }

  void UnsafeArenaSwap(CrossReplicaSumRequest* other);
  void Swap(CrossReplicaSumRequest* other);

  // implements Message ----------------------------------------------

  inline CrossReplicaSumRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CrossReplicaSumRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrossReplicaSumRequest& from);
  void MergeFrom(const CrossReplicaSumRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrossReplicaSumRequest* other);
  protected:
  explicit CrossReplicaSumRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.CrossReplicaSumRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectAndScatterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.SelectAndScatterRequest) */ {
 public:
  SelectAndScatterRequest();
  virtual ~SelectAndScatterRequest();

  SelectAndScatterRequest(const SelectAndScatterRequest& from);

  inline SelectAndScatterRequest& operator=(const SelectAndScatterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectAndScatterRequest& default_instance();

  static inline const SelectAndScatterRequest* internal_default_instance() {
    return reinterpret_cast<const SelectAndScatterRequest*>(
               &_SelectAndScatterRequest_default_instance_);
  }

  void UnsafeArenaSwap(SelectAndScatterRequest* other);
  void Swap(SelectAndScatterRequest* other);

  // implements Message ----------------------------------------------

  inline SelectAndScatterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectAndScatterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectAndScatterRequest& from);
  void MergeFrom(const SelectAndScatterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectAndScatterRequest* other);
  protected:
  explicit SelectAndScatterRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle source = 3;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  private:
  void _slow_mutable_source();
  void _slow_set_allocated_source(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** source);
  ::xla::ComputationDataHandle* _slow_release_source();
  public:
  const ::xla::ComputationDataHandle& source() const;
  ::xla::ComputationDataHandle* mutable_source();
  ::xla::ComputationDataHandle* release_source();
  void set_allocated_source(::xla::ComputationDataHandle* source);
  ::xla::ComputationDataHandle* unsafe_arena_release_source();
  void unsafe_arena_set_allocated_source(
      ::xla::ComputationDataHandle* source);

  // .xla.ComputationDataHandle init_value = 4;
  bool has_init_value() const;
  void clear_init_value();
  static const int kInitValueFieldNumber = 4;
  private:
  void _slow_mutable_init_value();
  void _slow_set_allocated_init_value(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value);
  ::xla::ComputationDataHandle* _slow_release_init_value();
  public:
  const ::xla::ComputationDataHandle& init_value() const;
  ::xla::ComputationDataHandle* mutable_init_value();
  ::xla::ComputationDataHandle* release_init_value();
  void set_allocated_init_value(::xla::ComputationDataHandle* init_value);
  ::xla::ComputationDataHandle* unsafe_arena_release_init_value();
  void unsafe_arena_set_allocated_init_value(
      ::xla::ComputationDataHandle* init_value);

  // .xla.Window window = 5;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 5;
  private:
  void _slow_mutable_window();
  void _slow_set_allocated_window(
      ::google::protobuf::Arena* message_arena, ::xla::Window** window);
  ::xla::Window* _slow_release_window();
  public:
  const ::xla::Window& window() const;
  ::xla::Window* mutable_window();
  ::xla::Window* release_window();
  void set_allocated_window(::xla::Window* window);
  ::xla::Window* unsafe_arena_release_window();
  void unsafe_arena_set_allocated_window(
      ::xla::Window* window);

  // .xla.ComputationHandle select = 6;
  bool has_select() const;
  void clear_select();
  static const int kSelectFieldNumber = 6;
  private:
  void _slow_mutable_select();
  void _slow_set_allocated_select(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** select);
  ::xla::ComputationHandle* _slow_release_select();
  public:
  const ::xla::ComputationHandle& select() const;
  ::xla::ComputationHandle* mutable_select();
  ::xla::ComputationHandle* release_select();
  void set_allocated_select(::xla::ComputationHandle* select);
  ::xla::ComputationHandle* unsafe_arena_release_select();
  void unsafe_arena_set_allocated_select(
      ::xla::ComputationHandle* select);

  // .xla.ComputationHandle scatter = 7;
  bool has_scatter() const;
  void clear_scatter();
  static const int kScatterFieldNumber = 7;
  private:
  void _slow_mutable_scatter();
  void _slow_set_allocated_scatter(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** scatter);
  ::xla::ComputationHandle* _slow_release_scatter();
  public:
  const ::xla::ComputationHandle& scatter() const;
  ::xla::ComputationHandle* mutable_scatter();
  ::xla::ComputationHandle* release_scatter();
  void set_allocated_scatter(::xla::ComputationHandle* scatter);
  ::xla::ComputationHandle* unsafe_arena_release_scatter();
  void unsafe_arena_set_allocated_scatter(
      ::xla::ComputationHandle* scatter);

  // @@protoc_insertion_point(class_scope:xla.SelectAndScatterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* source_;
  ::xla::ComputationDataHandle* init_value_;
  ::xla::Window* window_;
  ::xla::ComputationHandle* select_;
  ::xla::ComputationHandle* scatter_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReverseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ReverseRequest) */ {
 public:
  ReverseRequest();
  virtual ~ReverseRequest();

  ReverseRequest(const ReverseRequest& from);

  inline ReverseRequest& operator=(const ReverseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReverseRequest& default_instance();

  static inline const ReverseRequest* internal_default_instance() {
    return reinterpret_cast<const ReverseRequest*>(
               &_ReverseRequest_default_instance_);
  }

  void UnsafeArenaSwap(ReverseRequest* other);
  void Swap(ReverseRequest* other);

  // implements Message ----------------------------------------------

  inline ReverseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReverseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReverseRequest& from);
  void MergeFrom(const ReverseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReverseRequest* other);
  protected:
  explicit ReverseRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dimensions = 3;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 3;
  ::google::protobuf::int64 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int64 value);
  void add_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dimensions();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.ReverseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.BroadcastRequest) */ {
 public:
  BroadcastRequest();
  virtual ~BroadcastRequest();

  BroadcastRequest(const BroadcastRequest& from);

  inline BroadcastRequest& operator=(const BroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRequest& default_instance();

  static inline const BroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRequest*>(
               &_BroadcastRequest_default_instance_);
  }

  void UnsafeArenaSwap(BroadcastRequest* other);
  void Swap(BroadcastRequest* other);

  // implements Message ----------------------------------------------

  inline BroadcastRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastRequest& from);
  void MergeFrom(const BroadcastRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastRequest* other);
  protected:
  explicit BroadcastRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 broadcast_sizes = 3;
  int broadcast_sizes_size() const;
  void clear_broadcast_sizes();
  static const int kBroadcastSizesFieldNumber = 3;
  ::google::protobuf::int64 broadcast_sizes(int index) const;
  void set_broadcast_sizes(int index, ::google::protobuf::int64 value);
  void add_broadcast_sizes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      broadcast_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_broadcast_sizes();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.BroadcastRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > broadcast_sizes_;
  mutable int _broadcast_sizes_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.PadRequest) */ {
 public:
  PadRequest();
  virtual ~PadRequest();

  PadRequest(const PadRequest& from);

  inline PadRequest& operator=(const PadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PadRequest& default_instance();

  static inline const PadRequest* internal_default_instance() {
    return reinterpret_cast<const PadRequest*>(
               &_PadRequest_default_instance_);
  }

  void UnsafeArenaSwap(PadRequest* other);
  void Swap(PadRequest* other);

  // implements Message ----------------------------------------------

  inline PadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PadRequest& from);
  void MergeFrom(const PadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PadRequest* other);
  protected:
  explicit PadRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ComputationDataHandle padding_value = 3;
  bool has_padding_value() const;
  void clear_padding_value();
  static const int kPaddingValueFieldNumber = 3;
  private:
  void _slow_mutable_padding_value();
  void _slow_set_allocated_padding_value(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** padding_value);
  ::xla::ComputationDataHandle* _slow_release_padding_value();
  public:
  const ::xla::ComputationDataHandle& padding_value() const;
  ::xla::ComputationDataHandle* mutable_padding_value();
  ::xla::ComputationDataHandle* release_padding_value();
  void set_allocated_padding_value(::xla::ComputationDataHandle* padding_value);
  ::xla::ComputationDataHandle* unsafe_arena_release_padding_value();
  void unsafe_arena_set_allocated_padding_value(
      ::xla::ComputationDataHandle* padding_value);

  // .xla.PaddingConfig padding_config = 4;
  bool has_padding_config() const;
  void clear_padding_config();
  static const int kPaddingConfigFieldNumber = 4;
  private:
  void _slow_mutable_padding_config();
  void _slow_set_allocated_padding_config(
      ::google::protobuf::Arena* message_arena, ::xla::PaddingConfig** padding_config);
  ::xla::PaddingConfig* _slow_release_padding_config();
  public:
  const ::xla::PaddingConfig& padding_config() const;
  ::xla::PaddingConfig* mutable_padding_config();
  ::xla::PaddingConfig* release_padding_config();
  void set_allocated_padding_config(::xla::PaddingConfig* padding_config);
  ::xla::PaddingConfig* unsafe_arena_release_padding_config();
  void unsafe_arena_set_allocated_padding_config(
      ::xla::PaddingConfig* padding_config);

  // @@protoc_insertion_point(class_scope:xla.PadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ComputationDataHandle* padding_value_;
  ::xla::PaddingConfig* padding_config_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReshapeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ReshapeRequest) */ {
 public:
  ReshapeRequest();
  virtual ~ReshapeRequest();

  ReshapeRequest(const ReshapeRequest& from);

  inline ReshapeRequest& operator=(const ReshapeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeRequest& default_instance();

  static inline const ReshapeRequest* internal_default_instance() {
    return reinterpret_cast<const ReshapeRequest*>(
               &_ReshapeRequest_default_instance_);
  }

  void UnsafeArenaSwap(ReshapeRequest* other);
  void Swap(ReshapeRequest* other);

  // implements Message ----------------------------------------------

  inline ReshapeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReshapeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReshapeRequest& from);
  void MergeFrom(const ReshapeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReshapeRequest* other);
  protected:
  explicit ReshapeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dimensions = 3;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 3;
  ::google::protobuf::int64 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int64 value);
  void add_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dimensions();

  // repeated int64 new_sizes = 4;
  int new_sizes_size() const;
  void clear_new_sizes();
  static const int kNewSizesFieldNumber = 4;
  ::google::protobuf::int64 new_sizes(int index) const;
  void set_new_sizes(int index, ::google::protobuf::int64 value);
  void add_new_sizes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      new_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_new_sizes();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.ReshapeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > new_sizes_;
  mutable int _new_sizes_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransposeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.TransposeRequest) */ {
 public:
  TransposeRequest();
  virtual ~TransposeRequest();

  TransposeRequest(const TransposeRequest& from);

  inline TransposeRequest& operator=(const TransposeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransposeRequest& default_instance();

  static inline const TransposeRequest* internal_default_instance() {
    return reinterpret_cast<const TransposeRequest*>(
               &_TransposeRequest_default_instance_);
  }

  void UnsafeArenaSwap(TransposeRequest* other);
  void Swap(TransposeRequest* other);

  // implements Message ----------------------------------------------

  inline TransposeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TransposeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransposeRequest& from);
  void MergeFrom(const TransposeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransposeRequest* other);
  protected:
  explicit TransposeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dimensions = 3;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 3;
  ::google::protobuf::int64 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int64 value);
  void add_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dimensions();

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.TransposeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dimensions_;
  mutable int _dimensions_cached_byte_size_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParameterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ParameterRequest) */ {
 public:
  ParameterRequest();
  virtual ~ParameterRequest();

  ParameterRequest(const ParameterRequest& from);

  inline ParameterRequest& operator=(const ParameterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterRequest& default_instance();

  static inline const ParameterRequest* internal_default_instance() {
    return reinterpret_cast<const ParameterRequest*>(
               &_ParameterRequest_default_instance_);
  }

  void UnsafeArenaSwap(ParameterRequest* other);
  void Swap(ParameterRequest* other);

  // implements Message ----------------------------------------------

  inline ParameterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ParameterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParameterRequest& from);
  void MergeFrom(const ParameterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParameterRequest* other);
  protected:
  explicit ParameterRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .xla.Shape shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // int64 parameter = 3;
  void clear_parameter();
  static const int kParameterFieldNumber = 3;
  ::google::protobuf::int64 parameter() const;
  void set_parameter(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ParameterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::xla::Shape* shape_;
  ::google::protobuf::int64 parameter_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLocalShapeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.GetLocalShapeRequest) */ {
 public:
  GetLocalShapeRequest();
  virtual ~GetLocalShapeRequest();

  GetLocalShapeRequest(const GetLocalShapeRequest& from);

  inline GetLocalShapeRequest& operator=(const GetLocalShapeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocalShapeRequest& default_instance();

  static inline const GetLocalShapeRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocalShapeRequest*>(
               &_GetLocalShapeRequest_default_instance_);
  }

  void UnsafeArenaSwap(GetLocalShapeRequest* other);
  void Swap(GetLocalShapeRequest* other);

  // implements Message ----------------------------------------------

  inline GetLocalShapeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLocalShapeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLocalShapeRequest& from);
  void MergeFrom(const GetLocalShapeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLocalShapeRequest* other);
  protected:
  explicit GetLocalShapeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationHandle computation = 1;
  bool has_computation() const;
  void clear_computation();
  static const int kComputationFieldNumber = 1;
  private:
  void _slow_mutable_computation();
  void _slow_set_allocated_computation(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** computation);
  ::xla::ComputationHandle* _slow_release_computation();
  public:
  const ::xla::ComputationHandle& computation() const;
  ::xla::ComputationHandle* mutable_computation();
  ::xla::ComputationHandle* release_computation();
  void set_allocated_computation(::xla::ComputationHandle* computation);
  ::xla::ComputationHandle* unsafe_arena_release_computation();
  void unsafe_arena_set_allocated_computation(
      ::xla::ComputationHandle* computation);

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.GetLocalShapeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationHandle* computation_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLocalShapeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.GetLocalShapeResponse) */ {
 public:
  GetLocalShapeResponse();
  virtual ~GetLocalShapeResponse();

  GetLocalShapeResponse(const GetLocalShapeResponse& from);

  inline GetLocalShapeResponse& operator=(const GetLocalShapeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocalShapeResponse& default_instance();

  static inline const GetLocalShapeResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocalShapeResponse*>(
               &_GetLocalShapeResponse_default_instance_);
  }

  void UnsafeArenaSwap(GetLocalShapeResponse* other);
  void Swap(GetLocalShapeResponse* other);

  // implements Message ----------------------------------------------

  inline GetLocalShapeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLocalShapeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLocalShapeResponse& from);
  void MergeFrom(const GetLocalShapeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLocalShapeResponse* other);
  protected:
  explicit GetLocalShapeResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.Shape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // @@protoc_insertion_point(class_scope:xla.GetLocalShapeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::Shape* shape_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TraceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.TraceRequest) */ {
 public:
  TraceRequest();
  virtual ~TraceRequest();

  TraceRequest(const TraceRequest& from);

  inline TraceRequest& operator=(const TraceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceRequest& default_instance();

  static inline const TraceRequest* internal_default_instance() {
    return reinterpret_cast<const TraceRequest*>(
               &_TraceRequest_default_instance_);
  }

  void UnsafeArenaSwap(TraceRequest* other);
  void Swap(TraceRequest* other);

  // implements Message ----------------------------------------------

  inline TraceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TraceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TraceRequest& from);
  void MergeFrom(const TraceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TraceRequest* other);
  protected:
  explicit TraceRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tag = 2;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);
  ::std::string* unsafe_arena_release_tag();
  void unsafe_arena_set_allocated_tag(
      ::std::string* tag);

  // .xla.ComputationDataHandle operand = 3;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 3;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // @@protoc_insertion_point(class_scope:xla.TraceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::xla::ComputationDataHandle* operand_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ConvertRequest) */ {
 public:
  ConvertRequest();
  virtual ~ConvertRequest();

  ConvertRequest(const ConvertRequest& from);

  inline ConvertRequest& operator=(const ConvertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvertRequest& default_instance();

  static inline const ConvertRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertRequest*>(
               &_ConvertRequest_default_instance_);
  }

  void UnsafeArenaSwap(ConvertRequest* other);
  void Swap(ConvertRequest* other);

  // implements Message ----------------------------------------------

  inline ConvertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvertRequest& from);
  void MergeFrom(const ConvertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvertRequest* other);
  protected:
  explicit ConvertRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 2;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.PrimitiveType new_element_type = 3;
  void clear_new_element_type();
  static const int kNewElementTypeFieldNumber = 3;
  ::xla::PrimitiveType new_element_type() const;
  void set_new_element_type(::xla::PrimitiveType value);

  // @@protoc_insertion_point(class_scope:xla.ConvertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  int new_element_type_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcatenateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.ConcatenateRequest) */ {
 public:
  ConcatenateRequest();
  virtual ~ConcatenateRequest();

  ConcatenateRequest(const ConcatenateRequest& from);

  inline ConcatenateRequest& operator=(const ConcatenateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatenateRequest& default_instance();

  static inline const ConcatenateRequest* internal_default_instance() {
    return reinterpret_cast<const ConcatenateRequest*>(
               &_ConcatenateRequest_default_instance_);
  }

  void UnsafeArenaSwap(ConcatenateRequest* other);
  void Swap(ConcatenateRequest* other);

  // implements Message ----------------------------------------------

  inline ConcatenateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConcatenateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConcatenateRequest& from);
  void MergeFrom(const ConcatenateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConcatenateRequest* other);
  protected:
  explicit ConcatenateRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle operands = 2;
  int operands_size() const;
  void clear_operands();
  static const int kOperandsFieldNumber = 2;
  const ::xla::ComputationDataHandle& operands(int index) const;
  ::xla::ComputationDataHandle* mutable_operands(int index);
  ::xla::ComputationDataHandle* add_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      operands() const;

  // int64 dimension = 3;
  void clear_dimension();
  static const int kDimensionFieldNumber = 3;
  ::google::protobuf::int64 dimension() const;
  void set_dimension(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xla.ConcatenateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > operands_;
  ::google::protobuf::int64 dimension_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WhileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.WhileRequest) */ {
 public:
  WhileRequest();
  virtual ~WhileRequest();

  WhileRequest(const WhileRequest& from);

  inline WhileRequest& operator=(const WhileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WhileRequest& default_instance();

  static inline const WhileRequest* internal_default_instance() {
    return reinterpret_cast<const WhileRequest*>(
               &_WhileRequest_default_instance_);
  }

  void UnsafeArenaSwap(WhileRequest* other);
  void Swap(WhileRequest* other);

  // implements Message ----------------------------------------------

  inline WhileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WhileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WhileRequest& from);
  void MergeFrom(const WhileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WhileRequest* other);
  protected:
  explicit WhileRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationHandle condition = 2;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 2;
  private:
  void _slow_mutable_condition();
  void _slow_set_allocated_condition(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** condition);
  ::xla::ComputationHandle* _slow_release_condition();
  public:
  const ::xla::ComputationHandle& condition() const;
  ::xla::ComputationHandle* mutable_condition();
  ::xla::ComputationHandle* release_condition();
  void set_allocated_condition(::xla::ComputationHandle* condition);
  ::xla::ComputationHandle* unsafe_arena_release_condition();
  void unsafe_arena_set_allocated_condition(
      ::xla::ComputationHandle* condition);

  // .xla.ComputationHandle body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  private:
  void _slow_mutable_body();
  void _slow_set_allocated_body(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** body);
  ::xla::ComputationHandle* _slow_release_body();
  public:
  const ::xla::ComputationHandle& body() const;
  ::xla::ComputationHandle* mutable_body();
  ::xla::ComputationHandle* release_body();
  void set_allocated_body(::xla::ComputationHandle* body);
  ::xla::ComputationHandle* unsafe_arena_release_body();
  void unsafe_arena_set_allocated_body(
      ::xla::ComputationHandle* body);

  // .xla.ComputationDataHandle init = 4;
  bool has_init() const;
  void clear_init();
  static const int kInitFieldNumber = 4;
  private:
  void _slow_mutable_init();
  void _slow_set_allocated_init(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init);
  ::xla::ComputationDataHandle* _slow_release_init();
  public:
  const ::xla::ComputationDataHandle& init() const;
  ::xla::ComputationDataHandle* mutable_init();
  ::xla::ComputationDataHandle* release_init();
  void set_allocated_init(::xla::ComputationDataHandle* init);
  ::xla::ComputationDataHandle* unsafe_arena_release_init();
  void unsafe_arena_set_allocated_init(
      ::xla::ComputationDataHandle* init);

  // @@protoc_insertion_point(class_scope:xla.WhileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationHandle* condition_;
  ::xla::ComputationHandle* body_;
  ::xla::ComputationDataHandle* init_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnaryOpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.UnaryOpRequest) */ {
 public:
  UnaryOpRequest();
  virtual ~UnaryOpRequest();

  UnaryOpRequest(const UnaryOpRequest& from);

  inline UnaryOpRequest& operator=(const UnaryOpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnaryOpRequest& default_instance();

  static inline const UnaryOpRequest* internal_default_instance() {
    return reinterpret_cast<const UnaryOpRequest*>(
               &_UnaryOpRequest_default_instance_);
  }

  void UnsafeArenaSwap(UnaryOpRequest* other);
  void Swap(UnaryOpRequest* other);

  // implements Message ----------------------------------------------

  inline UnaryOpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnaryOpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnaryOpRequest& from);
  void MergeFrom(const UnaryOpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnaryOpRequest* other);
  protected:
  explicit UnaryOpRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 3;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 3;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.UnaryOperation unop = 2;
  void clear_unop();
  static const int kUnopFieldNumber = 2;
  ::xla::UnaryOperation unop() const;
  void set_unop(::xla::UnaryOperation value);

  // @@protoc_insertion_point(class_scope:xla.UnaryOpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  int unop_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinaryOpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.BinaryOpRequest) */ {
 public:
  BinaryOpRequest();
  virtual ~BinaryOpRequest();

  BinaryOpRequest(const BinaryOpRequest& from);

  inline BinaryOpRequest& operator=(const BinaryOpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryOpRequest& default_instance();

  static inline const BinaryOpRequest* internal_default_instance() {
    return reinterpret_cast<const BinaryOpRequest*>(
               &_BinaryOpRequest_default_instance_);
  }

  void UnsafeArenaSwap(BinaryOpRequest* other);
  void Swap(BinaryOpRequest* other);

  // implements Message ----------------------------------------------

  inline BinaryOpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BinaryOpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BinaryOpRequest& from);
  void MergeFrom(const BinaryOpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BinaryOpRequest* other);
  protected:
  explicit BinaryOpRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 broadcast_dimensions = 5;
  int broadcast_dimensions_size() const;
  void clear_broadcast_dimensions();
  static const int kBroadcastDimensionsFieldNumber = 5;
  ::google::protobuf::int64 broadcast_dimensions(int index) const;
  void set_broadcast_dimensions(int index, ::google::protobuf::int64 value);
  void add_broadcast_dimensions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      broadcast_dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_broadcast_dimensions();

  // .xla.ComputationDataHandle lhs = 3;
  bool has_lhs() const;
  void clear_lhs();
  static const int kLhsFieldNumber = 3;
  private:
  void _slow_mutable_lhs();
  void _slow_set_allocated_lhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs);
  ::xla::ComputationDataHandle* _slow_release_lhs();
  public:
  const ::xla::ComputationDataHandle& lhs() const;
  ::xla::ComputationDataHandle* mutable_lhs();
  ::xla::ComputationDataHandle* release_lhs();
  void set_allocated_lhs(::xla::ComputationDataHandle* lhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_lhs();
  void unsafe_arena_set_allocated_lhs(
      ::xla::ComputationDataHandle* lhs);

  // .xla.ComputationDataHandle rhs = 4;
  bool has_rhs() const;
  void clear_rhs();
  static const int kRhsFieldNumber = 4;
  private:
  void _slow_mutable_rhs();
  void _slow_set_allocated_rhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs);
  ::xla::ComputationDataHandle* _slow_release_rhs();
  public:
  const ::xla::ComputationDataHandle& rhs() const;
  ::xla::ComputationDataHandle* mutable_rhs();
  ::xla::ComputationDataHandle* release_rhs();
  void set_allocated_rhs(::xla::ComputationDataHandle* rhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_rhs();
  void unsafe_arena_set_allocated_rhs(
      ::xla::ComputationDataHandle* rhs);

  // .xla.BinaryOperation binop = 2;
  void clear_binop();
  static const int kBinopFieldNumber = 2;
  ::xla::BinaryOperation binop() const;
  void set_binop(::xla::BinaryOperation value);

  // @@protoc_insertion_point(class_scope:xla.BinaryOpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > broadcast_dimensions_;
  mutable int _broadcast_dimensions_cached_byte_size_;
  ::xla::ComputationDataHandle* lhs_;
  ::xla::ComputationDataHandle* rhs_;
  int binop_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RngRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.RngRequest) */ {
 public:
  RngRequest();
  virtual ~RngRequest();

  RngRequest(const RngRequest& from);

  inline RngRequest& operator=(const RngRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RngRequest& default_instance();

  static inline const RngRequest* internal_default_instance() {
    return reinterpret_cast<const RngRequest*>(
               &_RngRequest_default_instance_);
  }

  void UnsafeArenaSwap(RngRequest* other);
  void Swap(RngRequest* other);

  // implements Message ----------------------------------------------

  inline RngRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RngRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RngRequest& from);
  void MergeFrom(const RngRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RngRequest* other);
  protected:
  explicit RngRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle parameter = 3;
  int parameter_size() const;
  void clear_parameter();
  static const int kParameterFieldNumber = 3;
  const ::xla::ComputationDataHandle& parameter(int index) const;
  ::xla::ComputationDataHandle* mutable_parameter(int index);
  ::xla::ComputationDataHandle* add_parameter();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_parameter();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      parameter() const;

  // .xla.Shape shape = 4;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // .xla.RandomDistribution distribution = 2;
  void clear_distribution();
  static const int kDistributionFieldNumber = 2;
  ::xla::RandomDistribution distribution() const;
  void set_distribution(::xla::RandomDistribution value);

  // @@protoc_insertion_point(class_scope:xla.RngRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > parameter_;
  ::xla::Shape* shape_;
  int distribution_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TernaryOpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.TernaryOpRequest) */ {
 public:
  TernaryOpRequest();
  virtual ~TernaryOpRequest();

  TernaryOpRequest(const TernaryOpRequest& from);

  inline TernaryOpRequest& operator=(const TernaryOpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TernaryOpRequest& default_instance();

  static inline const TernaryOpRequest* internal_default_instance() {
    return reinterpret_cast<const TernaryOpRequest*>(
               &_TernaryOpRequest_default_instance_);
  }

  void UnsafeArenaSwap(TernaryOpRequest* other);
  void Swap(TernaryOpRequest* other);

  // implements Message ----------------------------------------------

  inline TernaryOpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TernaryOpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TernaryOpRequest& from);
  void MergeFrom(const TernaryOpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TernaryOpRequest* other);
  protected:
  explicit TernaryOpRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle lhs = 3;
  bool has_lhs() const;
  void clear_lhs();
  static const int kLhsFieldNumber = 3;
  private:
  void _slow_mutable_lhs();
  void _slow_set_allocated_lhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs);
  ::xla::ComputationDataHandle* _slow_release_lhs();
  public:
  const ::xla::ComputationDataHandle& lhs() const;
  ::xla::ComputationDataHandle* mutable_lhs();
  ::xla::ComputationDataHandle* release_lhs();
  void set_allocated_lhs(::xla::ComputationDataHandle* lhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_lhs();
  void unsafe_arena_set_allocated_lhs(
      ::xla::ComputationDataHandle* lhs);

  // .xla.ComputationDataHandle rhs = 4;
  bool has_rhs() const;
  void clear_rhs();
  static const int kRhsFieldNumber = 4;
  private:
  void _slow_mutable_rhs();
  void _slow_set_allocated_rhs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs);
  ::xla::ComputationDataHandle* _slow_release_rhs();
  public:
  const ::xla::ComputationDataHandle& rhs() const;
  ::xla::ComputationDataHandle* mutable_rhs();
  ::xla::ComputationDataHandle* release_rhs();
  void set_allocated_rhs(::xla::ComputationDataHandle* rhs);
  ::xla::ComputationDataHandle* unsafe_arena_release_rhs();
  void unsafe_arena_set_allocated_rhs(
      ::xla::ComputationDataHandle* rhs);

  // .xla.ComputationDataHandle ehs = 5;
  bool has_ehs() const;
  void clear_ehs();
  static const int kEhsFieldNumber = 5;
  private:
  void _slow_mutable_ehs();
  void _slow_set_allocated_ehs(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** ehs);
  ::xla::ComputationDataHandle* _slow_release_ehs();
  public:
  const ::xla::ComputationDataHandle& ehs() const;
  ::xla::ComputationDataHandle* mutable_ehs();
  ::xla::ComputationDataHandle* release_ehs();
  void set_allocated_ehs(::xla::ComputationDataHandle* ehs);
  ::xla::ComputationDataHandle* unsafe_arena_release_ehs();
  void unsafe_arena_set_allocated_ehs(
      ::xla::ComputationDataHandle* ehs);

  // .xla.TernaryOperation triop = 2;
  void clear_triop();
  static const int kTriopFieldNumber = 2;
  ::xla::TernaryOperation triop() const;
  void set_triop(::xla::TernaryOperation value);

  // @@protoc_insertion_point(class_scope:xla.TernaryOpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* lhs_;
  ::xla::ComputationDataHandle* rhs_;
  ::xla::ComputationDataHandle* ehs_;
  int triop_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VariadicOpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.VariadicOpRequest) */ {
 public:
  VariadicOpRequest();
  virtual ~VariadicOpRequest();

  VariadicOpRequest(const VariadicOpRequest& from);

  inline VariadicOpRequest& operator=(const VariadicOpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariadicOpRequest& default_instance();

  static inline const VariadicOpRequest* internal_default_instance() {
    return reinterpret_cast<const VariadicOpRequest*>(
               &_VariadicOpRequest_default_instance_);
  }

  void UnsafeArenaSwap(VariadicOpRequest* other);
  void Swap(VariadicOpRequest* other);

  // implements Message ----------------------------------------------

  inline VariadicOpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VariadicOpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VariadicOpRequest& from);
  void MergeFrom(const VariadicOpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VariadicOpRequest* other);
  protected:
  explicit VariadicOpRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ComputationDataHandle operands = 3;
  int operands_size() const;
  void clear_operands();
  static const int kOperandsFieldNumber = 3;
  const ::xla::ComputationDataHandle& operands(int index) const;
  ::xla::ComputationDataHandle* mutable_operands(int index);
  ::xla::ComputationDataHandle* add_operands();
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
      mutable_operands();
  const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
      operands() const;

  // .xla.VariadicOperation varop = 2;
  void clear_varop();
  static const int kVaropFieldNumber = 2;
  ::xla::VariadicOperation varop() const;
  void set_varop(::xla::VariadicOperation value);

  // @@protoc_insertion_point(class_scope:xla.VariadicOpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle > operands_;
  int varop_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.SendRequest) */ {
 public:
  SendRequest();
  virtual ~SendRequest();

  SendRequest(const SendRequest& from);

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRequest& default_instance();

  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }

  void UnsafeArenaSwap(SendRequest* other);
  void Swap(SendRequest* other);

  // implements Message ----------------------------------------------

  inline SendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendRequest& from);
  void MergeFrom(const SendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendRequest* other);
  protected:
  explicit SendRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle operand = 1;
  bool has_operand() const;
  void clear_operand();
  static const int kOperandFieldNumber = 1;
  private:
  void _slow_mutable_operand();
  void _slow_set_allocated_operand(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand);
  ::xla::ComputationDataHandle* _slow_release_operand();
  public:
  const ::xla::ComputationDataHandle& operand() const;
  ::xla::ComputationDataHandle* mutable_operand();
  ::xla::ComputationDataHandle* release_operand();
  void set_allocated_operand(::xla::ComputationDataHandle* operand);
  ::xla::ComputationDataHandle* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::xla::ComputationDataHandle* operand);

  // .xla.ChannelHandle channel_handle = 2;
  bool has_channel_handle() const;
  void clear_channel_handle();
  static const int kChannelHandleFieldNumber = 2;
  private:
  void _slow_mutable_channel_handle();
  void _slow_set_allocated_channel_handle(
      ::google::protobuf::Arena* message_arena, ::xla::ChannelHandle** channel_handle);
  ::xla::ChannelHandle* _slow_release_channel_handle();
  public:
  const ::xla::ChannelHandle& channel_handle() const;
  ::xla::ChannelHandle* mutable_channel_handle();
  ::xla::ChannelHandle* release_channel_handle();
  void set_allocated_channel_handle(::xla::ChannelHandle* channel_handle);
  ::xla::ChannelHandle* unsafe_arena_release_channel_handle();
  void unsafe_arena_set_allocated_channel_handle(
      ::xla::ChannelHandle* channel_handle);

  // @@protoc_insertion_point(class_scope:xla.SendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* operand_;
  ::xla::ChannelHandle* channel_handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecvRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.RecvRequest) */ {
 public:
  RecvRequest();
  virtual ~RecvRequest();

  RecvRequest(const RecvRequest& from);

  inline RecvRequest& operator=(const RecvRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecvRequest& default_instance();

  static inline const RecvRequest* internal_default_instance() {
    return reinterpret_cast<const RecvRequest*>(
               &_RecvRequest_default_instance_);
  }

  void UnsafeArenaSwap(RecvRequest* other);
  void Swap(RecvRequest* other);

  // implements Message ----------------------------------------------

  inline RecvRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RecvRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecvRequest& from);
  void MergeFrom(const RecvRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecvRequest* other);
  protected:
  explicit RecvRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.Shape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::xla::Shape** shape);
  ::xla::Shape* _slow_release_shape();
  public:
  const ::xla::Shape& shape() const;
  ::xla::Shape* mutable_shape();
  ::xla::Shape* release_shape();
  void set_allocated_shape(::xla::Shape* shape);
  ::xla::Shape* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::xla::Shape* shape);

  // .xla.ChannelHandle channel_handle = 2;
  bool has_channel_handle() const;
  void clear_channel_handle();
  static const int kChannelHandleFieldNumber = 2;
  private:
  void _slow_mutable_channel_handle();
  void _slow_set_allocated_channel_handle(
      ::google::protobuf::Arena* message_arena, ::xla::ChannelHandle** channel_handle);
  ::xla::ChannelHandle* _slow_release_channel_handle();
  public:
  const ::xla::ChannelHandle& channel_handle() const;
  ::xla::ChannelHandle* mutable_channel_handle();
  ::xla::ChannelHandle* release_channel_handle();
  void set_allocated_channel_handle(::xla::ChannelHandle* channel_handle);
  ::xla::ChannelHandle* unsafe_arena_release_channel_handle();
  void unsafe_arena_set_allocated_channel_handle(
      ::xla::ChannelHandle* channel_handle);

  // @@protoc_insertion_point(class_scope:xla.RecvRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::Shape* shape_;
  ::xla::ChannelHandle* channel_handle_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.OpRequest) */ {
 public:
  OpRequest();
  virtual ~OpRequest();

  OpRequest(const OpRequest& from);

  inline OpRequest& operator=(const OpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpRequest& default_instance();

  enum OpCase {
    kBinaryOpRequest = 2,
    kBroadcastRequest = 3,
    kCallRequest = 4,
    kConcatenateRequest = 5,
    kConstantRequest = 6,
    kConvertRequest = 7,
    kConvolveRequest = 8,
    kCrossReplicaSumRequest = 9,
    kCustomCallRequest = 10,
    kDynamicSliceRequest = 11,
    kDynamicUpdateSliceRequest = 12,
    kGetTupleElementRequest = 13,
    kInfeedRequest = 14,
    kMapRequest = 15,
    kPadRequest = 16,
    kParameterRequest = 17,
    kReduceRequest = 18,
    kReduceWindowRequest = 19,
    kReshapeRequest = 20,
    kReverseRequest = 21,
    kRngRequest = 22,
    kSelectAndScatterRequest = 23,
    kSliceRequest = 24,
    kTernaryOpRequest = 25,
    kTraceRequest = 26,
    kTransposeRequest = 34,
    kUnaryOpRequest = 27,
    kVariadicOpRequest = 28,
    kWhileRequest = 29,
    kSendRequest = 30,
    kRecvRequest = 31,
    kOutfeedRequest = 32,
    OP_NOT_SET = 0,
  };

  static inline const OpRequest* internal_default_instance() {
    return reinterpret_cast<const OpRequest*>(
               &_OpRequest_default_instance_);
  }

  void UnsafeArenaSwap(OpRequest* other);
  void Swap(OpRequest* other);

  // implements Message ----------------------------------------------

  inline OpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  OpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpRequest& from);
  void MergeFrom(const OpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpRequest* other);
  protected:
  explicit OpRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationHandle computation = 1;
  bool has_computation() const;
  void clear_computation();
  static const int kComputationFieldNumber = 1;
  private:
  void _slow_mutable_computation();
  void _slow_set_allocated_computation(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** computation);
  ::xla::ComputationHandle* _slow_release_computation();
  public:
  const ::xla::ComputationHandle& computation() const;
  ::xla::ComputationHandle* mutable_computation();
  ::xla::ComputationHandle* release_computation();
  void set_allocated_computation(::xla::ComputationHandle* computation);
  ::xla::ComputationHandle* unsafe_arena_release_computation();
  void unsafe_arena_set_allocated_computation(
      ::xla::ComputationHandle* computation);

  // .xla.OpMetadata metadata = 33;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 33;
  private:
  void _slow_mutable_metadata();
  void _slow_set_allocated_metadata(
      ::google::protobuf::Arena* message_arena, ::xla::OpMetadata** metadata);
  ::xla::OpMetadata* _slow_release_metadata();
  public:
  const ::xla::OpMetadata& metadata() const;
  ::xla::OpMetadata* mutable_metadata();
  ::xla::OpMetadata* release_metadata();
  void set_allocated_metadata(::xla::OpMetadata* metadata);
  ::xla::OpMetadata* unsafe_arena_release_metadata();
  void unsafe_arena_set_allocated_metadata(
      ::xla::OpMetadata* metadata);

  // .xla.BinaryOpRequest binary_op_request = 2;
  bool has_binary_op_request() const;
  void clear_binary_op_request();
  static const int kBinaryOpRequestFieldNumber = 2;
  private:
  void _slow_mutable_binary_op_request();
  void _slow_set_allocated_binary_op_request(
      ::google::protobuf::Arena* message_arena, ::xla::BinaryOpRequest** binary_op_request);
  ::xla::BinaryOpRequest* _slow_release_binary_op_request();
  public:
  const ::xla::BinaryOpRequest& binary_op_request() const;
  ::xla::BinaryOpRequest* mutable_binary_op_request();
  ::xla::BinaryOpRequest* release_binary_op_request();
  void set_allocated_binary_op_request(::xla::BinaryOpRequest* binary_op_request);
  ::xla::BinaryOpRequest* unsafe_arena_release_binary_op_request();
  void unsafe_arena_set_allocated_binary_op_request(
      ::xla::BinaryOpRequest* binary_op_request);

  // .xla.BroadcastRequest broadcast_request = 3;
  bool has_broadcast_request() const;
  void clear_broadcast_request();
  static const int kBroadcastRequestFieldNumber = 3;
  private:
  void _slow_mutable_broadcast_request();
  void _slow_set_allocated_broadcast_request(
      ::google::protobuf::Arena* message_arena, ::xla::BroadcastRequest** broadcast_request);
  ::xla::BroadcastRequest* _slow_release_broadcast_request();
  public:
  const ::xla::BroadcastRequest& broadcast_request() const;
  ::xla::BroadcastRequest* mutable_broadcast_request();
  ::xla::BroadcastRequest* release_broadcast_request();
  void set_allocated_broadcast_request(::xla::BroadcastRequest* broadcast_request);
  ::xla::BroadcastRequest* unsafe_arena_release_broadcast_request();
  void unsafe_arena_set_allocated_broadcast_request(
      ::xla::BroadcastRequest* broadcast_request);

  // .xla.CallRequest call_request = 4;
  bool has_call_request() const;
  void clear_call_request();
  static const int kCallRequestFieldNumber = 4;
  private:
  void _slow_mutable_call_request();
  void _slow_set_allocated_call_request(
      ::google::protobuf::Arena* message_arena, ::xla::CallRequest** call_request);
  ::xla::CallRequest* _slow_release_call_request();
  public:
  const ::xla::CallRequest& call_request() const;
  ::xla::CallRequest* mutable_call_request();
  ::xla::CallRequest* release_call_request();
  void set_allocated_call_request(::xla::CallRequest* call_request);
  ::xla::CallRequest* unsafe_arena_release_call_request();
  void unsafe_arena_set_allocated_call_request(
      ::xla::CallRequest* call_request);

  // .xla.ConcatenateRequest concatenate_request = 5;
  bool has_concatenate_request() const;
  void clear_concatenate_request();
  static const int kConcatenateRequestFieldNumber = 5;
  private:
  void _slow_mutable_concatenate_request();
  void _slow_set_allocated_concatenate_request(
      ::google::protobuf::Arena* message_arena, ::xla::ConcatenateRequest** concatenate_request);
  ::xla::ConcatenateRequest* _slow_release_concatenate_request();
  public:
  const ::xla::ConcatenateRequest& concatenate_request() const;
  ::xla::ConcatenateRequest* mutable_concatenate_request();
  ::xla::ConcatenateRequest* release_concatenate_request();
  void set_allocated_concatenate_request(::xla::ConcatenateRequest* concatenate_request);
  ::xla::ConcatenateRequest* unsafe_arena_release_concatenate_request();
  void unsafe_arena_set_allocated_concatenate_request(
      ::xla::ConcatenateRequest* concatenate_request);

  // .xla.ConstantRequest constant_request = 6;
  bool has_constant_request() const;
  void clear_constant_request();
  static const int kConstantRequestFieldNumber = 6;
  private:
  void _slow_mutable_constant_request();
  void _slow_set_allocated_constant_request(
      ::google::protobuf::Arena* message_arena, ::xla::ConstantRequest** constant_request);
  ::xla::ConstantRequest* _slow_release_constant_request();
  public:
  const ::xla::ConstantRequest& constant_request() const;
  ::xla::ConstantRequest* mutable_constant_request();
  ::xla::ConstantRequest* release_constant_request();
  void set_allocated_constant_request(::xla::ConstantRequest* constant_request);
  ::xla::ConstantRequest* unsafe_arena_release_constant_request();
  void unsafe_arena_set_allocated_constant_request(
      ::xla::ConstantRequest* constant_request);

  // .xla.ConvertRequest convert_request = 7;
  bool has_convert_request() const;
  void clear_convert_request();
  static const int kConvertRequestFieldNumber = 7;
  private:
  void _slow_mutable_convert_request();
  void _slow_set_allocated_convert_request(
      ::google::protobuf::Arena* message_arena, ::xla::ConvertRequest** convert_request);
  ::xla::ConvertRequest* _slow_release_convert_request();
  public:
  const ::xla::ConvertRequest& convert_request() const;
  ::xla::ConvertRequest* mutable_convert_request();
  ::xla::ConvertRequest* release_convert_request();
  void set_allocated_convert_request(::xla::ConvertRequest* convert_request);
  ::xla::ConvertRequest* unsafe_arena_release_convert_request();
  void unsafe_arena_set_allocated_convert_request(
      ::xla::ConvertRequest* convert_request);

  // .xla.ConvolveRequest convolve_request = 8;
  bool has_convolve_request() const;
  void clear_convolve_request();
  static const int kConvolveRequestFieldNumber = 8;
  private:
  void _slow_mutable_convolve_request();
  void _slow_set_allocated_convolve_request(
      ::google::protobuf::Arena* message_arena, ::xla::ConvolveRequest** convolve_request);
  ::xla::ConvolveRequest* _slow_release_convolve_request();
  public:
  const ::xla::ConvolveRequest& convolve_request() const;
  ::xla::ConvolveRequest* mutable_convolve_request();
  ::xla::ConvolveRequest* release_convolve_request();
  void set_allocated_convolve_request(::xla::ConvolveRequest* convolve_request);
  ::xla::ConvolveRequest* unsafe_arena_release_convolve_request();
  void unsafe_arena_set_allocated_convolve_request(
      ::xla::ConvolveRequest* convolve_request);

  // .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
  bool has_cross_replica_sum_request() const;
  void clear_cross_replica_sum_request();
  static const int kCrossReplicaSumRequestFieldNumber = 9;
  private:
  void _slow_mutable_cross_replica_sum_request();
  void _slow_set_allocated_cross_replica_sum_request(
      ::google::protobuf::Arena* message_arena, ::xla::CrossReplicaSumRequest** cross_replica_sum_request);
  ::xla::CrossReplicaSumRequest* _slow_release_cross_replica_sum_request();
  public:
  const ::xla::CrossReplicaSumRequest& cross_replica_sum_request() const;
  ::xla::CrossReplicaSumRequest* mutable_cross_replica_sum_request();
  ::xla::CrossReplicaSumRequest* release_cross_replica_sum_request();
  void set_allocated_cross_replica_sum_request(::xla::CrossReplicaSumRequest* cross_replica_sum_request);
  ::xla::CrossReplicaSumRequest* unsafe_arena_release_cross_replica_sum_request();
  void unsafe_arena_set_allocated_cross_replica_sum_request(
      ::xla::CrossReplicaSumRequest* cross_replica_sum_request);

  // .xla.CustomCallRequest custom_call_request = 10;
  bool has_custom_call_request() const;
  void clear_custom_call_request();
  static const int kCustomCallRequestFieldNumber = 10;
  private:
  void _slow_mutable_custom_call_request();
  void _slow_set_allocated_custom_call_request(
      ::google::protobuf::Arena* message_arena, ::xla::CustomCallRequest** custom_call_request);
  ::xla::CustomCallRequest* _slow_release_custom_call_request();
  public:
  const ::xla::CustomCallRequest& custom_call_request() const;
  ::xla::CustomCallRequest* mutable_custom_call_request();
  ::xla::CustomCallRequest* release_custom_call_request();
  void set_allocated_custom_call_request(::xla::CustomCallRequest* custom_call_request);
  ::xla::CustomCallRequest* unsafe_arena_release_custom_call_request();
  void unsafe_arena_set_allocated_custom_call_request(
      ::xla::CustomCallRequest* custom_call_request);

  // .xla.DynamicSliceRequest dynamic_slice_request = 11;
  bool has_dynamic_slice_request() const;
  void clear_dynamic_slice_request();
  static const int kDynamicSliceRequestFieldNumber = 11;
  private:
  void _slow_mutable_dynamic_slice_request();
  void _slow_set_allocated_dynamic_slice_request(
      ::google::protobuf::Arena* message_arena, ::xla::DynamicSliceRequest** dynamic_slice_request);
  ::xla::DynamicSliceRequest* _slow_release_dynamic_slice_request();
  public:
  const ::xla::DynamicSliceRequest& dynamic_slice_request() const;
  ::xla::DynamicSliceRequest* mutable_dynamic_slice_request();
  ::xla::DynamicSliceRequest* release_dynamic_slice_request();
  void set_allocated_dynamic_slice_request(::xla::DynamicSliceRequest* dynamic_slice_request);
  ::xla::DynamicSliceRequest* unsafe_arena_release_dynamic_slice_request();
  void unsafe_arena_set_allocated_dynamic_slice_request(
      ::xla::DynamicSliceRequest* dynamic_slice_request);

  // .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
  bool has_dynamic_update_slice_request() const;
  void clear_dynamic_update_slice_request();
  static const int kDynamicUpdateSliceRequestFieldNumber = 12;
  private:
  void _slow_mutable_dynamic_update_slice_request();
  void _slow_set_allocated_dynamic_update_slice_request(
      ::google::protobuf::Arena* message_arena, ::xla::DynamicUpdateSliceRequest** dynamic_update_slice_request);
  ::xla::DynamicUpdateSliceRequest* _slow_release_dynamic_update_slice_request();
  public:
  const ::xla::DynamicUpdateSliceRequest& dynamic_update_slice_request() const;
  ::xla::DynamicUpdateSliceRequest* mutable_dynamic_update_slice_request();
  ::xla::DynamicUpdateSliceRequest* release_dynamic_update_slice_request();
  void set_allocated_dynamic_update_slice_request(::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request);
  ::xla::DynamicUpdateSliceRequest* unsafe_arena_release_dynamic_update_slice_request();
  void unsafe_arena_set_allocated_dynamic_update_slice_request(
      ::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request);

  // .xla.GetTupleElementRequest get_tuple_element_request = 13;
  bool has_get_tuple_element_request() const;
  void clear_get_tuple_element_request();
  static const int kGetTupleElementRequestFieldNumber = 13;
  private:
  void _slow_mutable_get_tuple_element_request();
  void _slow_set_allocated_get_tuple_element_request(
      ::google::protobuf::Arena* message_arena, ::xla::GetTupleElementRequest** get_tuple_element_request);
  ::xla::GetTupleElementRequest* _slow_release_get_tuple_element_request();
  public:
  const ::xla::GetTupleElementRequest& get_tuple_element_request() const;
  ::xla::GetTupleElementRequest* mutable_get_tuple_element_request();
  ::xla::GetTupleElementRequest* release_get_tuple_element_request();
  void set_allocated_get_tuple_element_request(::xla::GetTupleElementRequest* get_tuple_element_request);
  ::xla::GetTupleElementRequest* unsafe_arena_release_get_tuple_element_request();
  void unsafe_arena_set_allocated_get_tuple_element_request(
      ::xla::GetTupleElementRequest* get_tuple_element_request);

  // .xla.InfeedRequest infeed_request = 14;
  bool has_infeed_request() const;
  void clear_infeed_request();
  static const int kInfeedRequestFieldNumber = 14;
  private:
  void _slow_mutable_infeed_request();
  void _slow_set_allocated_infeed_request(
      ::google::protobuf::Arena* message_arena, ::xla::InfeedRequest** infeed_request);
  ::xla::InfeedRequest* _slow_release_infeed_request();
  public:
  const ::xla::InfeedRequest& infeed_request() const;
  ::xla::InfeedRequest* mutable_infeed_request();
  ::xla::InfeedRequest* release_infeed_request();
  void set_allocated_infeed_request(::xla::InfeedRequest* infeed_request);
  ::xla::InfeedRequest* unsafe_arena_release_infeed_request();
  void unsafe_arena_set_allocated_infeed_request(
      ::xla::InfeedRequest* infeed_request);

  // .xla.MapRequest map_request = 15;
  bool has_map_request() const;
  void clear_map_request();
  static const int kMapRequestFieldNumber = 15;
  private:
  void _slow_mutable_map_request();
  void _slow_set_allocated_map_request(
      ::google::protobuf::Arena* message_arena, ::xla::MapRequest** map_request);
  ::xla::MapRequest* _slow_release_map_request();
  public:
  const ::xla::MapRequest& map_request() const;
  ::xla::MapRequest* mutable_map_request();
  ::xla::MapRequest* release_map_request();
  void set_allocated_map_request(::xla::MapRequest* map_request);
  ::xla::MapRequest* unsafe_arena_release_map_request();
  void unsafe_arena_set_allocated_map_request(
      ::xla::MapRequest* map_request);

  // .xla.PadRequest pad_request = 16;
  bool has_pad_request() const;
  void clear_pad_request();
  static const int kPadRequestFieldNumber = 16;
  private:
  void _slow_mutable_pad_request();
  void _slow_set_allocated_pad_request(
      ::google::protobuf::Arena* message_arena, ::xla::PadRequest** pad_request);
  ::xla::PadRequest* _slow_release_pad_request();
  public:
  const ::xla::PadRequest& pad_request() const;
  ::xla::PadRequest* mutable_pad_request();
  ::xla::PadRequest* release_pad_request();
  void set_allocated_pad_request(::xla::PadRequest* pad_request);
  ::xla::PadRequest* unsafe_arena_release_pad_request();
  void unsafe_arena_set_allocated_pad_request(
      ::xla::PadRequest* pad_request);

  // .xla.ParameterRequest parameter_request = 17;
  bool has_parameter_request() const;
  void clear_parameter_request();
  static const int kParameterRequestFieldNumber = 17;
  private:
  void _slow_mutable_parameter_request();
  void _slow_set_allocated_parameter_request(
      ::google::protobuf::Arena* message_arena, ::xla::ParameterRequest** parameter_request);
  ::xla::ParameterRequest* _slow_release_parameter_request();
  public:
  const ::xla::ParameterRequest& parameter_request() const;
  ::xla::ParameterRequest* mutable_parameter_request();
  ::xla::ParameterRequest* release_parameter_request();
  void set_allocated_parameter_request(::xla::ParameterRequest* parameter_request);
  ::xla::ParameterRequest* unsafe_arena_release_parameter_request();
  void unsafe_arena_set_allocated_parameter_request(
      ::xla::ParameterRequest* parameter_request);

  // .xla.ReduceRequest reduce_request = 18;
  bool has_reduce_request() const;
  void clear_reduce_request();
  static const int kReduceRequestFieldNumber = 18;
  private:
  void _slow_mutable_reduce_request();
  void _slow_set_allocated_reduce_request(
      ::google::protobuf::Arena* message_arena, ::xla::ReduceRequest** reduce_request);
  ::xla::ReduceRequest* _slow_release_reduce_request();
  public:
  const ::xla::ReduceRequest& reduce_request() const;
  ::xla::ReduceRequest* mutable_reduce_request();
  ::xla::ReduceRequest* release_reduce_request();
  void set_allocated_reduce_request(::xla::ReduceRequest* reduce_request);
  ::xla::ReduceRequest* unsafe_arena_release_reduce_request();
  void unsafe_arena_set_allocated_reduce_request(
      ::xla::ReduceRequest* reduce_request);

  // .xla.ReduceWindowRequest reduce_window_request = 19;
  bool has_reduce_window_request() const;
  void clear_reduce_window_request();
  static const int kReduceWindowRequestFieldNumber = 19;
  private:
  void _slow_mutable_reduce_window_request();
  void _slow_set_allocated_reduce_window_request(
      ::google::protobuf::Arena* message_arena, ::xla::ReduceWindowRequest** reduce_window_request);
  ::xla::ReduceWindowRequest* _slow_release_reduce_window_request();
  public:
  const ::xla::ReduceWindowRequest& reduce_window_request() const;
  ::xla::ReduceWindowRequest* mutable_reduce_window_request();
  ::xla::ReduceWindowRequest* release_reduce_window_request();
  void set_allocated_reduce_window_request(::xla::ReduceWindowRequest* reduce_window_request);
  ::xla::ReduceWindowRequest* unsafe_arena_release_reduce_window_request();
  void unsafe_arena_set_allocated_reduce_window_request(
      ::xla::ReduceWindowRequest* reduce_window_request);

  // .xla.ReshapeRequest reshape_request = 20;
  bool has_reshape_request() const;
  void clear_reshape_request();
  static const int kReshapeRequestFieldNumber = 20;
  private:
  void _slow_mutable_reshape_request();
  void _slow_set_allocated_reshape_request(
      ::google::protobuf::Arena* message_arena, ::xla::ReshapeRequest** reshape_request);
  ::xla::ReshapeRequest* _slow_release_reshape_request();
  public:
  const ::xla::ReshapeRequest& reshape_request() const;
  ::xla::ReshapeRequest* mutable_reshape_request();
  ::xla::ReshapeRequest* release_reshape_request();
  void set_allocated_reshape_request(::xla::ReshapeRequest* reshape_request);
  ::xla::ReshapeRequest* unsafe_arena_release_reshape_request();
  void unsafe_arena_set_allocated_reshape_request(
      ::xla::ReshapeRequest* reshape_request);

  // .xla.ReverseRequest reverse_request = 21;
  bool has_reverse_request() const;
  void clear_reverse_request();
  static const int kReverseRequestFieldNumber = 21;
  private:
  void _slow_mutable_reverse_request();
  void _slow_set_allocated_reverse_request(
      ::google::protobuf::Arena* message_arena, ::xla::ReverseRequest** reverse_request);
  ::xla::ReverseRequest* _slow_release_reverse_request();
  public:
  const ::xla::ReverseRequest& reverse_request() const;
  ::xla::ReverseRequest* mutable_reverse_request();
  ::xla::ReverseRequest* release_reverse_request();
  void set_allocated_reverse_request(::xla::ReverseRequest* reverse_request);
  ::xla::ReverseRequest* unsafe_arena_release_reverse_request();
  void unsafe_arena_set_allocated_reverse_request(
      ::xla::ReverseRequest* reverse_request);

  // .xla.RngRequest rng_request = 22;
  bool has_rng_request() const;
  void clear_rng_request();
  static const int kRngRequestFieldNumber = 22;
  private:
  void _slow_mutable_rng_request();
  void _slow_set_allocated_rng_request(
      ::google::protobuf::Arena* message_arena, ::xla::RngRequest** rng_request);
  ::xla::RngRequest* _slow_release_rng_request();
  public:
  const ::xla::RngRequest& rng_request() const;
  ::xla::RngRequest* mutable_rng_request();
  ::xla::RngRequest* release_rng_request();
  void set_allocated_rng_request(::xla::RngRequest* rng_request);
  ::xla::RngRequest* unsafe_arena_release_rng_request();
  void unsafe_arena_set_allocated_rng_request(
      ::xla::RngRequest* rng_request);

  // .xla.SelectAndScatterRequest select_and_scatter_request = 23;
  bool has_select_and_scatter_request() const;
  void clear_select_and_scatter_request();
  static const int kSelectAndScatterRequestFieldNumber = 23;
  private:
  void _slow_mutable_select_and_scatter_request();
  void _slow_set_allocated_select_and_scatter_request(
      ::google::protobuf::Arena* message_arena, ::xla::SelectAndScatterRequest** select_and_scatter_request);
  ::xla::SelectAndScatterRequest* _slow_release_select_and_scatter_request();
  public:
  const ::xla::SelectAndScatterRequest& select_and_scatter_request() const;
  ::xla::SelectAndScatterRequest* mutable_select_and_scatter_request();
  ::xla::SelectAndScatterRequest* release_select_and_scatter_request();
  void set_allocated_select_and_scatter_request(::xla::SelectAndScatterRequest* select_and_scatter_request);
  ::xla::SelectAndScatterRequest* unsafe_arena_release_select_and_scatter_request();
  void unsafe_arena_set_allocated_select_and_scatter_request(
      ::xla::SelectAndScatterRequest* select_and_scatter_request);

  // .xla.SliceRequest slice_request = 24;
  bool has_slice_request() const;
  void clear_slice_request();
  static const int kSliceRequestFieldNumber = 24;
  private:
  void _slow_mutable_slice_request();
  void _slow_set_allocated_slice_request(
      ::google::protobuf::Arena* message_arena, ::xla::SliceRequest** slice_request);
  ::xla::SliceRequest* _slow_release_slice_request();
  public:
  const ::xla::SliceRequest& slice_request() const;
  ::xla::SliceRequest* mutable_slice_request();
  ::xla::SliceRequest* release_slice_request();
  void set_allocated_slice_request(::xla::SliceRequest* slice_request);
  ::xla::SliceRequest* unsafe_arena_release_slice_request();
  void unsafe_arena_set_allocated_slice_request(
      ::xla::SliceRequest* slice_request);

  // .xla.TernaryOpRequest ternary_op_request = 25;
  bool has_ternary_op_request() const;
  void clear_ternary_op_request();
  static const int kTernaryOpRequestFieldNumber = 25;
  private:
  void _slow_mutable_ternary_op_request();
  void _slow_set_allocated_ternary_op_request(
      ::google::protobuf::Arena* message_arena, ::xla::TernaryOpRequest** ternary_op_request);
  ::xla::TernaryOpRequest* _slow_release_ternary_op_request();
  public:
  const ::xla::TernaryOpRequest& ternary_op_request() const;
  ::xla::TernaryOpRequest* mutable_ternary_op_request();
  ::xla::TernaryOpRequest* release_ternary_op_request();
  void set_allocated_ternary_op_request(::xla::TernaryOpRequest* ternary_op_request);
  ::xla::TernaryOpRequest* unsafe_arena_release_ternary_op_request();
  void unsafe_arena_set_allocated_ternary_op_request(
      ::xla::TernaryOpRequest* ternary_op_request);

  // .xla.TraceRequest trace_request = 26;
  bool has_trace_request() const;
  void clear_trace_request();
  static const int kTraceRequestFieldNumber = 26;
  private:
  void _slow_mutable_trace_request();
  void _slow_set_allocated_trace_request(
      ::google::protobuf::Arena* message_arena, ::xla::TraceRequest** trace_request);
  ::xla::TraceRequest* _slow_release_trace_request();
  public:
  const ::xla::TraceRequest& trace_request() const;
  ::xla::TraceRequest* mutable_trace_request();
  ::xla::TraceRequest* release_trace_request();
  void set_allocated_trace_request(::xla::TraceRequest* trace_request);
  ::xla::TraceRequest* unsafe_arena_release_trace_request();
  void unsafe_arena_set_allocated_trace_request(
      ::xla::TraceRequest* trace_request);

  // .xla.TransposeRequest transpose_request = 34;
  bool has_transpose_request() const;
  void clear_transpose_request();
  static const int kTransposeRequestFieldNumber = 34;
  private:
  void _slow_mutable_transpose_request();
  void _slow_set_allocated_transpose_request(
      ::google::protobuf::Arena* message_arena, ::xla::TransposeRequest** transpose_request);
  ::xla::TransposeRequest* _slow_release_transpose_request();
  public:
  const ::xla::TransposeRequest& transpose_request() const;
  ::xla::TransposeRequest* mutable_transpose_request();
  ::xla::TransposeRequest* release_transpose_request();
  void set_allocated_transpose_request(::xla::TransposeRequest* transpose_request);
  ::xla::TransposeRequest* unsafe_arena_release_transpose_request();
  void unsafe_arena_set_allocated_transpose_request(
      ::xla::TransposeRequest* transpose_request);

  // .xla.UnaryOpRequest unary_op_request = 27;
  bool has_unary_op_request() const;
  void clear_unary_op_request();
  static const int kUnaryOpRequestFieldNumber = 27;
  private:
  void _slow_mutable_unary_op_request();
  void _slow_set_allocated_unary_op_request(
      ::google::protobuf::Arena* message_arena, ::xla::UnaryOpRequest** unary_op_request);
  ::xla::UnaryOpRequest* _slow_release_unary_op_request();
  public:
  const ::xla::UnaryOpRequest& unary_op_request() const;
  ::xla::UnaryOpRequest* mutable_unary_op_request();
  ::xla::UnaryOpRequest* release_unary_op_request();
  void set_allocated_unary_op_request(::xla::UnaryOpRequest* unary_op_request);
  ::xla::UnaryOpRequest* unsafe_arena_release_unary_op_request();
  void unsafe_arena_set_allocated_unary_op_request(
      ::xla::UnaryOpRequest* unary_op_request);

  // .xla.VariadicOpRequest variadic_op_request = 28;
  bool has_variadic_op_request() const;
  void clear_variadic_op_request();
  static const int kVariadicOpRequestFieldNumber = 28;
  private:
  void _slow_mutable_variadic_op_request();
  void _slow_set_allocated_variadic_op_request(
      ::google::protobuf::Arena* message_arena, ::xla::VariadicOpRequest** variadic_op_request);
  ::xla::VariadicOpRequest* _slow_release_variadic_op_request();
  public:
  const ::xla::VariadicOpRequest& variadic_op_request() const;
  ::xla::VariadicOpRequest* mutable_variadic_op_request();
  ::xla::VariadicOpRequest* release_variadic_op_request();
  void set_allocated_variadic_op_request(::xla::VariadicOpRequest* variadic_op_request);
  ::xla::VariadicOpRequest* unsafe_arena_release_variadic_op_request();
  void unsafe_arena_set_allocated_variadic_op_request(
      ::xla::VariadicOpRequest* variadic_op_request);

  // .xla.WhileRequest while_request = 29;
  bool has_while_request() const;
  void clear_while_request();
  static const int kWhileRequestFieldNumber = 29;
  private:
  void _slow_mutable_while_request();
  void _slow_set_allocated_while_request(
      ::google::protobuf::Arena* message_arena, ::xla::WhileRequest** while_request);
  ::xla::WhileRequest* _slow_release_while_request();
  public:
  const ::xla::WhileRequest& while_request() const;
  ::xla::WhileRequest* mutable_while_request();
  ::xla::WhileRequest* release_while_request();
  void set_allocated_while_request(::xla::WhileRequest* while_request);
  ::xla::WhileRequest* unsafe_arena_release_while_request();
  void unsafe_arena_set_allocated_while_request(
      ::xla::WhileRequest* while_request);

  // .xla.SendRequest send_request = 30;
  bool has_send_request() const;
  void clear_send_request();
  static const int kSendRequestFieldNumber = 30;
  private:
  void _slow_mutable_send_request();
  void _slow_set_allocated_send_request(
      ::google::protobuf::Arena* message_arena, ::xla::SendRequest** send_request);
  ::xla::SendRequest* _slow_release_send_request();
  public:
  const ::xla::SendRequest& send_request() const;
  ::xla::SendRequest* mutable_send_request();
  ::xla::SendRequest* release_send_request();
  void set_allocated_send_request(::xla::SendRequest* send_request);
  ::xla::SendRequest* unsafe_arena_release_send_request();
  void unsafe_arena_set_allocated_send_request(
      ::xla::SendRequest* send_request);

  // .xla.RecvRequest recv_request = 31;
  bool has_recv_request() const;
  void clear_recv_request();
  static const int kRecvRequestFieldNumber = 31;
  private:
  void _slow_mutable_recv_request();
  void _slow_set_allocated_recv_request(
      ::google::protobuf::Arena* message_arena, ::xla::RecvRequest** recv_request);
  ::xla::RecvRequest* _slow_release_recv_request();
  public:
  const ::xla::RecvRequest& recv_request() const;
  ::xla::RecvRequest* mutable_recv_request();
  ::xla::RecvRequest* release_recv_request();
  void set_allocated_recv_request(::xla::RecvRequest* recv_request);
  ::xla::RecvRequest* unsafe_arena_release_recv_request();
  void unsafe_arena_set_allocated_recv_request(
      ::xla::RecvRequest* recv_request);

  // .xla.OutfeedRequest outfeed_request = 32;
  bool has_outfeed_request() const;
  void clear_outfeed_request();
  static const int kOutfeedRequestFieldNumber = 32;
  private:
  void _slow_mutable_outfeed_request();
  void _slow_set_allocated_outfeed_request(
      ::google::protobuf::Arena* message_arena, ::xla::OutfeedRequest** outfeed_request);
  ::xla::OutfeedRequest* _slow_release_outfeed_request();
  public:
  const ::xla::OutfeedRequest& outfeed_request() const;
  ::xla::OutfeedRequest* mutable_outfeed_request();
  ::xla::OutfeedRequest* release_outfeed_request();
  void set_allocated_outfeed_request(::xla::OutfeedRequest* outfeed_request);
  ::xla::OutfeedRequest* unsafe_arena_release_outfeed_request();
  void unsafe_arena_set_allocated_outfeed_request(
      ::xla::OutfeedRequest* outfeed_request);

  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:xla.OpRequest)
 private:
  void set_has_binary_op_request();
  void set_has_broadcast_request();
  void set_has_call_request();
  void set_has_concatenate_request();
  void set_has_constant_request();
  void set_has_convert_request();
  void set_has_convolve_request();
  void set_has_cross_replica_sum_request();
  void set_has_custom_call_request();
  void set_has_dynamic_slice_request();
  void set_has_dynamic_update_slice_request();
  void set_has_get_tuple_element_request();
  void set_has_infeed_request();
  void set_has_map_request();
  void set_has_pad_request();
  void set_has_parameter_request();
  void set_has_reduce_request();
  void set_has_reduce_window_request();
  void set_has_reshape_request();
  void set_has_reverse_request();
  void set_has_rng_request();
  void set_has_select_and_scatter_request();
  void set_has_slice_request();
  void set_has_ternary_op_request();
  void set_has_trace_request();
  void set_has_transpose_request();
  void set_has_unary_op_request();
  void set_has_variadic_op_request();
  void set_has_while_request();
  void set_has_send_request();
  void set_has_recv_request();
  void set_has_outfeed_request();

  inline bool has_op() const;
  void clear_op();
  inline void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationHandle* computation_;
  ::xla::OpMetadata* metadata_;
  union OpUnion {
    OpUnion() {}
    ::xla::BinaryOpRequest* binary_op_request_;
    ::xla::BroadcastRequest* broadcast_request_;
    ::xla::CallRequest* call_request_;
    ::xla::ConcatenateRequest* concatenate_request_;
    ::xla::ConstantRequest* constant_request_;
    ::xla::ConvertRequest* convert_request_;
    ::xla::ConvolveRequest* convolve_request_;
    ::xla::CrossReplicaSumRequest* cross_replica_sum_request_;
    ::xla::CustomCallRequest* custom_call_request_;
    ::xla::DynamicSliceRequest* dynamic_slice_request_;
    ::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request_;
    ::xla::GetTupleElementRequest* get_tuple_element_request_;
    ::xla::InfeedRequest* infeed_request_;
    ::xla::MapRequest* map_request_;
    ::xla::PadRequest* pad_request_;
    ::xla::ParameterRequest* parameter_request_;
    ::xla::ReduceRequest* reduce_request_;
    ::xla::ReduceWindowRequest* reduce_window_request_;
    ::xla::ReshapeRequest* reshape_request_;
    ::xla::ReverseRequest* reverse_request_;
    ::xla::RngRequest* rng_request_;
    ::xla::SelectAndScatterRequest* select_and_scatter_request_;
    ::xla::SliceRequest* slice_request_;
    ::xla::TernaryOpRequest* ternary_op_request_;
    ::xla::TraceRequest* trace_request_;
    ::xla::TransposeRequest* transpose_request_;
    ::xla::UnaryOpRequest* unary_op_request_;
    ::xla::VariadicOpRequest* variadic_op_request_;
    ::xla::WhileRequest* while_request_;
    ::xla::SendRequest* send_request_;
    ::xla::RecvRequest* recv_request_;
    ::xla::OutfeedRequest* outfeed_request_;
  } op_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.OpResponse) */ {
 public:
  OpResponse();
  virtual ~OpResponse();

  OpResponse(const OpResponse& from);

  inline OpResponse& operator=(const OpResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpResponse& default_instance();

  static inline const OpResponse* internal_default_instance() {
    return reinterpret_cast<const OpResponse*>(
               &_OpResponse_default_instance_);
  }

  void UnsafeArenaSwap(OpResponse* other);
  void Swap(OpResponse* other);

  // implements Message ----------------------------------------------

  inline OpResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  OpResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpResponse& from);
  void MergeFrom(const OpResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpResponse* other);
  protected:
  explicit OpResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.ComputationDataHandle output = 1;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 1;
  private:
  void _slow_mutable_output();
  void _slow_set_allocated_output(
      ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** output);
  ::xla::ComputationDataHandle* _slow_release_output();
  public:
  const ::xla::ComputationDataHandle& output() const;
  ::xla::ComputationDataHandle* mutable_output();
  ::xla::ComputationDataHandle* release_output();
  void set_allocated_output(::xla::ComputationDataHandle* output);
  ::xla::ComputationDataHandle* unsafe_arena_release_output();
  void unsafe_arena_set_allocated_output(
      ::xla::ComputationDataHandle* output);

  // @@protoc_insertion_point(class_scope:xla.OpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationDataHandle* output_;
  mutable int _cached_size_;
  friend struct  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PaddingConfig_PaddingConfigDimension

// int64 edge_padding_low = 1;
inline void PaddingConfig_PaddingConfigDimension::clear_edge_padding_low() {
  edge_padding_low_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::edge_padding_low() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.edge_padding_low)
  return edge_padding_low_;
}
inline void PaddingConfig_PaddingConfigDimension::set_edge_padding_low(::google::protobuf::int64 value) {
  
  edge_padding_low_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.edge_padding_low)
}

// int64 edge_padding_high = 2;
inline void PaddingConfig_PaddingConfigDimension::clear_edge_padding_high() {
  edge_padding_high_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::edge_padding_high() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.edge_padding_high)
  return edge_padding_high_;
}
inline void PaddingConfig_PaddingConfigDimension::set_edge_padding_high(::google::protobuf::int64 value) {
  
  edge_padding_high_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.edge_padding_high)
}

// int64 interior_padding = 3;
inline void PaddingConfig_PaddingConfigDimension::clear_interior_padding() {
  interior_padding_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::interior_padding() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.interior_padding)
  return interior_padding_;
}
inline void PaddingConfig_PaddingConfigDimension::set_interior_padding(::google::protobuf::int64 value) {
  
  interior_padding_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.interior_padding)
}

// -------------------------------------------------------------------

// PaddingConfig

// repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
inline int PaddingConfig::dimensions_size() const {
  return dimensions_.size();
}
inline void PaddingConfig::clear_dimensions() {
  dimensions_.Clear();
}
inline const ::xla::PaddingConfig_PaddingConfigDimension& PaddingConfig::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.dimensions)
  return dimensions_.Get(index);
}
inline ::xla::PaddingConfig_PaddingConfigDimension* PaddingConfig::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:xla.PaddingConfig.dimensions)
  return dimensions_.Mutable(index);
}
inline ::xla::PaddingConfig_PaddingConfigDimension* PaddingConfig::add_dimensions() {
  // @@protoc_insertion_point(field_add:xla.PaddingConfig.dimensions)
  return dimensions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >*
PaddingConfig::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.PaddingConfig.dimensions)
  return &dimensions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >&
PaddingConfig::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.PaddingConfig.dimensions)
  return dimensions_;
}

// -------------------------------------------------------------------

// Layout

// repeated int64 minor_to_major = 1;
inline int Layout::minor_to_major_size() const {
  return minor_to_major_.size();
}
inline void Layout::clear_minor_to_major() {
  minor_to_major_.Clear();
}
inline ::google::protobuf::int64 Layout::minor_to_major(int index) const {
  // @@protoc_insertion_point(field_get:xla.Layout.minor_to_major)
  return minor_to_major_.Get(index);
}
inline void Layout::set_minor_to_major(int index, ::google::protobuf::int64 value) {
  minor_to_major_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Layout.minor_to_major)
}
inline void Layout::add_minor_to_major(::google::protobuf::int64 value) {
  minor_to_major_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Layout.minor_to_major)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Layout::minor_to_major() const {
  // @@protoc_insertion_point(field_list:xla.Layout.minor_to_major)
  return minor_to_major_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Layout::mutable_minor_to_major() {
  // @@protoc_insertion_point(field_mutable_list:xla.Layout.minor_to_major)
  return &minor_to_major_;
}

// repeated int64 padded_dimensions = 2;
inline int Layout::padded_dimensions_size() const {
  return padded_dimensions_.size();
}
inline void Layout::clear_padded_dimensions() {
  padded_dimensions_.Clear();
}
inline ::google::protobuf::int64 Layout::padded_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Layout.padded_dimensions)
  return padded_dimensions_.Get(index);
}
inline void Layout::set_padded_dimensions(int index, ::google::protobuf::int64 value) {
  padded_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Layout.padded_dimensions)
}
inline void Layout::add_padded_dimensions(::google::protobuf::int64 value) {
  padded_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Layout.padded_dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Layout::padded_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Layout.padded_dimensions)
  return padded_dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Layout::mutable_padded_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Layout.padded_dimensions)
  return &padded_dimensions_;
}

// .xla.PaddingValue padding_value = 3;
inline void Layout::clear_padding_value() {
  padding_value_ = 0;
}
inline ::xla::PaddingValue Layout::padding_value() const {
  // @@protoc_insertion_point(field_get:xla.Layout.padding_value)
  return static_cast< ::xla::PaddingValue >(padding_value_);
}
inline void Layout::set_padding_value(::xla::PaddingValue value) {
  
  padding_value_ = value;
  // @@protoc_insertion_point(field_set:xla.Layout.padding_value)
}

// -------------------------------------------------------------------

// Shape

// .xla.PrimitiveType element_type = 2;
inline void Shape::clear_element_type() {
  element_type_ = 0;
}
inline ::xla::PrimitiveType Shape::element_type() const {
  // @@protoc_insertion_point(field_get:xla.Shape.element_type)
  return static_cast< ::xla::PrimitiveType >(element_type_);
}
inline void Shape::set_element_type(::xla::PrimitiveType value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:xla.Shape.element_type)
}

// repeated int64 dimensions = 3;
inline int Shape::dimensions_size() const {
  return dimensions_.size();
}
inline void Shape::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int64 Shape::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Shape.dimensions)
  return dimensions_.Get(index);
}
inline void Shape::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Shape.dimensions)
}
inline void Shape::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Shape.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Shape::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Shape.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Shape::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Shape.dimensions)
  return &dimensions_;
}

// repeated .xla.Shape tuple_shapes = 4;
inline int Shape::tuple_shapes_size() const {
  return tuple_shapes_.size();
}
inline void Shape::clear_tuple_shapes() {
  tuple_shapes_.Clear();
}
inline const ::xla::Shape& Shape::tuple_shapes(int index) const {
  // @@protoc_insertion_point(field_get:xla.Shape.tuple_shapes)
  return tuple_shapes_.Get(index);
}
inline ::xla::Shape* Shape::mutable_tuple_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Shape.tuple_shapes)
  return tuple_shapes_.Mutable(index);
}
inline ::xla::Shape* Shape::add_tuple_shapes() {
  // @@protoc_insertion_point(field_add:xla.Shape.tuple_shapes)
  return tuple_shapes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::Shape >*
Shape::mutable_tuple_shapes() {
  // @@protoc_insertion_point(field_mutable_list:xla.Shape.tuple_shapes)
  return &tuple_shapes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
Shape::tuple_shapes() const {
  // @@protoc_insertion_point(field_list:xla.Shape.tuple_shapes)
  return tuple_shapes_;
}

// .xla.Layout layout = 5;
inline bool Shape::has_layout() const {
  return this != internal_default_instance() && layout_ != NULL;
}
inline void Shape::clear_layout() {
  if (GetArenaNoVirtual() == NULL && layout_ != NULL) delete layout_;
  layout_ = NULL;
}
inline const ::xla::Layout& Shape::layout() const {
  // @@protoc_insertion_point(field_get:xla.Shape.layout)
  return layout_ != NULL ? *layout_
                         : *::xla::Layout::internal_default_instance();
}
inline ::xla::Layout* Shape::mutable_layout() {
  
  if (layout_ == NULL) {
    _slow_mutable_layout();
  }
  // @@protoc_insertion_point(field_mutable:xla.Shape.layout)
  return layout_;
}
inline ::xla::Layout* Shape::release_layout() {
  // @@protoc_insertion_point(field_release:xla.Shape.layout)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_layout();
  } else {
    ::xla::Layout* temp = layout_;
    layout_ = NULL;
    return temp;
  }
}
inline  void Shape::set_allocated_layout(::xla::Layout* layout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete layout_;
  }
  if (layout != NULL) {
    _slow_set_allocated_layout(message_arena, &layout);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.Shape.layout)
}

// -------------------------------------------------------------------

// ProgramShape

// repeated .xla.Shape parameters = 1;
inline int ProgramShape::parameters_size() const {
  return parameters_.size();
}
inline void ProgramShape::clear_parameters() {
  parameters_.Clear();
}
inline const ::xla::Shape& ProgramShape::parameters(int index) const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.parameters)
  return parameters_.Get(index);
}
inline ::xla::Shape* ProgramShape::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.parameters)
  return parameters_.Mutable(index);
}
inline ::xla::Shape* ProgramShape::add_parameters() {
  // @@protoc_insertion_point(field_add:xla.ProgramShape.parameters)
  return parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::Shape >*
ProgramShape::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:xla.ProgramShape.parameters)
  return &parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
ProgramShape::parameters() const {
  // @@protoc_insertion_point(field_list:xla.ProgramShape.parameters)
  return parameters_;
}

// .xla.Shape result = 2;
inline bool ProgramShape::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void ProgramShape::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::xla::Shape& ProgramShape::result() const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.result)
  return result_ != NULL ? *result_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* ProgramShape::mutable_result() {
  
  if (result_ == NULL) {
    _slow_mutable_result();
  }
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.result)
  return result_;
}
inline ::xla::Shape* ProgramShape::release_result() {
  // @@protoc_insertion_point(field_release:xla.ProgramShape.result)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_result();
  } else {
    ::xla::Shape* temp = result_;
    result_ = NULL;
    return temp;
  }
}
inline  void ProgramShape::set_allocated_result(::xla::Shape* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result != NULL) {
    _slow_set_allocated_result(message_arena, &result);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ProgramShape.result)
}

// repeated string parameter_names = 3;
inline int ProgramShape::parameter_names_size() const {
  return parameter_names_.size();
}
inline void ProgramShape::clear_parameter_names() {
  parameter_names_.Clear();
}
inline const ::std::string& ProgramShape::parameter_names(int index) const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.parameter_names)
  return parameter_names_.Get(index);
}
inline ::std::string* ProgramShape::mutable_parameter_names(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.parameter_names)
  return parameter_names_.Mutable(index);
}
inline void ProgramShape::set_parameter_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xla.ProgramShape.parameter_names)
  parameter_names_.Mutable(index)->assign(value);
}
inline void ProgramShape::set_parameter_names(int index, const char* value) {
  parameter_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.ProgramShape.parameter_names)
}
inline void ProgramShape::set_parameter_names(int index, const char* value, size_t size) {
  parameter_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.ProgramShape.parameter_names)
}
inline ::std::string* ProgramShape::add_parameter_names() {
  // @@protoc_insertion_point(field_add_mutable:xla.ProgramShape.parameter_names)
  return parameter_names_.Add();
}
inline void ProgramShape::add_parameter_names(const ::std::string& value) {
  parameter_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.ProgramShape.parameter_names)
}
inline void ProgramShape::add_parameter_names(const char* value) {
  parameter_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.ProgramShape.parameter_names)
}
inline void ProgramShape::add_parameter_names(const char* value, size_t size) {
  parameter_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.ProgramShape.parameter_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProgramShape::parameter_names() const {
  // @@protoc_insertion_point(field_list:xla.ProgramShape.parameter_names)
  return parameter_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProgramShape::mutable_parameter_names() {
  // @@protoc_insertion_point(field_mutable_list:xla.ProgramShape.parameter_names)
  return &parameter_names_;
}

// -------------------------------------------------------------------

// ComputationStats

// double flop_count = 1;
inline void ComputationStats::clear_flop_count() {
  flop_count_ = 0;
}
inline double ComputationStats::flop_count() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStats.flop_count)
  return flop_count_;
}
inline void ComputationStats::set_flop_count(double value) {
  
  flop_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationStats.flop_count)
}

// double transcendental_count = 2;
inline void ComputationStats::clear_transcendental_count() {
  transcendental_count_ = 0;
}
inline double ComputationStats::transcendental_count() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStats.transcendental_count)
  return transcendental_count_;
}
inline void ComputationStats::set_transcendental_count(double value) {
  
  transcendental_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationStats.transcendental_count)
}

// -------------------------------------------------------------------

// OpMetadata

// string op_type = 1;
inline void OpMetadata::clear_op_type() {
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& OpMetadata::op_type() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.op_type)
  return op_type_.Get();
}
inline void OpMetadata::set_op_type(const ::std::string& value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.op_type)
}
inline void OpMetadata::set_op_type(const char* value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.op_type)
}
inline void OpMetadata::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.op_type)
}
inline ::std::string* OpMetadata::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.op_type)
  return op_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::release_op_type() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.op_type)
  
  return op_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::unsafe_arena_release_op_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.op_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void OpMetadata::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.op_type)
}
inline void OpMetadata::unsafe_arena_set_allocated_op_type(
    ::std::string* op_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.op_type)
}

// string op_name = 2;
inline void OpMetadata::clear_op_name() {
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& OpMetadata::op_name() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.op_name)
  return op_name_.Get();
}
inline void OpMetadata::set_op_name(const ::std::string& value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.op_name)
}
inline void OpMetadata::set_op_name(const char* value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.op_name)
}
inline void OpMetadata::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.op_name)
}
inline ::std::string* OpMetadata::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.op_name)
  return op_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::release_op_name() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.op_name)
  
  return op_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::unsafe_arena_release_op_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.op_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void OpMetadata::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.op_name)
}
inline void OpMetadata::unsafe_arena_set_allocated_op_name(
    ::std::string* op_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.op_name)
}

// string source_file = 3;
inline void OpMetadata::clear_source_file() {
  source_file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& OpMetadata::source_file() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.source_file)
  return source_file_.Get();
}
inline void OpMetadata::set_source_file(const ::std::string& value) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.source_file)
}
inline void OpMetadata::set_source_file(const char* value) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.source_file)
}
inline void OpMetadata::set_source_file(const char* value,
    size_t size) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.source_file)
}
inline ::std::string* OpMetadata::mutable_source_file() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.source_file)
  return source_file_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::release_source_file() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.source_file)
  
  return source_file_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OpMetadata::unsafe_arena_release_source_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.source_file)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_file_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void OpMetadata::set_allocated_source_file(::std::string* source_file) {
  if (source_file != NULL) {
    
  } else {
    
  }
  source_file_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_file,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.source_file)
}
inline void OpMetadata::unsafe_arena_set_allocated_source_file(
    ::std::string* source_file) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_file != NULL) {
    
  } else {
    
  }
  source_file_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_file, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.source_file)
}

// int32 source_line = 4;
inline void OpMetadata::clear_source_line() {
  source_line_ = 0;
}
inline ::google::protobuf::int32 OpMetadata::source_line() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.source_line)
  return source_line_;
}
inline void OpMetadata::set_source_line(::google::protobuf::int32 value) {
  
  source_line_ = value;
  // @@protoc_insertion_point(field_set:xla.OpMetadata.source_line)
}

// -------------------------------------------------------------------

// ExecutionProfile

// bool compilation_cache_hit = 1;
inline void ExecutionProfile::clear_compilation_cache_hit() {
  compilation_cache_hit_ = false;
}
inline bool ExecutionProfile::compilation_cache_hit() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compilation_cache_hit)
  return compilation_cache_hit_;
}
inline void ExecutionProfile::set_compilation_cache_hit(bool value) {
  
  compilation_cache_hit_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compilation_cache_hit)
}

// int64 compile_time_ms = 2;
inline void ExecutionProfile::clear_compile_time_ms() {
  compile_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecutionProfile::compile_time_ms() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compile_time_ms)
  return compile_time_ms_;
}
inline void ExecutionProfile::set_compile_time_ms(::google::protobuf::int64 value) {
  
  compile_time_ms_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compile_time_ms)
}

// int64 compute_cycle_count = 3;
inline void ExecutionProfile::clear_compute_cycle_count() {
  compute_cycle_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecutionProfile::compute_cycle_count() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_cycle_count)
  return compute_cycle_count_;
}
inline void ExecutionProfile::set_compute_cycle_count(::google::protobuf::int64 value) {
  
  compute_cycle_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_cycle_count)
}

// int64 compute_time_ns = 4;
inline void ExecutionProfile::clear_compute_time_ns() {
  compute_time_ns_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecutionProfile::compute_time_ns() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_time_ns)
  return compute_time_ns_;
}
inline void ExecutionProfile::set_compute_time_ns(::google::protobuf::int64 value) {
  
  compute_time_ns_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_time_ns)
}

// int64 compute_and_transfer_time_ns = 5;
inline void ExecutionProfile::clear_compute_and_transfer_time_ns() {
  compute_and_transfer_time_ns_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecutionProfile::compute_and_transfer_time_ns() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_and_transfer_time_ns)
  return compute_and_transfer_time_ns_;
}
inline void ExecutionProfile::set_compute_and_transfer_time_ns(::google::protobuf::int64 value) {
  
  compute_and_transfer_time_ns_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_and_transfer_time_ns)
}

// -------------------------------------------------------------------

// ComputationHandle

// int64 handle = 1;
inline void ComputationHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ComputationHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ComputationHandle.handle)
  return handle_;
}
inline void ComputationHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationHandle.handle)
}

// -------------------------------------------------------------------

// ExecutionHandle

// int64 handle = 1;
inline void ExecutionHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecutionHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionHandle.handle)
  return handle_;
}
inline void ExecutionHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionHandle.handle)
}

// -------------------------------------------------------------------

// GlobalDataHandle

// int64 handle = 1;
inline void GlobalDataHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GlobalDataHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.GlobalDataHandle.handle)
  return handle_;
}
inline void GlobalDataHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.GlobalDataHandle.handle)
}

// -------------------------------------------------------------------

// ComputationDataHandle

// int64 handle = 1;
inline void ComputationDataHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ComputationDataHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ComputationDataHandle.handle)
  return handle_;
}
inline void ComputationDataHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationDataHandle.handle)
}

// -------------------------------------------------------------------

// DeviceHandle

// int64 handle = 1;
inline void DeviceHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.DeviceHandle.handle)
  return handle_;
}
inline void DeviceHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.DeviceHandle.handle)
}

// -------------------------------------------------------------------

// ChannelHandle

// int64 handle = 1;
inline void ChannelHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChannelHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ChannelHandle.handle)
  return handle_;
}
inline void ChannelHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ChannelHandle.handle)
}

// -------------------------------------------------------------------

// Literal

// .xla.Shape shape = 1;
inline bool Literal::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void Literal::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& Literal::shape() const {
  // @@protoc_insertion_point(field_get:xla.Literal.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* Literal::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.Literal.shape)
  return shape_;
}
inline ::xla::Shape* Literal::release_shape() {
  // @@protoc_insertion_point(field_release:xla.Literal.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void Literal::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.Literal.shape)
}

// repeated bool preds = 2;
inline int Literal::preds_size() const {
  return preds_.size();
}
inline void Literal::clear_preds() {
  preds_.Clear();
}
inline bool Literal::preds(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.preds)
  return preds_.Get(index);
}
inline void Literal::set_preds(int index, bool value) {
  preds_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.preds)
}
inline void Literal::add_preds(bool value) {
  preds_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.preds)
}
inline const ::google::protobuf::RepeatedField< bool >&
Literal::preds() const {
  // @@protoc_insertion_point(field_list:xla.Literal.preds)
  return preds_;
}
inline ::google::protobuf::RepeatedField< bool >*
Literal::mutable_preds() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.preds)
  return &preds_;
}

// bytes u8s = 3;
inline void Literal::clear_u8s() {
  u8s_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Literal::u8s() const {
  // @@protoc_insertion_point(field_get:xla.Literal.u8s)
  return u8s_.Get();
}
inline void Literal::set_u8s(const ::std::string& value) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.Literal.u8s)
}
inline void Literal::set_u8s(const char* value) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.Literal.u8s)
}
inline void Literal::set_u8s(const void* value,
    size_t size) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.Literal.u8s)
}
inline ::std::string* Literal::mutable_u8s() {
  
  // @@protoc_insertion_point(field_mutable:xla.Literal.u8s)
  return u8s_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Literal::release_u8s() {
  // @@protoc_insertion_point(field_release:xla.Literal.u8s)
  
  return u8s_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Literal::unsafe_arena_release_u8s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.Literal.u8s)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return u8s_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Literal::set_allocated_u8s(::std::string* u8s) {
  if (u8s != NULL) {
    
  } else {
    
  }
  u8s_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), u8s,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.Literal.u8s)
}
inline void Literal::unsafe_arena_set_allocated_u8s(
    ::std::string* u8s) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (u8s != NULL) {
    
  } else {
    
  }
  u8s_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      u8s, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.Literal.u8s)
}

// repeated int32 s32s = 4;
inline int Literal::s32s_size() const {
  return s32s_.size();
}
inline void Literal::clear_s32s() {
  s32s_.Clear();
}
inline ::google::protobuf::int32 Literal::s32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.s32s)
  return s32s_.Get(index);
}
inline void Literal::set_s32s(int index, ::google::protobuf::int32 value) {
  s32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.s32s)
}
inline void Literal::add_s32s(::google::protobuf::int32 value) {
  s32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.s32s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Literal::s32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.s32s)
  return s32s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Literal::mutable_s32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.s32s)
  return &s32s_;
}

// repeated int64 s64s = 5;
inline int Literal::s64s_size() const {
  return s64s_.size();
}
inline void Literal::clear_s64s() {
  s64s_.Clear();
}
inline ::google::protobuf::int64 Literal::s64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.s64s)
  return s64s_.Get(index);
}
inline void Literal::set_s64s(int index, ::google::protobuf::int64 value) {
  s64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.s64s)
}
inline void Literal::add_s64s(::google::protobuf::int64 value) {
  s64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.s64s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Literal::s64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.s64s)
  return s64s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Literal::mutable_s64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.s64s)
  return &s64s_;
}

// repeated uint32 u32s = 6;
inline int Literal::u32s_size() const {
  return u32s_.size();
}
inline void Literal::clear_u32s() {
  u32s_.Clear();
}
inline ::google::protobuf::uint32 Literal::u32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.u32s)
  return u32s_.Get(index);
}
inline void Literal::set_u32s(int index, ::google::protobuf::uint32 value) {
  u32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.u32s)
}
inline void Literal::add_u32s(::google::protobuf::uint32 value) {
  u32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.u32s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Literal::u32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.u32s)
  return u32s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Literal::mutable_u32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.u32s)
  return &u32s_;
}

// repeated uint64 u64s = 7;
inline int Literal::u64s_size() const {
  return u64s_.size();
}
inline void Literal::clear_u64s() {
  u64s_.Clear();
}
inline ::google::protobuf::uint64 Literal::u64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.u64s)
  return u64s_.Get(index);
}
inline void Literal::set_u64s(int index, ::google::protobuf::uint64 value) {
  u64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.u64s)
}
inline void Literal::add_u64s(::google::protobuf::uint64 value) {
  u64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.u64s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Literal::u64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.u64s)
  return u64s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Literal::mutable_u64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.u64s)
  return &u64s_;
}

// repeated float f32s = 8;
inline int Literal::f32s_size() const {
  return f32s_.size();
}
inline void Literal::clear_f32s() {
  f32s_.Clear();
}
inline float Literal::f32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.f32s)
  return f32s_.Get(index);
}
inline void Literal::set_f32s(int index, float value) {
  f32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.f32s)
}
inline void Literal::add_f32s(float value) {
  f32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.f32s)
}
inline const ::google::protobuf::RepeatedField< float >&
Literal::f32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.f32s)
  return f32s_;
}
inline ::google::protobuf::RepeatedField< float >*
Literal::mutable_f32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.f32s)
  return &f32s_;
}

// repeated double f64s = 9;
inline int Literal::f64s_size() const {
  return f64s_.size();
}
inline void Literal::clear_f64s() {
  f64s_.Clear();
}
inline double Literal::f64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.f64s)
  return f64s_.Get(index);
}
inline void Literal::set_f64s(int index, double value) {
  f64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.f64s)
}
inline void Literal::add_f64s(double value) {
  f64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.f64s)
}
inline const ::google::protobuf::RepeatedField< double >&
Literal::f64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.f64s)
  return f64s_;
}
inline ::google::protobuf::RepeatedField< double >*
Literal::mutable_f64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.f64s)
  return &f64s_;
}

// repeated .xla.Literal tuple_literals = 10;
inline int Literal::tuple_literals_size() const {
  return tuple_literals_.size();
}
inline void Literal::clear_tuple_literals() {
  tuple_literals_.Clear();
}
inline const ::xla::Literal& Literal::tuple_literals(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.tuple_literals)
  return tuple_literals_.Get(index);
}
inline ::xla::Literal* Literal::mutable_tuple_literals(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Literal.tuple_literals)
  return tuple_literals_.Mutable(index);
}
inline ::xla::Literal* Literal::add_tuple_literals() {
  // @@protoc_insertion_point(field_add:xla.Literal.tuple_literals)
  return tuple_literals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::Literal >*
Literal::mutable_tuple_literals() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.tuple_literals)
  return &tuple_literals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::Literal >&
Literal::tuple_literals() const {
  // @@protoc_insertion_point(field_list:xla.Literal.tuple_literals)
  return tuple_literals_;
}

// -------------------------------------------------------------------

// WindowDimension

// int64 size = 1;
inline void WindowDimension::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::size() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.size)
  return size_;
}
inline void WindowDimension::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.size)
}

// int64 stride = 2;
inline void WindowDimension::clear_stride() {
  stride_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::stride() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.stride)
  return stride_;
}
inline void WindowDimension::set_stride(::google::protobuf::int64 value) {
  
  stride_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.stride)
}

// int64 padding_low = 3;
inline void WindowDimension::clear_padding_low() {
  padding_low_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::padding_low() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.padding_low)
  return padding_low_;
}
inline void WindowDimension::set_padding_low(::google::protobuf::int64 value) {
  
  padding_low_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.padding_low)
}

// int64 padding_high = 4;
inline void WindowDimension::clear_padding_high() {
  padding_high_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::padding_high() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.padding_high)
  return padding_high_;
}
inline void WindowDimension::set_padding_high(::google::protobuf::int64 value) {
  
  padding_high_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.padding_high)
}

// int64 window_dilation = 5;
inline void WindowDimension::clear_window_dilation() {
  window_dilation_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::window_dilation() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.window_dilation)
  return window_dilation_;
}
inline void WindowDimension::set_window_dilation(::google::protobuf::int64 value) {
  
  window_dilation_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.window_dilation)
}

// int64 base_dilation = 6;
inline void WindowDimension::clear_base_dilation() {
  base_dilation_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WindowDimension::base_dilation() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.base_dilation)
  return base_dilation_;
}
inline void WindowDimension::set_base_dilation(::google::protobuf::int64 value) {
  
  base_dilation_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.base_dilation)
}

// -------------------------------------------------------------------

// Window

// repeated .xla.WindowDimension dimensions = 1;
inline int Window::dimensions_size() const {
  return dimensions_.size();
}
inline void Window::clear_dimensions() {
  dimensions_.Clear();
}
inline const ::xla::WindowDimension& Window::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Window.dimensions)
  return dimensions_.Get(index);
}
inline ::xla::WindowDimension* Window::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Window.dimensions)
  return dimensions_.Mutable(index);
}
inline ::xla::WindowDimension* Window::add_dimensions() {
  // @@protoc_insertion_point(field_add:xla.Window.dimensions)
  return dimensions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >*
Window::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Window.dimensions)
  return &dimensions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >&
Window::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Window.dimensions)
  return dimensions_;
}

// -------------------------------------------------------------------

// ConstantRequest

// .xla.Literal literal = 2;
inline bool ConstantRequest::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
inline void ConstantRequest::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
inline const ::xla::Literal& ConstantRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.ConstantRequest.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
inline ::xla::Literal* ConstantRequest::mutable_literal() {
  
  if (literal_ == NULL) {
    _slow_mutable_literal();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConstantRequest.literal)
  return literal_;
}
inline ::xla::Literal* ConstantRequest::release_literal() {
  // @@protoc_insertion_point(field_release:xla.ConstantRequest.literal)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_literal();
  } else {
    ::xla::Literal* temp = literal_;
    literal_ = NULL;
    return temp;
  }
}
inline  void ConstantRequest::set_allocated_literal(::xla::Literal* literal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete literal_;
  }
  if (literal != NULL) {
    _slow_set_allocated_literal(message_arena, &literal);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConstantRequest.literal)
}

// -------------------------------------------------------------------

// GetTupleElementRequest

// .xla.ComputationDataHandle operand = 2;
inline bool GetTupleElementRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void GetTupleElementRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& GetTupleElementRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.GetTupleElementRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* GetTupleElementRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetTupleElementRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* GetTupleElementRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.GetTupleElementRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void GetTupleElementRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetTupleElementRequest.operand)
}

// int64 index = 3;
inline void GetTupleElementRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetTupleElementRequest::index() const {
  // @@protoc_insertion_point(field_get:xla.GetTupleElementRequest.index)
  return index_;
}
inline void GetTupleElementRequest::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:xla.GetTupleElementRequest.index)
}

// -------------------------------------------------------------------

// SliceRequest

// .xla.ComputationDataHandle operand = 2;
inline bool SliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void SliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& SliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* SliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SliceRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* SliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void SliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SliceRequest.operand)
}

// repeated int64 start_indices = 3;
inline int SliceRequest::start_indices_size() const {
  return start_indices_.size();
}
inline void SliceRequest::clear_start_indices() {
  start_indices_.Clear();
}
inline ::google::protobuf::int64 SliceRequest::start_indices(int index) const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.start_indices)
  return start_indices_.Get(index);
}
inline void SliceRequest::set_start_indices(int index, ::google::protobuf::int64 value) {
  start_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.SliceRequest.start_indices)
}
inline void SliceRequest::add_start_indices(::google::protobuf::int64 value) {
  start_indices_.Add(value);
  // @@protoc_insertion_point(field_add:xla.SliceRequest.start_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_list:xla.SliceRequest.start_indices)
  return start_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SliceRequest::mutable_start_indices() {
  // @@protoc_insertion_point(field_mutable_list:xla.SliceRequest.start_indices)
  return &start_indices_;
}

// repeated int64 limit_indices = 4;
inline int SliceRequest::limit_indices_size() const {
  return limit_indices_.size();
}
inline void SliceRequest::clear_limit_indices() {
  limit_indices_.Clear();
}
inline ::google::protobuf::int64 SliceRequest::limit_indices(int index) const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.limit_indices)
  return limit_indices_.Get(index);
}
inline void SliceRequest::set_limit_indices(int index, ::google::protobuf::int64 value) {
  limit_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.SliceRequest.limit_indices)
}
inline void SliceRequest::add_limit_indices(::google::protobuf::int64 value) {
  limit_indices_.Add(value);
  // @@protoc_insertion_point(field_add:xla.SliceRequest.limit_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SliceRequest::limit_indices() const {
  // @@protoc_insertion_point(field_list:xla.SliceRequest.limit_indices)
  return limit_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SliceRequest::mutable_limit_indices() {
  // @@protoc_insertion_point(field_mutable_list:xla.SliceRequest.limit_indices)
  return &limit_indices_;
}

// -------------------------------------------------------------------

// DynamicSliceRequest

// .xla.ComputationDataHandle operand = 2;
inline bool DynamicSliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void DynamicSliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& DynamicSliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* DynamicSliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicSliceRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* DynamicSliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.DynamicSliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void DynamicSliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicSliceRequest.operand)
}

// .xla.ComputationDataHandle start_indices = 3;
inline bool DynamicSliceRequest::has_start_indices() const {
  return this != internal_default_instance() && start_indices_ != NULL;
}
inline void DynamicSliceRequest::clear_start_indices() {
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) delete start_indices_;
  start_indices_ = NULL;
}
inline const ::xla::ComputationDataHandle& DynamicSliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.start_indices)
  return start_indices_ != NULL ? *start_indices_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* DynamicSliceRequest::mutable_start_indices() {
  
  if (start_indices_ == NULL) {
    _slow_mutable_start_indices();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicSliceRequest.start_indices)
  return start_indices_;
}
inline ::xla::ComputationDataHandle* DynamicSliceRequest::release_start_indices() {
  // @@protoc_insertion_point(field_release:xla.DynamicSliceRequest.start_indices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_indices();
  } else {
    ::xla::ComputationDataHandle* temp = start_indices_;
    start_indices_ = NULL;
    return temp;
  }
}
inline  void DynamicSliceRequest::set_allocated_start_indices(::xla::ComputationDataHandle* start_indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_indices_;
  }
  if (start_indices != NULL) {
    _slow_set_allocated_start_indices(message_arena, &start_indices);
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicSliceRequest.start_indices)
}

// repeated int64 slice_sizes = 4;
inline int DynamicSliceRequest::slice_sizes_size() const {
  return slice_sizes_.size();
}
inline void DynamicSliceRequest::clear_slice_sizes() {
  slice_sizes_.Clear();
}
inline ::google::protobuf::int64 DynamicSliceRequest::slice_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.slice_sizes)
  return slice_sizes_.Get(index);
}
inline void DynamicSliceRequest::set_slice_sizes(int index, ::google::protobuf::int64 value) {
  slice_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.DynamicSliceRequest.slice_sizes)
}
inline void DynamicSliceRequest::add_slice_sizes(::google::protobuf::int64 value) {
  slice_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.DynamicSliceRequest.slice_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DynamicSliceRequest::slice_sizes() const {
  // @@protoc_insertion_point(field_list:xla.DynamicSliceRequest.slice_sizes)
  return slice_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DynamicSliceRequest::mutable_slice_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.DynamicSliceRequest.slice_sizes)
  return &slice_sizes_;
}

// -------------------------------------------------------------------

// DynamicUpdateSliceRequest

// .xla.ComputationDataHandle operand = 2;
inline bool DynamicUpdateSliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void DynamicUpdateSliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void DynamicUpdateSliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.operand)
}

// .xla.ComputationDataHandle update = 3;
inline bool DynamicUpdateSliceRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
inline void DynamicUpdateSliceRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) delete update_;
  update_ = NULL;
}
inline const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::update() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.update)
  return update_ != NULL ? *update_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_update() {
  
  if (update_ == NULL) {
    _slow_mutable_update();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.update)
  return update_;
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_update() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.update)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update();
  } else {
    ::xla::ComputationDataHandle* temp = update_;
    update_ = NULL;
    return temp;
  }
}
inline  void DynamicUpdateSliceRequest::set_allocated_update(::xla::ComputationDataHandle* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update != NULL) {
    _slow_set_allocated_update(message_arena, &update);
  }
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.update)
}

// .xla.ComputationDataHandle start_indices = 4;
inline bool DynamicUpdateSliceRequest::has_start_indices() const {
  return this != internal_default_instance() && start_indices_ != NULL;
}
inline void DynamicUpdateSliceRequest::clear_start_indices() {
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) delete start_indices_;
  start_indices_ = NULL;
}
inline const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.start_indices)
  return start_indices_ != NULL ? *start_indices_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_start_indices() {
  
  if (start_indices_ == NULL) {
    _slow_mutable_start_indices();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.start_indices)
  return start_indices_;
}
inline ::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_start_indices() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.start_indices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_indices();
  } else {
    ::xla::ComputationDataHandle* temp = start_indices_;
    start_indices_ = NULL;
    return temp;
  }
}
inline  void DynamicUpdateSliceRequest::set_allocated_start_indices(::xla::ComputationDataHandle* start_indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_indices_;
  }
  if (start_indices != NULL) {
    _slow_set_allocated_start_indices(message_arena, &start_indices);
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.start_indices)
}

// -------------------------------------------------------------------

// ConvolutionDimensionNumbers

// int64 batch_dimension = 1;
inline void ConvolutionDimensionNumbers::clear_batch_dimension() {
  batch_dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::batch_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.batch_dimension)
  return batch_dimension_;
}
inline void ConvolutionDimensionNumbers::set_batch_dimension(::google::protobuf::int64 value) {
  
  batch_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.batch_dimension)
}

// int64 feature_dimension = 2;
inline void ConvolutionDimensionNumbers::clear_feature_dimension() {
  feature_dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.feature_dimension)
  return feature_dimension_;
}
inline void ConvolutionDimensionNumbers::set_feature_dimension(::google::protobuf::int64 value) {
  
  feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.feature_dimension)
}

// repeated int64 spatial_dimensions = 5;
inline int ConvolutionDimensionNumbers::spatial_dimensions_size() const {
  return spatial_dimensions_.size();
}
inline void ConvolutionDimensionNumbers::clear_spatial_dimensions() {
  spatial_dimensions_.Clear();
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::spatial_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return spatial_dimensions_.Get(index);
}
inline void ConvolutionDimensionNumbers::set_spatial_dimensions(int index, ::google::protobuf::int64 value) {
  spatial_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.spatial_dimensions)
}
inline void ConvolutionDimensionNumbers::add_spatial_dimensions(::google::protobuf::int64 value) {
  spatial_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ConvolutionDimensionNumbers.spatial_dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDimensionNumbers::spatial_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return spatial_dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDimensionNumbers::mutable_spatial_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return &spatial_dimensions_;
}

// int64 kernel_input_feature_dimension = 3;
inline void ConvolutionDimensionNumbers::clear_kernel_input_feature_dimension() {
  kernel_input_feature_dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_input_feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_input_feature_dimension)
  return kernel_input_feature_dimension_;
}
inline void ConvolutionDimensionNumbers::set_kernel_input_feature_dimension(::google::protobuf::int64 value) {
  
  kernel_input_feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_input_feature_dimension)
}

// int64 kernel_output_feature_dimension = 4;
inline void ConvolutionDimensionNumbers::clear_kernel_output_feature_dimension() {
  kernel_output_feature_dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_output_feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_output_feature_dimension)
  return kernel_output_feature_dimension_;
}
inline void ConvolutionDimensionNumbers::set_kernel_output_feature_dimension(::google::protobuf::int64 value) {
  
  kernel_output_feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_output_feature_dimension)
}

// repeated int64 kernel_spatial_dimensions = 6;
inline int ConvolutionDimensionNumbers::kernel_spatial_dimensions_size() const {
  return kernel_spatial_dimensions_.size();
}
inline void ConvolutionDimensionNumbers::clear_kernel_spatial_dimensions() {
  kernel_spatial_dimensions_.Clear();
}
inline ::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_spatial_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return kernel_spatial_dimensions_.Get(index);
}
inline void ConvolutionDimensionNumbers::set_kernel_spatial_dimensions(int index, ::google::protobuf::int64 value) {
  kernel_spatial_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
}
inline void ConvolutionDimensionNumbers::add_kernel_spatial_dimensions(::google::protobuf::int64 value) {
  kernel_spatial_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDimensionNumbers::kernel_spatial_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return kernel_spatial_dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDimensionNumbers::mutable_kernel_spatial_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return &kernel_spatial_dimensions_;
}

// -------------------------------------------------------------------

// ConvolveRequest

// .xla.ComputationDataHandle lhs = 2;
inline bool ConvolveRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
inline void ConvolveRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& ConvolveRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ConvolveRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.lhs)
  return lhs_;
}
inline ::xla::ComputationDataHandle* ConvolveRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
inline  void ConvolveRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 3;
inline bool ConvolveRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
inline void ConvolveRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& ConvolveRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ConvolveRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.rhs)
  return rhs_;
}
inline ::xla::ComputationDataHandle* ConvolveRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
inline  void ConvolveRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.rhs)
}

// .xla.Window window = 4;
inline bool ConvolveRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
inline void ConvolveRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
inline const ::xla::Window& ConvolveRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
inline ::xla::Window* ConvolveRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.window)
  return window_;
}
inline ::xla::Window* ConvolveRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
inline  void ConvolveRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.window)
}

// .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
inline bool ConvolveRequest::has_dimension_numbers() const {
  return this != internal_default_instance() && dimension_numbers_ != NULL;
}
inline void ConvolveRequest::clear_dimension_numbers() {
  if (GetArenaNoVirtual() == NULL && dimension_numbers_ != NULL) delete dimension_numbers_;
  dimension_numbers_ = NULL;
}
inline const ::xla::ConvolutionDimensionNumbers& ConvolveRequest::dimension_numbers() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.dimension_numbers)
  return dimension_numbers_ != NULL ? *dimension_numbers_
                         : *::xla::ConvolutionDimensionNumbers::internal_default_instance();
}
inline ::xla::ConvolutionDimensionNumbers* ConvolveRequest::mutable_dimension_numbers() {
  
  if (dimension_numbers_ == NULL) {
    _slow_mutable_dimension_numbers();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.dimension_numbers)
  return dimension_numbers_;
}
inline ::xla::ConvolutionDimensionNumbers* ConvolveRequest::release_dimension_numbers() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.dimension_numbers)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dimension_numbers();
  } else {
    ::xla::ConvolutionDimensionNumbers* temp = dimension_numbers_;
    dimension_numbers_ = NULL;
    return temp;
  }
}
inline  void ConvolveRequest::set_allocated_dimension_numbers(::xla::ConvolutionDimensionNumbers* dimension_numbers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dimension_numbers_;
  }
  if (dimension_numbers != NULL) {
    _slow_set_allocated_dimension_numbers(message_arena, &dimension_numbers);
  }
  dimension_numbers_ = dimension_numbers;
  if (dimension_numbers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.dimension_numbers)
}

// -------------------------------------------------------------------

// InfeedRequest

// .xla.Shape shape = 2;
inline bool InfeedRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void InfeedRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& InfeedRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.InfeedRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* InfeedRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.InfeedRequest.shape)
  return shape_;
}
inline ::xla::Shape* InfeedRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.InfeedRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void InfeedRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.InfeedRequest.shape)
}

// bytes config = 3;
inline void InfeedRequest::clear_config() {
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& InfeedRequest::config() const {
  // @@protoc_insertion_point(field_get:xla.InfeedRequest.config)
  return config_.Get();
}
inline void InfeedRequest::set_config(const ::std::string& value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.InfeedRequest.config)
}
inline void InfeedRequest::set_config(const char* value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.InfeedRequest.config)
}
inline void InfeedRequest::set_config(const void* value,
    size_t size) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.InfeedRequest.config)
}
inline ::std::string* InfeedRequest::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:xla.InfeedRequest.config)
  return config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InfeedRequest::release_config() {
  // @@protoc_insertion_point(field_release:xla.InfeedRequest.config)
  
  return config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InfeedRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.InfeedRequest.config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InfeedRequest::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.InfeedRequest.config)
}
inline void InfeedRequest::unsafe_arena_set_allocated_config(
    ::std::string* config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config != NULL) {
    
  } else {
    
  }
  config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.InfeedRequest.config)
}

// -------------------------------------------------------------------

// OutfeedRequest

// .xla.Shape shape = 1;
inline bool OutfeedRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void OutfeedRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& OutfeedRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* OutfeedRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.shape)
  return shape_;
}
inline ::xla::Shape* OutfeedRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void OutfeedRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.shape)
}

// .xla.ComputationDataHandle operand = 2;
inline bool OutfeedRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void OutfeedRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& OutfeedRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* OutfeedRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* OutfeedRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void OutfeedRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.operand)
}

// bytes outfeed_config = 3;
inline void OutfeedRequest::clear_outfeed_config() {
  outfeed_config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& OutfeedRequest::outfeed_config() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.outfeed_config)
  return outfeed_config_.Get();
}
inline void OutfeedRequest::set_outfeed_config(const ::std::string& value) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OutfeedRequest.outfeed_config)
}
inline void OutfeedRequest::set_outfeed_config(const char* value) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OutfeedRequest.outfeed_config)
}
inline void OutfeedRequest::set_outfeed_config(const void* value,
    size_t size) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OutfeedRequest.outfeed_config)
}
inline ::std::string* OutfeedRequest::mutable_outfeed_config() {
  
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.outfeed_config)
  return outfeed_config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OutfeedRequest::release_outfeed_config() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.outfeed_config)
  
  return outfeed_config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* OutfeedRequest::unsafe_arena_release_outfeed_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OutfeedRequest.outfeed_config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return outfeed_config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void OutfeedRequest::set_allocated_outfeed_config(::std::string* outfeed_config) {
  if (outfeed_config != NULL) {
    
  } else {
    
  }
  outfeed_config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outfeed_config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.outfeed_config)
}
inline void OutfeedRequest::unsafe_arena_set_allocated_outfeed_config(
    ::std::string* outfeed_config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (outfeed_config != NULL) {
    
  } else {
    
  }
  outfeed_config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      outfeed_config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OutfeedRequest.outfeed_config)
}

// -------------------------------------------------------------------

// CallRequest

// .xla.ComputationHandle to_apply = 2;
inline bool CallRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
inline void CallRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
inline const ::xla::ComputationHandle& CallRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.CallRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* CallRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.CallRequest.to_apply)
  return to_apply_;
}
inline ::xla::ComputationHandle* CallRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.CallRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
inline  void CallRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CallRequest.to_apply)
}

// repeated .xla.ComputationDataHandle operands = 3;
inline int CallRequest::operands_size() const {
  return operands_.size();
}
inline void CallRequest::clear_operands() {
  operands_.Clear();
}
inline const ::xla::ComputationDataHandle& CallRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.CallRequest.operands)
  return operands_.Get(index);
}
inline ::xla::ComputationDataHandle* CallRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.CallRequest.operands)
  return operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* CallRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.CallRequest.operands)
  return operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
CallRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.CallRequest.operands)
  return &operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
CallRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.CallRequest.operands)
  return operands_;
}

// -------------------------------------------------------------------

// CustomCallRequest

// string call_target_name = 2;
inline void CustomCallRequest::clear_call_target_name() {
  call_target_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CustomCallRequest::call_target_name() const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.call_target_name)
  return call_target_name_.Get();
}
inline void CustomCallRequest::set_call_target_name(const ::std::string& value) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.CustomCallRequest.call_target_name)
}
inline void CustomCallRequest::set_call_target_name(const char* value) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.CustomCallRequest.call_target_name)
}
inline void CustomCallRequest::set_call_target_name(const char* value,
    size_t size) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.CustomCallRequest.call_target_name)
}
inline ::std::string* CustomCallRequest::mutable_call_target_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.call_target_name)
  return call_target_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CustomCallRequest::release_call_target_name() {
  // @@protoc_insertion_point(field_release:xla.CustomCallRequest.call_target_name)
  
  return call_target_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CustomCallRequest::unsafe_arena_release_call_target_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.CustomCallRequest.call_target_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_target_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CustomCallRequest::set_allocated_call_target_name(::std::string* call_target_name) {
  if (call_target_name != NULL) {
    
  } else {
    
  }
  call_target_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_target_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.CustomCallRequest.call_target_name)
}
inline void CustomCallRequest::unsafe_arena_set_allocated_call_target_name(
    ::std::string* call_target_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_target_name != NULL) {
    
  } else {
    
  }
  call_target_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_target_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CustomCallRequest.call_target_name)
}

// repeated .xla.ComputationDataHandle operands = 3;
inline int CustomCallRequest::operands_size() const {
  return operands_.size();
}
inline void CustomCallRequest::clear_operands() {
  operands_.Clear();
}
inline const ::xla::ComputationDataHandle& CustomCallRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.operands)
  return operands_.Get(index);
}
inline ::xla::ComputationDataHandle* CustomCallRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.operands)
  return operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* CustomCallRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.CustomCallRequest.operands)
  return operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
CustomCallRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.CustomCallRequest.operands)
  return &operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
CustomCallRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.CustomCallRequest.operands)
  return operands_;
}

// .xla.Shape shape = 4;
inline bool CustomCallRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void CustomCallRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& CustomCallRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* CustomCallRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.shape)
  return shape_;
}
inline ::xla::Shape* CustomCallRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.CustomCallRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void CustomCallRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CustomCallRequest.shape)
}

// -------------------------------------------------------------------

// MapRequest

// repeated .xla.ComputationDataHandle operands = 2;
inline int MapRequest::operands_size() const {
  return operands_.size();
}
inline void MapRequest::clear_operands() {
  operands_.Clear();
}
inline const ::xla::ComputationDataHandle& MapRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.operands)
  return operands_.Get(index);
}
inline ::xla::ComputationDataHandle* MapRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.operands)
  return operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* MapRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.MapRequest.operands)
  return operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
MapRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.MapRequest.operands)
  return &operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
MapRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.MapRequest.operands)
  return operands_;
}

// .xla.ComputationHandle to_apply = 3;
inline bool MapRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
inline void MapRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
inline const ::xla::ComputationHandle& MapRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* MapRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.to_apply)
  return to_apply_;
}
inline ::xla::ComputationHandle* MapRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.MapRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
inline  void MapRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.MapRequest.to_apply)
}

// repeated .xla.ComputationDataHandle static_operands = 4;
inline int MapRequest::static_operands_size() const {
  return static_operands_.size();
}
inline void MapRequest::clear_static_operands() {
  static_operands_.Clear();
}
inline const ::xla::ComputationDataHandle& MapRequest::static_operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.static_operands)
  return static_operands_.Get(index);
}
inline ::xla::ComputationDataHandle* MapRequest::mutable_static_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.static_operands)
  return static_operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* MapRequest::add_static_operands() {
  // @@protoc_insertion_point(field_add:xla.MapRequest.static_operands)
  return static_operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
MapRequest::mutable_static_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.MapRequest.static_operands)
  return &static_operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
MapRequest::static_operands() const {
  // @@protoc_insertion_point(field_list:xla.MapRequest.static_operands)
  return static_operands_;
}

// -------------------------------------------------------------------

// ReduceRequest

// .xla.ComputationDataHandle operand = 2;
inline bool ReduceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void ReduceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReduceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReduceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* ReduceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void ReduceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.operand)
}

// .xla.ComputationDataHandle init_value = 3;
inline bool ReduceRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
inline void ReduceRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReduceRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReduceRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.init_value)
  return init_value_;
}
inline ::xla::ComputationDataHandle* ReduceRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
inline  void ReduceRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.init_value)
}

// repeated int64 dimensions = 4;
inline int ReduceRequest::dimensions_size() const {
  return dimensions_.size();
}
inline void ReduceRequest::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int64 ReduceRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.dimensions)
  return dimensions_.Get(index);
}
inline void ReduceRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReduceRequest.dimensions)
}
inline void ReduceRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReduceRequest.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReduceRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReduceRequest.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReduceRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReduceRequest.dimensions)
  return &dimensions_;
}

// .xla.ComputationHandle to_apply = 5;
inline bool ReduceRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
inline void ReduceRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
inline const ::xla::ComputationHandle& ReduceRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* ReduceRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.to_apply)
  return to_apply_;
}
inline ::xla::ComputationHandle* ReduceRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
inline  void ReduceRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.to_apply)
}

// -------------------------------------------------------------------

// ReduceWindowRequest

// .xla.ComputationDataHandle operand = 2;
inline bool ReduceWindowRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void ReduceWindowRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReduceWindowRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReduceWindowRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* ReduceWindowRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void ReduceWindowRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.operand)
}

// .xla.ComputationDataHandle init_value = 3;
inline bool ReduceWindowRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
inline void ReduceWindowRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReduceWindowRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReduceWindowRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.init_value)
  return init_value_;
}
inline ::xla::ComputationDataHandle* ReduceWindowRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
inline  void ReduceWindowRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.init_value)
}

// .xla.Window window = 4;
inline bool ReduceWindowRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
inline void ReduceWindowRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
inline const ::xla::Window& ReduceWindowRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
inline ::xla::Window* ReduceWindowRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.window)
  return window_;
}
inline ::xla::Window* ReduceWindowRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
inline  void ReduceWindowRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.window)
}

// .xla.ComputationHandle to_apply = 5;
inline bool ReduceWindowRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
inline void ReduceWindowRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
inline const ::xla::ComputationHandle& ReduceWindowRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* ReduceWindowRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.to_apply)
  return to_apply_;
}
inline ::xla::ComputationHandle* ReduceWindowRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
inline  void ReduceWindowRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.to_apply)
}

// -------------------------------------------------------------------

// CrossReplicaSumRequest

// .xla.ComputationDataHandle operand = 2;
inline bool CrossReplicaSumRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void CrossReplicaSumRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& CrossReplicaSumRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.CrossReplicaSumRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* CrossReplicaSumRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.CrossReplicaSumRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* CrossReplicaSumRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.CrossReplicaSumRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void CrossReplicaSumRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CrossReplicaSumRequest.operand)
}

// -------------------------------------------------------------------

// SelectAndScatterRequest

// .xla.ComputationDataHandle operand = 2;
inline bool SelectAndScatterRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void SelectAndScatterRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& SelectAndScatterRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.operand)
}

// .xla.ComputationDataHandle source = 3;
inline bool SelectAndScatterRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void SelectAndScatterRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
inline const ::xla::ComputationDataHandle& SelectAndScatterRequest::source() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.source)
  return source_ != NULL ? *source_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_source() {
  
  if (source_ == NULL) {
    _slow_mutable_source();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.source)
  return source_;
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::release_source() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.source)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source();
  } else {
    ::xla::ComputationDataHandle* temp = source_;
    source_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_source(::xla::ComputationDataHandle* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source != NULL) {
    _slow_set_allocated_source(message_arena, &source);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.source)
}

// .xla.ComputationDataHandle init_value = 4;
inline bool SelectAndScatterRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
inline void SelectAndScatterRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
inline const ::xla::ComputationDataHandle& SelectAndScatterRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.init_value)
  return init_value_;
}
inline ::xla::ComputationDataHandle* SelectAndScatterRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.init_value)
}

// .xla.Window window = 5;
inline bool SelectAndScatterRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
inline void SelectAndScatterRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
inline const ::xla::Window& SelectAndScatterRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
inline ::xla::Window* SelectAndScatterRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.window)
  return window_;
}
inline ::xla::Window* SelectAndScatterRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.window)
}

// .xla.ComputationHandle select = 6;
inline bool SelectAndScatterRequest::has_select() const {
  return this != internal_default_instance() && select_ != NULL;
}
inline void SelectAndScatterRequest::clear_select() {
  if (GetArenaNoVirtual() == NULL && select_ != NULL) delete select_;
  select_ = NULL;
}
inline const ::xla::ComputationHandle& SelectAndScatterRequest::select() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.select)
  return select_ != NULL ? *select_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* SelectAndScatterRequest::mutable_select() {
  
  if (select_ == NULL) {
    _slow_mutable_select();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.select)
  return select_;
}
inline ::xla::ComputationHandle* SelectAndScatterRequest::release_select() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.select)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_select();
  } else {
    ::xla::ComputationHandle* temp = select_;
    select_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_select(::xla::ComputationHandle* select) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete select_;
  }
  if (select != NULL) {
    _slow_set_allocated_select(message_arena, &select);
  }
  select_ = select;
  if (select) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.select)
}

// .xla.ComputationHandle scatter = 7;
inline bool SelectAndScatterRequest::has_scatter() const {
  return this != internal_default_instance() && scatter_ != NULL;
}
inline void SelectAndScatterRequest::clear_scatter() {
  if (GetArenaNoVirtual() == NULL && scatter_ != NULL) delete scatter_;
  scatter_ = NULL;
}
inline const ::xla::ComputationHandle& SelectAndScatterRequest::scatter() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.scatter)
  return scatter_ != NULL ? *scatter_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* SelectAndScatterRequest::mutable_scatter() {
  
  if (scatter_ == NULL) {
    _slow_mutable_scatter();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.scatter)
  return scatter_;
}
inline ::xla::ComputationHandle* SelectAndScatterRequest::release_scatter() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.scatter)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scatter();
  } else {
    ::xla::ComputationHandle* temp = scatter_;
    scatter_ = NULL;
    return temp;
  }
}
inline  void SelectAndScatterRequest::set_allocated_scatter(::xla::ComputationHandle* scatter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scatter_;
  }
  if (scatter != NULL) {
    _slow_set_allocated_scatter(message_arena, &scatter);
  }
  scatter_ = scatter;
  if (scatter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.scatter)
}

// -------------------------------------------------------------------

// ReverseRequest

// .xla.ComputationDataHandle operand = 2;
inline bool ReverseRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void ReverseRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReverseRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReverseRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReverseRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReverseRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* ReverseRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReverseRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void ReverseRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReverseRequest.operand)
}

// repeated int64 dimensions = 3;
inline int ReverseRequest::dimensions_size() const {
  return dimensions_.size();
}
inline void ReverseRequest::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int64 ReverseRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReverseRequest.dimensions)
  return dimensions_.Get(index);
}
inline void ReverseRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReverseRequest.dimensions)
}
inline void ReverseRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReverseRequest.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReverseRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReverseRequest.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReverseRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReverseRequest.dimensions)
  return &dimensions_;
}

// -------------------------------------------------------------------

// BroadcastRequest

// .xla.ComputationDataHandle operand = 2;
inline bool BroadcastRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void BroadcastRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& BroadcastRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.BroadcastRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* BroadcastRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.BroadcastRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* BroadcastRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.BroadcastRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void BroadcastRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BroadcastRequest.operand)
}

// repeated int64 broadcast_sizes = 3;
inline int BroadcastRequest::broadcast_sizes_size() const {
  return broadcast_sizes_.size();
}
inline void BroadcastRequest::clear_broadcast_sizes() {
  broadcast_sizes_.Clear();
}
inline ::google::protobuf::int64 BroadcastRequest::broadcast_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.BroadcastRequest.broadcast_sizes)
  return broadcast_sizes_.Get(index);
}
inline void BroadcastRequest::set_broadcast_sizes(int index, ::google::protobuf::int64 value) {
  broadcast_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.BroadcastRequest.broadcast_sizes)
}
inline void BroadcastRequest::add_broadcast_sizes(::google::protobuf::int64 value) {
  broadcast_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.BroadcastRequest.broadcast_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BroadcastRequest::broadcast_sizes() const {
  // @@protoc_insertion_point(field_list:xla.BroadcastRequest.broadcast_sizes)
  return broadcast_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BroadcastRequest::mutable_broadcast_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.BroadcastRequest.broadcast_sizes)
  return &broadcast_sizes_;
}

// -------------------------------------------------------------------

// PadRequest

// .xla.ComputationDataHandle operand = 2;
inline bool PadRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void PadRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& PadRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* PadRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* PadRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void PadRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.operand)
}

// .xla.ComputationDataHandle padding_value = 3;
inline bool PadRequest::has_padding_value() const {
  return this != internal_default_instance() && padding_value_ != NULL;
}
inline void PadRequest::clear_padding_value() {
  if (GetArenaNoVirtual() == NULL && padding_value_ != NULL) delete padding_value_;
  padding_value_ = NULL;
}
inline const ::xla::ComputationDataHandle& PadRequest::padding_value() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.padding_value)
  return padding_value_ != NULL ? *padding_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* PadRequest::mutable_padding_value() {
  
  if (padding_value_ == NULL) {
    _slow_mutable_padding_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.padding_value)
  return padding_value_;
}
inline ::xla::ComputationDataHandle* PadRequest::release_padding_value() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.padding_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_padding_value();
  } else {
    ::xla::ComputationDataHandle* temp = padding_value_;
    padding_value_ = NULL;
    return temp;
  }
}
inline  void PadRequest::set_allocated_padding_value(::xla::ComputationDataHandle* padding_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete padding_value_;
  }
  if (padding_value != NULL) {
    _slow_set_allocated_padding_value(message_arena, &padding_value);
  }
  padding_value_ = padding_value;
  if (padding_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.padding_value)
}

// .xla.PaddingConfig padding_config = 4;
inline bool PadRequest::has_padding_config() const {
  return this != internal_default_instance() && padding_config_ != NULL;
}
inline void PadRequest::clear_padding_config() {
  if (GetArenaNoVirtual() == NULL && padding_config_ != NULL) delete padding_config_;
  padding_config_ = NULL;
}
inline const ::xla::PaddingConfig& PadRequest::padding_config() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.padding_config)
  return padding_config_ != NULL ? *padding_config_
                         : *::xla::PaddingConfig::internal_default_instance();
}
inline ::xla::PaddingConfig* PadRequest::mutable_padding_config() {
  
  if (padding_config_ == NULL) {
    _slow_mutable_padding_config();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.padding_config)
  return padding_config_;
}
inline ::xla::PaddingConfig* PadRequest::release_padding_config() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.padding_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_padding_config();
  } else {
    ::xla::PaddingConfig* temp = padding_config_;
    padding_config_ = NULL;
    return temp;
  }
}
inline  void PadRequest::set_allocated_padding_config(::xla::PaddingConfig* padding_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete padding_config_;
  }
  if (padding_config != NULL) {
    _slow_set_allocated_padding_config(message_arena, &padding_config);
  }
  padding_config_ = padding_config;
  if (padding_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.padding_config)
}

// -------------------------------------------------------------------

// ReshapeRequest

// .xla.ComputationDataHandle operand = 2;
inline bool ReshapeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void ReshapeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& ReshapeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ReshapeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReshapeRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* ReshapeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReshapeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void ReshapeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReshapeRequest.operand)
}

// repeated int64 dimensions = 3;
inline int ReshapeRequest::dimensions_size() const {
  return dimensions_.size();
}
inline void ReshapeRequest::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int64 ReshapeRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.dimensions)
  return dimensions_.Get(index);
}
inline void ReshapeRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReshapeRequest.dimensions)
}
inline void ReshapeRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReshapeRequest.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReshapeRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReshapeRequest.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReshapeRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReshapeRequest.dimensions)
  return &dimensions_;
}

// repeated int64 new_sizes = 4;
inline int ReshapeRequest::new_sizes_size() const {
  return new_sizes_.size();
}
inline void ReshapeRequest::clear_new_sizes() {
  new_sizes_.Clear();
}
inline ::google::protobuf::int64 ReshapeRequest::new_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.new_sizes)
  return new_sizes_.Get(index);
}
inline void ReshapeRequest::set_new_sizes(int index, ::google::protobuf::int64 value) {
  new_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReshapeRequest.new_sizes)
}
inline void ReshapeRequest::add_new_sizes(::google::protobuf::int64 value) {
  new_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReshapeRequest.new_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReshapeRequest::new_sizes() const {
  // @@protoc_insertion_point(field_list:xla.ReshapeRequest.new_sizes)
  return new_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReshapeRequest::mutable_new_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReshapeRequest.new_sizes)
  return &new_sizes_;
}

// -------------------------------------------------------------------

// TransposeRequest

// .xla.ComputationDataHandle operand = 2;
inline bool TransposeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void TransposeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& TransposeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.TransposeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* TransposeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.TransposeRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* TransposeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.TransposeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void TransposeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransposeRequest.operand)
}

// repeated int64 dimensions = 3;
inline int TransposeRequest::dimensions_size() const {
  return dimensions_.size();
}
inline void TransposeRequest::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int64 TransposeRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.TransposeRequest.dimensions)
  return dimensions_.Get(index);
}
inline void TransposeRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.TransposeRequest.dimensions)
}
inline void TransposeRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.TransposeRequest.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TransposeRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.TransposeRequest.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TransposeRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.TransposeRequest.dimensions)
  return &dimensions_;
}

// -------------------------------------------------------------------

// ParameterRequest

// .xla.Shape shape = 2;
inline bool ParameterRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void ParameterRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& ParameterRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* ParameterRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.ParameterRequest.shape)
  return shape_;
}
inline ::xla::Shape* ParameterRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.ParameterRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void ParameterRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ParameterRequest.shape)
}

// int64 parameter = 3;
inline void ParameterRequest::clear_parameter() {
  parameter_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ParameterRequest::parameter() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.parameter)
  return parameter_;
}
inline void ParameterRequest::set_parameter(::google::protobuf::int64 value) {
  
  parameter_ = value;
  // @@protoc_insertion_point(field_set:xla.ParameterRequest.parameter)
}

// string name = 4;
inline void ParameterRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ParameterRequest::name() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.name)
  return name_.Get();
}
inline void ParameterRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.ParameterRequest.name)
}
inline void ParameterRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.ParameterRequest.name)
}
inline void ParameterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.ParameterRequest.name)
}
inline ::std::string* ParameterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.ParameterRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ParameterRequest::release_name() {
  // @@protoc_insertion_point(field_release:xla.ParameterRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ParameterRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ParameterRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ParameterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.ParameterRequest.name)
}
inline void ParameterRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ParameterRequest.name)
}

// -------------------------------------------------------------------

// GetLocalShapeRequest

// .xla.ComputationHandle computation = 1;
inline bool GetLocalShapeRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
inline void GetLocalShapeRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
inline const ::xla::ComputationHandle& GetLocalShapeRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* GetLocalShapeRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    _slow_mutable_computation();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeRequest.computation)
  return computation_;
}
inline ::xla::ComputationHandle* GetLocalShapeRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeRequest.computation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_computation();
  } else {
    ::xla::ComputationHandle* temp = computation_;
    computation_ = NULL;
    return temp;
  }
}
inline  void GetLocalShapeRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete computation_;
  }
  if (computation != NULL) {
    _slow_set_allocated_computation(message_arena, &computation);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeRequest.computation)
}

// .xla.ComputationDataHandle operand = 2;
inline bool GetLocalShapeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void GetLocalShapeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& GetLocalShapeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* GetLocalShapeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* GetLocalShapeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void GetLocalShapeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeRequest.operand)
}

// -------------------------------------------------------------------

// GetLocalShapeResponse

// .xla.Shape shape = 1;
inline bool GetLocalShapeResponse::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void GetLocalShapeResponse::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& GetLocalShapeResponse::shape() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeResponse.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* GetLocalShapeResponse::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeResponse.shape)
  return shape_;
}
inline ::xla::Shape* GetLocalShapeResponse::release_shape() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeResponse.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void GetLocalShapeResponse::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeResponse.shape)
}

// -------------------------------------------------------------------

// TraceRequest

// string tag = 2;
inline void TraceRequest::clear_tag() {
  tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TraceRequest::tag() const {
  // @@protoc_insertion_point(field_get:xla.TraceRequest.tag)
  return tag_.Get();
}
inline void TraceRequest::set_tag(const ::std::string& value) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.TraceRequest.tag)
}
inline void TraceRequest::set_tag(const char* value) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.TraceRequest.tag)
}
inline void TraceRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.TraceRequest.tag)
}
inline ::std::string* TraceRequest::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:xla.TraceRequest.tag)
  return tag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TraceRequest::release_tag() {
  // @@protoc_insertion_point(field_release:xla.TraceRequest.tag)
  
  return tag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TraceRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TraceRequest.tag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TraceRequest::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.TraceRequest.tag)
}
inline void TraceRequest::unsafe_arena_set_allocated_tag(
    ::std::string* tag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TraceRequest.tag)
}

// .xla.ComputationDataHandle operand = 3;
inline bool TraceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void TraceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& TraceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.TraceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* TraceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.TraceRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* TraceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.TraceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void TraceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TraceRequest.operand)
}

// -------------------------------------------------------------------

// ConvertRequest

// .xla.ComputationDataHandle operand = 2;
inline bool ConvertRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void ConvertRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& ConvertRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ConvertRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* ConvertRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvertRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* ConvertRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ConvertRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void ConvertRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvertRequest.operand)
}

// .xla.PrimitiveType new_element_type = 3;
inline void ConvertRequest::clear_new_element_type() {
  new_element_type_ = 0;
}
inline ::xla::PrimitiveType ConvertRequest::new_element_type() const {
  // @@protoc_insertion_point(field_get:xla.ConvertRequest.new_element_type)
  return static_cast< ::xla::PrimitiveType >(new_element_type_);
}
inline void ConvertRequest::set_new_element_type(::xla::PrimitiveType value) {
  
  new_element_type_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvertRequest.new_element_type)
}

// -------------------------------------------------------------------

// ConcatenateRequest

// repeated .xla.ComputationDataHandle operands = 2;
inline int ConcatenateRequest::operands_size() const {
  return operands_.size();
}
inline void ConcatenateRequest::clear_operands() {
  operands_.Clear();
}
inline const ::xla::ComputationDataHandle& ConcatenateRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConcatenateRequest.operands)
  return operands_.Get(index);
}
inline ::xla::ComputationDataHandle* ConcatenateRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ConcatenateRequest.operands)
  return operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* ConcatenateRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.ConcatenateRequest.operands)
  return operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
ConcatenateRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConcatenateRequest.operands)
  return &operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
ConcatenateRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.ConcatenateRequest.operands)
  return operands_;
}

// int64 dimension = 3;
inline void ConcatenateRequest::clear_dimension() {
  dimension_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConcatenateRequest::dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConcatenateRequest.dimension)
  return dimension_;
}
inline void ConcatenateRequest::set_dimension(::google::protobuf::int64 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConcatenateRequest.dimension)
}

// -------------------------------------------------------------------

// WhileRequest

// .xla.ComputationHandle condition = 2;
inline bool WhileRequest::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline void WhileRequest::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}
inline const ::xla::ComputationHandle& WhileRequest::condition() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.condition)
  return condition_ != NULL ? *condition_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* WhileRequest::mutable_condition() {
  
  if (condition_ == NULL) {
    _slow_mutable_condition();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.condition)
  return condition_;
}
inline ::xla::ComputationHandle* WhileRequest::release_condition() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.condition)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_condition();
  } else {
    ::xla::ComputationHandle* temp = condition_;
    condition_ = NULL;
    return temp;
  }
}
inline  void WhileRequest::set_allocated_condition(::xla::ComputationHandle* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition != NULL) {
    _slow_set_allocated_condition(message_arena, &condition);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.condition)
}

// .xla.ComputationHandle body = 3;
inline bool WhileRequest::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void WhileRequest::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
inline const ::xla::ComputationHandle& WhileRequest::body() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.body)
  return body_ != NULL ? *body_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* WhileRequest::mutable_body() {
  
  if (body_ == NULL) {
    _slow_mutable_body();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.body)
  return body_;
}
inline ::xla::ComputationHandle* WhileRequest::release_body() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.body)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_body();
  } else {
    ::xla::ComputationHandle* temp = body_;
    body_ = NULL;
    return temp;
  }
}
inline  void WhileRequest::set_allocated_body(::xla::ComputationHandle* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body != NULL) {
    _slow_set_allocated_body(message_arena, &body);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.body)
}

// .xla.ComputationDataHandle init = 4;
inline bool WhileRequest::has_init() const {
  return this != internal_default_instance() && init_ != NULL;
}
inline void WhileRequest::clear_init() {
  if (GetArenaNoVirtual() == NULL && init_ != NULL) delete init_;
  init_ = NULL;
}
inline const ::xla::ComputationDataHandle& WhileRequest::init() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.init)
  return init_ != NULL ? *init_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* WhileRequest::mutable_init() {
  
  if (init_ == NULL) {
    _slow_mutable_init();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.init)
  return init_;
}
inline ::xla::ComputationDataHandle* WhileRequest::release_init() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.init)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init();
  } else {
    ::xla::ComputationDataHandle* temp = init_;
    init_ = NULL;
    return temp;
  }
}
inline  void WhileRequest::set_allocated_init(::xla::ComputationDataHandle* init) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_;
  }
  if (init != NULL) {
    _slow_set_allocated_init(message_arena, &init);
  }
  init_ = init;
  if (init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.init)
}

// -------------------------------------------------------------------

// UnaryOpRequest

// .xla.UnaryOperation unop = 2;
inline void UnaryOpRequest::clear_unop() {
  unop_ = 0;
}
inline ::xla::UnaryOperation UnaryOpRequest::unop() const {
  // @@protoc_insertion_point(field_get:xla.UnaryOpRequest.unop)
  return static_cast< ::xla::UnaryOperation >(unop_);
}
inline void UnaryOpRequest::set_unop(::xla::UnaryOperation value) {
  
  unop_ = value;
  // @@protoc_insertion_point(field_set:xla.UnaryOpRequest.unop)
}

// .xla.ComputationDataHandle operand = 3;
inline bool UnaryOpRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void UnaryOpRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& UnaryOpRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.UnaryOpRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* UnaryOpRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.UnaryOpRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* UnaryOpRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.UnaryOpRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void UnaryOpRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.UnaryOpRequest.operand)
}

// -------------------------------------------------------------------

// BinaryOpRequest

// .xla.BinaryOperation binop = 2;
inline void BinaryOpRequest::clear_binop() {
  binop_ = 0;
}
inline ::xla::BinaryOperation BinaryOpRequest::binop() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.binop)
  return static_cast< ::xla::BinaryOperation >(binop_);
}
inline void BinaryOpRequest::set_binop(::xla::BinaryOperation value) {
  
  binop_ = value;
  // @@protoc_insertion_point(field_set:xla.BinaryOpRequest.binop)
}

// .xla.ComputationDataHandle lhs = 3;
inline bool BinaryOpRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
inline void BinaryOpRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& BinaryOpRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* BinaryOpRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.BinaryOpRequest.lhs)
  return lhs_;
}
inline ::xla::ComputationDataHandle* BinaryOpRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.BinaryOpRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
inline  void BinaryOpRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BinaryOpRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 4;
inline bool BinaryOpRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
inline void BinaryOpRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& BinaryOpRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* BinaryOpRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.BinaryOpRequest.rhs)
  return rhs_;
}
inline ::xla::ComputationDataHandle* BinaryOpRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.BinaryOpRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
inline  void BinaryOpRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BinaryOpRequest.rhs)
}

// repeated int64 broadcast_dimensions = 5;
inline int BinaryOpRequest::broadcast_dimensions_size() const {
  return broadcast_dimensions_.size();
}
inline void BinaryOpRequest::clear_broadcast_dimensions() {
  broadcast_dimensions_.Clear();
}
inline ::google::protobuf::int64 BinaryOpRequest::broadcast_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.broadcast_dimensions)
  return broadcast_dimensions_.Get(index);
}
inline void BinaryOpRequest::set_broadcast_dimensions(int index, ::google::protobuf::int64 value) {
  broadcast_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.BinaryOpRequest.broadcast_dimensions)
}
inline void BinaryOpRequest::add_broadcast_dimensions(::google::protobuf::int64 value) {
  broadcast_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.BinaryOpRequest.broadcast_dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BinaryOpRequest::broadcast_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.BinaryOpRequest.broadcast_dimensions)
  return broadcast_dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BinaryOpRequest::mutable_broadcast_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.BinaryOpRequest.broadcast_dimensions)
  return &broadcast_dimensions_;
}

// -------------------------------------------------------------------

// RngRequest

// .xla.RandomDistribution distribution = 2;
inline void RngRequest::clear_distribution() {
  distribution_ = 0;
}
inline ::xla::RandomDistribution RngRequest::distribution() const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.distribution)
  return static_cast< ::xla::RandomDistribution >(distribution_);
}
inline void RngRequest::set_distribution(::xla::RandomDistribution value) {
  
  distribution_ = value;
  // @@protoc_insertion_point(field_set:xla.RngRequest.distribution)
}

// repeated .xla.ComputationDataHandle parameter = 3;
inline int RngRequest::parameter_size() const {
  return parameter_.size();
}
inline void RngRequest::clear_parameter() {
  parameter_.Clear();
}
inline const ::xla::ComputationDataHandle& RngRequest::parameter(int index) const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.parameter)
  return parameter_.Get(index);
}
inline ::xla::ComputationDataHandle* RngRequest::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:xla.RngRequest.parameter)
  return parameter_.Mutable(index);
}
inline ::xla::ComputationDataHandle* RngRequest::add_parameter() {
  // @@protoc_insertion_point(field_add:xla.RngRequest.parameter)
  return parameter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
RngRequest::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:xla.RngRequest.parameter)
  return &parameter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
RngRequest::parameter() const {
  // @@protoc_insertion_point(field_list:xla.RngRequest.parameter)
  return parameter_;
}

// .xla.Shape shape = 4;
inline bool RngRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void RngRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& RngRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* RngRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.RngRequest.shape)
  return shape_;
}
inline ::xla::Shape* RngRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.RngRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void RngRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RngRequest.shape)
}

// -------------------------------------------------------------------

// TernaryOpRequest

// .xla.TernaryOperation triop = 2;
inline void TernaryOpRequest::clear_triop() {
  triop_ = 0;
}
inline ::xla::TernaryOperation TernaryOpRequest::triop() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.triop)
  return static_cast< ::xla::TernaryOperation >(triop_);
}
inline void TernaryOpRequest::set_triop(::xla::TernaryOperation value) {
  
  triop_ = value;
  // @@protoc_insertion_point(field_set:xla.TernaryOpRequest.triop)
}

// .xla.ComputationDataHandle lhs = 3;
inline bool TernaryOpRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
inline void TernaryOpRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& TernaryOpRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.lhs)
  return lhs_;
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
inline  void TernaryOpRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 4;
inline bool TernaryOpRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
inline void TernaryOpRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
inline const ::xla::ComputationDataHandle& TernaryOpRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.rhs)
  return rhs_;
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
inline  void TernaryOpRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.rhs)
}

// .xla.ComputationDataHandle ehs = 5;
inline bool TernaryOpRequest::has_ehs() const {
  return this != internal_default_instance() && ehs_ != NULL;
}
inline void TernaryOpRequest::clear_ehs() {
  if (GetArenaNoVirtual() == NULL && ehs_ != NULL) delete ehs_;
  ehs_ = NULL;
}
inline const ::xla::ComputationDataHandle& TernaryOpRequest::ehs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.ehs)
  return ehs_ != NULL ? *ehs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::mutable_ehs() {
  
  if (ehs_ == NULL) {
    _slow_mutable_ehs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.ehs)
  return ehs_;
}
inline ::xla::ComputationDataHandle* TernaryOpRequest::release_ehs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.ehs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ehs();
  } else {
    ::xla::ComputationDataHandle* temp = ehs_;
    ehs_ = NULL;
    return temp;
  }
}
inline  void TernaryOpRequest::set_allocated_ehs(::xla::ComputationDataHandle* ehs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ehs_;
  }
  if (ehs != NULL) {
    _slow_set_allocated_ehs(message_arena, &ehs);
  }
  ehs_ = ehs;
  if (ehs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.ehs)
}

// -------------------------------------------------------------------

// VariadicOpRequest

// .xla.VariadicOperation varop = 2;
inline void VariadicOpRequest::clear_varop() {
  varop_ = 0;
}
inline ::xla::VariadicOperation VariadicOpRequest::varop() const {
  // @@protoc_insertion_point(field_get:xla.VariadicOpRequest.varop)
  return static_cast< ::xla::VariadicOperation >(varop_);
}
inline void VariadicOpRequest::set_varop(::xla::VariadicOperation value) {
  
  varop_ = value;
  // @@protoc_insertion_point(field_set:xla.VariadicOpRequest.varop)
}

// repeated .xla.ComputationDataHandle operands = 3;
inline int VariadicOpRequest::operands_size() const {
  return operands_.size();
}
inline void VariadicOpRequest::clear_operands() {
  operands_.Clear();
}
inline const ::xla::ComputationDataHandle& VariadicOpRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.VariadicOpRequest.operands)
  return operands_.Get(index);
}
inline ::xla::ComputationDataHandle* VariadicOpRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.VariadicOpRequest.operands)
  return operands_.Mutable(index);
}
inline ::xla::ComputationDataHandle* VariadicOpRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.VariadicOpRequest.operands)
  return operands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
VariadicOpRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.VariadicOpRequest.operands)
  return &operands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
VariadicOpRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.VariadicOpRequest.operands)
  return operands_;
}

// -------------------------------------------------------------------

// SendRequest

// .xla.ComputationDataHandle operand = 1;
inline bool SendRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
inline void SendRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
inline const ::xla::ComputationDataHandle& SendRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SendRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* SendRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SendRequest.operand)
  return operand_;
}
inline ::xla::ComputationDataHandle* SendRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SendRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
inline  void SendRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SendRequest.operand)
}

// .xla.ChannelHandle channel_handle = 2;
inline bool SendRequest::has_channel_handle() const {
  return this != internal_default_instance() && channel_handle_ != NULL;
}
inline void SendRequest::clear_channel_handle() {
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) delete channel_handle_;
  channel_handle_ = NULL;
}
inline const ::xla::ChannelHandle& SendRequest::channel_handle() const {
  // @@protoc_insertion_point(field_get:xla.SendRequest.channel_handle)
  return channel_handle_ != NULL ? *channel_handle_
                         : *::xla::ChannelHandle::internal_default_instance();
}
inline ::xla::ChannelHandle* SendRequest::mutable_channel_handle() {
  
  if (channel_handle_ == NULL) {
    _slow_mutable_channel_handle();
  }
  // @@protoc_insertion_point(field_mutable:xla.SendRequest.channel_handle)
  return channel_handle_;
}
inline ::xla::ChannelHandle* SendRequest::release_channel_handle() {
  // @@protoc_insertion_point(field_release:xla.SendRequest.channel_handle)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_channel_handle();
  } else {
    ::xla::ChannelHandle* temp = channel_handle_;
    channel_handle_ = NULL;
    return temp;
  }
}
inline  void SendRequest::set_allocated_channel_handle(::xla::ChannelHandle* channel_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_handle_;
  }
  if (channel_handle != NULL) {
    _slow_set_allocated_channel_handle(message_arena, &channel_handle);
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SendRequest.channel_handle)
}

// -------------------------------------------------------------------

// RecvRequest

// .xla.Shape shape = 1;
inline bool RecvRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void RecvRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::xla::Shape& RecvRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.RecvRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
inline ::xla::Shape* RecvRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.RecvRequest.shape)
  return shape_;
}
inline ::xla::Shape* RecvRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.RecvRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void RecvRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RecvRequest.shape)
}

// .xla.ChannelHandle channel_handle = 2;
inline bool RecvRequest::has_channel_handle() const {
  return this != internal_default_instance() && channel_handle_ != NULL;
}
inline void RecvRequest::clear_channel_handle() {
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) delete channel_handle_;
  channel_handle_ = NULL;
}
inline const ::xla::ChannelHandle& RecvRequest::channel_handle() const {
  // @@protoc_insertion_point(field_get:xla.RecvRequest.channel_handle)
  return channel_handle_ != NULL ? *channel_handle_
                         : *::xla::ChannelHandle::internal_default_instance();
}
inline ::xla::ChannelHandle* RecvRequest::mutable_channel_handle() {
  
  if (channel_handle_ == NULL) {
    _slow_mutable_channel_handle();
  }
  // @@protoc_insertion_point(field_mutable:xla.RecvRequest.channel_handle)
  return channel_handle_;
}
inline ::xla::ChannelHandle* RecvRequest::release_channel_handle() {
  // @@protoc_insertion_point(field_release:xla.RecvRequest.channel_handle)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_channel_handle();
  } else {
    ::xla::ChannelHandle* temp = channel_handle_;
    channel_handle_ = NULL;
    return temp;
  }
}
inline  void RecvRequest::set_allocated_channel_handle(::xla::ChannelHandle* channel_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_handle_;
  }
  if (channel_handle != NULL) {
    _slow_set_allocated_channel_handle(message_arena, &channel_handle);
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RecvRequest.channel_handle)
}

// -------------------------------------------------------------------

// OpRequest

// .xla.ComputationHandle computation = 1;
inline bool OpRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
inline void OpRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
inline const ::xla::ComputationHandle& OpRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
inline ::xla::ComputationHandle* OpRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    _slow_mutable_computation();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.computation)
  return computation_;
}
inline ::xla::ComputationHandle* OpRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.computation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_computation();
  } else {
    ::xla::ComputationHandle* temp = computation_;
    computation_ = NULL;
    return temp;
  }
}
inline  void OpRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete computation_;
  }
  if (computation != NULL) {
    _slow_set_allocated_computation(message_arena, &computation);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.computation)
}

// .xla.OpMetadata metadata = 33;
inline bool OpRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void OpRequest::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::xla::OpMetadata& OpRequest::metadata() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::xla::OpMetadata::internal_default_instance();
}
inline ::xla::OpMetadata* OpRequest::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.metadata)
  return metadata_;
}
inline ::xla::OpMetadata* OpRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::xla::OpMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
inline  void OpRequest::set_allocated_metadata(::xla::OpMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.metadata)
}

// .xla.BinaryOpRequest binary_op_request = 2;
inline bool OpRequest::has_binary_op_request() const {
  return op_case() == kBinaryOpRequest;
}
inline void OpRequest::set_has_binary_op_request() {
  _oneof_case_[0] = kBinaryOpRequest;
}
inline void OpRequest::clear_binary_op_request() {
  if (has_binary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.binary_op_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::BinaryOpRequest& OpRequest::binary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.binary_op_request)
  return has_binary_op_request()
      ? *op_.binary_op_request_
      : ::xla::BinaryOpRequest::default_instance();
}
inline ::xla::BinaryOpRequest* OpRequest::mutable_binary_op_request() {
  if (!has_binary_op_request()) {
    clear_op();
    set_has_binary_op_request();
    op_.binary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::BinaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.binary_op_request)
  return op_.binary_op_request_;
}
inline ::xla::BinaryOpRequest* OpRequest::release_binary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.binary_op_request)
  if (has_binary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::BinaryOpRequest* temp = new ::xla::BinaryOpRequest(*op_.binary_op_request_);
      op_.binary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::BinaryOpRequest* temp = op_.binary_op_request_;
      op_.binary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_binary_op_request(::xla::BinaryOpRequest* binary_op_request) {
  clear_op();
  if (binary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(binary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(binary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(binary_op_request)) {
      ::xla::BinaryOpRequest* new_binary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::BinaryOpRequest >(
          GetArenaNoVirtual());
      new_binary_op_request->CopyFrom(*binary_op_request);
      binary_op_request = new_binary_op_request;
    }
    set_has_binary_op_request();
    op_.binary_op_request_ = binary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.binary_op_request)
}
inline  ::xla::BinaryOpRequest* OpRequest::unsafe_arena_release_binary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.binary_op_request)
  if (has_binary_op_request()) {
    clear_has_op();
    ::xla::BinaryOpRequest* temp = op_.binary_op_request_;
    op_.binary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_binary_op_request(::xla::BinaryOpRequest* binary_op_request) {
  clear_op();
  if (binary_op_request) {
    set_has_binary_op_request();
    op_.binary_op_request_ = binary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.binary_op_request)
}

// .xla.BroadcastRequest broadcast_request = 3;
inline bool OpRequest::has_broadcast_request() const {
  return op_case() == kBroadcastRequest;
}
inline void OpRequest::set_has_broadcast_request() {
  _oneof_case_[0] = kBroadcastRequest;
}
inline void OpRequest::clear_broadcast_request() {
  if (has_broadcast_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.broadcast_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::BroadcastRequest& OpRequest::broadcast_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.broadcast_request)
  return has_broadcast_request()
      ? *op_.broadcast_request_
      : ::xla::BroadcastRequest::default_instance();
}
inline ::xla::BroadcastRequest* OpRequest::mutable_broadcast_request() {
  if (!has_broadcast_request()) {
    clear_op();
    set_has_broadcast_request();
    op_.broadcast_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::BroadcastRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.broadcast_request)
  return op_.broadcast_request_;
}
inline ::xla::BroadcastRequest* OpRequest::release_broadcast_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.broadcast_request)
  if (has_broadcast_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::BroadcastRequest* temp = new ::xla::BroadcastRequest(*op_.broadcast_request_);
      op_.broadcast_request_ = NULL;
      return temp;
    } else {
      ::xla::BroadcastRequest* temp = op_.broadcast_request_;
      op_.broadcast_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_broadcast_request(::xla::BroadcastRequest* broadcast_request) {
  clear_op();
  if (broadcast_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(broadcast_request) == NULL) {
      GetArenaNoVirtual()->Own(broadcast_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(broadcast_request)) {
      ::xla::BroadcastRequest* new_broadcast_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::BroadcastRequest >(
          GetArenaNoVirtual());
      new_broadcast_request->CopyFrom(*broadcast_request);
      broadcast_request = new_broadcast_request;
    }
    set_has_broadcast_request();
    op_.broadcast_request_ = broadcast_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.broadcast_request)
}
inline  ::xla::BroadcastRequest* OpRequest::unsafe_arena_release_broadcast_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.broadcast_request)
  if (has_broadcast_request()) {
    clear_has_op();
    ::xla::BroadcastRequest* temp = op_.broadcast_request_;
    op_.broadcast_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_broadcast_request(::xla::BroadcastRequest* broadcast_request) {
  clear_op();
  if (broadcast_request) {
    set_has_broadcast_request();
    op_.broadcast_request_ = broadcast_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.broadcast_request)
}

// .xla.CallRequest call_request = 4;
inline bool OpRequest::has_call_request() const {
  return op_case() == kCallRequest;
}
inline void OpRequest::set_has_call_request() {
  _oneof_case_[0] = kCallRequest;
}
inline void OpRequest::clear_call_request() {
  if (has_call_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.call_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::CallRequest& OpRequest::call_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.call_request)
  return has_call_request()
      ? *op_.call_request_
      : ::xla::CallRequest::default_instance();
}
inline ::xla::CallRequest* OpRequest::mutable_call_request() {
  if (!has_call_request()) {
    clear_op();
    set_has_call_request();
    op_.call_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CallRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.call_request)
  return op_.call_request_;
}
inline ::xla::CallRequest* OpRequest::release_call_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.call_request)
  if (has_call_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CallRequest* temp = new ::xla::CallRequest(*op_.call_request_);
      op_.call_request_ = NULL;
      return temp;
    } else {
      ::xla::CallRequest* temp = op_.call_request_;
      op_.call_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_call_request(::xla::CallRequest* call_request) {
  clear_op();
  if (call_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(call_request) == NULL) {
      GetArenaNoVirtual()->Own(call_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(call_request)) {
      ::xla::CallRequest* new_call_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CallRequest >(
          GetArenaNoVirtual());
      new_call_request->CopyFrom(*call_request);
      call_request = new_call_request;
    }
    set_has_call_request();
    op_.call_request_ = call_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.call_request)
}
inline  ::xla::CallRequest* OpRequest::unsafe_arena_release_call_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.call_request)
  if (has_call_request()) {
    clear_has_op();
    ::xla::CallRequest* temp = op_.call_request_;
    op_.call_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_call_request(::xla::CallRequest* call_request) {
  clear_op();
  if (call_request) {
    set_has_call_request();
    op_.call_request_ = call_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.call_request)
}

// .xla.ConcatenateRequest concatenate_request = 5;
inline bool OpRequest::has_concatenate_request() const {
  return op_case() == kConcatenateRequest;
}
inline void OpRequest::set_has_concatenate_request() {
  _oneof_case_[0] = kConcatenateRequest;
}
inline void OpRequest::clear_concatenate_request() {
  if (has_concatenate_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.concatenate_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ConcatenateRequest& OpRequest::concatenate_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.concatenate_request)
  return has_concatenate_request()
      ? *op_.concatenate_request_
      : ::xla::ConcatenateRequest::default_instance();
}
inline ::xla::ConcatenateRequest* OpRequest::mutable_concatenate_request() {
  if (!has_concatenate_request()) {
    clear_op();
    set_has_concatenate_request();
    op_.concatenate_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConcatenateRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.concatenate_request)
  return op_.concatenate_request_;
}
inline ::xla::ConcatenateRequest* OpRequest::release_concatenate_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.concatenate_request)
  if (has_concatenate_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConcatenateRequest* temp = new ::xla::ConcatenateRequest(*op_.concatenate_request_);
      op_.concatenate_request_ = NULL;
      return temp;
    } else {
      ::xla::ConcatenateRequest* temp = op_.concatenate_request_;
      op_.concatenate_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_concatenate_request(::xla::ConcatenateRequest* concatenate_request) {
  clear_op();
  if (concatenate_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(concatenate_request) == NULL) {
      GetArenaNoVirtual()->Own(concatenate_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(concatenate_request)) {
      ::xla::ConcatenateRequest* new_concatenate_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConcatenateRequest >(
          GetArenaNoVirtual());
      new_concatenate_request->CopyFrom(*concatenate_request);
      concatenate_request = new_concatenate_request;
    }
    set_has_concatenate_request();
    op_.concatenate_request_ = concatenate_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.concatenate_request)
}
inline  ::xla::ConcatenateRequest* OpRequest::unsafe_arena_release_concatenate_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.concatenate_request)
  if (has_concatenate_request()) {
    clear_has_op();
    ::xla::ConcatenateRequest* temp = op_.concatenate_request_;
    op_.concatenate_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_concatenate_request(::xla::ConcatenateRequest* concatenate_request) {
  clear_op();
  if (concatenate_request) {
    set_has_concatenate_request();
    op_.concatenate_request_ = concatenate_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.concatenate_request)
}

// .xla.ConstantRequest constant_request = 6;
inline bool OpRequest::has_constant_request() const {
  return op_case() == kConstantRequest;
}
inline void OpRequest::set_has_constant_request() {
  _oneof_case_[0] = kConstantRequest;
}
inline void OpRequest::clear_constant_request() {
  if (has_constant_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.constant_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ConstantRequest& OpRequest::constant_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.constant_request)
  return has_constant_request()
      ? *op_.constant_request_
      : ::xla::ConstantRequest::default_instance();
}
inline ::xla::ConstantRequest* OpRequest::mutable_constant_request() {
  if (!has_constant_request()) {
    clear_op();
    set_has_constant_request();
    op_.constant_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConstantRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.constant_request)
  return op_.constant_request_;
}
inline ::xla::ConstantRequest* OpRequest::release_constant_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.constant_request)
  if (has_constant_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConstantRequest* temp = new ::xla::ConstantRequest(*op_.constant_request_);
      op_.constant_request_ = NULL;
      return temp;
    } else {
      ::xla::ConstantRequest* temp = op_.constant_request_;
      op_.constant_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_constant_request(::xla::ConstantRequest* constant_request) {
  clear_op();
  if (constant_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(constant_request) == NULL) {
      GetArenaNoVirtual()->Own(constant_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(constant_request)) {
      ::xla::ConstantRequest* new_constant_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConstantRequest >(
          GetArenaNoVirtual());
      new_constant_request->CopyFrom(*constant_request);
      constant_request = new_constant_request;
    }
    set_has_constant_request();
    op_.constant_request_ = constant_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.constant_request)
}
inline  ::xla::ConstantRequest* OpRequest::unsafe_arena_release_constant_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.constant_request)
  if (has_constant_request()) {
    clear_has_op();
    ::xla::ConstantRequest* temp = op_.constant_request_;
    op_.constant_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_constant_request(::xla::ConstantRequest* constant_request) {
  clear_op();
  if (constant_request) {
    set_has_constant_request();
    op_.constant_request_ = constant_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.constant_request)
}

// .xla.ConvertRequest convert_request = 7;
inline bool OpRequest::has_convert_request() const {
  return op_case() == kConvertRequest;
}
inline void OpRequest::set_has_convert_request() {
  _oneof_case_[0] = kConvertRequest;
}
inline void OpRequest::clear_convert_request() {
  if (has_convert_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.convert_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ConvertRequest& OpRequest::convert_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.convert_request)
  return has_convert_request()
      ? *op_.convert_request_
      : ::xla::ConvertRequest::default_instance();
}
inline ::xla::ConvertRequest* OpRequest::mutable_convert_request() {
  if (!has_convert_request()) {
    clear_op();
    set_has_convert_request();
    op_.convert_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConvertRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.convert_request)
  return op_.convert_request_;
}
inline ::xla::ConvertRequest* OpRequest::release_convert_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.convert_request)
  if (has_convert_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConvertRequest* temp = new ::xla::ConvertRequest(*op_.convert_request_);
      op_.convert_request_ = NULL;
      return temp;
    } else {
      ::xla::ConvertRequest* temp = op_.convert_request_;
      op_.convert_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_convert_request(::xla::ConvertRequest* convert_request) {
  clear_op();
  if (convert_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(convert_request) == NULL) {
      GetArenaNoVirtual()->Own(convert_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(convert_request)) {
      ::xla::ConvertRequest* new_convert_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConvertRequest >(
          GetArenaNoVirtual());
      new_convert_request->CopyFrom(*convert_request);
      convert_request = new_convert_request;
    }
    set_has_convert_request();
    op_.convert_request_ = convert_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.convert_request)
}
inline  ::xla::ConvertRequest* OpRequest::unsafe_arena_release_convert_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.convert_request)
  if (has_convert_request()) {
    clear_has_op();
    ::xla::ConvertRequest* temp = op_.convert_request_;
    op_.convert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_convert_request(::xla::ConvertRequest* convert_request) {
  clear_op();
  if (convert_request) {
    set_has_convert_request();
    op_.convert_request_ = convert_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.convert_request)
}

// .xla.ConvolveRequest convolve_request = 8;
inline bool OpRequest::has_convolve_request() const {
  return op_case() == kConvolveRequest;
}
inline void OpRequest::set_has_convolve_request() {
  _oneof_case_[0] = kConvolveRequest;
}
inline void OpRequest::clear_convolve_request() {
  if (has_convolve_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.convolve_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ConvolveRequest& OpRequest::convolve_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.convolve_request)
  return has_convolve_request()
      ? *op_.convolve_request_
      : ::xla::ConvolveRequest::default_instance();
}
inline ::xla::ConvolveRequest* OpRequest::mutable_convolve_request() {
  if (!has_convolve_request()) {
    clear_op();
    set_has_convolve_request();
    op_.convolve_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConvolveRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.convolve_request)
  return op_.convolve_request_;
}
inline ::xla::ConvolveRequest* OpRequest::release_convolve_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.convolve_request)
  if (has_convolve_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConvolveRequest* temp = new ::xla::ConvolveRequest(*op_.convolve_request_);
      op_.convolve_request_ = NULL;
      return temp;
    } else {
      ::xla::ConvolveRequest* temp = op_.convolve_request_;
      op_.convolve_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_convolve_request(::xla::ConvolveRequest* convolve_request) {
  clear_op();
  if (convolve_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(convolve_request) == NULL) {
      GetArenaNoVirtual()->Own(convolve_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(convolve_request)) {
      ::xla::ConvolveRequest* new_convolve_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConvolveRequest >(
          GetArenaNoVirtual());
      new_convolve_request->CopyFrom(*convolve_request);
      convolve_request = new_convolve_request;
    }
    set_has_convolve_request();
    op_.convolve_request_ = convolve_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.convolve_request)
}
inline  ::xla::ConvolveRequest* OpRequest::unsafe_arena_release_convolve_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.convolve_request)
  if (has_convolve_request()) {
    clear_has_op();
    ::xla::ConvolveRequest* temp = op_.convolve_request_;
    op_.convolve_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_convolve_request(::xla::ConvolveRequest* convolve_request) {
  clear_op();
  if (convolve_request) {
    set_has_convolve_request();
    op_.convolve_request_ = convolve_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.convolve_request)
}

// .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
inline bool OpRequest::has_cross_replica_sum_request() const {
  return op_case() == kCrossReplicaSumRequest;
}
inline void OpRequest::set_has_cross_replica_sum_request() {
  _oneof_case_[0] = kCrossReplicaSumRequest;
}
inline void OpRequest::clear_cross_replica_sum_request() {
  if (has_cross_replica_sum_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.cross_replica_sum_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::CrossReplicaSumRequest& OpRequest::cross_replica_sum_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.cross_replica_sum_request)
  return has_cross_replica_sum_request()
      ? *op_.cross_replica_sum_request_
      : ::xla::CrossReplicaSumRequest::default_instance();
}
inline ::xla::CrossReplicaSumRequest* OpRequest::mutable_cross_replica_sum_request() {
  if (!has_cross_replica_sum_request()) {
    clear_op();
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CrossReplicaSumRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.cross_replica_sum_request)
  return op_.cross_replica_sum_request_;
}
inline ::xla::CrossReplicaSumRequest* OpRequest::release_cross_replica_sum_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.cross_replica_sum_request)
  if (has_cross_replica_sum_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CrossReplicaSumRequest* temp = new ::xla::CrossReplicaSumRequest(*op_.cross_replica_sum_request_);
      op_.cross_replica_sum_request_ = NULL;
      return temp;
    } else {
      ::xla::CrossReplicaSumRequest* temp = op_.cross_replica_sum_request_;
      op_.cross_replica_sum_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_cross_replica_sum_request(::xla::CrossReplicaSumRequest* cross_replica_sum_request) {
  clear_op();
  if (cross_replica_sum_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(cross_replica_sum_request) == NULL) {
      GetArenaNoVirtual()->Own(cross_replica_sum_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(cross_replica_sum_request)) {
      ::xla::CrossReplicaSumRequest* new_cross_replica_sum_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CrossReplicaSumRequest >(
          GetArenaNoVirtual());
      new_cross_replica_sum_request->CopyFrom(*cross_replica_sum_request);
      cross_replica_sum_request = new_cross_replica_sum_request;
    }
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = cross_replica_sum_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.cross_replica_sum_request)
}
inline  ::xla::CrossReplicaSumRequest* OpRequest::unsafe_arena_release_cross_replica_sum_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.cross_replica_sum_request)
  if (has_cross_replica_sum_request()) {
    clear_has_op();
    ::xla::CrossReplicaSumRequest* temp = op_.cross_replica_sum_request_;
    op_.cross_replica_sum_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_cross_replica_sum_request(::xla::CrossReplicaSumRequest* cross_replica_sum_request) {
  clear_op();
  if (cross_replica_sum_request) {
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = cross_replica_sum_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.cross_replica_sum_request)
}

// .xla.CustomCallRequest custom_call_request = 10;
inline bool OpRequest::has_custom_call_request() const {
  return op_case() == kCustomCallRequest;
}
inline void OpRequest::set_has_custom_call_request() {
  _oneof_case_[0] = kCustomCallRequest;
}
inline void OpRequest::clear_custom_call_request() {
  if (has_custom_call_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.custom_call_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::CustomCallRequest& OpRequest::custom_call_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.custom_call_request)
  return has_custom_call_request()
      ? *op_.custom_call_request_
      : ::xla::CustomCallRequest::default_instance();
}
inline ::xla::CustomCallRequest* OpRequest::mutable_custom_call_request() {
  if (!has_custom_call_request()) {
    clear_op();
    set_has_custom_call_request();
    op_.custom_call_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CustomCallRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.custom_call_request)
  return op_.custom_call_request_;
}
inline ::xla::CustomCallRequest* OpRequest::release_custom_call_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.custom_call_request)
  if (has_custom_call_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CustomCallRequest* temp = new ::xla::CustomCallRequest(*op_.custom_call_request_);
      op_.custom_call_request_ = NULL;
      return temp;
    } else {
      ::xla::CustomCallRequest* temp = op_.custom_call_request_;
      op_.custom_call_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_custom_call_request(::xla::CustomCallRequest* custom_call_request) {
  clear_op();
  if (custom_call_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(custom_call_request) == NULL) {
      GetArenaNoVirtual()->Own(custom_call_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(custom_call_request)) {
      ::xla::CustomCallRequest* new_custom_call_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CustomCallRequest >(
          GetArenaNoVirtual());
      new_custom_call_request->CopyFrom(*custom_call_request);
      custom_call_request = new_custom_call_request;
    }
    set_has_custom_call_request();
    op_.custom_call_request_ = custom_call_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.custom_call_request)
}
inline  ::xla::CustomCallRequest* OpRequest::unsafe_arena_release_custom_call_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.custom_call_request)
  if (has_custom_call_request()) {
    clear_has_op();
    ::xla::CustomCallRequest* temp = op_.custom_call_request_;
    op_.custom_call_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_custom_call_request(::xla::CustomCallRequest* custom_call_request) {
  clear_op();
  if (custom_call_request) {
    set_has_custom_call_request();
    op_.custom_call_request_ = custom_call_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.custom_call_request)
}

// .xla.DynamicSliceRequest dynamic_slice_request = 11;
inline bool OpRequest::has_dynamic_slice_request() const {
  return op_case() == kDynamicSliceRequest;
}
inline void OpRequest::set_has_dynamic_slice_request() {
  _oneof_case_[0] = kDynamicSliceRequest;
}
inline void OpRequest::clear_dynamic_slice_request() {
  if (has_dynamic_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.dynamic_slice_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::DynamicSliceRequest& OpRequest::dynamic_slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.dynamic_slice_request)
  return has_dynamic_slice_request()
      ? *op_.dynamic_slice_request_
      : ::xla::DynamicSliceRequest::default_instance();
}
inline ::xla::DynamicSliceRequest* OpRequest::mutable_dynamic_slice_request() {
  if (!has_dynamic_slice_request()) {
    clear_op();
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::DynamicSliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.dynamic_slice_request)
  return op_.dynamic_slice_request_;
}
inline ::xla::DynamicSliceRequest* OpRequest::release_dynamic_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.dynamic_slice_request)
  if (has_dynamic_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::DynamicSliceRequest* temp = new ::xla::DynamicSliceRequest(*op_.dynamic_slice_request_);
      op_.dynamic_slice_request_ = NULL;
      return temp;
    } else {
      ::xla::DynamicSliceRequest* temp = op_.dynamic_slice_request_;
      op_.dynamic_slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_dynamic_slice_request(::xla::DynamicSliceRequest* dynamic_slice_request) {
  clear_op();
  if (dynamic_slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dynamic_slice_request) == NULL) {
      GetArenaNoVirtual()->Own(dynamic_slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dynamic_slice_request)) {
      ::xla::DynamicSliceRequest* new_dynamic_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::DynamicSliceRequest >(
          GetArenaNoVirtual());
      new_dynamic_slice_request->CopyFrom(*dynamic_slice_request);
      dynamic_slice_request = new_dynamic_slice_request;
    }
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = dynamic_slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.dynamic_slice_request)
}
inline  ::xla::DynamicSliceRequest* OpRequest::unsafe_arena_release_dynamic_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.dynamic_slice_request)
  if (has_dynamic_slice_request()) {
    clear_has_op();
    ::xla::DynamicSliceRequest* temp = op_.dynamic_slice_request_;
    op_.dynamic_slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_dynamic_slice_request(::xla::DynamicSliceRequest* dynamic_slice_request) {
  clear_op();
  if (dynamic_slice_request) {
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = dynamic_slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.dynamic_slice_request)
}

// .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
inline bool OpRequest::has_dynamic_update_slice_request() const {
  return op_case() == kDynamicUpdateSliceRequest;
}
inline void OpRequest::set_has_dynamic_update_slice_request() {
  _oneof_case_[0] = kDynamicUpdateSliceRequest;
}
inline void OpRequest::clear_dynamic_update_slice_request() {
  if (has_dynamic_update_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.dynamic_update_slice_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::DynamicUpdateSliceRequest& OpRequest::dynamic_update_slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.dynamic_update_slice_request)
  return has_dynamic_update_slice_request()
      ? *op_.dynamic_update_slice_request_
      : ::xla::DynamicUpdateSliceRequest::default_instance();
}
inline ::xla::DynamicUpdateSliceRequest* OpRequest::mutable_dynamic_update_slice_request() {
  if (!has_dynamic_update_slice_request()) {
    clear_op();
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::DynamicUpdateSliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.dynamic_update_slice_request)
  return op_.dynamic_update_slice_request_;
}
inline ::xla::DynamicUpdateSliceRequest* OpRequest::release_dynamic_update_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.dynamic_update_slice_request)
  if (has_dynamic_update_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::DynamicUpdateSliceRequest* temp = new ::xla::DynamicUpdateSliceRequest(*op_.dynamic_update_slice_request_);
      op_.dynamic_update_slice_request_ = NULL;
      return temp;
    } else {
      ::xla::DynamicUpdateSliceRequest* temp = op_.dynamic_update_slice_request_;
      op_.dynamic_update_slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_dynamic_update_slice_request(::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request) {
  clear_op();
  if (dynamic_update_slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dynamic_update_slice_request) == NULL) {
      GetArenaNoVirtual()->Own(dynamic_update_slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dynamic_update_slice_request)) {
      ::xla::DynamicUpdateSliceRequest* new_dynamic_update_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::DynamicUpdateSliceRequest >(
          GetArenaNoVirtual());
      new_dynamic_update_slice_request->CopyFrom(*dynamic_update_slice_request);
      dynamic_update_slice_request = new_dynamic_update_slice_request;
    }
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = dynamic_update_slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.dynamic_update_slice_request)
}
inline  ::xla::DynamicUpdateSliceRequest* OpRequest::unsafe_arena_release_dynamic_update_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.dynamic_update_slice_request)
  if (has_dynamic_update_slice_request()) {
    clear_has_op();
    ::xla::DynamicUpdateSliceRequest* temp = op_.dynamic_update_slice_request_;
    op_.dynamic_update_slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_dynamic_update_slice_request(::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request) {
  clear_op();
  if (dynamic_update_slice_request) {
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = dynamic_update_slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.dynamic_update_slice_request)
}

// .xla.GetTupleElementRequest get_tuple_element_request = 13;
inline bool OpRequest::has_get_tuple_element_request() const {
  return op_case() == kGetTupleElementRequest;
}
inline void OpRequest::set_has_get_tuple_element_request() {
  _oneof_case_[0] = kGetTupleElementRequest;
}
inline void OpRequest::clear_get_tuple_element_request() {
  if (has_get_tuple_element_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.get_tuple_element_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::GetTupleElementRequest& OpRequest::get_tuple_element_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.get_tuple_element_request)
  return has_get_tuple_element_request()
      ? *op_.get_tuple_element_request_
      : ::xla::GetTupleElementRequest::default_instance();
}
inline ::xla::GetTupleElementRequest* OpRequest::mutable_get_tuple_element_request() {
  if (!has_get_tuple_element_request()) {
    clear_op();
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::GetTupleElementRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.get_tuple_element_request)
  return op_.get_tuple_element_request_;
}
inline ::xla::GetTupleElementRequest* OpRequest::release_get_tuple_element_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.get_tuple_element_request)
  if (has_get_tuple_element_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::GetTupleElementRequest* temp = new ::xla::GetTupleElementRequest(*op_.get_tuple_element_request_);
      op_.get_tuple_element_request_ = NULL;
      return temp;
    } else {
      ::xla::GetTupleElementRequest* temp = op_.get_tuple_element_request_;
      op_.get_tuple_element_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_get_tuple_element_request(::xla::GetTupleElementRequest* get_tuple_element_request) {
  clear_op();
  if (get_tuple_element_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(get_tuple_element_request) == NULL) {
      GetArenaNoVirtual()->Own(get_tuple_element_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(get_tuple_element_request)) {
      ::xla::GetTupleElementRequest* new_get_tuple_element_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::GetTupleElementRequest >(
          GetArenaNoVirtual());
      new_get_tuple_element_request->CopyFrom(*get_tuple_element_request);
      get_tuple_element_request = new_get_tuple_element_request;
    }
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = get_tuple_element_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.get_tuple_element_request)
}
inline  ::xla::GetTupleElementRequest* OpRequest::unsafe_arena_release_get_tuple_element_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.get_tuple_element_request)
  if (has_get_tuple_element_request()) {
    clear_has_op();
    ::xla::GetTupleElementRequest* temp = op_.get_tuple_element_request_;
    op_.get_tuple_element_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_get_tuple_element_request(::xla::GetTupleElementRequest* get_tuple_element_request) {
  clear_op();
  if (get_tuple_element_request) {
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = get_tuple_element_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.get_tuple_element_request)
}

// .xla.InfeedRequest infeed_request = 14;
inline bool OpRequest::has_infeed_request() const {
  return op_case() == kInfeedRequest;
}
inline void OpRequest::set_has_infeed_request() {
  _oneof_case_[0] = kInfeedRequest;
}
inline void OpRequest::clear_infeed_request() {
  if (has_infeed_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.infeed_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::InfeedRequest& OpRequest::infeed_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.infeed_request)
  return has_infeed_request()
      ? *op_.infeed_request_
      : ::xla::InfeedRequest::default_instance();
}
inline ::xla::InfeedRequest* OpRequest::mutable_infeed_request() {
  if (!has_infeed_request()) {
    clear_op();
    set_has_infeed_request();
    op_.infeed_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::InfeedRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.infeed_request)
  return op_.infeed_request_;
}
inline ::xla::InfeedRequest* OpRequest::release_infeed_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.infeed_request)
  if (has_infeed_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::InfeedRequest* temp = new ::xla::InfeedRequest(*op_.infeed_request_);
      op_.infeed_request_ = NULL;
      return temp;
    } else {
      ::xla::InfeedRequest* temp = op_.infeed_request_;
      op_.infeed_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_infeed_request(::xla::InfeedRequest* infeed_request) {
  clear_op();
  if (infeed_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(infeed_request) == NULL) {
      GetArenaNoVirtual()->Own(infeed_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(infeed_request)) {
      ::xla::InfeedRequest* new_infeed_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::InfeedRequest >(
          GetArenaNoVirtual());
      new_infeed_request->CopyFrom(*infeed_request);
      infeed_request = new_infeed_request;
    }
    set_has_infeed_request();
    op_.infeed_request_ = infeed_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.infeed_request)
}
inline  ::xla::InfeedRequest* OpRequest::unsafe_arena_release_infeed_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.infeed_request)
  if (has_infeed_request()) {
    clear_has_op();
    ::xla::InfeedRequest* temp = op_.infeed_request_;
    op_.infeed_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_infeed_request(::xla::InfeedRequest* infeed_request) {
  clear_op();
  if (infeed_request) {
    set_has_infeed_request();
    op_.infeed_request_ = infeed_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.infeed_request)
}

// .xla.MapRequest map_request = 15;
inline bool OpRequest::has_map_request() const {
  return op_case() == kMapRequest;
}
inline void OpRequest::set_has_map_request() {
  _oneof_case_[0] = kMapRequest;
}
inline void OpRequest::clear_map_request() {
  if (has_map_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.map_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::MapRequest& OpRequest::map_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.map_request)
  return has_map_request()
      ? *op_.map_request_
      : ::xla::MapRequest::default_instance();
}
inline ::xla::MapRequest* OpRequest::mutable_map_request() {
  if (!has_map_request()) {
    clear_op();
    set_has_map_request();
    op_.map_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::MapRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.map_request)
  return op_.map_request_;
}
inline ::xla::MapRequest* OpRequest::release_map_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.map_request)
  if (has_map_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::MapRequest* temp = new ::xla::MapRequest(*op_.map_request_);
      op_.map_request_ = NULL;
      return temp;
    } else {
      ::xla::MapRequest* temp = op_.map_request_;
      op_.map_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_map_request(::xla::MapRequest* map_request) {
  clear_op();
  if (map_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(map_request) == NULL) {
      GetArenaNoVirtual()->Own(map_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(map_request)) {
      ::xla::MapRequest* new_map_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::MapRequest >(
          GetArenaNoVirtual());
      new_map_request->CopyFrom(*map_request);
      map_request = new_map_request;
    }
    set_has_map_request();
    op_.map_request_ = map_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.map_request)
}
inline  ::xla::MapRequest* OpRequest::unsafe_arena_release_map_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.map_request)
  if (has_map_request()) {
    clear_has_op();
    ::xla::MapRequest* temp = op_.map_request_;
    op_.map_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_map_request(::xla::MapRequest* map_request) {
  clear_op();
  if (map_request) {
    set_has_map_request();
    op_.map_request_ = map_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.map_request)
}

// .xla.PadRequest pad_request = 16;
inline bool OpRequest::has_pad_request() const {
  return op_case() == kPadRequest;
}
inline void OpRequest::set_has_pad_request() {
  _oneof_case_[0] = kPadRequest;
}
inline void OpRequest::clear_pad_request() {
  if (has_pad_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.pad_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::PadRequest& OpRequest::pad_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.pad_request)
  return has_pad_request()
      ? *op_.pad_request_
      : ::xla::PadRequest::default_instance();
}
inline ::xla::PadRequest* OpRequest::mutable_pad_request() {
  if (!has_pad_request()) {
    clear_op();
    set_has_pad_request();
    op_.pad_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::PadRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.pad_request)
  return op_.pad_request_;
}
inline ::xla::PadRequest* OpRequest::release_pad_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.pad_request)
  if (has_pad_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::PadRequest* temp = new ::xla::PadRequest(*op_.pad_request_);
      op_.pad_request_ = NULL;
      return temp;
    } else {
      ::xla::PadRequest* temp = op_.pad_request_;
      op_.pad_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_pad_request(::xla::PadRequest* pad_request) {
  clear_op();
  if (pad_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(pad_request) == NULL) {
      GetArenaNoVirtual()->Own(pad_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(pad_request)) {
      ::xla::PadRequest* new_pad_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::PadRequest >(
          GetArenaNoVirtual());
      new_pad_request->CopyFrom(*pad_request);
      pad_request = new_pad_request;
    }
    set_has_pad_request();
    op_.pad_request_ = pad_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.pad_request)
}
inline  ::xla::PadRequest* OpRequest::unsafe_arena_release_pad_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.pad_request)
  if (has_pad_request()) {
    clear_has_op();
    ::xla::PadRequest* temp = op_.pad_request_;
    op_.pad_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_pad_request(::xla::PadRequest* pad_request) {
  clear_op();
  if (pad_request) {
    set_has_pad_request();
    op_.pad_request_ = pad_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.pad_request)
}

// .xla.ParameterRequest parameter_request = 17;
inline bool OpRequest::has_parameter_request() const {
  return op_case() == kParameterRequest;
}
inline void OpRequest::set_has_parameter_request() {
  _oneof_case_[0] = kParameterRequest;
}
inline void OpRequest::clear_parameter_request() {
  if (has_parameter_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.parameter_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ParameterRequest& OpRequest::parameter_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.parameter_request)
  return has_parameter_request()
      ? *op_.parameter_request_
      : ::xla::ParameterRequest::default_instance();
}
inline ::xla::ParameterRequest* OpRequest::mutable_parameter_request() {
  if (!has_parameter_request()) {
    clear_op();
    set_has_parameter_request();
    op_.parameter_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ParameterRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.parameter_request)
  return op_.parameter_request_;
}
inline ::xla::ParameterRequest* OpRequest::release_parameter_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.parameter_request)
  if (has_parameter_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ParameterRequest* temp = new ::xla::ParameterRequest(*op_.parameter_request_);
      op_.parameter_request_ = NULL;
      return temp;
    } else {
      ::xla::ParameterRequest* temp = op_.parameter_request_;
      op_.parameter_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_parameter_request(::xla::ParameterRequest* parameter_request) {
  clear_op();
  if (parameter_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(parameter_request) == NULL) {
      GetArenaNoVirtual()->Own(parameter_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(parameter_request)) {
      ::xla::ParameterRequest* new_parameter_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ParameterRequest >(
          GetArenaNoVirtual());
      new_parameter_request->CopyFrom(*parameter_request);
      parameter_request = new_parameter_request;
    }
    set_has_parameter_request();
    op_.parameter_request_ = parameter_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.parameter_request)
}
inline  ::xla::ParameterRequest* OpRequest::unsafe_arena_release_parameter_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.parameter_request)
  if (has_parameter_request()) {
    clear_has_op();
    ::xla::ParameterRequest* temp = op_.parameter_request_;
    op_.parameter_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_parameter_request(::xla::ParameterRequest* parameter_request) {
  clear_op();
  if (parameter_request) {
    set_has_parameter_request();
    op_.parameter_request_ = parameter_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.parameter_request)
}

// .xla.ReduceRequest reduce_request = 18;
inline bool OpRequest::has_reduce_request() const {
  return op_case() == kReduceRequest;
}
inline void OpRequest::set_has_reduce_request() {
  _oneof_case_[0] = kReduceRequest;
}
inline void OpRequest::clear_reduce_request() {
  if (has_reduce_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reduce_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ReduceRequest& OpRequest::reduce_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reduce_request)
  return has_reduce_request()
      ? *op_.reduce_request_
      : ::xla::ReduceRequest::default_instance();
}
inline ::xla::ReduceRequest* OpRequest::mutable_reduce_request() {
  if (!has_reduce_request()) {
    clear_op();
    set_has_reduce_request();
    op_.reduce_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReduceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reduce_request)
  return op_.reduce_request_;
}
inline ::xla::ReduceRequest* OpRequest::release_reduce_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reduce_request)
  if (has_reduce_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReduceRequest* temp = new ::xla::ReduceRequest(*op_.reduce_request_);
      op_.reduce_request_ = NULL;
      return temp;
    } else {
      ::xla::ReduceRequest* temp = op_.reduce_request_;
      op_.reduce_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_reduce_request(::xla::ReduceRequest* reduce_request) {
  clear_op();
  if (reduce_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reduce_request) == NULL) {
      GetArenaNoVirtual()->Own(reduce_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reduce_request)) {
      ::xla::ReduceRequest* new_reduce_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReduceRequest >(
          GetArenaNoVirtual());
      new_reduce_request->CopyFrom(*reduce_request);
      reduce_request = new_reduce_request;
    }
    set_has_reduce_request();
    op_.reduce_request_ = reduce_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reduce_request)
}
inline  ::xla::ReduceRequest* OpRequest::unsafe_arena_release_reduce_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reduce_request)
  if (has_reduce_request()) {
    clear_has_op();
    ::xla::ReduceRequest* temp = op_.reduce_request_;
    op_.reduce_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_reduce_request(::xla::ReduceRequest* reduce_request) {
  clear_op();
  if (reduce_request) {
    set_has_reduce_request();
    op_.reduce_request_ = reduce_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reduce_request)
}

// .xla.ReduceWindowRequest reduce_window_request = 19;
inline bool OpRequest::has_reduce_window_request() const {
  return op_case() == kReduceWindowRequest;
}
inline void OpRequest::set_has_reduce_window_request() {
  _oneof_case_[0] = kReduceWindowRequest;
}
inline void OpRequest::clear_reduce_window_request() {
  if (has_reduce_window_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reduce_window_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ReduceWindowRequest& OpRequest::reduce_window_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reduce_window_request)
  return has_reduce_window_request()
      ? *op_.reduce_window_request_
      : ::xla::ReduceWindowRequest::default_instance();
}
inline ::xla::ReduceWindowRequest* OpRequest::mutable_reduce_window_request() {
  if (!has_reduce_window_request()) {
    clear_op();
    set_has_reduce_window_request();
    op_.reduce_window_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReduceWindowRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reduce_window_request)
  return op_.reduce_window_request_;
}
inline ::xla::ReduceWindowRequest* OpRequest::release_reduce_window_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reduce_window_request)
  if (has_reduce_window_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReduceWindowRequest* temp = new ::xla::ReduceWindowRequest(*op_.reduce_window_request_);
      op_.reduce_window_request_ = NULL;
      return temp;
    } else {
      ::xla::ReduceWindowRequest* temp = op_.reduce_window_request_;
      op_.reduce_window_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_reduce_window_request(::xla::ReduceWindowRequest* reduce_window_request) {
  clear_op();
  if (reduce_window_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reduce_window_request) == NULL) {
      GetArenaNoVirtual()->Own(reduce_window_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reduce_window_request)) {
      ::xla::ReduceWindowRequest* new_reduce_window_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReduceWindowRequest >(
          GetArenaNoVirtual());
      new_reduce_window_request->CopyFrom(*reduce_window_request);
      reduce_window_request = new_reduce_window_request;
    }
    set_has_reduce_window_request();
    op_.reduce_window_request_ = reduce_window_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reduce_window_request)
}
inline  ::xla::ReduceWindowRequest* OpRequest::unsafe_arena_release_reduce_window_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reduce_window_request)
  if (has_reduce_window_request()) {
    clear_has_op();
    ::xla::ReduceWindowRequest* temp = op_.reduce_window_request_;
    op_.reduce_window_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_reduce_window_request(::xla::ReduceWindowRequest* reduce_window_request) {
  clear_op();
  if (reduce_window_request) {
    set_has_reduce_window_request();
    op_.reduce_window_request_ = reduce_window_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reduce_window_request)
}

// .xla.ReshapeRequest reshape_request = 20;
inline bool OpRequest::has_reshape_request() const {
  return op_case() == kReshapeRequest;
}
inline void OpRequest::set_has_reshape_request() {
  _oneof_case_[0] = kReshapeRequest;
}
inline void OpRequest::clear_reshape_request() {
  if (has_reshape_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reshape_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ReshapeRequest& OpRequest::reshape_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reshape_request)
  return has_reshape_request()
      ? *op_.reshape_request_
      : ::xla::ReshapeRequest::default_instance();
}
inline ::xla::ReshapeRequest* OpRequest::mutable_reshape_request() {
  if (!has_reshape_request()) {
    clear_op();
    set_has_reshape_request();
    op_.reshape_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReshapeRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reshape_request)
  return op_.reshape_request_;
}
inline ::xla::ReshapeRequest* OpRequest::release_reshape_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reshape_request)
  if (has_reshape_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReshapeRequest* temp = new ::xla::ReshapeRequest(*op_.reshape_request_);
      op_.reshape_request_ = NULL;
      return temp;
    } else {
      ::xla::ReshapeRequest* temp = op_.reshape_request_;
      op_.reshape_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_reshape_request(::xla::ReshapeRequest* reshape_request) {
  clear_op();
  if (reshape_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reshape_request) == NULL) {
      GetArenaNoVirtual()->Own(reshape_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reshape_request)) {
      ::xla::ReshapeRequest* new_reshape_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReshapeRequest >(
          GetArenaNoVirtual());
      new_reshape_request->CopyFrom(*reshape_request);
      reshape_request = new_reshape_request;
    }
    set_has_reshape_request();
    op_.reshape_request_ = reshape_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reshape_request)
}
inline  ::xla::ReshapeRequest* OpRequest::unsafe_arena_release_reshape_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reshape_request)
  if (has_reshape_request()) {
    clear_has_op();
    ::xla::ReshapeRequest* temp = op_.reshape_request_;
    op_.reshape_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_reshape_request(::xla::ReshapeRequest* reshape_request) {
  clear_op();
  if (reshape_request) {
    set_has_reshape_request();
    op_.reshape_request_ = reshape_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reshape_request)
}

// .xla.ReverseRequest reverse_request = 21;
inline bool OpRequest::has_reverse_request() const {
  return op_case() == kReverseRequest;
}
inline void OpRequest::set_has_reverse_request() {
  _oneof_case_[0] = kReverseRequest;
}
inline void OpRequest::clear_reverse_request() {
  if (has_reverse_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reverse_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::ReverseRequest& OpRequest::reverse_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reverse_request)
  return has_reverse_request()
      ? *op_.reverse_request_
      : ::xla::ReverseRequest::default_instance();
}
inline ::xla::ReverseRequest* OpRequest::mutable_reverse_request() {
  if (!has_reverse_request()) {
    clear_op();
    set_has_reverse_request();
    op_.reverse_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReverseRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reverse_request)
  return op_.reverse_request_;
}
inline ::xla::ReverseRequest* OpRequest::release_reverse_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reverse_request)
  if (has_reverse_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReverseRequest* temp = new ::xla::ReverseRequest(*op_.reverse_request_);
      op_.reverse_request_ = NULL;
      return temp;
    } else {
      ::xla::ReverseRequest* temp = op_.reverse_request_;
      op_.reverse_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_reverse_request(::xla::ReverseRequest* reverse_request) {
  clear_op();
  if (reverse_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reverse_request) == NULL) {
      GetArenaNoVirtual()->Own(reverse_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reverse_request)) {
      ::xla::ReverseRequest* new_reverse_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReverseRequest >(
          GetArenaNoVirtual());
      new_reverse_request->CopyFrom(*reverse_request);
      reverse_request = new_reverse_request;
    }
    set_has_reverse_request();
    op_.reverse_request_ = reverse_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reverse_request)
}
inline  ::xla::ReverseRequest* OpRequest::unsafe_arena_release_reverse_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reverse_request)
  if (has_reverse_request()) {
    clear_has_op();
    ::xla::ReverseRequest* temp = op_.reverse_request_;
    op_.reverse_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_reverse_request(::xla::ReverseRequest* reverse_request) {
  clear_op();
  if (reverse_request) {
    set_has_reverse_request();
    op_.reverse_request_ = reverse_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reverse_request)
}

// .xla.RngRequest rng_request = 22;
inline bool OpRequest::has_rng_request() const {
  return op_case() == kRngRequest;
}
inline void OpRequest::set_has_rng_request() {
  _oneof_case_[0] = kRngRequest;
}
inline void OpRequest::clear_rng_request() {
  if (has_rng_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.rng_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::RngRequest& OpRequest::rng_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.rng_request)
  return has_rng_request()
      ? *op_.rng_request_
      : ::xla::RngRequest::default_instance();
}
inline ::xla::RngRequest* OpRequest::mutable_rng_request() {
  if (!has_rng_request()) {
    clear_op();
    set_has_rng_request();
    op_.rng_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::RngRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.rng_request)
  return op_.rng_request_;
}
inline ::xla::RngRequest* OpRequest::release_rng_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.rng_request)
  if (has_rng_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::RngRequest* temp = new ::xla::RngRequest(*op_.rng_request_);
      op_.rng_request_ = NULL;
      return temp;
    } else {
      ::xla::RngRequest* temp = op_.rng_request_;
      op_.rng_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_rng_request(::xla::RngRequest* rng_request) {
  clear_op();
  if (rng_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(rng_request) == NULL) {
      GetArenaNoVirtual()->Own(rng_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(rng_request)) {
      ::xla::RngRequest* new_rng_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::RngRequest >(
          GetArenaNoVirtual());
      new_rng_request->CopyFrom(*rng_request);
      rng_request = new_rng_request;
    }
    set_has_rng_request();
    op_.rng_request_ = rng_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.rng_request)
}
inline  ::xla::RngRequest* OpRequest::unsafe_arena_release_rng_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.rng_request)
  if (has_rng_request()) {
    clear_has_op();
    ::xla::RngRequest* temp = op_.rng_request_;
    op_.rng_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_rng_request(::xla::RngRequest* rng_request) {
  clear_op();
  if (rng_request) {
    set_has_rng_request();
    op_.rng_request_ = rng_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.rng_request)
}

// .xla.SelectAndScatterRequest select_and_scatter_request = 23;
inline bool OpRequest::has_select_and_scatter_request() const {
  return op_case() == kSelectAndScatterRequest;
}
inline void OpRequest::set_has_select_and_scatter_request() {
  _oneof_case_[0] = kSelectAndScatterRequest;
}
inline void OpRequest::clear_select_and_scatter_request() {
  if (has_select_and_scatter_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.select_and_scatter_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::SelectAndScatterRequest& OpRequest::select_and_scatter_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.select_and_scatter_request)
  return has_select_and_scatter_request()
      ? *op_.select_and_scatter_request_
      : ::xla::SelectAndScatterRequest::default_instance();
}
inline ::xla::SelectAndScatterRequest* OpRequest::mutable_select_and_scatter_request() {
  if (!has_select_and_scatter_request()) {
    clear_op();
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SelectAndScatterRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.select_and_scatter_request)
  return op_.select_and_scatter_request_;
}
inline ::xla::SelectAndScatterRequest* OpRequest::release_select_and_scatter_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.select_and_scatter_request)
  if (has_select_and_scatter_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SelectAndScatterRequest* temp = new ::xla::SelectAndScatterRequest(*op_.select_and_scatter_request_);
      op_.select_and_scatter_request_ = NULL;
      return temp;
    } else {
      ::xla::SelectAndScatterRequest* temp = op_.select_and_scatter_request_;
      op_.select_and_scatter_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_select_and_scatter_request(::xla::SelectAndScatterRequest* select_and_scatter_request) {
  clear_op();
  if (select_and_scatter_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(select_and_scatter_request) == NULL) {
      GetArenaNoVirtual()->Own(select_and_scatter_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(select_and_scatter_request)) {
      ::xla::SelectAndScatterRequest* new_select_and_scatter_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SelectAndScatterRequest >(
          GetArenaNoVirtual());
      new_select_and_scatter_request->CopyFrom(*select_and_scatter_request);
      select_and_scatter_request = new_select_and_scatter_request;
    }
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = select_and_scatter_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.select_and_scatter_request)
}
inline  ::xla::SelectAndScatterRequest* OpRequest::unsafe_arena_release_select_and_scatter_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.select_and_scatter_request)
  if (has_select_and_scatter_request()) {
    clear_has_op();
    ::xla::SelectAndScatterRequest* temp = op_.select_and_scatter_request_;
    op_.select_and_scatter_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_select_and_scatter_request(::xla::SelectAndScatterRequest* select_and_scatter_request) {
  clear_op();
  if (select_and_scatter_request) {
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = select_and_scatter_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.select_and_scatter_request)
}

// .xla.SliceRequest slice_request = 24;
inline bool OpRequest::has_slice_request() const {
  return op_case() == kSliceRequest;
}
inline void OpRequest::set_has_slice_request() {
  _oneof_case_[0] = kSliceRequest;
}
inline void OpRequest::clear_slice_request() {
  if (has_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.slice_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::SliceRequest& OpRequest::slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.slice_request)
  return has_slice_request()
      ? *op_.slice_request_
      : ::xla::SliceRequest::default_instance();
}
inline ::xla::SliceRequest* OpRequest::mutable_slice_request() {
  if (!has_slice_request()) {
    clear_op();
    set_has_slice_request();
    op_.slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.slice_request)
  return op_.slice_request_;
}
inline ::xla::SliceRequest* OpRequest::release_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.slice_request)
  if (has_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SliceRequest* temp = new ::xla::SliceRequest(*op_.slice_request_);
      op_.slice_request_ = NULL;
      return temp;
    } else {
      ::xla::SliceRequest* temp = op_.slice_request_;
      op_.slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_slice_request(::xla::SliceRequest* slice_request) {
  clear_op();
  if (slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(slice_request) == NULL) {
      GetArenaNoVirtual()->Own(slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(slice_request)) {
      ::xla::SliceRequest* new_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SliceRequest >(
          GetArenaNoVirtual());
      new_slice_request->CopyFrom(*slice_request);
      slice_request = new_slice_request;
    }
    set_has_slice_request();
    op_.slice_request_ = slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.slice_request)
}
inline  ::xla::SliceRequest* OpRequest::unsafe_arena_release_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.slice_request)
  if (has_slice_request()) {
    clear_has_op();
    ::xla::SliceRequest* temp = op_.slice_request_;
    op_.slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_slice_request(::xla::SliceRequest* slice_request) {
  clear_op();
  if (slice_request) {
    set_has_slice_request();
    op_.slice_request_ = slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.slice_request)
}

// .xla.TernaryOpRequest ternary_op_request = 25;
inline bool OpRequest::has_ternary_op_request() const {
  return op_case() == kTernaryOpRequest;
}
inline void OpRequest::set_has_ternary_op_request() {
  _oneof_case_[0] = kTernaryOpRequest;
}
inline void OpRequest::clear_ternary_op_request() {
  if (has_ternary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.ternary_op_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::TernaryOpRequest& OpRequest::ternary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.ternary_op_request)
  return has_ternary_op_request()
      ? *op_.ternary_op_request_
      : ::xla::TernaryOpRequest::default_instance();
}
inline ::xla::TernaryOpRequest* OpRequest::mutable_ternary_op_request() {
  if (!has_ternary_op_request()) {
    clear_op();
    set_has_ternary_op_request();
    op_.ternary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TernaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.ternary_op_request)
  return op_.ternary_op_request_;
}
inline ::xla::TernaryOpRequest* OpRequest::release_ternary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.ternary_op_request)
  if (has_ternary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TernaryOpRequest* temp = new ::xla::TernaryOpRequest(*op_.ternary_op_request_);
      op_.ternary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::TernaryOpRequest* temp = op_.ternary_op_request_;
      op_.ternary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_ternary_op_request(::xla::TernaryOpRequest* ternary_op_request) {
  clear_op();
  if (ternary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(ternary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(ternary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(ternary_op_request)) {
      ::xla::TernaryOpRequest* new_ternary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TernaryOpRequest >(
          GetArenaNoVirtual());
      new_ternary_op_request->CopyFrom(*ternary_op_request);
      ternary_op_request = new_ternary_op_request;
    }
    set_has_ternary_op_request();
    op_.ternary_op_request_ = ternary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.ternary_op_request)
}
inline  ::xla::TernaryOpRequest* OpRequest::unsafe_arena_release_ternary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.ternary_op_request)
  if (has_ternary_op_request()) {
    clear_has_op();
    ::xla::TernaryOpRequest* temp = op_.ternary_op_request_;
    op_.ternary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_ternary_op_request(::xla::TernaryOpRequest* ternary_op_request) {
  clear_op();
  if (ternary_op_request) {
    set_has_ternary_op_request();
    op_.ternary_op_request_ = ternary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.ternary_op_request)
}

// .xla.TraceRequest trace_request = 26;
inline bool OpRequest::has_trace_request() const {
  return op_case() == kTraceRequest;
}
inline void OpRequest::set_has_trace_request() {
  _oneof_case_[0] = kTraceRequest;
}
inline void OpRequest::clear_trace_request() {
  if (has_trace_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.trace_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::TraceRequest& OpRequest::trace_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.trace_request)
  return has_trace_request()
      ? *op_.trace_request_
      : ::xla::TraceRequest::default_instance();
}
inline ::xla::TraceRequest* OpRequest::mutable_trace_request() {
  if (!has_trace_request()) {
    clear_op();
    set_has_trace_request();
    op_.trace_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TraceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.trace_request)
  return op_.trace_request_;
}
inline ::xla::TraceRequest* OpRequest::release_trace_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.trace_request)
  if (has_trace_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TraceRequest* temp = new ::xla::TraceRequest(*op_.trace_request_);
      op_.trace_request_ = NULL;
      return temp;
    } else {
      ::xla::TraceRequest* temp = op_.trace_request_;
      op_.trace_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_trace_request(::xla::TraceRequest* trace_request) {
  clear_op();
  if (trace_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(trace_request) == NULL) {
      GetArenaNoVirtual()->Own(trace_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(trace_request)) {
      ::xla::TraceRequest* new_trace_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TraceRequest >(
          GetArenaNoVirtual());
      new_trace_request->CopyFrom(*trace_request);
      trace_request = new_trace_request;
    }
    set_has_trace_request();
    op_.trace_request_ = trace_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.trace_request)
}
inline  ::xla::TraceRequest* OpRequest::unsafe_arena_release_trace_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.trace_request)
  if (has_trace_request()) {
    clear_has_op();
    ::xla::TraceRequest* temp = op_.trace_request_;
    op_.trace_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_trace_request(::xla::TraceRequest* trace_request) {
  clear_op();
  if (trace_request) {
    set_has_trace_request();
    op_.trace_request_ = trace_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.trace_request)
}

// .xla.TransposeRequest transpose_request = 34;
inline bool OpRequest::has_transpose_request() const {
  return op_case() == kTransposeRequest;
}
inline void OpRequest::set_has_transpose_request() {
  _oneof_case_[0] = kTransposeRequest;
}
inline void OpRequest::clear_transpose_request() {
  if (has_transpose_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.transpose_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::TransposeRequest& OpRequest::transpose_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.transpose_request)
  return has_transpose_request()
      ? *op_.transpose_request_
      : ::xla::TransposeRequest::default_instance();
}
inline ::xla::TransposeRequest* OpRequest::mutable_transpose_request() {
  if (!has_transpose_request()) {
    clear_op();
    set_has_transpose_request();
    op_.transpose_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TransposeRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.transpose_request)
  return op_.transpose_request_;
}
inline ::xla::TransposeRequest* OpRequest::release_transpose_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.transpose_request)
  if (has_transpose_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TransposeRequest* temp = new ::xla::TransposeRequest(*op_.transpose_request_);
      op_.transpose_request_ = NULL;
      return temp;
    } else {
      ::xla::TransposeRequest* temp = op_.transpose_request_;
      op_.transpose_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_transpose_request(::xla::TransposeRequest* transpose_request) {
  clear_op();
  if (transpose_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(transpose_request) == NULL) {
      GetArenaNoVirtual()->Own(transpose_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(transpose_request)) {
      ::xla::TransposeRequest* new_transpose_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TransposeRequest >(
          GetArenaNoVirtual());
      new_transpose_request->CopyFrom(*transpose_request);
      transpose_request = new_transpose_request;
    }
    set_has_transpose_request();
    op_.transpose_request_ = transpose_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.transpose_request)
}
inline  ::xla::TransposeRequest* OpRequest::unsafe_arena_release_transpose_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.transpose_request)
  if (has_transpose_request()) {
    clear_has_op();
    ::xla::TransposeRequest* temp = op_.transpose_request_;
    op_.transpose_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_transpose_request(::xla::TransposeRequest* transpose_request) {
  clear_op();
  if (transpose_request) {
    set_has_transpose_request();
    op_.transpose_request_ = transpose_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.transpose_request)
}

// .xla.UnaryOpRequest unary_op_request = 27;
inline bool OpRequest::has_unary_op_request() const {
  return op_case() == kUnaryOpRequest;
}
inline void OpRequest::set_has_unary_op_request() {
  _oneof_case_[0] = kUnaryOpRequest;
}
inline void OpRequest::clear_unary_op_request() {
  if (has_unary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.unary_op_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::UnaryOpRequest& OpRequest::unary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.unary_op_request)
  return has_unary_op_request()
      ? *op_.unary_op_request_
      : ::xla::UnaryOpRequest::default_instance();
}
inline ::xla::UnaryOpRequest* OpRequest::mutable_unary_op_request() {
  if (!has_unary_op_request()) {
    clear_op();
    set_has_unary_op_request();
    op_.unary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::UnaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.unary_op_request)
  return op_.unary_op_request_;
}
inline ::xla::UnaryOpRequest* OpRequest::release_unary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.unary_op_request)
  if (has_unary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::UnaryOpRequest* temp = new ::xla::UnaryOpRequest(*op_.unary_op_request_);
      op_.unary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::UnaryOpRequest* temp = op_.unary_op_request_;
      op_.unary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_unary_op_request(::xla::UnaryOpRequest* unary_op_request) {
  clear_op();
  if (unary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(unary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(unary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(unary_op_request)) {
      ::xla::UnaryOpRequest* new_unary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::UnaryOpRequest >(
          GetArenaNoVirtual());
      new_unary_op_request->CopyFrom(*unary_op_request);
      unary_op_request = new_unary_op_request;
    }
    set_has_unary_op_request();
    op_.unary_op_request_ = unary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.unary_op_request)
}
inline  ::xla::UnaryOpRequest* OpRequest::unsafe_arena_release_unary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.unary_op_request)
  if (has_unary_op_request()) {
    clear_has_op();
    ::xla::UnaryOpRequest* temp = op_.unary_op_request_;
    op_.unary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_unary_op_request(::xla::UnaryOpRequest* unary_op_request) {
  clear_op();
  if (unary_op_request) {
    set_has_unary_op_request();
    op_.unary_op_request_ = unary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.unary_op_request)
}

// .xla.VariadicOpRequest variadic_op_request = 28;
inline bool OpRequest::has_variadic_op_request() const {
  return op_case() == kVariadicOpRequest;
}
inline void OpRequest::set_has_variadic_op_request() {
  _oneof_case_[0] = kVariadicOpRequest;
}
inline void OpRequest::clear_variadic_op_request() {
  if (has_variadic_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.variadic_op_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::VariadicOpRequest& OpRequest::variadic_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.variadic_op_request)
  return has_variadic_op_request()
      ? *op_.variadic_op_request_
      : ::xla::VariadicOpRequest::default_instance();
}
inline ::xla::VariadicOpRequest* OpRequest::mutable_variadic_op_request() {
  if (!has_variadic_op_request()) {
    clear_op();
    set_has_variadic_op_request();
    op_.variadic_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::VariadicOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.variadic_op_request)
  return op_.variadic_op_request_;
}
inline ::xla::VariadicOpRequest* OpRequest::release_variadic_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.variadic_op_request)
  if (has_variadic_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::VariadicOpRequest* temp = new ::xla::VariadicOpRequest(*op_.variadic_op_request_);
      op_.variadic_op_request_ = NULL;
      return temp;
    } else {
      ::xla::VariadicOpRequest* temp = op_.variadic_op_request_;
      op_.variadic_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_variadic_op_request(::xla::VariadicOpRequest* variadic_op_request) {
  clear_op();
  if (variadic_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(variadic_op_request) == NULL) {
      GetArenaNoVirtual()->Own(variadic_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(variadic_op_request)) {
      ::xla::VariadicOpRequest* new_variadic_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::VariadicOpRequest >(
          GetArenaNoVirtual());
      new_variadic_op_request->CopyFrom(*variadic_op_request);
      variadic_op_request = new_variadic_op_request;
    }
    set_has_variadic_op_request();
    op_.variadic_op_request_ = variadic_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.variadic_op_request)
}
inline  ::xla::VariadicOpRequest* OpRequest::unsafe_arena_release_variadic_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.variadic_op_request)
  if (has_variadic_op_request()) {
    clear_has_op();
    ::xla::VariadicOpRequest* temp = op_.variadic_op_request_;
    op_.variadic_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_variadic_op_request(::xla::VariadicOpRequest* variadic_op_request) {
  clear_op();
  if (variadic_op_request) {
    set_has_variadic_op_request();
    op_.variadic_op_request_ = variadic_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.variadic_op_request)
}

// .xla.WhileRequest while_request = 29;
inline bool OpRequest::has_while_request() const {
  return op_case() == kWhileRequest;
}
inline void OpRequest::set_has_while_request() {
  _oneof_case_[0] = kWhileRequest;
}
inline void OpRequest::clear_while_request() {
  if (has_while_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.while_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::WhileRequest& OpRequest::while_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.while_request)
  return has_while_request()
      ? *op_.while_request_
      : ::xla::WhileRequest::default_instance();
}
inline ::xla::WhileRequest* OpRequest::mutable_while_request() {
  if (!has_while_request()) {
    clear_op();
    set_has_while_request();
    op_.while_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::WhileRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.while_request)
  return op_.while_request_;
}
inline ::xla::WhileRequest* OpRequest::release_while_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.while_request)
  if (has_while_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::WhileRequest* temp = new ::xla::WhileRequest(*op_.while_request_);
      op_.while_request_ = NULL;
      return temp;
    } else {
      ::xla::WhileRequest* temp = op_.while_request_;
      op_.while_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_while_request(::xla::WhileRequest* while_request) {
  clear_op();
  if (while_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(while_request) == NULL) {
      GetArenaNoVirtual()->Own(while_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(while_request)) {
      ::xla::WhileRequest* new_while_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::WhileRequest >(
          GetArenaNoVirtual());
      new_while_request->CopyFrom(*while_request);
      while_request = new_while_request;
    }
    set_has_while_request();
    op_.while_request_ = while_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.while_request)
}
inline  ::xla::WhileRequest* OpRequest::unsafe_arena_release_while_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.while_request)
  if (has_while_request()) {
    clear_has_op();
    ::xla::WhileRequest* temp = op_.while_request_;
    op_.while_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_while_request(::xla::WhileRequest* while_request) {
  clear_op();
  if (while_request) {
    set_has_while_request();
    op_.while_request_ = while_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.while_request)
}

// .xla.SendRequest send_request = 30;
inline bool OpRequest::has_send_request() const {
  return op_case() == kSendRequest;
}
inline void OpRequest::set_has_send_request() {
  _oneof_case_[0] = kSendRequest;
}
inline void OpRequest::clear_send_request() {
  if (has_send_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.send_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::SendRequest& OpRequest::send_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.send_request)
  return has_send_request()
      ? *op_.send_request_
      : ::xla::SendRequest::default_instance();
}
inline ::xla::SendRequest* OpRequest::mutable_send_request() {
  if (!has_send_request()) {
    clear_op();
    set_has_send_request();
    op_.send_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SendRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.send_request)
  return op_.send_request_;
}
inline ::xla::SendRequest* OpRequest::release_send_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.send_request)
  if (has_send_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SendRequest* temp = new ::xla::SendRequest(*op_.send_request_);
      op_.send_request_ = NULL;
      return temp;
    } else {
      ::xla::SendRequest* temp = op_.send_request_;
      op_.send_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_send_request(::xla::SendRequest* send_request) {
  clear_op();
  if (send_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(send_request) == NULL) {
      GetArenaNoVirtual()->Own(send_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(send_request)) {
      ::xla::SendRequest* new_send_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SendRequest >(
          GetArenaNoVirtual());
      new_send_request->CopyFrom(*send_request);
      send_request = new_send_request;
    }
    set_has_send_request();
    op_.send_request_ = send_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.send_request)
}
inline  ::xla::SendRequest* OpRequest::unsafe_arena_release_send_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.send_request)
  if (has_send_request()) {
    clear_has_op();
    ::xla::SendRequest* temp = op_.send_request_;
    op_.send_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_send_request(::xla::SendRequest* send_request) {
  clear_op();
  if (send_request) {
    set_has_send_request();
    op_.send_request_ = send_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.send_request)
}

// .xla.RecvRequest recv_request = 31;
inline bool OpRequest::has_recv_request() const {
  return op_case() == kRecvRequest;
}
inline void OpRequest::set_has_recv_request() {
  _oneof_case_[0] = kRecvRequest;
}
inline void OpRequest::clear_recv_request() {
  if (has_recv_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.recv_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::RecvRequest& OpRequest::recv_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.recv_request)
  return has_recv_request()
      ? *op_.recv_request_
      : ::xla::RecvRequest::default_instance();
}
inline ::xla::RecvRequest* OpRequest::mutable_recv_request() {
  if (!has_recv_request()) {
    clear_op();
    set_has_recv_request();
    op_.recv_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::RecvRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.recv_request)
  return op_.recv_request_;
}
inline ::xla::RecvRequest* OpRequest::release_recv_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.recv_request)
  if (has_recv_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::RecvRequest* temp = new ::xla::RecvRequest(*op_.recv_request_);
      op_.recv_request_ = NULL;
      return temp;
    } else {
      ::xla::RecvRequest* temp = op_.recv_request_;
      op_.recv_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_recv_request(::xla::RecvRequest* recv_request) {
  clear_op();
  if (recv_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(recv_request) == NULL) {
      GetArenaNoVirtual()->Own(recv_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(recv_request)) {
      ::xla::RecvRequest* new_recv_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::RecvRequest >(
          GetArenaNoVirtual());
      new_recv_request->CopyFrom(*recv_request);
      recv_request = new_recv_request;
    }
    set_has_recv_request();
    op_.recv_request_ = recv_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.recv_request)
}
inline  ::xla::RecvRequest* OpRequest::unsafe_arena_release_recv_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.recv_request)
  if (has_recv_request()) {
    clear_has_op();
    ::xla::RecvRequest* temp = op_.recv_request_;
    op_.recv_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_recv_request(::xla::RecvRequest* recv_request) {
  clear_op();
  if (recv_request) {
    set_has_recv_request();
    op_.recv_request_ = recv_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.recv_request)
}

// .xla.OutfeedRequest outfeed_request = 32;
inline bool OpRequest::has_outfeed_request() const {
  return op_case() == kOutfeedRequest;
}
inline void OpRequest::set_has_outfeed_request() {
  _oneof_case_[0] = kOutfeedRequest;
}
inline void OpRequest::clear_outfeed_request() {
  if (has_outfeed_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.outfeed_request_;
    }
    clear_has_op();
  }
}
inline  const ::xla::OutfeedRequest& OpRequest::outfeed_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.outfeed_request)
  return has_outfeed_request()
      ? *op_.outfeed_request_
      : ::xla::OutfeedRequest::default_instance();
}
inline ::xla::OutfeedRequest* OpRequest::mutable_outfeed_request() {
  if (!has_outfeed_request()) {
    clear_op();
    set_has_outfeed_request();
    op_.outfeed_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::OutfeedRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.outfeed_request)
  return op_.outfeed_request_;
}
inline ::xla::OutfeedRequest* OpRequest::release_outfeed_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.outfeed_request)
  if (has_outfeed_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::OutfeedRequest* temp = new ::xla::OutfeedRequest(*op_.outfeed_request_);
      op_.outfeed_request_ = NULL;
      return temp;
    } else {
      ::xla::OutfeedRequest* temp = op_.outfeed_request_;
      op_.outfeed_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void OpRequest::set_allocated_outfeed_request(::xla::OutfeedRequest* outfeed_request) {
  clear_op();
  if (outfeed_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(outfeed_request) == NULL) {
      GetArenaNoVirtual()->Own(outfeed_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(outfeed_request)) {
      ::xla::OutfeedRequest* new_outfeed_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::OutfeedRequest >(
          GetArenaNoVirtual());
      new_outfeed_request->CopyFrom(*outfeed_request);
      outfeed_request = new_outfeed_request;
    }
    set_has_outfeed_request();
    op_.outfeed_request_ = outfeed_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.outfeed_request)
}
inline  ::xla::OutfeedRequest* OpRequest::unsafe_arena_release_outfeed_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.outfeed_request)
  if (has_outfeed_request()) {
    clear_has_op();
    ::xla::OutfeedRequest* temp = op_.outfeed_request_;
    op_.outfeed_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void OpRequest::unsafe_arena_set_allocated_outfeed_request(::xla::OutfeedRequest* outfeed_request) {
  clear_op();
  if (outfeed_request) {
    set_has_outfeed_request();
    op_.outfeed_request_ = outfeed_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.outfeed_request)
}

inline bool OpRequest::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void OpRequest::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline OpRequest::OpCase OpRequest::op_case() const {
  return OpRequest::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OpResponse

// .xla.ComputationDataHandle output = 1;
inline bool OpResponse::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void OpResponse::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
inline const ::xla::ComputationDataHandle& OpResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.OpResponse.output)
  return output_ != NULL ? *output_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
inline ::xla::ComputationDataHandle* OpResponse::mutable_output() {
  
  if (output_ == NULL) {
    _slow_mutable_output();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpResponse.output)
  return output_;
}
inline ::xla::ComputationDataHandle* OpResponse::release_output() {
  // @@protoc_insertion_point(field_release:xla.OpResponse.output)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_output();
  } else {
    ::xla::ComputationDataHandle* temp = output_;
    output_ = NULL;
    return temp;
  }
}
inline  void OpResponse::set_allocated_output(::xla::ComputationDataHandle* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output != NULL) {
    _slow_set_allocated_output(message_arena, &output);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpResponse.output)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace xla

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xla::PrimitiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::PrimitiveType>() {
  return ::xla::PrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::xla::PaddingValue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::PaddingValue>() {
  return ::xla::PaddingValue_descriptor();
}
template <> struct is_proto_enum< ::xla::UnaryOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::UnaryOperation>() {
  return ::xla::UnaryOperation_descriptor();
}
template <> struct is_proto_enum< ::xla::BinaryOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::BinaryOperation>() {
  return ::xla::BinaryOperation_descriptor();
}
template <> struct is_proto_enum< ::xla::RandomDistribution> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::RandomDistribution>() {
  return ::xla::RandomDistribution_descriptor();
}
template <> struct is_proto_enum< ::xla::TernaryOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::TernaryOperation>() {
  return ::xla::TernaryOperation_descriptor();
}
template <> struct is_proto_enum< ::xla::VariadicOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::VariadicOperation>() {
  return ::xla::VariadicOperation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto__INCLUDED
