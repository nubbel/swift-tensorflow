// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/xla_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/compiler/xla/xla_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xla {
class PaddingConfig_PaddingConfigDimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaddingConfig_PaddingConfigDimension> {
} _PaddingConfig_PaddingConfigDimension_default_instance_;
class PaddingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaddingConfig> {
} _PaddingConfig_default_instance_;
class LayoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Layout> {
} _Layout_default_instance_;
class ShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Shape> {
} _Shape_default_instance_;
class ProgramShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProgramShape> {
} _ProgramShape_default_instance_;
class ComputationStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationStats> {
} _ComputationStats_default_instance_;
class OpMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpMetadata> {
} _OpMetadata_default_instance_;
class ExecutionProfileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecutionProfile> {
} _ExecutionProfile_default_instance_;
class ComputationHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationHandle> {
} _ComputationHandle_default_instance_;
class ExecutionHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecutionHandle> {
} _ExecutionHandle_default_instance_;
class GlobalDataHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GlobalDataHandle> {
} _GlobalDataHandle_default_instance_;
class ComputationDataHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationDataHandle> {
} _ComputationDataHandle_default_instance_;
class DeviceHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceHandle> {
} _DeviceHandle_default_instance_;
class ChannelHandleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelHandle> {
} _ChannelHandle_default_instance_;
class LiteralDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Literal> {
} _Literal_default_instance_;
class WindowDimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WindowDimension> {
} _WindowDimension_default_instance_;
class WindowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Window> {
} _Window_default_instance_;
class ConstantRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConstantRequest> {
} _ConstantRequest_default_instance_;
class GetTupleElementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTupleElementRequest> {
} _GetTupleElementRequest_default_instance_;
class SliceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SliceRequest> {
} _SliceRequest_default_instance_;
class DynamicSliceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynamicSliceRequest> {
} _DynamicSliceRequest_default_instance_;
class DynamicUpdateSliceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynamicUpdateSliceRequest> {
} _DynamicUpdateSliceRequest_default_instance_;
class ConvolutionDimensionNumbersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionDimensionNumbers> {
} _ConvolutionDimensionNumbers_default_instance_;
class ConvolveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvolveRequest> {
} _ConvolveRequest_default_instance_;
class InfeedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfeedRequest> {
} _InfeedRequest_default_instance_;
class OutfeedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OutfeedRequest> {
} _OutfeedRequest_default_instance_;
class CallRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CallRequest> {
} _CallRequest_default_instance_;
class CustomCallRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CustomCallRequest> {
} _CustomCallRequest_default_instance_;
class MapRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapRequest> {
} _MapRequest_default_instance_;
class ReduceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReduceRequest> {
} _ReduceRequest_default_instance_;
class ReduceWindowRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReduceWindowRequest> {
} _ReduceWindowRequest_default_instance_;
class CrossReplicaSumRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CrossReplicaSumRequest> {
} _CrossReplicaSumRequest_default_instance_;
class SelectAndScatterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectAndScatterRequest> {
} _SelectAndScatterRequest_default_instance_;
class ReverseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReverseRequest> {
} _ReverseRequest_default_instance_;
class BroadcastRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastRequest> {
} _BroadcastRequest_default_instance_;
class PadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PadRequest> {
} _PadRequest_default_instance_;
class ReshapeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReshapeRequest> {
} _ReshapeRequest_default_instance_;
class TransposeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransposeRequest> {
} _TransposeRequest_default_instance_;
class ParameterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParameterRequest> {
} _ParameterRequest_default_instance_;
class GetLocalShapeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocalShapeRequest> {
} _GetLocalShapeRequest_default_instance_;
class GetLocalShapeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocalShapeResponse> {
} _GetLocalShapeResponse_default_instance_;
class TraceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceRequest> {
} _TraceRequest_default_instance_;
class ConvertRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvertRequest> {
} _ConvertRequest_default_instance_;
class ConcatenateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConcatenateRequest> {
} _ConcatenateRequest_default_instance_;
class WhileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WhileRequest> {
} _WhileRequest_default_instance_;
class UnaryOpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnaryOpRequest> {
} _UnaryOpRequest_default_instance_;
class BinaryOpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BinaryOpRequest> {
} _BinaryOpRequest_default_instance_;
class RngRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RngRequest> {
} _RngRequest_default_instance_;
class TernaryOpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TernaryOpRequest> {
} _TernaryOpRequest_default_instance_;
class VariadicOpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariadicOpRequest> {
} _VariadicOpRequest_default_instance_;
class SendRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendRequest> {
} _SendRequest_default_instance_;
class RecvRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecvRequest> {
} _RecvRequest_default_instance_;
class OpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpRequest> {
  public:
  const ::xla::BinaryOpRequest* binary_op_request_;
  const ::xla::BroadcastRequest* broadcast_request_;
  const ::xla::CallRequest* call_request_;
  const ::xla::ConcatenateRequest* concatenate_request_;
  const ::xla::ConstantRequest* constant_request_;
  const ::xla::ConvertRequest* convert_request_;
  const ::xla::ConvolveRequest* convolve_request_;
  const ::xla::CrossReplicaSumRequest* cross_replica_sum_request_;
  const ::xla::CustomCallRequest* custom_call_request_;
  const ::xla::DynamicSliceRequest* dynamic_slice_request_;
  const ::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request_;
  const ::xla::GetTupleElementRequest* get_tuple_element_request_;
  const ::xla::InfeedRequest* infeed_request_;
  const ::xla::MapRequest* map_request_;
  const ::xla::PadRequest* pad_request_;
  const ::xla::ParameterRequest* parameter_request_;
  const ::xla::ReduceRequest* reduce_request_;
  const ::xla::ReduceWindowRequest* reduce_window_request_;
  const ::xla::ReshapeRequest* reshape_request_;
  const ::xla::ReverseRequest* reverse_request_;
  const ::xla::RngRequest* rng_request_;
  const ::xla::SelectAndScatterRequest* select_and_scatter_request_;
  const ::xla::SliceRequest* slice_request_;
  const ::xla::TernaryOpRequest* ternary_op_request_;
  const ::xla::TraceRequest* trace_request_;
  const ::xla::TransposeRequest* transpose_request_;
  const ::xla::UnaryOpRequest* unary_op_request_;
  const ::xla::VariadicOpRequest* variadic_op_request_;
  const ::xla::WhileRequest* while_request_;
  const ::xla::SendRequest* send_request_;
  const ::xla::RecvRequest* recv_request_;
  const ::xla::OutfeedRequest* outfeed_request_;
} _OpRequest_default_instance_;
class OpResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpResponse> {
} _OpResponse_default_instance_;

namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[54];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, edge_padding_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, edge_padding_high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig_PaddingConfigDimension, interior_padding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingConfig, dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, minor_to_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, padded_dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, padding_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, element_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, tuple_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, layout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramShape, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramShape, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramShape, parameter_names_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStats, flop_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStats, transcendental_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMetadata, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMetadata, op_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMetadata, source_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMetadata, source_line_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, compilation_cache_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, compile_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, compute_cycle_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, compute_time_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionProfile, compute_and_transfer_time_ns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDataHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDataHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationDataHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationDataHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelHandle, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, preds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, u8s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, s32s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, s64s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, u32s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, u64s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, f32s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, f64s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Literal, tuple_literals_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, padding_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, padding_high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, window_dilation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDimension, base_dilation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantRequest, literal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTupleElementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTupleElementRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTupleElementRequest, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceRequest, start_indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceRequest, limit_indices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSliceRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSliceRequest, start_indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSliceRequest, slice_sizes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicUpdateSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicUpdateSliceRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicUpdateSliceRequest, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicUpdateSliceRequest, start_indices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, batch_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, feature_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, spatial_dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, kernel_input_feature_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, kernel_output_feature_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDimensionNumbers, kernel_spatial_dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolveRequest, lhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolveRequest, rhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolveRequest, window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolveRequest, dimension_numbers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfeedRequest, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfeedRequest, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutfeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutfeedRequest, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutfeedRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutfeedRequest, outfeed_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallRequest, to_apply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallRequest, operands_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCallRequest, call_target_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCallRequest, operands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomCallRequest, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRequest, operands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRequest, to_apply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRequest, static_operands_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceRequest, init_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceRequest, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceRequest, to_apply_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceWindowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceWindowRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceWindowRequest, init_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceWindowRequest, window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceWindowRequest, to_apply_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossReplicaSumRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossReplicaSumRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, init_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectAndScatterRequest, scatter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReverseRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReverseRequest, dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, broadcast_sizes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadRequest, padding_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadRequest, padding_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeRequest, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeRequest, new_sizes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposeRequest, dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalShapeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalShapeRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalShapeRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalShapeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalShapeResponse, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRequest, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertRequest, new_element_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatenateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatenateRequest, operands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatenateRequest, dimension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileRequest, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileRequest, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileRequest, init_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryOpRequest, unop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryOpRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, binop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, lhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, rhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryOpRequest, broadcast_dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RngRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RngRequest, distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RngRequest, parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RngRequest, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TernaryOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TernaryOpRequest, triop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TernaryOpRequest, lhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TernaryOpRequest, rhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TernaryOpRequest, ehs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariadicOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariadicOpRequest, varop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariadicOpRequest, operands_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRequest, channel_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvRequest, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvRequest, channel_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequest, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequest, metadata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), binary_op_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), broadcast_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), call_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), concatenate_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), constant_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), convert_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), convolve_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), cross_replica_sum_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), custom_call_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), dynamic_slice_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), dynamic_update_slice_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), get_tuple_element_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), infeed_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), map_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), pad_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), parameter_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), reduce_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), reduce_window_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), reshape_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), reverse_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), rng_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), select_and_scatter_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), slice_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), ternary_op_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), trace_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), transpose_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), unary_op_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), variadic_op_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), while_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), send_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), recv_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OpRequest_default_instance_), outfeed_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequest, op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpResponse, output_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PaddingConfig_PaddingConfigDimension)},
  { 7, -1, sizeof(PaddingConfig)},
  { 12, -1, sizeof(Layout)},
  { 19, -1, sizeof(Shape)},
  { 27, -1, sizeof(ProgramShape)},
  { 34, -1, sizeof(ComputationStats)},
  { 40, -1, sizeof(OpMetadata)},
  { 48, -1, sizeof(ExecutionProfile)},
  { 57, -1, sizeof(ComputationHandle)},
  { 62, -1, sizeof(ExecutionHandle)},
  { 67, -1, sizeof(GlobalDataHandle)},
  { 72, -1, sizeof(ComputationDataHandle)},
  { 77, -1, sizeof(DeviceHandle)},
  { 82, -1, sizeof(ChannelHandle)},
  { 87, -1, sizeof(Literal)},
  { 101, -1, sizeof(WindowDimension)},
  { 111, -1, sizeof(Window)},
  { 116, -1, sizeof(ConstantRequest)},
  { 121, -1, sizeof(GetTupleElementRequest)},
  { 127, -1, sizeof(SliceRequest)},
  { 134, -1, sizeof(DynamicSliceRequest)},
  { 141, -1, sizeof(DynamicUpdateSliceRequest)},
  { 148, -1, sizeof(ConvolutionDimensionNumbers)},
  { 158, -1, sizeof(ConvolveRequest)},
  { 166, -1, sizeof(InfeedRequest)},
  { 172, -1, sizeof(OutfeedRequest)},
  { 179, -1, sizeof(CallRequest)},
  { 185, -1, sizeof(CustomCallRequest)},
  { 192, -1, sizeof(MapRequest)},
  { 199, -1, sizeof(ReduceRequest)},
  { 207, -1, sizeof(ReduceWindowRequest)},
  { 215, -1, sizeof(CrossReplicaSumRequest)},
  { 220, -1, sizeof(SelectAndScatterRequest)},
  { 230, -1, sizeof(ReverseRequest)},
  { 236, -1, sizeof(BroadcastRequest)},
  { 242, -1, sizeof(PadRequest)},
  { 249, -1, sizeof(ReshapeRequest)},
  { 256, -1, sizeof(TransposeRequest)},
  { 262, -1, sizeof(ParameterRequest)},
  { 269, -1, sizeof(GetLocalShapeRequest)},
  { 275, -1, sizeof(GetLocalShapeResponse)},
  { 280, -1, sizeof(TraceRequest)},
  { 286, -1, sizeof(ConvertRequest)},
  { 292, -1, sizeof(ConcatenateRequest)},
  { 298, -1, sizeof(WhileRequest)},
  { 305, -1, sizeof(UnaryOpRequest)},
  { 311, -1, sizeof(BinaryOpRequest)},
  { 319, -1, sizeof(RngRequest)},
  { 326, -1, sizeof(TernaryOpRequest)},
  { 334, -1, sizeof(VariadicOpRequest)},
  { 340, -1, sizeof(SendRequest)},
  { 346, -1, sizeof(RecvRequest)},
  { 352, -1, sizeof(OpRequest)},
  { 391, -1, sizeof(OpResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaddingConfig_PaddingConfigDimension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaddingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Layout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProgramShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutionProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutionHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GlobalDataHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationDataHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Literal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindowDimension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Window_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConstantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTupleElementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SliceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynamicSliceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynamicUpdateSliceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionDimensionNumbers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfeedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OutfeedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CallRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomCallRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReduceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReduceWindowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrossReplicaSumRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectAndScatterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReverseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReshapeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransposeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParameterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocalShapeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocalShapeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConcatenateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnaryOpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BinaryOpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RngRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TernaryOpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariadicOpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecvRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/compiler/xla/xla_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 54);
}

}  // namespace

void TableStruct::Shutdown() {
  _PaddingConfig_PaddingConfigDimension_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PaddingConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Layout_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Shape_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ProgramShape_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ComputationStats_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _OpMetadata_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ExecutionProfile_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ComputationHandle_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ExecutionHandle_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GlobalDataHandle_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ComputationDataHandle_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _DeviceHandle_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ChannelHandle_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Literal_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _WindowDimension_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Window_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ConstantRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GetTupleElementRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SliceRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _DynamicSliceRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _DynamicUpdateSliceRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ConvolutionDimensionNumbers_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ConvolveRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _InfeedRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _OutfeedRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CallRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CustomCallRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _MapRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ReduceRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ReduceWindowRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CrossReplicaSumRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SelectAndScatterRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ReverseRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _BroadcastRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _PadRequest_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ReshapeRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _TransposeRequest_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _ParameterRequest_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _GetLocalShapeRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _GetLocalShapeResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _TraceRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _ConvertRequest_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _ConcatenateRequest_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _WhileRequest_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _UnaryOpRequest_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _BinaryOpRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _RngRequest_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _TernaryOpRequest_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _VariadicOpRequest_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _SendRequest_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _RecvRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _OpRequest_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _OpResponse_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PaddingConfig_PaddingConfigDimension_default_instance_.DefaultConstruct();
  _PaddingConfig_default_instance_.DefaultConstruct();
  _Layout_default_instance_.DefaultConstruct();
  _Shape_default_instance_.DefaultConstruct();
  _ProgramShape_default_instance_.DefaultConstruct();
  _ComputationStats_default_instance_.DefaultConstruct();
  _OpMetadata_default_instance_.DefaultConstruct();
  _ExecutionProfile_default_instance_.DefaultConstruct();
  _ComputationHandle_default_instance_.DefaultConstruct();
  _ExecutionHandle_default_instance_.DefaultConstruct();
  _GlobalDataHandle_default_instance_.DefaultConstruct();
  _ComputationDataHandle_default_instance_.DefaultConstruct();
  _DeviceHandle_default_instance_.DefaultConstruct();
  _ChannelHandle_default_instance_.DefaultConstruct();
  _Literal_default_instance_.DefaultConstruct();
  _WindowDimension_default_instance_.DefaultConstruct();
  _Window_default_instance_.DefaultConstruct();
  _ConstantRequest_default_instance_.DefaultConstruct();
  _GetTupleElementRequest_default_instance_.DefaultConstruct();
  _SliceRequest_default_instance_.DefaultConstruct();
  _DynamicSliceRequest_default_instance_.DefaultConstruct();
  _DynamicUpdateSliceRequest_default_instance_.DefaultConstruct();
  _ConvolutionDimensionNumbers_default_instance_.DefaultConstruct();
  _ConvolveRequest_default_instance_.DefaultConstruct();
  _InfeedRequest_default_instance_.DefaultConstruct();
  _OutfeedRequest_default_instance_.DefaultConstruct();
  _CallRequest_default_instance_.DefaultConstruct();
  _CustomCallRequest_default_instance_.DefaultConstruct();
  _MapRequest_default_instance_.DefaultConstruct();
  _ReduceRequest_default_instance_.DefaultConstruct();
  _ReduceWindowRequest_default_instance_.DefaultConstruct();
  _CrossReplicaSumRequest_default_instance_.DefaultConstruct();
  _SelectAndScatterRequest_default_instance_.DefaultConstruct();
  _ReverseRequest_default_instance_.DefaultConstruct();
  _BroadcastRequest_default_instance_.DefaultConstruct();
  _PadRequest_default_instance_.DefaultConstruct();
  _ReshapeRequest_default_instance_.DefaultConstruct();
  _TransposeRequest_default_instance_.DefaultConstruct();
  _ParameterRequest_default_instance_.DefaultConstruct();
  _GetLocalShapeRequest_default_instance_.DefaultConstruct();
  _GetLocalShapeResponse_default_instance_.DefaultConstruct();
  _TraceRequest_default_instance_.DefaultConstruct();
  _ConvertRequest_default_instance_.DefaultConstruct();
  _ConcatenateRequest_default_instance_.DefaultConstruct();
  _WhileRequest_default_instance_.DefaultConstruct();
  _UnaryOpRequest_default_instance_.DefaultConstruct();
  _BinaryOpRequest_default_instance_.DefaultConstruct();
  _RngRequest_default_instance_.DefaultConstruct();
  _TernaryOpRequest_default_instance_.DefaultConstruct();
  _VariadicOpRequest_default_instance_.DefaultConstruct();
  _SendRequest_default_instance_.DefaultConstruct();
  _RecvRequest_default_instance_.DefaultConstruct();
  _OpRequest_default_instance_.DefaultConstruct();
  _OpResponse_default_instance_.DefaultConstruct();
  _Shape_default_instance_.get_mutable()->layout_ = const_cast< ::xla::Layout*>(
      ::xla::Layout::internal_default_instance());
  _ProgramShape_default_instance_.get_mutable()->result_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _Literal_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _ConstantRequest_default_instance_.get_mutable()->literal_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
  _GetTupleElementRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SliceRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _DynamicSliceRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _DynamicSliceRequest_default_instance_.get_mutable()->start_indices_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _DynamicUpdateSliceRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _DynamicUpdateSliceRequest_default_instance_.get_mutable()->update_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _DynamicUpdateSliceRequest_default_instance_.get_mutable()->start_indices_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ConvolveRequest_default_instance_.get_mutable()->lhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ConvolveRequest_default_instance_.get_mutable()->rhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ConvolveRequest_default_instance_.get_mutable()->window_ = const_cast< ::xla::Window*>(
      ::xla::Window::internal_default_instance());
  _ConvolveRequest_default_instance_.get_mutable()->dimension_numbers_ = const_cast< ::xla::ConvolutionDimensionNumbers*>(
      ::xla::ConvolutionDimensionNumbers::internal_default_instance());
  _InfeedRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _OutfeedRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _OutfeedRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _CallRequest_default_instance_.get_mutable()->to_apply_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _CustomCallRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _MapRequest_default_instance_.get_mutable()->to_apply_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ReduceRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ReduceRequest_default_instance_.get_mutable()->init_value_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ReduceRequest_default_instance_.get_mutable()->to_apply_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ReduceWindowRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ReduceWindowRequest_default_instance_.get_mutable()->init_value_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ReduceWindowRequest_default_instance_.get_mutable()->window_ = const_cast< ::xla::Window*>(
      ::xla::Window::internal_default_instance());
  _ReduceWindowRequest_default_instance_.get_mutable()->to_apply_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _CrossReplicaSumRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->source_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->init_value_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->window_ = const_cast< ::xla::Window*>(
      ::xla::Window::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->select_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _SelectAndScatterRequest_default_instance_.get_mutable()->scatter_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ReverseRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _BroadcastRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _PadRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _PadRequest_default_instance_.get_mutable()->padding_value_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _PadRequest_default_instance_.get_mutable()->padding_config_ = const_cast< ::xla::PaddingConfig*>(
      ::xla::PaddingConfig::internal_default_instance());
  _ReshapeRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _TransposeRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ParameterRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _GetLocalShapeRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _GetLocalShapeRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _GetLocalShapeResponse_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _TraceRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ConvertRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _WhileRequest_default_instance_.get_mutable()->condition_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _WhileRequest_default_instance_.get_mutable()->body_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _WhileRequest_default_instance_.get_mutable()->init_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _UnaryOpRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _BinaryOpRequest_default_instance_.get_mutable()->lhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _BinaryOpRequest_default_instance_.get_mutable()->rhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _RngRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _TernaryOpRequest_default_instance_.get_mutable()->lhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _TernaryOpRequest_default_instance_.get_mutable()->rhs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _TernaryOpRequest_default_instance_.get_mutable()->ehs_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SendRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _SendRequest_default_instance_.get_mutable()->channel_handle_ = const_cast< ::xla::ChannelHandle*>(
      ::xla::ChannelHandle::internal_default_instance());
  _RecvRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _RecvRequest_default_instance_.get_mutable()->channel_handle_ = const_cast< ::xla::ChannelHandle*>(
      ::xla::ChannelHandle::internal_default_instance());
  _OpRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _OpRequest_default_instance_.get_mutable()->metadata_ = const_cast< ::xla::OpMetadata*>(
      ::xla::OpMetadata::internal_default_instance());
  _OpRequest_default_instance_.binary_op_request_ = const_cast< ::xla::BinaryOpRequest*>(
      ::xla::BinaryOpRequest::internal_default_instance());
  _OpRequest_default_instance_.broadcast_request_ = const_cast< ::xla::BroadcastRequest*>(
      ::xla::BroadcastRequest::internal_default_instance());
  _OpRequest_default_instance_.call_request_ = const_cast< ::xla::CallRequest*>(
      ::xla::CallRequest::internal_default_instance());
  _OpRequest_default_instance_.concatenate_request_ = const_cast< ::xla::ConcatenateRequest*>(
      ::xla::ConcatenateRequest::internal_default_instance());
  _OpRequest_default_instance_.constant_request_ = const_cast< ::xla::ConstantRequest*>(
      ::xla::ConstantRequest::internal_default_instance());
  _OpRequest_default_instance_.convert_request_ = const_cast< ::xla::ConvertRequest*>(
      ::xla::ConvertRequest::internal_default_instance());
  _OpRequest_default_instance_.convolve_request_ = const_cast< ::xla::ConvolveRequest*>(
      ::xla::ConvolveRequest::internal_default_instance());
  _OpRequest_default_instance_.cross_replica_sum_request_ = const_cast< ::xla::CrossReplicaSumRequest*>(
      ::xla::CrossReplicaSumRequest::internal_default_instance());
  _OpRequest_default_instance_.custom_call_request_ = const_cast< ::xla::CustomCallRequest*>(
      ::xla::CustomCallRequest::internal_default_instance());
  _OpRequest_default_instance_.dynamic_slice_request_ = const_cast< ::xla::DynamicSliceRequest*>(
      ::xla::DynamicSliceRequest::internal_default_instance());
  _OpRequest_default_instance_.dynamic_update_slice_request_ = const_cast< ::xla::DynamicUpdateSliceRequest*>(
      ::xla::DynamicUpdateSliceRequest::internal_default_instance());
  _OpRequest_default_instance_.get_tuple_element_request_ = const_cast< ::xla::GetTupleElementRequest*>(
      ::xla::GetTupleElementRequest::internal_default_instance());
  _OpRequest_default_instance_.infeed_request_ = const_cast< ::xla::InfeedRequest*>(
      ::xla::InfeedRequest::internal_default_instance());
  _OpRequest_default_instance_.map_request_ = const_cast< ::xla::MapRequest*>(
      ::xla::MapRequest::internal_default_instance());
  _OpRequest_default_instance_.pad_request_ = const_cast< ::xla::PadRequest*>(
      ::xla::PadRequest::internal_default_instance());
  _OpRequest_default_instance_.parameter_request_ = const_cast< ::xla::ParameterRequest*>(
      ::xla::ParameterRequest::internal_default_instance());
  _OpRequest_default_instance_.reduce_request_ = const_cast< ::xla::ReduceRequest*>(
      ::xla::ReduceRequest::internal_default_instance());
  _OpRequest_default_instance_.reduce_window_request_ = const_cast< ::xla::ReduceWindowRequest*>(
      ::xla::ReduceWindowRequest::internal_default_instance());
  _OpRequest_default_instance_.reshape_request_ = const_cast< ::xla::ReshapeRequest*>(
      ::xla::ReshapeRequest::internal_default_instance());
  _OpRequest_default_instance_.reverse_request_ = const_cast< ::xla::ReverseRequest*>(
      ::xla::ReverseRequest::internal_default_instance());
  _OpRequest_default_instance_.rng_request_ = const_cast< ::xla::RngRequest*>(
      ::xla::RngRequest::internal_default_instance());
  _OpRequest_default_instance_.select_and_scatter_request_ = const_cast< ::xla::SelectAndScatterRequest*>(
      ::xla::SelectAndScatterRequest::internal_default_instance());
  _OpRequest_default_instance_.slice_request_ = const_cast< ::xla::SliceRequest*>(
      ::xla::SliceRequest::internal_default_instance());
  _OpRequest_default_instance_.ternary_op_request_ = const_cast< ::xla::TernaryOpRequest*>(
      ::xla::TernaryOpRequest::internal_default_instance());
  _OpRequest_default_instance_.trace_request_ = const_cast< ::xla::TraceRequest*>(
      ::xla::TraceRequest::internal_default_instance());
  _OpRequest_default_instance_.transpose_request_ = const_cast< ::xla::TransposeRequest*>(
      ::xla::TransposeRequest::internal_default_instance());
  _OpRequest_default_instance_.unary_op_request_ = const_cast< ::xla::UnaryOpRequest*>(
      ::xla::UnaryOpRequest::internal_default_instance());
  _OpRequest_default_instance_.variadic_op_request_ = const_cast< ::xla::VariadicOpRequest*>(
      ::xla::VariadicOpRequest::internal_default_instance());
  _OpRequest_default_instance_.while_request_ = const_cast< ::xla::WhileRequest*>(
      ::xla::WhileRequest::internal_default_instance());
  _OpRequest_default_instance_.send_request_ = const_cast< ::xla::SendRequest*>(
      ::xla::SendRequest::internal_default_instance());
  _OpRequest_default_instance_.recv_request_ = const_cast< ::xla::RecvRequest*>(
      ::xla::RecvRequest::internal_default_instance());
  _OpRequest_default_instance_.outfeed_request_ = const_cast< ::xla::OutfeedRequest*>(
      ::xla::OutfeedRequest::internal_default_instance());
  _OpResponse_default_instance_.get_mutable()->output_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&tensorflow/compiler/xla/xla_data.proto"
      "\022\003xla\"\267\001\n\rPaddingConfig\022=\n\ndimensions\030\001 "
      "\003(\0132).xla.PaddingConfig.PaddingConfigDim"
      "ension\032g\n\026PaddingConfigDimension\022\030\n\020edge"
      "_padding_low\030\001 \001(\003\022\031\n\021edge_padding_high\030"
      "\002 \001(\003\022\030\n\020interior_padding\030\003 \001(\003\"e\n\006Layou"
      "t\022\026\n\016minor_to_major\030\001 \003(\003\022\031\n\021padded_dime"
      "nsions\030\002 \003(\003\022(\n\rpadding_value\030\003 \001(\0162\021.xl"
      "a.PaddingValue\"\220\001\n\005Shape\022(\n\014element_type"
      "\030\002 \001(\0162\022.xla.PrimitiveType\022\022\n\ndimensions"
      "\030\003 \003(\003\022 \n\014tuple_shapes\030\004 \003(\0132\n.xla.Shape"
      "\022\033\n\006layout\030\005 \001(\0132\013.xla.LayoutJ\004\010\001\020\002R\004ran"
      "k\"c\n\014ProgramShape\022\036\n\nparameters\030\001 \003(\0132\n."
      "xla.Shape\022\032\n\006result\030\002 \001(\0132\n.xla.Shape\022\027\n"
      "\017parameter_names\030\003 \003(\t\"D\n\020ComputationSta"
      "ts\022\022\n\nflop_count\030\001 \001(\001\022\034\n\024transcendental"
      "_count\030\002 \001(\001\"X\n\nOpMetadata\022\017\n\007op_type\030\001 "
      "\001(\t\022\017\n\007op_name\030\002 \001(\t\022\023\n\013source_file\030\003 \001("
      "\t\022\023\n\013source_line\030\004 \001(\005\"\246\001\n\020ExecutionProf"
      "ile\022\035\n\025compilation_cache_hit\030\001 \001(\010\022\027\n\017co"
      "mpile_time_ms\030\002 \001(\003\022\033\n\023compute_cycle_cou"
      "nt\030\003 \001(\003\022\027\n\017compute_time_ns\030\004 \001(\003\022$\n\034com"
      "pute_and_transfer_time_ns\030\005 \001(\003\"#\n\021Compu"
      "tationHandle\022\016\n\006handle\030\001 \001(\003\"!\n\017Executio"
      "nHandle\022\016\n\006handle\030\001 \001(\003\"\"\n\020GlobalDataHan"
      "dle\022\016\n\006handle\030\001 \001(\003\"\'\n\025ComputationDataHa"
      "ndle\022\016\n\006handle\030\001 \001(\003\"\036\n\014DeviceHandle\022\016\n\006"
      "handle\030\001 \001(\003\"\037\n\rChannelHandle\022\016\n\006handle\030"
      "\001 \001(\003\"\272\001\n\007Literal\022\031\n\005shape\030\001 \001(\0132\n.xla.S"
      "hape\022\r\n\005preds\030\002 \003(\010\022\013\n\003u8s\030\003 \001(\014\022\014\n\004s32s"
      "\030\004 \003(\005\022\014\n\004s64s\030\005 \003(\003\022\014\n\004u32s\030\006 \003(\r\022\014\n\004u6"
      "4s\030\007 \003(\004\022\014\n\004f32s\030\010 \003(\002\022\014\n\004f64s\030\t \003(\001\022$\n\016"
      "tuple_literals\030\n \003(\0132\014.xla.Literal\"\212\001\n\017W"
      "indowDimension\022\014\n\004size\030\001 \001(\003\022\016\n\006stride\030\002"
      " \001(\003\022\023\n\013padding_low\030\003 \001(\003\022\024\n\014padding_hig"
      "h\030\004 \001(\003\022\027\n\017window_dilation\030\005 \001(\003\022\025\n\rbase"
      "_dilation\030\006 \001(\003\"2\n\006Window\022(\n\ndimensions\030"
      "\001 \003(\0132\024.xla.WindowDimension\"0\n\017ConstantR"
      "equest\022\035\n\007literal\030\002 \001(\0132\014.xla.Literal\"T\n"
      "\026GetTupleElementRequest\022+\n\007operand\030\002 \001(\013"
      "2\032.xla.ComputationDataHandle\022\r\n\005index\030\003 "
      "\001(\003\"i\n\014SliceRequest\022+\n\007operand\030\002 \001(\0132\032.x"
      "la.ComputationDataHandle\022\025\n\rstart_indice"
      "s\030\003 \003(\003\022\025\n\rlimit_indices\030\004 \003(\003\"\212\001\n\023Dynam"
      "icSliceRequest\022+\n\007operand\030\002 \001(\0132\032.xla.Co"
      "mputationDataHandle\0221\n\rstart_indices\030\003 \001"
      "(\0132\032.xla.ComputationDataHandle\022\023\n\013slice_"
      "sizes\030\004 \003(\003\"\247\001\n\031DynamicUpdateSliceReques"
      "t\022+\n\007operand\030\002 \001(\0132\032.xla.ComputationData"
      "Handle\022*\n\006update\030\003 \001(\0132\032.xla.Computation"
      "DataHandle\0221\n\rstart_indices\030\004 \001(\0132\032.xla."
      "ComputationDataHandle\"\341\001\n\033ConvolutionDim"
      "ensionNumbers\022\027\n\017batch_dimension\030\001 \001(\003\022\031"
      "\n\021feature_dimension\030\002 \001(\003\022\032\n\022spatial_dim"
      "ensions\030\005 \003(\003\022&\n\036kernel_input_feature_di"
      "mension\030\003 \001(\003\022\'\n\037kernel_output_feature_d"
      "imension\030\004 \001(\003\022!\n\031kernel_spatial_dimensi"
      "ons\030\006 \003(\003\"\275\001\n\017ConvolveRequest\022\'\n\003lhs\030\002 \001"
      "(\0132\032.xla.ComputationDataHandle\022\'\n\003rhs\030\003 "
      "\001(\0132\032.xla.ComputationDataHandle\022\033\n\006windo"
      "w\030\004 \001(\0132\013.xla.Window\022;\n\021dimension_number"
      "s\030\005 \001(\0132 .xla.ConvolutionDimensionNumber"
      "s\":\n\rInfeedRequest\022\031\n\005shape\030\002 \001(\0132\n.xla."
      "Shape\022\016\n\006config\030\003 \001(\014\"p\n\016OutfeedRequest\022"
      "\031\n\005shape\030\001 \001(\0132\n.xla.Shape\022+\n\007operand\030\002 "
      "\001(\0132\032.xla.ComputationDataHandle\022\026\n\016outfe"
      "ed_config\030\003 \001(\014\"e\n\013CallRequest\022(\n\010to_app"
      "ly\030\002 \001(\0132\026.xla.ComputationHandle\022,\n\010oper"
      "ands\030\003 \003(\0132\032.xla.ComputationDataHandle\"v"
      "\n\021CustomCallRequest\022\030\n\020call_target_name\030"
      "\002 \001(\t\022,\n\010operands\030\003 \003(\0132\032.xla.Computatio"
      "nDataHandle\022\031\n\005shape\030\004 \001(\0132\n.xla.Shape\"\231"
      "\001\n\nMapRequest\022,\n\010operands\030\002 \003(\0132\032.xla.Co"
      "mputationDataHandle\022(\n\010to_apply\030\003 \001(\0132\026."
      "xla.ComputationHandle\0223\n\017static_operands"
      "\030\004 \003(\0132\032.xla.ComputationDataHandle\"\252\001\n\rR"
      "educeRequest\022+\n\007operand\030\002 \001(\0132\032.xla.Comp"
      "utationDataHandle\022.\n\ninit_value\030\003 \001(\0132\032."
      "xla.ComputationDataHandle\022\022\n\ndimensions\030"
      "\004 \003(\003\022(\n\010to_apply\030\005 \001(\0132\026.xla.Computatio"
      "nHandle\"\271\001\n\023ReduceWindowRequest\022+\n\007opera"
      "nd\030\002 \001(\0132\032.xla.ComputationDataHandle\022.\n\n"
      "init_value\030\003 \001(\0132\032.xla.ComputationDataHa"
      "ndle\022\033\n\006window\030\004 \001(\0132\013.xla.Window\022(\n\010to_"
      "apply\030\005 \001(\0132\026.xla.ComputationHandle\"E\n\026C"
      "rossReplicaSumRequest\022+\n\007operand\030\002 \001(\0132\032"
      ".xla.ComputationDataHandle\"\220\002\n\027SelectAnd"
      "ScatterRequest\022+\n\007operand\030\002 \001(\0132\032.xla.Co"
      "mputationDataHandle\022*\n\006source\030\003 \001(\0132\032.xl"
      "a.ComputationDataHandle\022.\n\ninit_value\030\004 "
      "\001(\0132\032.xla.ComputationDataHandle\022\033\n\006windo"
      "w\030\005 \001(\0132\013.xla.Window\022&\n\006select\030\006 \001(\0132\026.x"
      "la.ComputationHandle\022\'\n\007scatter\030\007 \001(\0132\026."
      "xla.ComputationHandle\"Q\n\016ReverseRequest\022"
      "+\n\007operand\030\002 \001(\0132\032.xla.ComputationDataHa"
      "ndle\022\022\n\ndimensions\030\003 \003(\003\"X\n\020BroadcastReq"
      "uest\022+\n\007operand\030\002 \001(\0132\032.xla.ComputationD"
      "ataHandle\022\027\n\017broadcast_sizes\030\003 \003(\003\"\230\001\n\nP"
      "adRequest\022+\n\007operand\030\002 \001(\0132\032.xla.Computa"
      "tionDataHandle\0221\n\rpadding_value\030\003 \001(\0132\032."
      "xla.ComputationDataHandle\022*\n\016padding_con"
      "fig\030\004 \001(\0132\022.xla.PaddingConfig\"d\n\016Reshape"
      "Request\022+\n\007operand\030\002 \001(\0132\032.xla.Computati"
      "onDataHandle\022\022\n\ndimensions\030\003 \003(\003\022\021\n\tnew_"
      "sizes\030\004 \003(\003\"S\n\020TransposeRequest\022+\n\007opera"
      "nd\030\002 \001(\0132\032.xla.ComputationDataHandle\022\022\n\n"
      "dimensions\030\003 \003(\003\"N\n\020ParameterRequest\022\031\n\005"
      "shape\030\002 \001(\0132\n.xla.Shape\022\021\n\tparameter\030\003 \001"
      "(\003\022\014\n\004name\030\004 \001(\t\"p\n\024GetLocalShapeRequest"
      "\022+\n\013computation\030\001 \001(\0132\026.xla.ComputationH"
      "andle\022+\n\007operand\030\002 \001(\0132\032.xla.Computation"
      "DataHandle\"2\n\025GetLocalShapeResponse\022\031\n\005s"
      "hape\030\001 \001(\0132\n.xla.Shape\"H\n\014TraceRequest\022\013"
      "\n\003tag\030\002 \001(\t\022+\n\007operand\030\003 \001(\0132\032.xla.Compu"
      "tationDataHandle\"k\n\016ConvertRequest\022+\n\007op"
      "erand\030\002 \001(\0132\032.xla.ComputationDataHandle\022"
      ",\n\020new_element_type\030\003 \001(\0162\022.xla.Primitiv"
      "eType\"U\n\022ConcatenateRequest\022,\n\010operands\030"
      "\002 \003(\0132\032.xla.ComputationDataHandle\022\021\n\tdim"
      "ension\030\003 \001(\003\"\211\001\n\014WhileRequest\022)\n\tconditi"
      "on\030\002 \001(\0132\026.xla.ComputationHandle\022$\n\004body"
      "\030\003 \001(\0132\026.xla.ComputationHandle\022(\n\004init\030\004"
      " \001(\0132\032.xla.ComputationDataHandle\"`\n\016Unar"
      "yOpRequest\022!\n\004unop\030\002 \001(\0162\023.xla.UnaryOper"
      "ation\022+\n\007operand\030\003 \001(\0132\032.xla.Computation"
      "DataHandle\"\246\001\n\017BinaryOpRequest\022#\n\005binop\030"
      "\002 \001(\0162\024.xla.BinaryOperation\022\'\n\003lhs\030\003 \001(\013"
      "2\032.xla.ComputationDataHandle\022\'\n\003rhs\030\004 \001("
      "\0132\032.xla.ComputationDataHandle\022\034\n\024broadca"
      "st_dimensions\030\005 \003(\003\"\205\001\n\nRngRequest\022-\n\014di"
      "stribution\030\002 \001(\0162\027.xla.RandomDistributio"
      "n\022-\n\tparameter\030\003 \003(\0132\032.xla.ComputationDa"
      "taHandle\022\031\n\005shape\030\004 \001(\0132\n.xla.Shape\"\263\001\n\020"
      "TernaryOpRequest\022$\n\005triop\030\002 \001(\0162\025.xla.Te"
      "rnaryOperation\022\'\n\003lhs\030\003 \001(\0132\032.xla.Comput"
      "ationDataHandle\022\'\n\003rhs\030\004 \001(\0132\032.xla.Compu"
      "tationDataHandle\022\'\n\003ehs\030\005 \001(\0132\032.xla.Comp"
      "utationDataHandle\"h\n\021VariadicOpRequest\022%"
      "\n\005varop\030\002 \001(\0162\026.xla.VariadicOperation\022,\n"
      "\010operands\030\003 \003(\0132\032.xla.ComputationDataHan"
      "dle\"f\n\013SendRequest\022+\n\007operand\030\001 \001(\0132\032.xl"
      "a.ComputationDataHandle\022*\n\016channel_handl"
      "e\030\002 \001(\0132\022.xla.ChannelHandle\"T\n\013RecvReque"
      "st\022\031\n\005shape\030\001 \001(\0132\n.xla.Shape\022*\n\016channel"
      "_handle\030\002 \001(\0132\022.xla.ChannelHandle\"\274\r\n\tOp"
      "Request\022+\n\013computation\030\001 \001(\0132\026.xla.Compu"
      "tationHandle\022!\n\010metadata\030! \001(\0132\017.xla.OpM"
      "etadata\0221\n\021binary_op_request\030\002 \001(\0132\024.xla"
      ".BinaryOpRequestH\000\0222\n\021broadcast_request\030"
      "\003 \001(\0132\025.xla.BroadcastRequestH\000\022(\n\014call_r"
      "equest\030\004 \001(\0132\020.xla.CallRequestH\000\0226\n\023conc"
      "atenate_request\030\005 \001(\0132\027.xla.ConcatenateR"
      "equestH\000\0220\n\020constant_request\030\006 \001(\0132\024.xla"
      ".ConstantRequestH\000\022.\n\017convert_request\030\007 "
      "\001(\0132\023.xla.ConvertRequestH\000\0220\n\020convolve_r"
      "equest\030\010 \001(\0132\024.xla.ConvolveRequestH\000\022@\n\031"
      "cross_replica_sum_request\030\t \001(\0132\033.xla.Cr"
      "ossReplicaSumRequestH\000\0225\n\023custom_call_re"
      "quest\030\n \001(\0132\026.xla.CustomCallRequestH\000\0229\n"
      "\025dynamic_slice_request\030\013 \001(\0132\030.xla.Dynam"
      "icSliceRequestH\000\022F\n\034dynamic_update_slice"
      "_request\030\014 \001(\0132\036.xla.DynamicUpdateSliceR"
      "equestH\000\022@\n\031get_tuple_element_request\030\r "
      "\001(\0132\033.xla.GetTupleElementRequestH\000\022,\n\016in"
      "feed_request\030\016 \001(\0132\022.xla.InfeedRequestH\000"
      "\022&\n\013map_request\030\017 \001(\0132\017.xla.MapRequestH\000"
      "\022&\n\013pad_request\030\020 \001(\0132\017.xla.PadRequestH\000"
      "\0222\n\021parameter_request\030\021 \001(\0132\025.xla.Parame"
      "terRequestH\000\022,\n\016reduce_request\030\022 \001(\0132\022.x"
      "la.ReduceRequestH\000\0229\n\025reduce_window_requ"
      "est\030\023 \001(\0132\030.xla.ReduceWindowRequestH\000\022.\n"
      "\017reshape_request\030\024 \001(\0132\023.xla.ReshapeRequ"
      "estH\000\022.\n\017reverse_request\030\025 \001(\0132\023.xla.Rev"
      "erseRequestH\000\022&\n\013rng_request\030\026 \001(\0132\017.xla"
      ".RngRequestH\000\022B\n\032select_and_scatter_requ"
      "est\030\027 \001(\0132\034.xla.SelectAndScatterRequestH"
      "\000\022*\n\rslice_request\030\030 \001(\0132\021.xla.SliceRequ"
      "estH\000\0223\n\022ternary_op_request\030\031 \001(\0132\025.xla."
      "TernaryOpRequestH\000\022*\n\rtrace_request\030\032 \001("
      "\0132\021.xla.TraceRequestH\000\0222\n\021transpose_requ"
      "est\030\" \001(\0132\025.xla.TransposeRequestH\000\022/\n\020un"
      "ary_op_request\030\033 \001(\0132\023.xla.UnaryOpReques"
      "tH\000\0225\n\023variadic_op_request\030\034 \001(\0132\026.xla.V"
      "ariadicOpRequestH\000\022*\n\rwhile_request\030\035 \001("
      "\0132\021.xla.WhileRequestH\000\022(\n\014send_request\030\036"
      " \001(\0132\020.xla.SendRequestH\000\022(\n\014recv_request"
      "\030\037 \001(\0132\020.xla.RecvRequestH\000\022.\n\017outfeed_re"
      "quest\030  \001(\0132\023.xla.OutfeedRequestH\000B\004\n\002op"
      "\"8\n\nOpResponse\022*\n\006output\030\001 \001(\0132\032.xla.Com"
      "putationDataHandle*\255\001\n\rPrimitiveType\022\032\n\026"
      "PRIMITIVE_TYPE_INVALID\020\000\022\010\n\004PRED\020\001\022\006\n\002S8"
      "\020\002\022\007\n\003S16\020\003\022\007\n\003S32\020\004\022\007\n\003S64\020\005\022\006\n\002U8\020\006\022\007\n"
      "\003U16\020\007\022\007\n\003U32\020\010\022\007\n\003U64\020\t\022\007\n\003F16\020\n\022\007\n\003F32"
      "\020\013\022\007\n\003F64\020\014\022\t\n\005TUPLE\020\r\022\n\n\006OPAQUE\020\016*l\n\014Pa"
      "ddingValue\022\017\n\013INVALID_PAD\020\000\022\014\n\010ZERO_PAD\020"
      "\001\022\013\n\007ONE_PAD\020\002\022\016\n\nLOWEST_PAD\020\003\022\017\n\013HIGHES"
      "T_PAD\020\004\022\017\n\013UNKNOWN_PAD\020\005*\323\001\n\016UnaryOperat"
      "ion\022\020\n\014UNOP_INVALID\020\000\022\024\n\020UNOP_LOGICAL_NO"
      "T\020\001\022\014\n\010UNOP_EXP\020\002\022\017\n\013UNOP_NEGATE\020\003\022\r\n\tUN"
      "OP_SORT\020\004\022\r\n\tUNOP_TANH\020\005\022\014\n\010UNOP_LOG\020\006\022\016"
      "\n\nUNOP_FLOOR\020\007\022\r\n\tUNOP_CEIL\020\010\022\014\n\010UNOP_AB"
      "S\020\t\022\r\n\tUNOP_SIGN\020\n\022\022\n\016UNOP_IS_FINITE\020\013*\275"
      "\002\n\017BinaryOperation\022\021\n\rBINOP_INVALID\020\000\022\r\n"
      "\tBINOP_ADD\020\001\022\r\n\tBINOP_DIV\020\002\022\r\n\tBINOP_MUL"
      "\020\003\022\r\n\tBINOP_SUB\020\004\022\014\n\010BINOP_EQ\020\005\022\014\n\010BINOP"
      "_GE\020\006\022\014\n\010BINOP_GT\020\007\022\014\n\010BINOP_LE\020\010\022\014\n\010BIN"
      "OP_LT\020\t\022\014\n\010BINOP_NE\020\n\022\r\n\tBINOP_DOT\020\014\022\017\n\013"
      "BINOP_INDEX\020\r\022\r\n\tBINOP_MAX\020\016\022\r\n\tBINOP_MI"
      "N\020\017\022\r\n\tBINOP_POW\020\020\022\r\n\tBINOP_REM\020\021\022\025\n\021BIN"
      "OP_LOGICAL_AND\020\022\022\024\n\020BINOP_LOGICAL_OR\020\023*Y"
      "\n\022RandomDistribution\022\017\n\013RNG_INVALID\020\000\022\017\n"
      "\013RNG_UNIFORM\020\001\022\016\n\nRNG_NORMAL\020\002\022\021\n\rRNG_BE"
      "RNOULLI\020\003*Z\n\020TernaryOperation\022\021\n\rTRIOP_I"
      "NVALID\020\000\022\020\n\014TRIOP_SELECT\020\001\022\020\n\014TRIOP_UPDA"
      "TE\020\002\022\017\n\013TRIOP_CLAMP\020\003*7\n\021VariadicOperati"
      "on\022\021\n\rVAROP_INVALID\020\000\022\017\n\013VAROP_TUPLE\020\001B\003"
      "\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/compiler/xla/xla_data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto

const ::google::protobuf::EnumDescriptor* PrimitiveType_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PaddingValue_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[1];
}
bool PaddingValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnaryOperation_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[2];
}
bool UnaryOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BinaryOperation_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[3];
}
bool BinaryOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RandomDistribution_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[4];
}
bool RandomDistribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TernaryOperation_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[5];
}
bool TernaryOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VariadicOperation_descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_enum_descriptors[6];
}
bool VariadicOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaddingConfig_PaddingConfigDimension::kEdgePaddingLowFieldNumber;
const int PaddingConfig_PaddingConfigDimension::kEdgePaddingHighFieldNumber;
const int PaddingConfig_PaddingConfigDimension::kInteriorPaddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.PaddingConfig.PaddingConfigDimension)
}
PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.PaddingConfig.PaddingConfigDimension)
}
PaddingConfig_PaddingConfigDimension::PaddingConfig_PaddingConfigDimension(const PaddingConfig_PaddingConfigDimension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&edge_padding_low_, &from.edge_padding_low_,
    reinterpret_cast<char*>(&interior_padding_) -
    reinterpret_cast<char*>(&edge_padding_low_) + sizeof(interior_padding_));
  // @@protoc_insertion_point(copy_constructor:xla.PaddingConfig.PaddingConfigDimension)
}

void PaddingConfig_PaddingConfigDimension::SharedCtor() {
  ::memset(&edge_padding_low_, 0, reinterpret_cast<char*>(&interior_padding_) -
    reinterpret_cast<char*>(&edge_padding_low_) + sizeof(interior_padding_));
  _cached_size_ = 0;
}

PaddingConfig_PaddingConfigDimension::~PaddingConfig_PaddingConfigDimension() {
  // @@protoc_insertion_point(destructor:xla.PaddingConfig.PaddingConfigDimension)
  SharedDtor();
}

void PaddingConfig_PaddingConfigDimension::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PaddingConfig_PaddingConfigDimension::ArenaDtor(void* object) {
  PaddingConfig_PaddingConfigDimension* _this = reinterpret_cast< PaddingConfig_PaddingConfigDimension* >(object);
  (void)_this;
}
void PaddingConfig_PaddingConfigDimension::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PaddingConfig_PaddingConfigDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaddingConfig_PaddingConfigDimension::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[0].descriptor;
}

const PaddingConfig_PaddingConfigDimension& PaddingConfig_PaddingConfigDimension::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaddingConfig_PaddingConfigDimension* PaddingConfig_PaddingConfigDimension::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PaddingConfig_PaddingConfigDimension>(arena);
}

void PaddingConfig_PaddingConfigDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PaddingConfig.PaddingConfigDimension)
  ::memset(&edge_padding_low_, 0, reinterpret_cast<char*>(&interior_padding_) -
    reinterpret_cast<char*>(&edge_padding_low_) + sizeof(interior_padding_));
}

bool PaddingConfig_PaddingConfigDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.PaddingConfig.PaddingConfigDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 edge_padding_low = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &edge_padding_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 edge_padding_high = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &edge_padding_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 interior_padding = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interior_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.PaddingConfig.PaddingConfigDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.PaddingConfig.PaddingConfigDimension)
  return false;
#undef DO_
}

void PaddingConfig_PaddingConfigDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.PaddingConfig.PaddingConfigDimension)
  // int64 edge_padding_low = 1;
  if (this->edge_padding_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->edge_padding_low(), output);
  }

  // int64 edge_padding_high = 2;
  if (this->edge_padding_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->edge_padding_high(), output);
  }

  // int64 interior_padding = 3;
  if (this->interior_padding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->interior_padding(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.PaddingConfig.PaddingConfigDimension)
}

::google::protobuf::uint8* PaddingConfig_PaddingConfigDimension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.PaddingConfig.PaddingConfigDimension)
  // int64 edge_padding_low = 1;
  if (this->edge_padding_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->edge_padding_low(), target);
  }

  // int64 edge_padding_high = 2;
  if (this->edge_padding_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->edge_padding_high(), target);
  }

  // int64 interior_padding = 3;
  if (this->interior_padding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->interior_padding(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.PaddingConfig.PaddingConfigDimension)
  return target;
}

size_t PaddingConfig_PaddingConfigDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PaddingConfig.PaddingConfigDimension)
  size_t total_size = 0;

  // int64 edge_padding_low = 1;
  if (this->edge_padding_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->edge_padding_low());
  }

  // int64 edge_padding_high = 2;
  if (this->edge_padding_high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->edge_padding_high());
  }

  // int64 interior_padding = 3;
  if (this->interior_padding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->interior_padding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaddingConfig_PaddingConfigDimension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.PaddingConfig.PaddingConfigDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const PaddingConfig_PaddingConfigDimension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaddingConfig_PaddingConfigDimension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.PaddingConfig.PaddingConfigDimension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.PaddingConfig.PaddingConfigDimension)
    MergeFrom(*source);
  }
}

void PaddingConfig_PaddingConfigDimension::MergeFrom(const PaddingConfig_PaddingConfigDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.PaddingConfig.PaddingConfigDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.edge_padding_low() != 0) {
    set_edge_padding_low(from.edge_padding_low());
  }
  if (from.edge_padding_high() != 0) {
    set_edge_padding_high(from.edge_padding_high());
  }
  if (from.interior_padding() != 0) {
    set_interior_padding(from.interior_padding());
  }
}

void PaddingConfig_PaddingConfigDimension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.PaddingConfig.PaddingConfigDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingConfig_PaddingConfigDimension::CopyFrom(const PaddingConfig_PaddingConfigDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PaddingConfig.PaddingConfigDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingConfig_PaddingConfigDimension::IsInitialized() const {
  return true;
}

void PaddingConfig_PaddingConfigDimension::Swap(PaddingConfig_PaddingConfigDimension* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PaddingConfig_PaddingConfigDimension* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PaddingConfig_PaddingConfigDimension::UnsafeArenaSwap(PaddingConfig_PaddingConfigDimension* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PaddingConfig_PaddingConfigDimension::InternalSwap(PaddingConfig_PaddingConfigDimension* other) {
  std::swap(edge_padding_low_, other->edge_padding_low_);
  std::swap(edge_padding_high_, other->edge_padding_high_);
  std::swap(interior_padding_, other->interior_padding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaddingConfig_PaddingConfigDimension::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaddingConfig_PaddingConfigDimension

// int64 edge_padding_low = 1;
void PaddingConfig_PaddingConfigDimension::clear_edge_padding_low() {
  edge_padding_low_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::edge_padding_low() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.edge_padding_low)
  return edge_padding_low_;
}
void PaddingConfig_PaddingConfigDimension::set_edge_padding_low(::google::protobuf::int64 value) {
  
  edge_padding_low_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.edge_padding_low)
}

// int64 edge_padding_high = 2;
void PaddingConfig_PaddingConfigDimension::clear_edge_padding_high() {
  edge_padding_high_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::edge_padding_high() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.edge_padding_high)
  return edge_padding_high_;
}
void PaddingConfig_PaddingConfigDimension::set_edge_padding_high(::google::protobuf::int64 value) {
  
  edge_padding_high_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.edge_padding_high)
}

// int64 interior_padding = 3;
void PaddingConfig_PaddingConfigDimension::clear_interior_padding() {
  interior_padding_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PaddingConfig_PaddingConfigDimension::interior_padding() const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.PaddingConfigDimension.interior_padding)
  return interior_padding_;
}
void PaddingConfig_PaddingConfigDimension::set_interior_padding(::google::protobuf::int64 value) {
  
  interior_padding_ = value;
  // @@protoc_insertion_point(field_set:xla.PaddingConfig.PaddingConfigDimension.interior_padding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaddingConfig::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaddingConfig::PaddingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.PaddingConfig)
}
PaddingConfig::PaddingConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.PaddingConfig)
}
PaddingConfig::PaddingConfig(const PaddingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.PaddingConfig)
}

void PaddingConfig::SharedCtor() {
  _cached_size_ = 0;
}

PaddingConfig::~PaddingConfig() {
  // @@protoc_insertion_point(destructor:xla.PaddingConfig)
  SharedDtor();
}

void PaddingConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PaddingConfig::ArenaDtor(void* object) {
  PaddingConfig* _this = reinterpret_cast< PaddingConfig* >(object);
  (void)_this;
}
void PaddingConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PaddingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaddingConfig::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[1].descriptor;
}

const PaddingConfig& PaddingConfig::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaddingConfig* PaddingConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PaddingConfig>(arena);
}

void PaddingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PaddingConfig)
  dimensions_.Clear();
}

bool PaddingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.PaddingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.PaddingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.PaddingConfig)
  return false;
#undef DO_
}

void PaddingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.PaddingConfig)
  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  for (unsigned int i = 0, n = this->dimensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.PaddingConfig)
}

::google::protobuf::uint8* PaddingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.PaddingConfig)
  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  for (unsigned int i = 0, n = this->dimensions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dimensions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.PaddingConfig)
  return target;
}

size_t PaddingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PaddingConfig)
  size_t total_size = 0;

  // repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
  {
    unsigned int count = this->dimensions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dimensions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaddingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.PaddingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PaddingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaddingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.PaddingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.PaddingConfig)
    MergeFrom(*source);
  }
}

void PaddingConfig::MergeFrom(const PaddingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.PaddingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
}

void PaddingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.PaddingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingConfig::CopyFrom(const PaddingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PaddingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingConfig::IsInitialized() const {
  return true;
}

void PaddingConfig::Swap(PaddingConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PaddingConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PaddingConfig::UnsafeArenaSwap(PaddingConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PaddingConfig::InternalSwap(PaddingConfig* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaddingConfig::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaddingConfig

// repeated .xla.PaddingConfig.PaddingConfigDimension dimensions = 1;
int PaddingConfig::dimensions_size() const {
  return dimensions_.size();
}
void PaddingConfig::clear_dimensions() {
  dimensions_.Clear();
}
const ::xla::PaddingConfig_PaddingConfigDimension& PaddingConfig::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.PaddingConfig.dimensions)
  return dimensions_.Get(index);
}
::xla::PaddingConfig_PaddingConfigDimension* PaddingConfig::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:xla.PaddingConfig.dimensions)
  return dimensions_.Mutable(index);
}
::xla::PaddingConfig_PaddingConfigDimension* PaddingConfig::add_dimensions() {
  // @@protoc_insertion_point(field_add:xla.PaddingConfig.dimensions)
  return dimensions_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >*
PaddingConfig::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.PaddingConfig.dimensions)
  return &dimensions_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::PaddingConfig_PaddingConfigDimension >&
PaddingConfig::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.PaddingConfig.dimensions)
  return dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layout::kMinorToMajorFieldNumber;
const int Layout::kPaddedDimensionsFieldNumber;
const int Layout::kPaddingValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layout::Layout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.Layout)
}
Layout::Layout(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  minor_to_major_(arena),
  padded_dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.Layout)
}
Layout::Layout(const Layout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      minor_to_major_(from.minor_to_major_),
      padded_dimensions_(from.padded_dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  padding_value_ = from.padding_value_;
  // @@protoc_insertion_point(copy_constructor:xla.Layout)
}

void Layout::SharedCtor() {
  padding_value_ = 0;
  _cached_size_ = 0;
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:xla.Layout)
  SharedDtor();
}

void Layout::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Layout::ArenaDtor(void* object) {
  Layout* _this = reinterpret_cast< Layout* >(object);
  (void)_this;
}
void Layout::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Layout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layout::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[2].descriptor;
}

const Layout& Layout::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Layout* Layout::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Layout>(arena);
}

void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Layout)
  minor_to_major_.Clear();
  padded_dimensions_.Clear();
  padding_value_ = 0;
}

bool Layout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.Layout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 minor_to_major = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_minor_to_major())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_minor_to_major())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 padded_dimensions = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_padded_dimensions())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_padded_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.PaddingValue padding_value = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_padding_value(static_cast< ::xla::PaddingValue >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.Layout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.Layout)
  return false;
#undef DO_
}

void Layout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.Layout)
  // repeated int64 minor_to_major = 1;
  if (this->minor_to_major_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_minor_to_major_cached_byte_size_);
  }
  for (int i = 0; i < this->minor_to_major_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->minor_to_major(i), output);
  }

  // repeated int64 padded_dimensions = 2;
  if (this->padded_dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_padded_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->padded_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->padded_dimensions(i), output);
  }

  // .xla.PaddingValue padding_value = 3;
  if (this->padding_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->padding_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.Layout)
}

::google::protobuf::uint8* Layout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.Layout)
  // repeated int64 minor_to_major = 1;
  if (this->minor_to_major_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _minor_to_major_cached_byte_size_, target);
  }
  for (int i = 0; i < this->minor_to_major_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->minor_to_major(i), target);
  }

  // repeated int64 padded_dimensions = 2;
  if (this->padded_dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _padded_dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->padded_dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->padded_dimensions(i), target);
  }

  // .xla.PaddingValue padding_value = 3;
  if (this->padding_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->padding_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Layout)
  size_t total_size = 0;

  // repeated int64 minor_to_major = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->minor_to_major_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _minor_to_major_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 padded_dimensions = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->padded_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _padded_dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.PaddingValue padding_value = 3;
  if (this->padding_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->padding_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  const Layout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Layout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.Layout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.Layout)
    MergeFrom(*source);
  }
}

void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  minor_to_major_.MergeFrom(from.minor_to_major_);
  padded_dimensions_.MergeFrom(from.padded_dimensions_);
  if (from.padding_value() != 0) {
    set_padding_value(from.padding_value());
  }
}

void Layout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::Swap(Layout* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Layout* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Layout::UnsafeArenaSwap(Layout* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Layout::InternalSwap(Layout* other) {
  minor_to_major_.UnsafeArenaSwap(&other->minor_to_major_);
  padded_dimensions_.UnsafeArenaSwap(&other->padded_dimensions_);
  std::swap(padding_value_, other->padding_value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layout::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layout

// repeated int64 minor_to_major = 1;
int Layout::minor_to_major_size() const {
  return minor_to_major_.size();
}
void Layout::clear_minor_to_major() {
  minor_to_major_.Clear();
}
::google::protobuf::int64 Layout::minor_to_major(int index) const {
  // @@protoc_insertion_point(field_get:xla.Layout.minor_to_major)
  return minor_to_major_.Get(index);
}
void Layout::set_minor_to_major(int index, ::google::protobuf::int64 value) {
  minor_to_major_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Layout.minor_to_major)
}
void Layout::add_minor_to_major(::google::protobuf::int64 value) {
  minor_to_major_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Layout.minor_to_major)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Layout::minor_to_major() const {
  // @@protoc_insertion_point(field_list:xla.Layout.minor_to_major)
  return minor_to_major_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Layout::mutable_minor_to_major() {
  // @@protoc_insertion_point(field_mutable_list:xla.Layout.minor_to_major)
  return &minor_to_major_;
}

// repeated int64 padded_dimensions = 2;
int Layout::padded_dimensions_size() const {
  return padded_dimensions_.size();
}
void Layout::clear_padded_dimensions() {
  padded_dimensions_.Clear();
}
::google::protobuf::int64 Layout::padded_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Layout.padded_dimensions)
  return padded_dimensions_.Get(index);
}
void Layout::set_padded_dimensions(int index, ::google::protobuf::int64 value) {
  padded_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Layout.padded_dimensions)
}
void Layout::add_padded_dimensions(::google::protobuf::int64 value) {
  padded_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Layout.padded_dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Layout::padded_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Layout.padded_dimensions)
  return padded_dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Layout::mutable_padded_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Layout.padded_dimensions)
  return &padded_dimensions_;
}

// .xla.PaddingValue padding_value = 3;
void Layout::clear_padding_value() {
  padding_value_ = 0;
}
::xla::PaddingValue Layout::padding_value() const {
  // @@protoc_insertion_point(field_get:xla.Layout.padding_value)
  return static_cast< ::xla::PaddingValue >(padding_value_);
}
void Layout::set_padding_value(::xla::PaddingValue value) {
  
  padding_value_ = value;
  // @@protoc_insertion_point(field_set:xla.Layout.padding_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Shape::_slow_mutable_layout() {
  layout_ = ::google::protobuf::Arena::CreateMessage< ::xla::Layout >(
      GetArenaNoVirtual());
}
::xla::Layout* Shape::_slow_release_layout() {
  if (layout_ == NULL) {
    return NULL;
  } else {
    ::xla::Layout* temp = new ::xla::Layout(*layout_);
    layout_ = NULL;
    return temp;
  }
}
::xla::Layout* Shape::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.Shape.layout)
  
  ::xla::Layout* temp = layout_;
  layout_ = NULL;
  return temp;
}
void Shape::_slow_set_allocated_layout(
    ::google::protobuf::Arena* message_arena, ::xla::Layout** layout) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*layout) == NULL) {
      message_arena->Own(*layout);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*layout)) {
      ::xla::Layout* new_layout = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Layout >(
            message_arena);
      new_layout->CopyFrom(**layout);
      *layout = new_layout;
    }
}
void Shape::unsafe_arena_set_allocated_layout(
    ::xla::Layout* layout) {
  if (GetArenaNoVirtual() == NULL) {
    delete layout_;
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.Shape.layout)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kElementTypeFieldNumber;
const int Shape::kDimensionsFieldNumber;
const int Shape::kTupleShapesFieldNumber;
const int Shape::kLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.Shape)
}
Shape::Shape(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena),
  tuple_shapes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      tuple_shapes_(from.tuple_shapes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_layout()) {
    layout_ = new ::xla::Layout(*from.layout_);
  } else {
    layout_ = NULL;
  }
  element_type_ = from.element_type_;
  // @@protoc_insertion_point(copy_constructor:xla.Shape)
}

void Shape::SharedCtor() {
  ::memset(&layout_, 0, reinterpret_cast<char*>(&element_type_) -
    reinterpret_cast<char*>(&layout_) + sizeof(element_type_));
  _cached_size_ = 0;
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:xla.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete layout_;
  }
}

void Shape::ArenaDtor(void* object) {
  Shape* _this = reinterpret_cast< Shape* >(object);
  (void)_this;
}
void Shape::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[3].descriptor;
}

const Shape& Shape::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Shape* Shape::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Shape>(arena);
}

void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Shape)
  dimensions_.Clear();
  tuple_shapes_.Clear();
  if (GetArenaNoVirtual() == NULL && layout_ != NULL) {
    delete layout_;
  }
  layout_ = NULL;
  element_type_ = 0;
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.Shape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.PrimitiveType element_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_element_type(static_cast< ::xla::PrimitiveType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dimensions = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.Shape tuple_shapes = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tuple_shapes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.Layout layout = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.Shape)
  // .xla.PrimitiveType element_type = 2;
  if (this->element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->element_type(), output);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // repeated .xla.Shape tuple_shapes = 4;
  for (unsigned int i = 0, n = this->tuple_shapes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tuple_shapes(i), output);
  }

  // .xla.Layout layout = 5;
  if (this->has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->layout_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.Shape)
  // .xla.PrimitiveType element_type = 2;
  if (this->element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->element_type(), target);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // repeated .xla.Shape tuple_shapes = 4;
  for (unsigned int i = 0, n = this->tuple_shapes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tuple_shapes(i), false, target);
  }

  // .xla.Layout layout = 5;
  if (this->has_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->layout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Shape)
  size_t total_size = 0;

  // repeated int64 dimensions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .xla.Shape tuple_shapes = 4;
  {
    unsigned int count = this->tuple_shapes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuple_shapes(i));
    }
  }

  // .xla.Layout layout = 5;
  if (this->has_layout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layout_);
  }

  // .xla.PrimitiveType element_type = 2;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->element_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
  tuple_shapes_.MergeFrom(from.tuple_shapes_);
  if (from.has_layout()) {
    mutable_layout()->::xla::Layout::MergeFrom(from.layout());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Shape* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Shape::UnsafeArenaSwap(Shape* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  tuple_shapes_.UnsafeArenaSwap(&other->tuple_shapes_);
  std::swap(layout_, other->layout_);
  std::swap(element_type_, other->element_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shape

// .xla.PrimitiveType element_type = 2;
void Shape::clear_element_type() {
  element_type_ = 0;
}
::xla::PrimitiveType Shape::element_type() const {
  // @@protoc_insertion_point(field_get:xla.Shape.element_type)
  return static_cast< ::xla::PrimitiveType >(element_type_);
}
void Shape::set_element_type(::xla::PrimitiveType value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:xla.Shape.element_type)
}

// repeated int64 dimensions = 3;
int Shape::dimensions_size() const {
  return dimensions_.size();
}
void Shape::clear_dimensions() {
  dimensions_.Clear();
}
::google::protobuf::int64 Shape::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Shape.dimensions)
  return dimensions_.Get(index);
}
void Shape::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Shape.dimensions)
}
void Shape::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Shape.dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Shape::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Shape.dimensions)
  return dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Shape::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Shape.dimensions)
  return &dimensions_;
}

// repeated .xla.Shape tuple_shapes = 4;
int Shape::tuple_shapes_size() const {
  return tuple_shapes_.size();
}
void Shape::clear_tuple_shapes() {
  tuple_shapes_.Clear();
}
const ::xla::Shape& Shape::tuple_shapes(int index) const {
  // @@protoc_insertion_point(field_get:xla.Shape.tuple_shapes)
  return tuple_shapes_.Get(index);
}
::xla::Shape* Shape::mutable_tuple_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Shape.tuple_shapes)
  return tuple_shapes_.Mutable(index);
}
::xla::Shape* Shape::add_tuple_shapes() {
  // @@protoc_insertion_point(field_add:xla.Shape.tuple_shapes)
  return tuple_shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::Shape >*
Shape::mutable_tuple_shapes() {
  // @@protoc_insertion_point(field_mutable_list:xla.Shape.tuple_shapes)
  return &tuple_shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
Shape::tuple_shapes() const {
  // @@protoc_insertion_point(field_list:xla.Shape.tuple_shapes)
  return tuple_shapes_;
}

// .xla.Layout layout = 5;
bool Shape::has_layout() const {
  return this != internal_default_instance() && layout_ != NULL;
}
void Shape::clear_layout() {
  if (GetArenaNoVirtual() == NULL && layout_ != NULL) delete layout_;
  layout_ = NULL;
}
const ::xla::Layout& Shape::layout() const {
  // @@protoc_insertion_point(field_get:xla.Shape.layout)
  return layout_ != NULL ? *layout_
                         : *::xla::Layout::internal_default_instance();
}
::xla::Layout* Shape::mutable_layout() {
  
  if (layout_ == NULL) {
    _slow_mutable_layout();
  }
  // @@protoc_insertion_point(field_mutable:xla.Shape.layout)
  return layout_;
}
::xla::Layout* Shape::release_layout() {
  // @@protoc_insertion_point(field_release:xla.Shape.layout)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_layout();
  } else {
    ::xla::Layout* temp = layout_;
    layout_ = NULL;
    return temp;
  }
}
 void Shape::set_allocated_layout(::xla::Layout* layout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete layout_;
  }
  if (layout != NULL) {
    _slow_set_allocated_layout(message_arena, &layout);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.Shape.layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ProgramShape::_slow_mutable_result() {
  result_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* ProgramShape::_slow_release_result() {
  if (result_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*result_);
    result_ = NULL;
    return temp;
  }
}
::xla::Shape* ProgramShape::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ProgramShape.result)
  
  ::xla::Shape* temp = result_;
  result_ = NULL;
  return temp;
}
void ProgramShape::_slow_set_allocated_result(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** result) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*result) == NULL) {
      message_arena->Own(*result);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*result)) {
      ::xla::Shape* new_result = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_result->CopyFrom(**result);
      *result = new_result;
    }
}
void ProgramShape::unsafe_arena_set_allocated_result(
    ::xla::Shape* result) {
  if (GetArenaNoVirtual() == NULL) {
    delete result_;
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ProgramShape.result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgramShape::kParametersFieldNumber;
const int ProgramShape::kResultFieldNumber;
const int ProgramShape::kParameterNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgramShape::ProgramShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ProgramShape)
}
ProgramShape::ProgramShape(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parameters_(arena),
  parameter_names_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ProgramShape)
}
ProgramShape::ProgramShape(const ProgramShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parameters_(from.parameters_),
      parameter_names_(from.parameter_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::xla::Shape(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ProgramShape)
}

void ProgramShape::SharedCtor() {
  result_ = NULL;
  _cached_size_ = 0;
}

ProgramShape::~ProgramShape() {
  // @@protoc_insertion_point(destructor:xla.ProgramShape)
  SharedDtor();
}

void ProgramShape::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete result_;
  }
}

void ProgramShape::ArenaDtor(void* object) {
  ProgramShape* _this = reinterpret_cast< ProgramShape* >(object);
  (void)_this;
}
void ProgramShape::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ProgramShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgramShape::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[4].descriptor;
}

const ProgramShape& ProgramShape::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProgramShape* ProgramShape::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ProgramShape>(arena);
}

void ProgramShape::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ProgramShape)
  parameters_.Clear();
  parameter_names_.Clear();
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}

bool ProgramShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ProgramShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.Shape parameters = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.Shape result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string parameter_names = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parameter_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parameter_names(this->parameter_names_size() - 1).data(),
            this->parameter_names(this->parameter_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.ProgramShape.parameter_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ProgramShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ProgramShape)
  return false;
#undef DO_
}

void ProgramShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ProgramShape)
  // repeated .xla.Shape parameters = 1;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parameters(i), output);
  }

  // .xla.Shape result = 2;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  // repeated string parameter_names = 3;
  for (int i = 0; i < this->parameter_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameter_names(i).data(), this->parameter_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ProgramShape.parameter_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameter_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ProgramShape)
}

::google::protobuf::uint8* ProgramShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ProgramShape)
  // repeated .xla.Shape parameters = 1;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->parameters(i), false, target);
  }

  // .xla.Shape result = 2;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->result_, false, target);
  }

  // repeated string parameter_names = 3;
  for (int i = 0; i < this->parameter_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameter_names(i).data(), this->parameter_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ProgramShape.parameter_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->parameter_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ProgramShape)
  return target;
}

size_t ProgramShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ProgramShape)
  size_t total_size = 0;

  // repeated .xla.Shape parameters = 1;
  {
    unsigned int count = this->parameters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters(i));
    }
  }

  // repeated string parameter_names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parameter_names_size());
  for (int i = 0; i < this->parameter_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parameter_names(i));
  }

  // .xla.Shape result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgramShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ProgramShape)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgramShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProgramShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ProgramShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ProgramShape)
    MergeFrom(*source);
  }
}

void ProgramShape::MergeFrom(const ProgramShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ProgramShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  parameter_names_.MergeFrom(from.parameter_names_);
  if (from.has_result()) {
    mutable_result()->::xla::Shape::MergeFrom(from.result());
  }
}

void ProgramShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ProgramShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramShape::CopyFrom(const ProgramShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ProgramShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramShape::IsInitialized() const {
  return true;
}

void ProgramShape::Swap(ProgramShape* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ProgramShape* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ProgramShape::UnsafeArenaSwap(ProgramShape* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ProgramShape::InternalSwap(ProgramShape* other) {
  parameters_.UnsafeArenaSwap(&other->parameters_);
  parameter_names_.UnsafeArenaSwap(&other->parameter_names_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProgramShape::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProgramShape

// repeated .xla.Shape parameters = 1;
int ProgramShape::parameters_size() const {
  return parameters_.size();
}
void ProgramShape::clear_parameters() {
  parameters_.Clear();
}
const ::xla::Shape& ProgramShape::parameters(int index) const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.parameters)
  return parameters_.Get(index);
}
::xla::Shape* ProgramShape::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.parameters)
  return parameters_.Mutable(index);
}
::xla::Shape* ProgramShape::add_parameters() {
  // @@protoc_insertion_point(field_add:xla.ProgramShape.parameters)
  return parameters_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::Shape >*
ProgramShape::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:xla.ProgramShape.parameters)
  return &parameters_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::Shape >&
ProgramShape::parameters() const {
  // @@protoc_insertion_point(field_list:xla.ProgramShape.parameters)
  return parameters_;
}

// .xla.Shape result = 2;
bool ProgramShape::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void ProgramShape::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::xla::Shape& ProgramShape::result() const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.result)
  return result_ != NULL ? *result_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* ProgramShape::mutable_result() {
  
  if (result_ == NULL) {
    _slow_mutable_result();
  }
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.result)
  return result_;
}
::xla::Shape* ProgramShape::release_result() {
  // @@protoc_insertion_point(field_release:xla.ProgramShape.result)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_result();
  } else {
    ::xla::Shape* temp = result_;
    result_ = NULL;
    return temp;
  }
}
 void ProgramShape::set_allocated_result(::xla::Shape* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result != NULL) {
    _slow_set_allocated_result(message_arena, &result);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ProgramShape.result)
}

// repeated string parameter_names = 3;
int ProgramShape::parameter_names_size() const {
  return parameter_names_.size();
}
void ProgramShape::clear_parameter_names() {
  parameter_names_.Clear();
}
const ::std::string& ProgramShape::parameter_names(int index) const {
  // @@protoc_insertion_point(field_get:xla.ProgramShape.parameter_names)
  return parameter_names_.Get(index);
}
::std::string* ProgramShape::mutable_parameter_names(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ProgramShape.parameter_names)
  return parameter_names_.Mutable(index);
}
void ProgramShape::set_parameter_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xla.ProgramShape.parameter_names)
  parameter_names_.Mutable(index)->assign(value);
}
void ProgramShape::set_parameter_names(int index, const char* value) {
  parameter_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.ProgramShape.parameter_names)
}
void ProgramShape::set_parameter_names(int index, const char* value, size_t size) {
  parameter_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.ProgramShape.parameter_names)
}
::std::string* ProgramShape::add_parameter_names() {
  // @@protoc_insertion_point(field_add_mutable:xla.ProgramShape.parameter_names)
  return parameter_names_.Add();
}
void ProgramShape::add_parameter_names(const ::std::string& value) {
  parameter_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.ProgramShape.parameter_names)
}
void ProgramShape::add_parameter_names(const char* value) {
  parameter_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.ProgramShape.parameter_names)
}
void ProgramShape::add_parameter_names(const char* value, size_t size) {
  parameter_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.ProgramShape.parameter_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProgramShape::parameter_names() const {
  // @@protoc_insertion_point(field_list:xla.ProgramShape.parameter_names)
  return parameter_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProgramShape::mutable_parameter_names() {
  // @@protoc_insertion_point(field_mutable_list:xla.ProgramShape.parameter_names)
  return &parameter_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationStats::kFlopCountFieldNumber;
const int ComputationStats::kTranscendentalCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationStats::ComputationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationStats)
}
ComputationStats::ComputationStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ComputationStats)
}
ComputationStats::ComputationStats(const ComputationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flop_count_, &from.flop_count_,
    reinterpret_cast<char*>(&transcendental_count_) -
    reinterpret_cast<char*>(&flop_count_) + sizeof(transcendental_count_));
  // @@protoc_insertion_point(copy_constructor:xla.ComputationStats)
}

void ComputationStats::SharedCtor() {
  ::memset(&flop_count_, 0, reinterpret_cast<char*>(&transcendental_count_) -
    reinterpret_cast<char*>(&flop_count_) + sizeof(transcendental_count_));
  _cached_size_ = 0;
}

ComputationStats::~ComputationStats() {
  // @@protoc_insertion_point(destructor:xla.ComputationStats)
  SharedDtor();
}

void ComputationStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ComputationStats::ArenaDtor(void* object) {
  ComputationStats* _this = reinterpret_cast< ComputationStats* >(object);
  (void)_this;
}
void ComputationStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ComputationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationStats::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[5].descriptor;
}

const ComputationStats& ComputationStats::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationStats* ComputationStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ComputationStats>(arena);
}

void ComputationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationStats)
  ::memset(&flop_count_, 0, reinterpret_cast<char*>(&transcendental_count_) -
    reinterpret_cast<char*>(&flop_count_) + sizeof(transcendental_count_));
}

bool ComputationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double flop_count = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flop_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double transcendental_count = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transcendental_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationStats)
  return false;
#undef DO_
}

void ComputationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationStats)
  // double flop_count = 1;
  if (this->flop_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->flop_count(), output);
  }

  // double transcendental_count = 2;
  if (this->transcendental_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transcendental_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationStats)
}

::google::protobuf::uint8* ComputationStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationStats)
  // double flop_count = 1;
  if (this->flop_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->flop_count(), target);
  }

  // double transcendental_count = 2;
  if (this->transcendental_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transcendental_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationStats)
  return target;
}

size_t ComputationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationStats)
  size_t total_size = 0;

  // double flop_count = 1;
  if (this->flop_count() != 0) {
    total_size += 1 + 8;
  }

  // double transcendental_count = 2;
  if (this->transcendental_count() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationStats)
    MergeFrom(*source);
  }
}

void ComputationStats::MergeFrom(const ComputationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.flop_count() != 0) {
    set_flop_count(from.flop_count());
  }
  if (from.transcendental_count() != 0) {
    set_transcendental_count(from.transcendental_count());
  }
}

void ComputationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationStats::CopyFrom(const ComputationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationStats::IsInitialized() const {
  return true;
}

void ComputationStats::Swap(ComputationStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ComputationStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ComputationStats::UnsafeArenaSwap(ComputationStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ComputationStats::InternalSwap(ComputationStats* other) {
  std::swap(flop_count_, other->flop_count_);
  std::swap(transcendental_count_, other->transcendental_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationStats::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationStats

// double flop_count = 1;
void ComputationStats::clear_flop_count() {
  flop_count_ = 0;
}
double ComputationStats::flop_count() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStats.flop_count)
  return flop_count_;
}
void ComputationStats::set_flop_count(double value) {
  
  flop_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationStats.flop_count)
}

// double transcendental_count = 2;
void ComputationStats::clear_transcendental_count() {
  transcendental_count_ = 0;
}
double ComputationStats::transcendental_count() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStats.transcendental_count)
  return transcendental_count_;
}
void ComputationStats::set_transcendental_count(double value) {
  
  transcendental_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationStats.transcendental_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpMetadata::kOpTypeFieldNumber;
const int OpMetadata::kOpNameFieldNumber;
const int OpMetadata::kSourceFileFieldNumber;
const int OpMetadata::kSourceLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpMetadata::OpMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.OpMetadata)
}
OpMetadata::OpMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.OpMetadata)
}
OpMetadata::OpMetadata(const OpMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_type().size() > 0) {
    op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type(),
      GetArenaNoVirtual());
  }
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_name().size() > 0) {
    op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name(),
      GetArenaNoVirtual());
  }
  source_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_file().size() > 0) {
    source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_file(),
      GetArenaNoVirtual());
  }
  source_line_ = from.source_line_;
  // @@protoc_insertion_point(copy_constructor:xla.OpMetadata)
}

void OpMetadata::SharedCtor() {
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_line_ = 0;
  _cached_size_ = 0;
}

OpMetadata::~OpMetadata() {
  // @@protoc_insertion_point(destructor:xla.OpMetadata)
  SharedDtor();
}

void OpMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  op_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  op_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_file_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void OpMetadata::ArenaDtor(void* object) {
  OpMetadata* _this = reinterpret_cast< OpMetadata* >(object);
  (void)_this;
}
void OpMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpMetadata::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[6].descriptor;
}

const OpMetadata& OpMetadata::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpMetadata* OpMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpMetadata>(arena);
}

void OpMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpMetadata)
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_line_ = 0;
}

bool OpMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.OpMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string op_type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), this->op_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.OpMetadata.op_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), this->op_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.OpMetadata.op_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_file = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_file().data(), this->source_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.OpMetadata.source_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source_line = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.OpMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.OpMetadata)
  return false;
#undef DO_
}

void OpMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.OpMetadata)
  // string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op_type(), output);
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op_name(), output);
  }

  // string source_file = 3;
  if (this->source_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_file().data(), this->source_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.source_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_file(), output);
  }

  // int32 source_line = 4;
  if (this->source_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source_line(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.OpMetadata)
}

::google::protobuf::uint8* OpMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpMetadata)
  // string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op_type(), target);
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op_name(), target);
  }

  // string source_file = 3;
  if (this->source_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_file().data(), this->source_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.OpMetadata.source_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_file(), target);
  }

  // int32 source_line = 4;
  if (this->source_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source_line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.OpMetadata)
  return target;
}

size_t OpMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpMetadata)
  size_t total_size = 0;

  // string op_type = 1;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // string source_file = 3;
  if (this->source_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_file());
  }

  // int32 source_line = 4;
  if (this->source_line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.OpMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const OpMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.OpMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.OpMetadata)
    MergeFrom(*source);
  }
}

void OpMetadata::MergeFrom(const OpMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.OpMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.op_type().size() > 0) {
    set_op_type(from.op_type());
  }
  if (from.op_name().size() > 0) {
    set_op_name(from.op_name());
  }
  if (from.source_file().size() > 0) {
    set_source_file(from.source_file());
  }
  if (from.source_line() != 0) {
    set_source_line(from.source_line());
  }
}

void OpMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.OpMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpMetadata::CopyFrom(const OpMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMetadata::IsInitialized() const {
  return true;
}

void OpMetadata::Swap(OpMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpMetadata::UnsafeArenaSwap(OpMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpMetadata::InternalSwap(OpMetadata* other) {
  op_type_.Swap(&other->op_type_);
  op_name_.Swap(&other->op_name_);
  source_file_.Swap(&other->source_file_);
  std::swap(source_line_, other->source_line_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpMetadata

// string op_type = 1;
void OpMetadata::clear_op_type() {
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpMetadata::op_type() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.op_type)
  return op_type_.Get();
}
void OpMetadata::set_op_type(const ::std::string& value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.op_type)
}
void OpMetadata::set_op_type(const char* value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.op_type)
}
void OpMetadata::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.op_type)
}
::std::string* OpMetadata::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.op_type)
  return op_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::release_op_type() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.op_type)
  
  return op_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::unsafe_arena_release_op_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.op_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpMetadata::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.op_type)
}
void OpMetadata::unsafe_arena_set_allocated_op_type(
    ::std::string* op_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.op_type)
}

// string op_name = 2;
void OpMetadata::clear_op_name() {
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpMetadata::op_name() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.op_name)
  return op_name_.Get();
}
void OpMetadata::set_op_name(const ::std::string& value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.op_name)
}
void OpMetadata::set_op_name(const char* value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.op_name)
}
void OpMetadata::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.op_name)
}
::std::string* OpMetadata::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.op_name)
  return op_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::release_op_name() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.op_name)
  
  return op_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::unsafe_arena_release_op_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.op_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpMetadata::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.op_name)
}
void OpMetadata::unsafe_arena_set_allocated_op_name(
    ::std::string* op_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.op_name)
}

// string source_file = 3;
void OpMetadata::clear_source_file() {
  source_file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpMetadata::source_file() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.source_file)
  return source_file_.Get();
}
void OpMetadata::set_source_file(const ::std::string& value) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OpMetadata.source_file)
}
void OpMetadata::set_source_file(const char* value) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OpMetadata.source_file)
}
void OpMetadata::set_source_file(const char* value,
    size_t size) {
  
  source_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OpMetadata.source_file)
}
::std::string* OpMetadata::mutable_source_file() {
  
  // @@protoc_insertion_point(field_mutable:xla.OpMetadata.source_file)
  return source_file_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::release_source_file() {
  // @@protoc_insertion_point(field_release:xla.OpMetadata.source_file)
  
  return source_file_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpMetadata::unsafe_arena_release_source_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpMetadata.source_file)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_file_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpMetadata::set_allocated_source_file(::std::string* source_file) {
  if (source_file != NULL) {
    
  } else {
    
  }
  source_file_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_file,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OpMetadata.source_file)
}
void OpMetadata::unsafe_arena_set_allocated_source_file(
    ::std::string* source_file) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_file != NULL) {
    
  } else {
    
  }
  source_file_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_file, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpMetadata.source_file)
}

// int32 source_line = 4;
void OpMetadata::clear_source_line() {
  source_line_ = 0;
}
::google::protobuf::int32 OpMetadata::source_line() const {
  // @@protoc_insertion_point(field_get:xla.OpMetadata.source_line)
  return source_line_;
}
void OpMetadata::set_source_line(::google::protobuf::int32 value) {
  
  source_line_ = value;
  // @@protoc_insertion_point(field_set:xla.OpMetadata.source_line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionProfile::kCompilationCacheHitFieldNumber;
const int ExecutionProfile::kCompileTimeMsFieldNumber;
const int ExecutionProfile::kComputeCycleCountFieldNumber;
const int ExecutionProfile::kComputeTimeNsFieldNumber;
const int ExecutionProfile::kComputeAndTransferTimeNsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionProfile::ExecutionProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecutionProfile)
}
ExecutionProfile::ExecutionProfile(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionProfile)
}
ExecutionProfile::ExecutionProfile(const ExecutionProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&compile_time_ms_, &from.compile_time_ms_,
    reinterpret_cast<char*>(&compilation_cache_hit_) -
    reinterpret_cast<char*>(&compile_time_ms_) + sizeof(compilation_cache_hit_));
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionProfile)
}

void ExecutionProfile::SharedCtor() {
  ::memset(&compile_time_ms_, 0, reinterpret_cast<char*>(&compilation_cache_hit_) -
    reinterpret_cast<char*>(&compile_time_ms_) + sizeof(compilation_cache_hit_));
  _cached_size_ = 0;
}

ExecutionProfile::~ExecutionProfile() {
  // @@protoc_insertion_point(destructor:xla.ExecutionProfile)
  SharedDtor();
}

void ExecutionProfile::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ExecutionProfile::ArenaDtor(void* object) {
  ExecutionProfile* _this = reinterpret_cast< ExecutionProfile* >(object);
  (void)_this;
}
void ExecutionProfile::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExecutionProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionProfile::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[7].descriptor;
}

const ExecutionProfile& ExecutionProfile::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutionProfile* ExecutionProfile::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExecutionProfile>(arena);
}

void ExecutionProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionProfile)
  ::memset(&compile_time_ms_, 0, reinterpret_cast<char*>(&compilation_cache_hit_) -
    reinterpret_cast<char*>(&compile_time_ms_) + sizeof(compilation_cache_hit_));
}

bool ExecutionProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecutionProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool compilation_cache_hit = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compilation_cache_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compile_time_ms = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compile_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compute_cycle_count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_cycle_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compute_time_ns = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_time_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compute_and_transfer_time_ns = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_and_transfer_time_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecutionProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecutionProfile)
  return false;
#undef DO_
}

void ExecutionProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecutionProfile)
  // bool compilation_cache_hit = 1;
  if (this->compilation_cache_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->compilation_cache_hit(), output);
  }

  // int64 compile_time_ms = 2;
  if (this->compile_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->compile_time_ms(), output);
  }

  // int64 compute_cycle_count = 3;
  if (this->compute_cycle_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->compute_cycle_count(), output);
  }

  // int64 compute_time_ns = 4;
  if (this->compute_time_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->compute_time_ns(), output);
  }

  // int64 compute_and_transfer_time_ns = 5;
  if (this->compute_and_transfer_time_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->compute_and_transfer_time_ns(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecutionProfile)
}

::google::protobuf::uint8* ExecutionProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionProfile)
  // bool compilation_cache_hit = 1;
  if (this->compilation_cache_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->compilation_cache_hit(), target);
  }

  // int64 compile_time_ms = 2;
  if (this->compile_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->compile_time_ms(), target);
  }

  // int64 compute_cycle_count = 3;
  if (this->compute_cycle_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->compute_cycle_count(), target);
  }

  // int64 compute_time_ns = 4;
  if (this->compute_time_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->compute_time_ns(), target);
  }

  // int64 compute_and_transfer_time_ns = 5;
  if (this->compute_and_transfer_time_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->compute_and_transfer_time_ns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionProfile)
  return target;
}

size_t ExecutionProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionProfile)
  size_t total_size = 0;

  // int64 compile_time_ms = 2;
  if (this->compile_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compile_time_ms());
  }

  // int64 compute_cycle_count = 3;
  if (this->compute_cycle_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_cycle_count());
  }

  // int64 compute_time_ns = 4;
  if (this->compute_time_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_time_ns());
  }

  // int64 compute_and_transfer_time_ns = 5;
  if (this->compute_and_transfer_time_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_and_transfer_time_ns());
  }

  // bool compilation_cache_hit = 1;
  if (this->compilation_cache_hit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecutionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecutionProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecutionProfile)
    MergeFrom(*source);
  }
}

void ExecutionProfile::MergeFrom(const ExecutionProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.compile_time_ms() != 0) {
    set_compile_time_ms(from.compile_time_ms());
  }
  if (from.compute_cycle_count() != 0) {
    set_compute_cycle_count(from.compute_cycle_count());
  }
  if (from.compute_time_ns() != 0) {
    set_compute_time_ns(from.compute_time_ns());
  }
  if (from.compute_and_transfer_time_ns() != 0) {
    set_compute_and_transfer_time_ns(from.compute_and_transfer_time_ns());
  }
  if (from.compilation_cache_hit() != 0) {
    set_compilation_cache_hit(from.compilation_cache_hit());
  }
}

void ExecutionProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecutionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionProfile::CopyFrom(const ExecutionProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionProfile::IsInitialized() const {
  return true;
}

void ExecutionProfile::Swap(ExecutionProfile* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutionProfile* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExecutionProfile::UnsafeArenaSwap(ExecutionProfile* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutionProfile::InternalSwap(ExecutionProfile* other) {
  std::swap(compile_time_ms_, other->compile_time_ms_);
  std::swap(compute_cycle_count_, other->compute_cycle_count_);
  std::swap(compute_time_ns_, other->compute_time_ns_);
  std::swap(compute_and_transfer_time_ns_, other->compute_and_transfer_time_ns_);
  std::swap(compilation_cache_hit_, other->compilation_cache_hit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionProfile::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionProfile

// bool compilation_cache_hit = 1;
void ExecutionProfile::clear_compilation_cache_hit() {
  compilation_cache_hit_ = false;
}
bool ExecutionProfile::compilation_cache_hit() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compilation_cache_hit)
  return compilation_cache_hit_;
}
void ExecutionProfile::set_compilation_cache_hit(bool value) {
  
  compilation_cache_hit_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compilation_cache_hit)
}

// int64 compile_time_ms = 2;
void ExecutionProfile::clear_compile_time_ms() {
  compile_time_ms_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecutionProfile::compile_time_ms() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compile_time_ms)
  return compile_time_ms_;
}
void ExecutionProfile::set_compile_time_ms(::google::protobuf::int64 value) {
  
  compile_time_ms_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compile_time_ms)
}

// int64 compute_cycle_count = 3;
void ExecutionProfile::clear_compute_cycle_count() {
  compute_cycle_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecutionProfile::compute_cycle_count() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_cycle_count)
  return compute_cycle_count_;
}
void ExecutionProfile::set_compute_cycle_count(::google::protobuf::int64 value) {
  
  compute_cycle_count_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_cycle_count)
}

// int64 compute_time_ns = 4;
void ExecutionProfile::clear_compute_time_ns() {
  compute_time_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecutionProfile::compute_time_ns() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_time_ns)
  return compute_time_ns_;
}
void ExecutionProfile::set_compute_time_ns(::google::protobuf::int64 value) {
  
  compute_time_ns_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_time_ns)
}

// int64 compute_and_transfer_time_ns = 5;
void ExecutionProfile::clear_compute_and_transfer_time_ns() {
  compute_and_transfer_time_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecutionProfile::compute_and_transfer_time_ns() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionProfile.compute_and_transfer_time_ns)
  return compute_and_transfer_time_ns_;
}
void ExecutionProfile::set_compute_and_transfer_time_ns(::google::protobuf::int64 value) {
  
  compute_and_transfer_time_ns_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionProfile.compute_and_transfer_time_ns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationHandle::ComputationHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationHandle)
}
ComputationHandle::ComputationHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ComputationHandle)
}
ComputationHandle::ComputationHandle(const ComputationHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.ComputationHandle)
}

void ComputationHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ComputationHandle::~ComputationHandle() {
  // @@protoc_insertion_point(destructor:xla.ComputationHandle)
  SharedDtor();
}

void ComputationHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ComputationHandle::ArenaDtor(void* object) {
  ComputationHandle* _this = reinterpret_cast< ComputationHandle* >(object);
  (void)_this;
}
void ComputationHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ComputationHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[8].descriptor;
}

const ComputationHandle& ComputationHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationHandle* ComputationHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ComputationHandle>(arena);
}

void ComputationHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool ComputationHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationHandle)
  return false;
#undef DO_
}

void ComputationHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationHandle)
}

::google::protobuf::uint8* ComputationHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationHandle)
  return target;
}

size_t ComputationHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationHandle)
    MergeFrom(*source);
  }
}

void ComputationHandle::MergeFrom(const ComputationHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void ComputationHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationHandle::CopyFrom(const ComputationHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationHandle::IsInitialized() const {
  return true;
}

void ComputationHandle::Swap(ComputationHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ComputationHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ComputationHandle::UnsafeArenaSwap(ComputationHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ComputationHandle::InternalSwap(ComputationHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationHandle

// int64 handle = 1;
void ComputationHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ComputationHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ComputationHandle.handle)
  return handle_;
}
void ComputationHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionHandle::ExecutionHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecutionHandle)
}
ExecutionHandle::ExecutionHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionHandle)
}
ExecutionHandle::ExecutionHandle(const ExecutionHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionHandle)
}

void ExecutionHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ExecutionHandle::~ExecutionHandle() {
  // @@protoc_insertion_point(destructor:xla.ExecutionHandle)
  SharedDtor();
}

void ExecutionHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ExecutionHandle::ArenaDtor(void* object) {
  ExecutionHandle* _this = reinterpret_cast< ExecutionHandle* >(object);
  (void)_this;
}
void ExecutionHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExecutionHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[9].descriptor;
}

const ExecutionHandle& ExecutionHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutionHandle* ExecutionHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExecutionHandle>(arena);
}

void ExecutionHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool ExecutionHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecutionHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecutionHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecutionHandle)
  return false;
#undef DO_
}

void ExecutionHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecutionHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecutionHandle)
}

::google::protobuf::uint8* ExecutionHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionHandle)
  return target;
}

size_t ExecutionHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecutionHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecutionHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecutionHandle)
    MergeFrom(*source);
  }
}

void ExecutionHandle::MergeFrom(const ExecutionHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void ExecutionHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecutionHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionHandle::CopyFrom(const ExecutionHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionHandle::IsInitialized() const {
  return true;
}

void ExecutionHandle::Swap(ExecutionHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutionHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExecutionHandle::UnsafeArenaSwap(ExecutionHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutionHandle::InternalSwap(ExecutionHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionHandle

// int64 handle = 1;
void ExecutionHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecutionHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionHandle.handle)
  return handle_;
}
void ExecutionHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalDataHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalDataHandle::GlobalDataHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GlobalDataHandle)
}
GlobalDataHandle::GlobalDataHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.GlobalDataHandle)
}
GlobalDataHandle::GlobalDataHandle(const GlobalDataHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.GlobalDataHandle)
}

void GlobalDataHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

GlobalDataHandle::~GlobalDataHandle() {
  // @@protoc_insertion_point(destructor:xla.GlobalDataHandle)
  SharedDtor();
}

void GlobalDataHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void GlobalDataHandle::ArenaDtor(void* object) {
  GlobalDataHandle* _this = reinterpret_cast< GlobalDataHandle* >(object);
  (void)_this;
}
void GlobalDataHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GlobalDataHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDataHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[10].descriptor;
}

const GlobalDataHandle& GlobalDataHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GlobalDataHandle* GlobalDataHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GlobalDataHandle>(arena);
}

void GlobalDataHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GlobalDataHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool GlobalDataHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GlobalDataHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GlobalDataHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GlobalDataHandle)
  return false;
#undef DO_
}

void GlobalDataHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GlobalDataHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GlobalDataHandle)
}

::google::protobuf::uint8* GlobalDataHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GlobalDataHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GlobalDataHandle)
  return target;
}

size_t GlobalDataHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GlobalDataHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDataHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GlobalDataHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalDataHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalDataHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GlobalDataHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GlobalDataHandle)
    MergeFrom(*source);
  }
}

void GlobalDataHandle::MergeFrom(const GlobalDataHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GlobalDataHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void GlobalDataHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GlobalDataHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDataHandle::CopyFrom(const GlobalDataHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GlobalDataHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDataHandle::IsInitialized() const {
  return true;
}

void GlobalDataHandle::Swap(GlobalDataHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GlobalDataHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GlobalDataHandle::UnsafeArenaSwap(GlobalDataHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GlobalDataHandle::InternalSwap(GlobalDataHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalDataHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalDataHandle

// int64 handle = 1;
void GlobalDataHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GlobalDataHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.GlobalDataHandle.handle)
  return handle_;
}
void GlobalDataHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.GlobalDataHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationDataHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationDataHandle::ComputationDataHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationDataHandle)
}
ComputationDataHandle::ComputationDataHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ComputationDataHandle)
}
ComputationDataHandle::ComputationDataHandle(const ComputationDataHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.ComputationDataHandle)
}

void ComputationDataHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ComputationDataHandle::~ComputationDataHandle() {
  // @@protoc_insertion_point(destructor:xla.ComputationDataHandle)
  SharedDtor();
}

void ComputationDataHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ComputationDataHandle::ArenaDtor(void* object) {
  ComputationDataHandle* _this = reinterpret_cast< ComputationDataHandle* >(object);
  (void)_this;
}
void ComputationDataHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ComputationDataHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationDataHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[11].descriptor;
}

const ComputationDataHandle& ComputationDataHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationDataHandle* ComputationDataHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ComputationDataHandle>(arena);
}

void ComputationDataHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationDataHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool ComputationDataHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationDataHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationDataHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationDataHandle)
  return false;
#undef DO_
}

void ComputationDataHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationDataHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationDataHandle)
}

::google::protobuf::uint8* ComputationDataHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationDataHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationDataHandle)
  return target;
}

size_t ComputationDataHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationDataHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationDataHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationDataHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationDataHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationDataHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationDataHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationDataHandle)
    MergeFrom(*source);
  }
}

void ComputationDataHandle::MergeFrom(const ComputationDataHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationDataHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void ComputationDataHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationDataHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationDataHandle::CopyFrom(const ComputationDataHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationDataHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationDataHandle::IsInitialized() const {
  return true;
}

void ComputationDataHandle::Swap(ComputationDataHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ComputationDataHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ComputationDataHandle::UnsafeArenaSwap(ComputationDataHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ComputationDataHandle::InternalSwap(ComputationDataHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationDataHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationDataHandle

// int64 handle = 1;
void ComputationDataHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ComputationDataHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ComputationDataHandle.handle)
  return handle_;
}
void ComputationDataHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ComputationDataHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceHandle::DeviceHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.DeviceHandle)
}
DeviceHandle::DeviceHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.DeviceHandle)
}
DeviceHandle::DeviceHandle(const DeviceHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.DeviceHandle)
}

void DeviceHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

DeviceHandle::~DeviceHandle() {
  // @@protoc_insertion_point(destructor:xla.DeviceHandle)
  SharedDtor();
}

void DeviceHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DeviceHandle::ArenaDtor(void* object) {
  DeviceHandle* _this = reinterpret_cast< DeviceHandle* >(object);
  (void)_this;
}
void DeviceHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[12].descriptor;
}

const DeviceHandle& DeviceHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceHandle* DeviceHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceHandle>(arena);
}

void DeviceHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeviceHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool DeviceHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.DeviceHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.DeviceHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.DeviceHandle)
  return false;
#undef DO_
}

void DeviceHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.DeviceHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.DeviceHandle)
}

::google::protobuf::uint8* DeviceHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeviceHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.DeviceHandle)
  return target;
}

size_t DeviceHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeviceHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.DeviceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.DeviceHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.DeviceHandle)
    MergeFrom(*source);
  }
}

void DeviceHandle::MergeFrom(const DeviceHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.DeviceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void DeviceHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.DeviceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceHandle::CopyFrom(const DeviceHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeviceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceHandle::IsInitialized() const {
  return true;
}

void DeviceHandle::Swap(DeviceHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeviceHandle::UnsafeArenaSwap(DeviceHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceHandle::InternalSwap(DeviceHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceHandle

// int64 handle = 1;
void DeviceHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.DeviceHandle.handle)
  return handle_;
}
void DeviceHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.DeviceHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelHandle::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelHandle::ChannelHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ChannelHandle)
}
ChannelHandle::ChannelHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ChannelHandle)
}
ChannelHandle::ChannelHandle(const ChannelHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:xla.ChannelHandle)
}

void ChannelHandle::SharedCtor() {
  handle_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ChannelHandle::~ChannelHandle() {
  // @@protoc_insertion_point(destructor:xla.ChannelHandle)
  SharedDtor();
}

void ChannelHandle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ChannelHandle::ArenaDtor(void* object) {
  ChannelHandle* _this = reinterpret_cast< ChannelHandle* >(object);
  (void)_this;
}
void ChannelHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelHandle::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[13].descriptor;
}

const ChannelHandle& ChannelHandle::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelHandle* ChannelHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelHandle>(arena);
}

void ChannelHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ChannelHandle)
  handle_ = GOOGLE_LONGLONG(0);
}

bool ChannelHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ChannelHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 handle = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ChannelHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ChannelHandle)
  return false;
#undef DO_
}

void ChannelHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ChannelHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ChannelHandle)
}

::google::protobuf::uint8* ChannelHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ChannelHandle)
  // int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ChannelHandle)
  return target;
}

size_t ChannelHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ChannelHandle)
  size_t total_size = 0;

  // int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ChannelHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ChannelHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ChannelHandle)
    MergeFrom(*source);
  }
}

void ChannelHandle::MergeFrom(const ChannelHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ChannelHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void ChannelHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ChannelHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelHandle::CopyFrom(const ChannelHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ChannelHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelHandle::IsInitialized() const {
  return true;
}

void ChannelHandle::Swap(ChannelHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelHandle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelHandle::UnsafeArenaSwap(ChannelHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelHandle::InternalSwap(ChannelHandle* other) {
  std::swap(handle_, other->handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelHandle::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelHandle

// int64 handle = 1;
void ChannelHandle::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ChannelHandle::handle() const {
  // @@protoc_insertion_point(field_get:xla.ChannelHandle.handle)
  return handle_;
}
void ChannelHandle::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:xla.ChannelHandle.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Literal::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* Literal::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* Literal::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.Literal.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void Literal::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void Literal::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.Literal.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Literal::kShapeFieldNumber;
const int Literal::kPredsFieldNumber;
const int Literal::kU8SFieldNumber;
const int Literal::kS32SFieldNumber;
const int Literal::kS64SFieldNumber;
const int Literal::kU32SFieldNumber;
const int Literal::kU64SFieldNumber;
const int Literal::kF32SFieldNumber;
const int Literal::kF64SFieldNumber;
const int Literal::kTupleLiteralsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Literal::Literal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.Literal)
}
Literal::Literal(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  preds_(arena),
  s32s_(arena),
  s64s_(arena),
  u32s_(arena),
  u64s_(arena),
  f32s_(arena),
  f64s_(arena),
  tuple_literals_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.Literal)
}
Literal::Literal(const Literal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      preds_(from.preds_),
      s32s_(from.s32s_),
      s64s_(from.s64s_),
      u32s_(from.u32s_),
      u64s_(from.u64s_),
      f32s_(from.f32s_),
      f64s_(from.f64s_),
      tuple_literals_(from.tuple_literals_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u8s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.u8s().size() > 0) {
    u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.u8s(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.Literal)
}

void Literal::SharedCtor() {
  u8s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  _cached_size_ = 0;
}

Literal::~Literal() {
  // @@protoc_insertion_point(destructor:xla.Literal)
  SharedDtor();
}

void Literal::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  u8s_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void Literal::ArenaDtor(void* object) {
  Literal* _this = reinterpret_cast< Literal* >(object);
  (void)_this;
}
void Literal::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Literal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Literal::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[14].descriptor;
}

const Literal& Literal::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Literal* Literal::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Literal>(arena);
}

void Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Literal)
  preds_.Clear();
  s32s_.Clear();
  s64s_.Clear();
  u32s_.Clear();
  u64s_.Clear();
  f32s_.Clear();
  f64s_.Clear();
  tuple_literals_.Clear();
  u8s_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool Literal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.Literal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool preds = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_preds())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_preds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes u8s = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_u8s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 s32s = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s32s())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_s32s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 s64s = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_s64s())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_s64s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 u32s = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_u32s())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_u32s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 u64s = 7;
      case 7: {
        if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_u64s())));
        } else if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 58u, input, this->mutable_u64s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float f32s = 8;
      case 8: {
        if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_f32s())));
        } else if (tag == 69u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_f32s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double f64s = 9;
      case 9: {
        if (tag == 74u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_f64s())));
        } else if (tag == 73u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_f64s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.Literal tuple_literals = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tuple_literals()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.Literal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.Literal)
  return false;
#undef DO_
}

void Literal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.Literal)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // repeated bool preds = 2;
  if (this->preds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_preds_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->preds().data(), this->preds_size(), output);
  }

  // bytes u8s = 3;
  if (this->u8s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->u8s(), output);
  }

  // repeated int32 s32s = 4;
  if (this->s32s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_s32s_cached_byte_size_);
  }
  for (int i = 0; i < this->s32s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->s32s(i), output);
  }

  // repeated int64 s64s = 5;
  if (this->s64s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_s64s_cached_byte_size_);
  }
  for (int i = 0; i < this->s64s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->s64s(i), output);
  }

  // repeated uint32 u32s = 6;
  if (this->u32s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_u32s_cached_byte_size_);
  }
  for (int i = 0; i < this->u32s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->u32s(i), output);
  }

  // repeated uint64 u64s = 7;
  if (this->u64s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_u64s_cached_byte_size_);
  }
  for (int i = 0; i < this->u64s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->u64s(i), output);
  }

  // repeated float f32s = 8;
  if (this->f32s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f32s_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->f32s().data(), this->f32s_size(), output);
  }

  // repeated double f64s = 9;
  if (this->f64s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f64s_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->f64s().data(), this->f64s_size(), output);
  }

  // repeated .xla.Literal tuple_literals = 10;
  for (unsigned int i = 0, n = this->tuple_literals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tuple_literals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.Literal)
}

::google::protobuf::uint8* Literal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.Literal)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // repeated bool preds = 2;
  if (this->preds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _preds_cached_byte_size_, target);
  }
  for (int i = 0; i < this->preds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->preds(i), target);
  }

  // bytes u8s = 3;
  if (this->u8s().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->u8s(), target);
  }

  // repeated int32 s32s = 4;
  if (this->s32s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _s32s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->s32s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->s32s(i), target);
  }

  // repeated int64 s64s = 5;
  if (this->s64s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _s64s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->s64s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->s64s(i), target);
  }

  // repeated uint32 u32s = 6;
  if (this->u32s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _u32s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->u32s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->u32s(i), target);
  }

  // repeated uint64 u64s = 7;
  if (this->u64s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _u64s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->u64s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->u64s(i), target);
  }

  // repeated float f32s = 8;
  if (this->f32s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _f32s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->f32s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->f32s(i), target);
  }

  // repeated double f64s = 9;
  if (this->f64s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _f64s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->f64s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->f64s(i), target);
  }

  // repeated .xla.Literal tuple_literals = 10;
  for (unsigned int i = 0, n = this->tuple_literals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->tuple_literals(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.Literal)
  return target;
}

size_t Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Literal)
  size_t total_size = 0;

  // repeated bool preds = 2;
  {
    unsigned int count = this->preds_size();
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _preds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 s32s = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->s32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _s32s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 s64s = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->s64s_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _s64s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 u32s = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->u32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _u32s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 u64s = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->u64s_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _u64s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float f32s = 8;
  {
    unsigned int count = this->f32s_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _f32s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double f64s = 9;
  {
    unsigned int count = this->f64s_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _f64s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .xla.Literal tuple_literals = 10;
  {
    unsigned int count = this->tuple_literals_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuple_literals(i));
    }
  }

  // bytes u8s = 3;
  if (this->u8s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->u8s());
  }

  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Literal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  const Literal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Literal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.Literal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.Literal)
    MergeFrom(*source);
  }
}

void Literal::MergeFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preds_.MergeFrom(from.preds_);
  s32s_.MergeFrom(from.s32s_);
  s64s_.MergeFrom(from.s64s_);
  u32s_.MergeFrom(from.u32s_);
  u64s_.MergeFrom(from.u64s_);
  f32s_.MergeFrom(from.f32s_);
  f64s_.MergeFrom(from.f64s_);
  tuple_literals_.MergeFrom(from.tuple_literals_);
  if (from.u8s().size() > 0) {
    set_u8s(from.u8s());
  }
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
}

void Literal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Literal::CopyFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Literal::IsInitialized() const {
  return true;
}

void Literal::Swap(Literal* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Literal* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Literal::UnsafeArenaSwap(Literal* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Literal::InternalSwap(Literal* other) {
  preds_.UnsafeArenaSwap(&other->preds_);
  s32s_.UnsafeArenaSwap(&other->s32s_);
  s64s_.UnsafeArenaSwap(&other->s64s_);
  u32s_.UnsafeArenaSwap(&other->u32s_);
  u64s_.UnsafeArenaSwap(&other->u64s_);
  f32s_.UnsafeArenaSwap(&other->f32s_);
  f64s_.UnsafeArenaSwap(&other->f64s_);
  tuple_literals_.UnsafeArenaSwap(&other->tuple_literals_);
  u8s_.Swap(&other->u8s_);
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Literal::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Literal

// .xla.Shape shape = 1;
bool Literal::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void Literal::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& Literal::shape() const {
  // @@protoc_insertion_point(field_get:xla.Literal.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* Literal::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.Literal.shape)
  return shape_;
}
::xla::Shape* Literal::release_shape() {
  // @@protoc_insertion_point(field_release:xla.Literal.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void Literal::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.Literal.shape)
}

// repeated bool preds = 2;
int Literal::preds_size() const {
  return preds_.size();
}
void Literal::clear_preds() {
  preds_.Clear();
}
bool Literal::preds(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.preds)
  return preds_.Get(index);
}
void Literal::set_preds(int index, bool value) {
  preds_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.preds)
}
void Literal::add_preds(bool value) {
  preds_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.preds)
}
const ::google::protobuf::RepeatedField< bool >&
Literal::preds() const {
  // @@protoc_insertion_point(field_list:xla.Literal.preds)
  return preds_;
}
::google::protobuf::RepeatedField< bool >*
Literal::mutable_preds() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.preds)
  return &preds_;
}

// bytes u8s = 3;
void Literal::clear_u8s() {
  u8s_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Literal::u8s() const {
  // @@protoc_insertion_point(field_get:xla.Literal.u8s)
  return u8s_.Get();
}
void Literal::set_u8s(const ::std::string& value) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.Literal.u8s)
}
void Literal::set_u8s(const char* value) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.Literal.u8s)
}
void Literal::set_u8s(const void* value,
    size_t size) {
  
  u8s_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.Literal.u8s)
}
::std::string* Literal::mutable_u8s() {
  
  // @@protoc_insertion_point(field_mutable:xla.Literal.u8s)
  return u8s_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Literal::release_u8s() {
  // @@protoc_insertion_point(field_release:xla.Literal.u8s)
  
  return u8s_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Literal::unsafe_arena_release_u8s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.Literal.u8s)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return u8s_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Literal::set_allocated_u8s(::std::string* u8s) {
  if (u8s != NULL) {
    
  } else {
    
  }
  u8s_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), u8s,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.Literal.u8s)
}
void Literal::unsafe_arena_set_allocated_u8s(
    ::std::string* u8s) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (u8s != NULL) {
    
  } else {
    
  }
  u8s_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      u8s, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.Literal.u8s)
}

// repeated int32 s32s = 4;
int Literal::s32s_size() const {
  return s32s_.size();
}
void Literal::clear_s32s() {
  s32s_.Clear();
}
::google::protobuf::int32 Literal::s32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.s32s)
  return s32s_.Get(index);
}
void Literal::set_s32s(int index, ::google::protobuf::int32 value) {
  s32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.s32s)
}
void Literal::add_s32s(::google::protobuf::int32 value) {
  s32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.s32s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Literal::s32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.s32s)
  return s32s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Literal::mutable_s32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.s32s)
  return &s32s_;
}

// repeated int64 s64s = 5;
int Literal::s64s_size() const {
  return s64s_.size();
}
void Literal::clear_s64s() {
  s64s_.Clear();
}
::google::protobuf::int64 Literal::s64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.s64s)
  return s64s_.Get(index);
}
void Literal::set_s64s(int index, ::google::protobuf::int64 value) {
  s64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.s64s)
}
void Literal::add_s64s(::google::protobuf::int64 value) {
  s64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.s64s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Literal::s64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.s64s)
  return s64s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Literal::mutable_s64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.s64s)
  return &s64s_;
}

// repeated uint32 u32s = 6;
int Literal::u32s_size() const {
  return u32s_.size();
}
void Literal::clear_u32s() {
  u32s_.Clear();
}
::google::protobuf::uint32 Literal::u32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.u32s)
  return u32s_.Get(index);
}
void Literal::set_u32s(int index, ::google::protobuf::uint32 value) {
  u32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.u32s)
}
void Literal::add_u32s(::google::protobuf::uint32 value) {
  u32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.u32s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Literal::u32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.u32s)
  return u32s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Literal::mutable_u32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.u32s)
  return &u32s_;
}

// repeated uint64 u64s = 7;
int Literal::u64s_size() const {
  return u64s_.size();
}
void Literal::clear_u64s() {
  u64s_.Clear();
}
::google::protobuf::uint64 Literal::u64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.u64s)
  return u64s_.Get(index);
}
void Literal::set_u64s(int index, ::google::protobuf::uint64 value) {
  u64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.u64s)
}
void Literal::add_u64s(::google::protobuf::uint64 value) {
  u64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.u64s)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Literal::u64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.u64s)
  return u64s_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Literal::mutable_u64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.u64s)
  return &u64s_;
}

// repeated float f32s = 8;
int Literal::f32s_size() const {
  return f32s_.size();
}
void Literal::clear_f32s() {
  f32s_.Clear();
}
float Literal::f32s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.f32s)
  return f32s_.Get(index);
}
void Literal::set_f32s(int index, float value) {
  f32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.f32s)
}
void Literal::add_f32s(float value) {
  f32s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.f32s)
}
const ::google::protobuf::RepeatedField< float >&
Literal::f32s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.f32s)
  return f32s_;
}
::google::protobuf::RepeatedField< float >*
Literal::mutable_f32s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.f32s)
  return &f32s_;
}

// repeated double f64s = 9;
int Literal::f64s_size() const {
  return f64s_.size();
}
void Literal::clear_f64s() {
  f64s_.Clear();
}
double Literal::f64s(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.f64s)
  return f64s_.Get(index);
}
void Literal::set_f64s(int index, double value) {
  f64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.Literal.f64s)
}
void Literal::add_f64s(double value) {
  f64s_.Add(value);
  // @@protoc_insertion_point(field_add:xla.Literal.f64s)
}
const ::google::protobuf::RepeatedField< double >&
Literal::f64s() const {
  // @@protoc_insertion_point(field_list:xla.Literal.f64s)
  return f64s_;
}
::google::protobuf::RepeatedField< double >*
Literal::mutable_f64s() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.f64s)
  return &f64s_;
}

// repeated .xla.Literal tuple_literals = 10;
int Literal::tuple_literals_size() const {
  return tuple_literals_.size();
}
void Literal::clear_tuple_literals() {
  tuple_literals_.Clear();
}
const ::xla::Literal& Literal::tuple_literals(int index) const {
  // @@protoc_insertion_point(field_get:xla.Literal.tuple_literals)
  return tuple_literals_.Get(index);
}
::xla::Literal* Literal::mutable_tuple_literals(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Literal.tuple_literals)
  return tuple_literals_.Mutable(index);
}
::xla::Literal* Literal::add_tuple_literals() {
  // @@protoc_insertion_point(field_add:xla.Literal.tuple_literals)
  return tuple_literals_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::Literal >*
Literal::mutable_tuple_literals() {
  // @@protoc_insertion_point(field_mutable_list:xla.Literal.tuple_literals)
  return &tuple_literals_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::Literal >&
Literal::tuple_literals() const {
  // @@protoc_insertion_point(field_list:xla.Literal.tuple_literals)
  return tuple_literals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDimension::kSizeFieldNumber;
const int WindowDimension::kStrideFieldNumber;
const int WindowDimension::kPaddingLowFieldNumber;
const int WindowDimension::kPaddingHighFieldNumber;
const int WindowDimension::kWindowDilationFieldNumber;
const int WindowDimension::kBaseDilationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDimension::WindowDimension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.WindowDimension)
}
WindowDimension::WindowDimension(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.WindowDimension)
}
WindowDimension::WindowDimension(const WindowDimension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&base_dilation_) -
    reinterpret_cast<char*>(&size_) + sizeof(base_dilation_));
  // @@protoc_insertion_point(copy_constructor:xla.WindowDimension)
}

void WindowDimension::SharedCtor() {
  ::memset(&size_, 0, reinterpret_cast<char*>(&base_dilation_) -
    reinterpret_cast<char*>(&size_) + sizeof(base_dilation_));
  _cached_size_ = 0;
}

WindowDimension::~WindowDimension() {
  // @@protoc_insertion_point(destructor:xla.WindowDimension)
  SharedDtor();
}

void WindowDimension::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void WindowDimension::ArenaDtor(void* object) {
  WindowDimension* _this = reinterpret_cast< WindowDimension* >(object);
  (void)_this;
}
void WindowDimension::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WindowDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDimension::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[15].descriptor;
}

const WindowDimension& WindowDimension::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindowDimension* WindowDimension::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WindowDimension>(arena);
}

void WindowDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WindowDimension)
  ::memset(&size_, 0, reinterpret_cast<char*>(&base_dilation_) -
    reinterpret_cast<char*>(&size_) + sizeof(base_dilation_));
}

bool WindowDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.WindowDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 stride = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 padding_low = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &padding_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 padding_high = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &padding_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 window_dilation = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &window_dilation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 base_dilation = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_dilation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.WindowDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.WindowDimension)
  return false;
#undef DO_
}

void WindowDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.WindowDimension)
  // int64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->size(), output);
  }

  // int64 stride = 2;
  if (this->stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stride(), output);
  }

  // int64 padding_low = 3;
  if (this->padding_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->padding_low(), output);
  }

  // int64 padding_high = 4;
  if (this->padding_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->padding_high(), output);
  }

  // int64 window_dilation = 5;
  if (this->window_dilation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->window_dilation(), output);
  }

  // int64 base_dilation = 6;
  if (this->base_dilation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->base_dilation(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.WindowDimension)
}

::google::protobuf::uint8* WindowDimension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.WindowDimension)
  // int64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->size(), target);
  }

  // int64 stride = 2;
  if (this->stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stride(), target);
  }

  // int64 padding_low = 3;
  if (this->padding_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->padding_low(), target);
  }

  // int64 padding_high = 4;
  if (this->padding_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->padding_high(), target);
  }

  // int64 window_dilation = 5;
  if (this->window_dilation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->window_dilation(), target);
  }

  // int64 base_dilation = 6;
  if (this->base_dilation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->base_dilation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.WindowDimension)
  return target;
}

size_t WindowDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WindowDimension)
  size_t total_size = 0;

  // int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // int64 stride = 2;
  if (this->stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stride());
  }

  // int64 padding_low = 3;
  if (this->padding_low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->padding_low());
  }

  // int64 padding_high = 4;
  if (this->padding_high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->padding_high());
  }

  // int64 window_dilation = 5;
  if (this->window_dilation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->window_dilation());
  }

  // int64 base_dilation = 6;
  if (this->base_dilation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->base_dilation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDimension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.WindowDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowDimension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowDimension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.WindowDimension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.WindowDimension)
    MergeFrom(*source);
  }
}

void WindowDimension::MergeFrom(const WindowDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.WindowDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.stride() != 0) {
    set_stride(from.stride());
  }
  if (from.padding_low() != 0) {
    set_padding_low(from.padding_low());
  }
  if (from.padding_high() != 0) {
    set_padding_high(from.padding_high());
  }
  if (from.window_dilation() != 0) {
    set_window_dilation(from.window_dilation());
  }
  if (from.base_dilation() != 0) {
    set_base_dilation(from.base_dilation());
  }
}

void WindowDimension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.WindowDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDimension::CopyFrom(const WindowDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WindowDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDimension::IsInitialized() const {
  return true;
}

void WindowDimension::Swap(WindowDimension* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WindowDimension* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WindowDimension::UnsafeArenaSwap(WindowDimension* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WindowDimension::InternalSwap(WindowDimension* other) {
  std::swap(size_, other->size_);
  std::swap(stride_, other->stride_);
  std::swap(padding_low_, other->padding_low_);
  std::swap(padding_high_, other->padding_high_);
  std::swap(window_dilation_, other->window_dilation_);
  std::swap(base_dilation_, other->base_dilation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDimension::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowDimension

// int64 size = 1;
void WindowDimension::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::size() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.size)
  return size_;
}
void WindowDimension::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.size)
}

// int64 stride = 2;
void WindowDimension::clear_stride() {
  stride_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::stride() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.stride)
  return stride_;
}
void WindowDimension::set_stride(::google::protobuf::int64 value) {
  
  stride_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.stride)
}

// int64 padding_low = 3;
void WindowDimension::clear_padding_low() {
  padding_low_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::padding_low() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.padding_low)
  return padding_low_;
}
void WindowDimension::set_padding_low(::google::protobuf::int64 value) {
  
  padding_low_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.padding_low)
}

// int64 padding_high = 4;
void WindowDimension::clear_padding_high() {
  padding_high_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::padding_high() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.padding_high)
  return padding_high_;
}
void WindowDimension::set_padding_high(::google::protobuf::int64 value) {
  
  padding_high_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.padding_high)
}

// int64 window_dilation = 5;
void WindowDimension::clear_window_dilation() {
  window_dilation_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::window_dilation() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.window_dilation)
  return window_dilation_;
}
void WindowDimension::set_window_dilation(::google::protobuf::int64 value) {
  
  window_dilation_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.window_dilation)
}

// int64 base_dilation = 6;
void WindowDimension::clear_base_dilation() {
  base_dilation_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WindowDimension::base_dilation() const {
  // @@protoc_insertion_point(field_get:xla.WindowDimension.base_dilation)
  return base_dilation_;
}
void WindowDimension::set_base_dilation(::google::protobuf::int64 value) {
  
  base_dilation_ = value;
  // @@protoc_insertion_point(field_set:xla.WindowDimension.base_dilation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Window::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Window::Window()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.Window)
}
Window::Window(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.Window)
}
Window::Window(const Window& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.Window)
}

void Window::SharedCtor() {
  _cached_size_ = 0;
}

Window::~Window() {
  // @@protoc_insertion_point(destructor:xla.Window)
  SharedDtor();
}

void Window::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Window::ArenaDtor(void* object) {
  Window* _this = reinterpret_cast< Window* >(object);
  (void)_this;
}
void Window::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Window::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Window::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[16].descriptor;
}

const Window& Window::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Window* Window::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Window>(arena);
}

void Window::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.Window)
  dimensions_.Clear();
}

bool Window::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.Window)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.WindowDimension dimensions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.Window)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.Window)
  return false;
#undef DO_
}

void Window::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.Window)
  // repeated .xla.WindowDimension dimensions = 1;
  for (unsigned int i = 0, n = this->dimensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.Window)
}

::google::protobuf::uint8* Window::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.Window)
  // repeated .xla.WindowDimension dimensions = 1;
  for (unsigned int i = 0, n = this->dimensions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dimensions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.Window)
  return target;
}

size_t Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.Window)
  size_t total_size = 0;

  // repeated .xla.WindowDimension dimensions = 1;
  {
    unsigned int count = this->dimensions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dimensions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Window::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.Window)
  GOOGLE_DCHECK_NE(&from, this);
  const Window* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Window>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.Window)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.Window)
    MergeFrom(*source);
  }
}

void Window::MergeFrom(const Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.Window)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
}

void Window::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Window::CopyFrom(const Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Window::IsInitialized() const {
  return true;
}

void Window::Swap(Window* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Window* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Window::UnsafeArenaSwap(Window* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Window::InternalSwap(Window* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Window::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Window

// repeated .xla.WindowDimension dimensions = 1;
int Window::dimensions_size() const {
  return dimensions_.size();
}
void Window::clear_dimensions() {
  dimensions_.Clear();
}
const ::xla::WindowDimension& Window::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.Window.dimensions)
  return dimensions_.Get(index);
}
::xla::WindowDimension* Window::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:xla.Window.dimensions)
  return dimensions_.Mutable(index);
}
::xla::WindowDimension* Window::add_dimensions() {
  // @@protoc_insertion_point(field_add:xla.Window.dimensions)
  return dimensions_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >*
Window::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.Window.dimensions)
  return &dimensions_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::WindowDimension >&
Window::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.Window.dimensions)
  return dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ConstantRequest::_slow_mutable_literal() {
  literal_ = ::google::protobuf::Arena::CreateMessage< ::xla::Literal >(
      GetArenaNoVirtual());
}
::xla::Literal* ConstantRequest::_slow_release_literal() {
  if (literal_ == NULL) {
    return NULL;
  } else {
    ::xla::Literal* temp = new ::xla::Literal(*literal_);
    literal_ = NULL;
    return temp;
  }
}
::xla::Literal* ConstantRequest::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConstantRequest.literal)
  
  ::xla::Literal* temp = literal_;
  literal_ = NULL;
  return temp;
}
void ConstantRequest::_slow_set_allocated_literal(
    ::google::protobuf::Arena* message_arena, ::xla::Literal** literal) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*literal) == NULL) {
      message_arena->Own(*literal);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*literal)) {
      ::xla::Literal* new_literal = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Literal >(
            message_arena);
      new_literal->CopyFrom(**literal);
      *literal = new_literal;
    }
}
void ConstantRequest::unsafe_arena_set_allocated_literal(
    ::xla::Literal* literal) {
  if (GetArenaNoVirtual() == NULL) {
    delete literal_;
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConstantRequest.literal)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantRequest::kLiteralFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantRequest::ConstantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ConstantRequest)
}
ConstantRequest::ConstantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ConstantRequest)
}
ConstantRequest::ConstantRequest(const ConstantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    literal_ = new ::xla::Literal(*from.literal_);
  } else {
    literal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ConstantRequest)
}

void ConstantRequest::SharedCtor() {
  literal_ = NULL;
  _cached_size_ = 0;
}

ConstantRequest::~ConstantRequest() {
  // @@protoc_insertion_point(destructor:xla.ConstantRequest)
  SharedDtor();
}

void ConstantRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete literal_;
  }
}

void ConstantRequest::ArenaDtor(void* object) {
  ConstantRequest* _this = reinterpret_cast< ConstantRequest* >(object);
  (void)_this;
}
void ConstantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConstantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[17].descriptor;
}

const ConstantRequest& ConstantRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConstantRequest* ConstantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConstantRequest>(arena);
}

void ConstantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConstantRequest)
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) {
    delete literal_;
  }
  literal_ = NULL;
}

bool ConstantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ConstantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Literal literal = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ConstantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ConstantRequest)
  return false;
#undef DO_
}

void ConstantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ConstantRequest)
  // .xla.Literal literal = 2;
  if (this->has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->literal_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ConstantRequest)
}

::google::protobuf::uint8* ConstantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConstantRequest)
  // .xla.Literal literal = 2;
  if (this->has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->literal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ConstantRequest)
  return target;
}

size_t ConstantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConstantRequest)
  size_t total_size = 0;

  // .xla.Literal literal = 2;
  if (this->has_literal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->literal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ConstantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ConstantRequest)
    MergeFrom(*source);
  }
}

void ConstantRequest::MergeFrom(const ConstantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    mutable_literal()->::xla::Literal::MergeFrom(from.literal());
  }
}

void ConstantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantRequest::CopyFrom(const ConstantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantRequest::IsInitialized() const {
  return true;
}

void ConstantRequest::Swap(ConstantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConstantRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConstantRequest::UnsafeArenaSwap(ConstantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConstantRequest::InternalSwap(ConstantRequest* other) {
  std::swap(literal_, other->literal_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstantRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantRequest

// .xla.Literal literal = 2;
bool ConstantRequest::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
void ConstantRequest::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
const ::xla::Literal& ConstantRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.ConstantRequest.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* ConstantRequest::mutable_literal() {
  
  if (literal_ == NULL) {
    _slow_mutable_literal();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConstantRequest.literal)
  return literal_;
}
::xla::Literal* ConstantRequest::release_literal() {
  // @@protoc_insertion_point(field_release:xla.ConstantRequest.literal)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_literal();
  } else {
    ::xla::Literal* temp = literal_;
    literal_ = NULL;
    return temp;
  }
}
 void ConstantRequest::set_allocated_literal(::xla::Literal* literal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete literal_;
  }
  if (literal != NULL) {
    _slow_set_allocated_literal(message_arena, &literal);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConstantRequest.literal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetTupleElementRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* GetTupleElementRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* GetTupleElementRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.GetTupleElementRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void GetTupleElementRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void GetTupleElementRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetTupleElementRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTupleElementRequest::kOperandFieldNumber;
const int GetTupleElementRequest::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTupleElementRequest::GetTupleElementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetTupleElementRequest)
}
GetTupleElementRequest::GetTupleElementRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.GetTupleElementRequest)
}
GetTupleElementRequest::GetTupleElementRequest(const GetTupleElementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:xla.GetTupleElementRequest)
}

void GetTupleElementRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&operand_) + sizeof(index_));
  _cached_size_ = 0;
}

GetTupleElementRequest::~GetTupleElementRequest() {
  // @@protoc_insertion_point(destructor:xla.GetTupleElementRequest)
  SharedDtor();
}

void GetTupleElementRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void GetTupleElementRequest::ArenaDtor(void* object) {
  GetTupleElementRequest* _this = reinterpret_cast< GetTupleElementRequest* >(object);
  (void)_this;
}
void GetTupleElementRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetTupleElementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTupleElementRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[18].descriptor;
}

const GetTupleElementRequest& GetTupleElementRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTupleElementRequest* GetTupleElementRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetTupleElementRequest>(arena);
}

void GetTupleElementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetTupleElementRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
}

bool GetTupleElementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetTupleElementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetTupleElementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetTupleElementRequest)
  return false;
#undef DO_
}

void GetTupleElementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetTupleElementRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // int64 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetTupleElementRequest)
}

::google::protobuf::uint8* GetTupleElementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetTupleElementRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // int64 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetTupleElementRequest)
  return target;
}

size_t GetTupleElementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetTupleElementRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // int64 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTupleElementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetTupleElementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTupleElementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTupleElementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetTupleElementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetTupleElementRequest)
    MergeFrom(*source);
  }
}

void GetTupleElementRequest::MergeFrom(const GetTupleElementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetTupleElementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void GetTupleElementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetTupleElementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTupleElementRequest::CopyFrom(const GetTupleElementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetTupleElementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTupleElementRequest::IsInitialized() const {
  return true;
}

void GetTupleElementRequest::Swap(GetTupleElementRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetTupleElementRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetTupleElementRequest::UnsafeArenaSwap(GetTupleElementRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetTupleElementRequest::InternalSwap(GetTupleElementRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTupleElementRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTupleElementRequest

// .xla.ComputationDataHandle operand = 2;
bool GetTupleElementRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void GetTupleElementRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& GetTupleElementRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.GetTupleElementRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* GetTupleElementRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetTupleElementRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* GetTupleElementRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.GetTupleElementRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void GetTupleElementRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetTupleElementRequest.operand)
}

// int64 index = 3;
void GetTupleElementRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetTupleElementRequest::index() const {
  // @@protoc_insertion_point(field_get:xla.GetTupleElementRequest.index)
  return index_;
}
void GetTupleElementRequest::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:xla.GetTupleElementRequest.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SliceRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* SliceRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* SliceRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SliceRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void SliceRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void SliceRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SliceRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceRequest::kOperandFieldNumber;
const int SliceRequest::kStartIndicesFieldNumber;
const int SliceRequest::kLimitIndicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceRequest::SliceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SliceRequest)
}
SliceRequest::SliceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  start_indices_(arena),
  limit_indices_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.SliceRequest)
}
SliceRequest::SliceRequest(const SliceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      start_indices_(from.start_indices_),
      limit_indices_(from.limit_indices_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SliceRequest)
}

void SliceRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

SliceRequest::~SliceRequest() {
  // @@protoc_insertion_point(destructor:xla.SliceRequest)
  SharedDtor();
}

void SliceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void SliceRequest::ArenaDtor(void* object) {
  SliceRequest* _this = reinterpret_cast< SliceRequest* >(object);
  (void)_this;
}
void SliceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SliceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[19].descriptor;
}

const SliceRequest& SliceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SliceRequest* SliceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SliceRequest>(arena);
}

void SliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SliceRequest)
  start_indices_.Clear();
  limit_indices_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool SliceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SliceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 start_indices = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_start_indices())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_start_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 limit_indices = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_limit_indices())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_limit_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SliceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SliceRequest)
  return false;
#undef DO_
}

void SliceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // repeated int64 start_indices = 3;
  if (this->start_indices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_indices_cached_byte_size_);
  }
  for (int i = 0; i < this->start_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->start_indices(i), output);
  }

  // repeated int64 limit_indices = 4;
  if (this->limit_indices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_limit_indices_cached_byte_size_);
  }
  for (int i = 0; i < this->limit_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->limit_indices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SliceRequest)
}

::google::protobuf::uint8* SliceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // repeated int64 start_indices = 3;
  if (this->start_indices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _start_indices_cached_byte_size_, target);
  }
  for (int i = 0; i < this->start_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->start_indices(i), target);
  }

  // repeated int64 limit_indices = 4;
  if (this->limit_indices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _limit_indices_cached_byte_size_, target);
  }
  for (int i = 0; i < this->limit_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->limit_indices(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SliceRequest)
  return target;
}

size_t SliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SliceRequest)
  size_t total_size = 0;

  // repeated int64 start_indices = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->start_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_indices_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 limit_indices = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->limit_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _limit_indices_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SliceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SliceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SliceRequest)
    MergeFrom(*source);
  }
}

void SliceRequest::MergeFrom(const SliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_indices_.MergeFrom(from.start_indices_);
  limit_indices_.MergeFrom(from.limit_indices_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void SliceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceRequest::CopyFrom(const SliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceRequest::IsInitialized() const {
  return true;
}

void SliceRequest::Swap(SliceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SliceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SliceRequest::UnsafeArenaSwap(SliceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SliceRequest::InternalSwap(SliceRequest* other) {
  start_indices_.UnsafeArenaSwap(&other->start_indices_);
  limit_indices_.UnsafeArenaSwap(&other->limit_indices_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SliceRequest

// .xla.ComputationDataHandle operand = 2;
bool SliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void SliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& SliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SliceRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* SliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void SliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SliceRequest.operand)
}

// repeated int64 start_indices = 3;
int SliceRequest::start_indices_size() const {
  return start_indices_.size();
}
void SliceRequest::clear_start_indices() {
  start_indices_.Clear();
}
::google::protobuf::int64 SliceRequest::start_indices(int index) const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.start_indices)
  return start_indices_.Get(index);
}
void SliceRequest::set_start_indices(int index, ::google::protobuf::int64 value) {
  start_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.SliceRequest.start_indices)
}
void SliceRequest::add_start_indices(::google::protobuf::int64 value) {
  start_indices_.Add(value);
  // @@protoc_insertion_point(field_add:xla.SliceRequest.start_indices)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_list:xla.SliceRequest.start_indices)
  return start_indices_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SliceRequest::mutable_start_indices() {
  // @@protoc_insertion_point(field_mutable_list:xla.SliceRequest.start_indices)
  return &start_indices_;
}

// repeated int64 limit_indices = 4;
int SliceRequest::limit_indices_size() const {
  return limit_indices_.size();
}
void SliceRequest::clear_limit_indices() {
  limit_indices_.Clear();
}
::google::protobuf::int64 SliceRequest::limit_indices(int index) const {
  // @@protoc_insertion_point(field_get:xla.SliceRequest.limit_indices)
  return limit_indices_.Get(index);
}
void SliceRequest::set_limit_indices(int index, ::google::protobuf::int64 value) {
  limit_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.SliceRequest.limit_indices)
}
void SliceRequest::add_limit_indices(::google::protobuf::int64 value) {
  limit_indices_.Add(value);
  // @@protoc_insertion_point(field_add:xla.SliceRequest.limit_indices)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SliceRequest::limit_indices() const {
  // @@protoc_insertion_point(field_list:xla.SliceRequest.limit_indices)
  return limit_indices_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SliceRequest::mutable_limit_indices() {
  // @@protoc_insertion_point(field_mutable_list:xla.SliceRequest.limit_indices)
  return &limit_indices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DynamicSliceRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* DynamicSliceRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* DynamicSliceRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DynamicSliceRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void DynamicSliceRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void DynamicSliceRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DynamicSliceRequest.operand)
}
void DynamicSliceRequest::_slow_mutable_start_indices() {
  start_indices_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* DynamicSliceRequest::_slow_release_start_indices() {
  if (start_indices_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*start_indices_);
    start_indices_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* DynamicSliceRequest::unsafe_arena_release_start_indices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DynamicSliceRequest.start_indices)
  
  ::xla::ComputationDataHandle* temp = start_indices_;
  start_indices_ = NULL;
  return temp;
}
void DynamicSliceRequest::_slow_set_allocated_start_indices(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** start_indices) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*start_indices) == NULL) {
      message_arena->Own(*start_indices);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*start_indices)) {
      ::xla::ComputationDataHandle* new_start_indices = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_start_indices->CopyFrom(**start_indices);
      *start_indices = new_start_indices;
    }
}
void DynamicSliceRequest::unsafe_arena_set_allocated_start_indices(
    ::xla::ComputationDataHandle* start_indices) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_indices_;
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DynamicSliceRequest.start_indices)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicSliceRequest::kOperandFieldNumber;
const int DynamicSliceRequest::kStartIndicesFieldNumber;
const int DynamicSliceRequest::kSliceSizesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicSliceRequest::DynamicSliceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.DynamicSliceRequest)
}
DynamicSliceRequest::DynamicSliceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  slice_sizes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.DynamicSliceRequest)
}
DynamicSliceRequest::DynamicSliceRequest(const DynamicSliceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slice_sizes_(from.slice_sizes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_start_indices()) {
    start_indices_ = new ::xla::ComputationDataHandle(*from.start_indices_);
  } else {
    start_indices_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.DynamicSliceRequest)
}

void DynamicSliceRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&start_indices_) -
    reinterpret_cast<char*>(&operand_) + sizeof(start_indices_));
  _cached_size_ = 0;
}

DynamicSliceRequest::~DynamicSliceRequest() {
  // @@protoc_insertion_point(destructor:xla.DynamicSliceRequest)
  SharedDtor();
}

void DynamicSliceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete start_indices_;
  }
}

void DynamicSliceRequest::ArenaDtor(void* object) {
  DynamicSliceRequest* _this = reinterpret_cast< DynamicSliceRequest* >(object);
  (void)_this;
}
void DynamicSliceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DynamicSliceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicSliceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[20].descriptor;
}

const DynamicSliceRequest& DynamicSliceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynamicSliceRequest* DynamicSliceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DynamicSliceRequest>(arena);
}

void DynamicSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DynamicSliceRequest)
  slice_sizes_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) {
    delete start_indices_;
  }
  start_indices_ = NULL;
}

bool DynamicSliceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.DynamicSliceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle start_indices = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 slice_sizes = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slice_sizes())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_slice_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.DynamicSliceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.DynamicSliceRequest)
  return false;
#undef DO_
}

void DynamicSliceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.DynamicSliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle start_indices = 3;
  if (this->has_start_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_indices_, output);
  }

  // repeated int64 slice_sizes = 4;
  if (this->slice_sizes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_slice_sizes_cached_byte_size_);
  }
  for (int i = 0; i < this->slice_sizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->slice_sizes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.DynamicSliceRequest)
}

::google::protobuf::uint8* DynamicSliceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.DynamicSliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle start_indices = 3;
  if (this->has_start_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_indices_, false, target);
  }

  // repeated int64 slice_sizes = 4;
  if (this->slice_sizes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _slice_sizes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->slice_sizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->slice_sizes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.DynamicSliceRequest)
  return target;
}

size_t DynamicSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DynamicSliceRequest)
  size_t total_size = 0;

  // repeated int64 slice_sizes = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->slice_sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _slice_sizes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle start_indices = 3;
  if (this->has_start_indices()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_indices_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicSliceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.DynamicSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicSliceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicSliceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.DynamicSliceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.DynamicSliceRequest)
    MergeFrom(*source);
  }
}

void DynamicSliceRequest::MergeFrom(const DynamicSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.DynamicSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slice_sizes_.MergeFrom(from.slice_sizes_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_start_indices()) {
    mutable_start_indices()->::xla::ComputationDataHandle::MergeFrom(from.start_indices());
  }
}

void DynamicSliceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.DynamicSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicSliceRequest::CopyFrom(const DynamicSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DynamicSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicSliceRequest::IsInitialized() const {
  return true;
}

void DynamicSliceRequest::Swap(DynamicSliceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DynamicSliceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DynamicSliceRequest::UnsafeArenaSwap(DynamicSliceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DynamicSliceRequest::InternalSwap(DynamicSliceRequest* other) {
  slice_sizes_.UnsafeArenaSwap(&other->slice_sizes_);
  std::swap(operand_, other->operand_);
  std::swap(start_indices_, other->start_indices_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicSliceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicSliceRequest

// .xla.ComputationDataHandle operand = 2;
bool DynamicSliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void DynamicSliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& DynamicSliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* DynamicSliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicSliceRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* DynamicSliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.DynamicSliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void DynamicSliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicSliceRequest.operand)
}

// .xla.ComputationDataHandle start_indices = 3;
bool DynamicSliceRequest::has_start_indices() const {
  return this != internal_default_instance() && start_indices_ != NULL;
}
void DynamicSliceRequest::clear_start_indices() {
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) delete start_indices_;
  start_indices_ = NULL;
}
const ::xla::ComputationDataHandle& DynamicSliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.start_indices)
  return start_indices_ != NULL ? *start_indices_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* DynamicSliceRequest::mutable_start_indices() {
  
  if (start_indices_ == NULL) {
    _slow_mutable_start_indices();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicSliceRequest.start_indices)
  return start_indices_;
}
::xla::ComputationDataHandle* DynamicSliceRequest::release_start_indices() {
  // @@protoc_insertion_point(field_release:xla.DynamicSliceRequest.start_indices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_indices();
  } else {
    ::xla::ComputationDataHandle* temp = start_indices_;
    start_indices_ = NULL;
    return temp;
  }
}
 void DynamicSliceRequest::set_allocated_start_indices(::xla::ComputationDataHandle* start_indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_indices_;
  }
  if (start_indices != NULL) {
    _slow_set_allocated_start_indices(message_arena, &start_indices);
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicSliceRequest.start_indices)
}

// repeated int64 slice_sizes = 4;
int DynamicSliceRequest::slice_sizes_size() const {
  return slice_sizes_.size();
}
void DynamicSliceRequest::clear_slice_sizes() {
  slice_sizes_.Clear();
}
::google::protobuf::int64 DynamicSliceRequest::slice_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.DynamicSliceRequest.slice_sizes)
  return slice_sizes_.Get(index);
}
void DynamicSliceRequest::set_slice_sizes(int index, ::google::protobuf::int64 value) {
  slice_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.DynamicSliceRequest.slice_sizes)
}
void DynamicSliceRequest::add_slice_sizes(::google::protobuf::int64 value) {
  slice_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.DynamicSliceRequest.slice_sizes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DynamicSliceRequest::slice_sizes() const {
  // @@protoc_insertion_point(field_list:xla.DynamicSliceRequest.slice_sizes)
  return slice_sizes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DynamicSliceRequest::mutable_slice_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.DynamicSliceRequest.slice_sizes)
  return &slice_sizes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DynamicUpdateSliceRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DynamicUpdateSliceRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void DynamicUpdateSliceRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void DynamicUpdateSliceRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DynamicUpdateSliceRequest.operand)
}
void DynamicUpdateSliceRequest::_slow_mutable_update() {
  update_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::_slow_release_update() {
  if (update_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*update_);
    update_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DynamicUpdateSliceRequest.update)
  
  ::xla::ComputationDataHandle* temp = update_;
  update_ = NULL;
  return temp;
}
void DynamicUpdateSliceRequest::_slow_set_allocated_update(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** update) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*update) == NULL) {
      message_arena->Own(*update);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*update)) {
      ::xla::ComputationDataHandle* new_update = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_update->CopyFrom(**update);
      *update = new_update;
    }
}
void DynamicUpdateSliceRequest::unsafe_arena_set_allocated_update(
    ::xla::ComputationDataHandle* update) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_;
  }
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DynamicUpdateSliceRequest.update)
}
void DynamicUpdateSliceRequest::_slow_mutable_start_indices() {
  start_indices_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::_slow_release_start_indices() {
  if (start_indices_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*start_indices_);
    start_indices_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::unsafe_arena_release_start_indices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DynamicUpdateSliceRequest.start_indices)
  
  ::xla::ComputationDataHandle* temp = start_indices_;
  start_indices_ = NULL;
  return temp;
}
void DynamicUpdateSliceRequest::_slow_set_allocated_start_indices(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** start_indices) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*start_indices) == NULL) {
      message_arena->Own(*start_indices);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*start_indices)) {
      ::xla::ComputationDataHandle* new_start_indices = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_start_indices->CopyFrom(**start_indices);
      *start_indices = new_start_indices;
    }
}
void DynamicUpdateSliceRequest::unsafe_arena_set_allocated_start_indices(
    ::xla::ComputationDataHandle* start_indices) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_indices_;
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DynamicUpdateSliceRequest.start_indices)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicUpdateSliceRequest::kOperandFieldNumber;
const int DynamicUpdateSliceRequest::kUpdateFieldNumber;
const int DynamicUpdateSliceRequest::kStartIndicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicUpdateSliceRequest::DynamicUpdateSliceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.DynamicUpdateSliceRequest)
}
DynamicUpdateSliceRequest::DynamicUpdateSliceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.DynamicUpdateSliceRequest)
}
DynamicUpdateSliceRequest::DynamicUpdateSliceRequest(const DynamicUpdateSliceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_update()) {
    update_ = new ::xla::ComputationDataHandle(*from.update_);
  } else {
    update_ = NULL;
  }
  if (from.has_start_indices()) {
    start_indices_ = new ::xla::ComputationDataHandle(*from.start_indices_);
  } else {
    start_indices_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.DynamicUpdateSliceRequest)
}

void DynamicUpdateSliceRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&start_indices_) -
    reinterpret_cast<char*>(&operand_) + sizeof(start_indices_));
  _cached_size_ = 0;
}

DynamicUpdateSliceRequest::~DynamicUpdateSliceRequest() {
  // @@protoc_insertion_point(destructor:xla.DynamicUpdateSliceRequest)
  SharedDtor();
}

void DynamicUpdateSliceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete update_;
  }
  if (this != internal_default_instance()) {
    delete start_indices_;
  }
}

void DynamicUpdateSliceRequest::ArenaDtor(void* object) {
  DynamicUpdateSliceRequest* _this = reinterpret_cast< DynamicUpdateSliceRequest* >(object);
  (void)_this;
}
void DynamicUpdateSliceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DynamicUpdateSliceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicUpdateSliceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[21].descriptor;
}

const DynamicUpdateSliceRequest& DynamicUpdateSliceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynamicUpdateSliceRequest* DynamicUpdateSliceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DynamicUpdateSliceRequest>(arena);
}

void DynamicUpdateSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DynamicUpdateSliceRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) {
    delete start_indices_;
  }
  start_indices_ = NULL;
}

bool DynamicUpdateSliceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.DynamicUpdateSliceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle update = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle start_indices = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.DynamicUpdateSliceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.DynamicUpdateSliceRequest)
  return false;
#undef DO_
}

void DynamicUpdateSliceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.DynamicUpdateSliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle update = 3;
  if (this->has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_, output);
  }

  // .xla.ComputationDataHandle start_indices = 4;
  if (this->has_start_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_indices_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.DynamicUpdateSliceRequest)
}

::google::protobuf::uint8* DynamicUpdateSliceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.DynamicUpdateSliceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle update = 3;
  if (this->has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_, false, target);
  }

  // .xla.ComputationDataHandle start_indices = 4;
  if (this->has_start_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_indices_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.DynamicUpdateSliceRequest)
  return target;
}

size_t DynamicUpdateSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DynamicUpdateSliceRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle update = 3;
  if (this->has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_);
  }

  // .xla.ComputationDataHandle start_indices = 4;
  if (this->has_start_indices()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_indices_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicUpdateSliceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.DynamicUpdateSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicUpdateSliceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicUpdateSliceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.DynamicUpdateSliceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.DynamicUpdateSliceRequest)
    MergeFrom(*source);
  }
}

void DynamicUpdateSliceRequest::MergeFrom(const DynamicUpdateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.DynamicUpdateSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_update()) {
    mutable_update()->::xla::ComputationDataHandle::MergeFrom(from.update());
  }
  if (from.has_start_indices()) {
    mutable_start_indices()->::xla::ComputationDataHandle::MergeFrom(from.start_indices());
  }
}

void DynamicUpdateSliceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.DynamicUpdateSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicUpdateSliceRequest::CopyFrom(const DynamicUpdateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DynamicUpdateSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicUpdateSliceRequest::IsInitialized() const {
  return true;
}

void DynamicUpdateSliceRequest::Swap(DynamicUpdateSliceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DynamicUpdateSliceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DynamicUpdateSliceRequest::UnsafeArenaSwap(DynamicUpdateSliceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DynamicUpdateSliceRequest::InternalSwap(DynamicUpdateSliceRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(update_, other->update_);
  std::swap(start_indices_, other->start_indices_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicUpdateSliceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicUpdateSliceRequest

// .xla.ComputationDataHandle operand = 2;
bool DynamicUpdateSliceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void DynamicUpdateSliceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void DynamicUpdateSliceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.operand)
}

// .xla.ComputationDataHandle update = 3;
bool DynamicUpdateSliceRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
void DynamicUpdateSliceRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) delete update_;
  update_ = NULL;
}
const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::update() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.update)
  return update_ != NULL ? *update_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_update() {
  
  if (update_ == NULL) {
    _slow_mutable_update();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.update)
  return update_;
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_update() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.update)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update();
  } else {
    ::xla::ComputationDataHandle* temp = update_;
    update_ = NULL;
    return temp;
  }
}
 void DynamicUpdateSliceRequest::set_allocated_update(::xla::ComputationDataHandle* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update != NULL) {
    _slow_set_allocated_update(message_arena, &update);
  }
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.update)
}

// .xla.ComputationDataHandle start_indices = 4;
bool DynamicUpdateSliceRequest::has_start_indices() const {
  return this != internal_default_instance() && start_indices_ != NULL;
}
void DynamicUpdateSliceRequest::clear_start_indices() {
  if (GetArenaNoVirtual() == NULL && start_indices_ != NULL) delete start_indices_;
  start_indices_ = NULL;
}
const ::xla::ComputationDataHandle& DynamicUpdateSliceRequest::start_indices() const {
  // @@protoc_insertion_point(field_get:xla.DynamicUpdateSliceRequest.start_indices)
  return start_indices_ != NULL ? *start_indices_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::mutable_start_indices() {
  
  if (start_indices_ == NULL) {
    _slow_mutable_start_indices();
  }
  // @@protoc_insertion_point(field_mutable:xla.DynamicUpdateSliceRequest.start_indices)
  return start_indices_;
}
::xla::ComputationDataHandle* DynamicUpdateSliceRequest::release_start_indices() {
  // @@protoc_insertion_point(field_release:xla.DynamicUpdateSliceRequest.start_indices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_indices();
  } else {
    ::xla::ComputationDataHandle* temp = start_indices_;
    start_indices_ = NULL;
    return temp;
  }
}
 void DynamicUpdateSliceRequest::set_allocated_start_indices(::xla::ComputationDataHandle* start_indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_indices_;
  }
  if (start_indices != NULL) {
    _slow_set_allocated_start_indices(message_arena, &start_indices);
  }
  start_indices_ = start_indices;
  if (start_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DynamicUpdateSliceRequest.start_indices)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionDimensionNumbers::kBatchDimensionFieldNumber;
const int ConvolutionDimensionNumbers::kFeatureDimensionFieldNumber;
const int ConvolutionDimensionNumbers::kSpatialDimensionsFieldNumber;
const int ConvolutionDimensionNumbers::kKernelInputFeatureDimensionFieldNumber;
const int ConvolutionDimensionNumbers::kKernelOutputFeatureDimensionFieldNumber;
const int ConvolutionDimensionNumbers::kKernelSpatialDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionDimensionNumbers::ConvolutionDimensionNumbers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ConvolutionDimensionNumbers)
}
ConvolutionDimensionNumbers::ConvolutionDimensionNumbers(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  spatial_dimensions_(arena),
  kernel_spatial_dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ConvolutionDimensionNumbers)
}
ConvolutionDimensionNumbers::ConvolutionDimensionNumbers(const ConvolutionDimensionNumbers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spatial_dimensions_(from.spatial_dimensions_),
      kernel_spatial_dimensions_(from.kernel_spatial_dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batch_dimension_, &from.batch_dimension_,
    reinterpret_cast<char*>(&kernel_output_feature_dimension_) -
    reinterpret_cast<char*>(&batch_dimension_) + sizeof(kernel_output_feature_dimension_));
  // @@protoc_insertion_point(copy_constructor:xla.ConvolutionDimensionNumbers)
}

void ConvolutionDimensionNumbers::SharedCtor() {
  ::memset(&batch_dimension_, 0, reinterpret_cast<char*>(&kernel_output_feature_dimension_) -
    reinterpret_cast<char*>(&batch_dimension_) + sizeof(kernel_output_feature_dimension_));
  _cached_size_ = 0;
}

ConvolutionDimensionNumbers::~ConvolutionDimensionNumbers() {
  // @@protoc_insertion_point(destructor:xla.ConvolutionDimensionNumbers)
  SharedDtor();
}

void ConvolutionDimensionNumbers::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ConvolutionDimensionNumbers::ArenaDtor(void* object) {
  ConvolutionDimensionNumbers* _this = reinterpret_cast< ConvolutionDimensionNumbers* >(object);
  (void)_this;
}
void ConvolutionDimensionNumbers::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConvolutionDimensionNumbers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionDimensionNumbers::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[22].descriptor;
}

const ConvolutionDimensionNumbers& ConvolutionDimensionNumbers::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionDimensionNumbers* ConvolutionDimensionNumbers::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConvolutionDimensionNumbers>(arena);
}

void ConvolutionDimensionNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConvolutionDimensionNumbers)
  spatial_dimensions_.Clear();
  kernel_spatial_dimensions_.Clear();
  ::memset(&batch_dimension_, 0, reinterpret_cast<char*>(&kernel_output_feature_dimension_) -
    reinterpret_cast<char*>(&batch_dimension_) + sizeof(kernel_output_feature_dimension_));
}

bool ConvolutionDimensionNumbers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ConvolutionDimensionNumbers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 batch_dimension = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 feature_dimension = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feature_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 kernel_input_feature_dimension = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kernel_input_feature_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 kernel_output_feature_dimension = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kernel_output_feature_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 spatial_dimensions = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_spatial_dimensions())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_spatial_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 kernel_spatial_dimensions = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_kernel_spatial_dimensions())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 50u, input, this->mutable_kernel_spatial_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ConvolutionDimensionNumbers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ConvolutionDimensionNumbers)
  return false;
#undef DO_
}

void ConvolutionDimensionNumbers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ConvolutionDimensionNumbers)
  // int64 batch_dimension = 1;
  if (this->batch_dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->batch_dimension(), output);
  }

  // int64 feature_dimension = 2;
  if (this->feature_dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->feature_dimension(), output);
  }

  // int64 kernel_input_feature_dimension = 3;
  if (this->kernel_input_feature_dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->kernel_input_feature_dimension(), output);
  }

  // int64 kernel_output_feature_dimension = 4;
  if (this->kernel_output_feature_dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->kernel_output_feature_dimension(), output);
  }

  // repeated int64 spatial_dimensions = 5;
  if (this->spatial_dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spatial_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->spatial_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->spatial_dimensions(i), output);
  }

  // repeated int64 kernel_spatial_dimensions = 6;
  if (this->kernel_spatial_dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kernel_spatial_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->kernel_spatial_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->kernel_spatial_dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ConvolutionDimensionNumbers)
}

::google::protobuf::uint8* ConvolutionDimensionNumbers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConvolutionDimensionNumbers)
  // int64 batch_dimension = 1;
  if (this->batch_dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->batch_dimension(), target);
  }

  // int64 feature_dimension = 2;
  if (this->feature_dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->feature_dimension(), target);
  }

  // int64 kernel_input_feature_dimension = 3;
  if (this->kernel_input_feature_dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->kernel_input_feature_dimension(), target);
  }

  // int64 kernel_output_feature_dimension = 4;
  if (this->kernel_output_feature_dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->kernel_output_feature_dimension(), target);
  }

  // repeated int64 spatial_dimensions = 5;
  if (this->spatial_dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spatial_dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->spatial_dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->spatial_dimensions(i), target);
  }

  // repeated int64 kernel_spatial_dimensions = 6;
  if (this->kernel_spatial_dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _kernel_spatial_dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->kernel_spatial_dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->kernel_spatial_dimensions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ConvolutionDimensionNumbers)
  return target;
}

size_t ConvolutionDimensionNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConvolutionDimensionNumbers)
  size_t total_size = 0;

  // repeated int64 spatial_dimensions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->spatial_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spatial_dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 kernel_spatial_dimensions = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->kernel_spatial_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _kernel_spatial_dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 batch_dimension = 1;
  if (this->batch_dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_dimension());
  }

  // int64 feature_dimension = 2;
  if (this->feature_dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->feature_dimension());
  }

  // int64 kernel_input_feature_dimension = 3;
  if (this->kernel_input_feature_dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->kernel_input_feature_dimension());
  }

  // int64 kernel_output_feature_dimension = 4;
  if (this->kernel_output_feature_dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->kernel_output_feature_dimension());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionDimensionNumbers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ConvolutionDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionDimensionNumbers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionDimensionNumbers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ConvolutionDimensionNumbers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ConvolutionDimensionNumbers)
    MergeFrom(*source);
  }
}

void ConvolutionDimensionNumbers::MergeFrom(const ConvolutionDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ConvolutionDimensionNumbers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spatial_dimensions_.MergeFrom(from.spatial_dimensions_);
  kernel_spatial_dimensions_.MergeFrom(from.kernel_spatial_dimensions_);
  if (from.batch_dimension() != 0) {
    set_batch_dimension(from.batch_dimension());
  }
  if (from.feature_dimension() != 0) {
    set_feature_dimension(from.feature_dimension());
  }
  if (from.kernel_input_feature_dimension() != 0) {
    set_kernel_input_feature_dimension(from.kernel_input_feature_dimension());
  }
  if (from.kernel_output_feature_dimension() != 0) {
    set_kernel_output_feature_dimension(from.kernel_output_feature_dimension());
  }
}

void ConvolutionDimensionNumbers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ConvolutionDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionDimensionNumbers::CopyFrom(const ConvolutionDimensionNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConvolutionDimensionNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionDimensionNumbers::IsInitialized() const {
  return true;
}

void ConvolutionDimensionNumbers::Swap(ConvolutionDimensionNumbers* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConvolutionDimensionNumbers* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConvolutionDimensionNumbers::UnsafeArenaSwap(ConvolutionDimensionNumbers* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConvolutionDimensionNumbers::InternalSwap(ConvolutionDimensionNumbers* other) {
  spatial_dimensions_.UnsafeArenaSwap(&other->spatial_dimensions_);
  kernel_spatial_dimensions_.UnsafeArenaSwap(&other->kernel_spatial_dimensions_);
  std::swap(batch_dimension_, other->batch_dimension_);
  std::swap(feature_dimension_, other->feature_dimension_);
  std::swap(kernel_input_feature_dimension_, other->kernel_input_feature_dimension_);
  std::swap(kernel_output_feature_dimension_, other->kernel_output_feature_dimension_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionDimensionNumbers::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionDimensionNumbers

// int64 batch_dimension = 1;
void ConvolutionDimensionNumbers::clear_batch_dimension() {
  batch_dimension_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConvolutionDimensionNumbers::batch_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.batch_dimension)
  return batch_dimension_;
}
void ConvolutionDimensionNumbers::set_batch_dimension(::google::protobuf::int64 value) {
  
  batch_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.batch_dimension)
}

// int64 feature_dimension = 2;
void ConvolutionDimensionNumbers::clear_feature_dimension() {
  feature_dimension_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConvolutionDimensionNumbers::feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.feature_dimension)
  return feature_dimension_;
}
void ConvolutionDimensionNumbers::set_feature_dimension(::google::protobuf::int64 value) {
  
  feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.feature_dimension)
}

// repeated int64 spatial_dimensions = 5;
int ConvolutionDimensionNumbers::spatial_dimensions_size() const {
  return spatial_dimensions_.size();
}
void ConvolutionDimensionNumbers::clear_spatial_dimensions() {
  spatial_dimensions_.Clear();
}
::google::protobuf::int64 ConvolutionDimensionNumbers::spatial_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return spatial_dimensions_.Get(index);
}
void ConvolutionDimensionNumbers::set_spatial_dimensions(int index, ::google::protobuf::int64 value) {
  spatial_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.spatial_dimensions)
}
void ConvolutionDimensionNumbers::add_spatial_dimensions(::google::protobuf::int64 value) {
  spatial_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ConvolutionDimensionNumbers.spatial_dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDimensionNumbers::spatial_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return spatial_dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDimensionNumbers::mutable_spatial_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConvolutionDimensionNumbers.spatial_dimensions)
  return &spatial_dimensions_;
}

// int64 kernel_input_feature_dimension = 3;
void ConvolutionDimensionNumbers::clear_kernel_input_feature_dimension() {
  kernel_input_feature_dimension_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_input_feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_input_feature_dimension)
  return kernel_input_feature_dimension_;
}
void ConvolutionDimensionNumbers::set_kernel_input_feature_dimension(::google::protobuf::int64 value) {
  
  kernel_input_feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_input_feature_dimension)
}

// int64 kernel_output_feature_dimension = 4;
void ConvolutionDimensionNumbers::clear_kernel_output_feature_dimension() {
  kernel_output_feature_dimension_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_output_feature_dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_output_feature_dimension)
  return kernel_output_feature_dimension_;
}
void ConvolutionDimensionNumbers::set_kernel_output_feature_dimension(::google::protobuf::int64 value) {
  
  kernel_output_feature_dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_output_feature_dimension)
}

// repeated int64 kernel_spatial_dimensions = 6;
int ConvolutionDimensionNumbers::kernel_spatial_dimensions_size() const {
  return kernel_spatial_dimensions_.size();
}
void ConvolutionDimensionNumbers::clear_kernel_spatial_dimensions() {
  kernel_spatial_dimensions_.Clear();
}
::google::protobuf::int64 ConvolutionDimensionNumbers::kernel_spatial_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return kernel_spatial_dimensions_.Get(index);
}
void ConvolutionDimensionNumbers::set_kernel_spatial_dimensions(int index, ::google::protobuf::int64 value) {
  kernel_spatial_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
}
void ConvolutionDimensionNumbers::add_kernel_spatial_dimensions(::google::protobuf::int64 value) {
  kernel_spatial_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDimensionNumbers::kernel_spatial_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return kernel_spatial_dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDimensionNumbers::mutable_kernel_spatial_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions)
  return &kernel_spatial_dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ConvolveRequest::_slow_mutable_lhs() {
  lhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ConvolveRequest::_slow_release_lhs() {
  if (lhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*lhs_);
    lhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ConvolveRequest::unsafe_arena_release_lhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConvolveRequest.lhs)
  
  ::xla::ComputationDataHandle* temp = lhs_;
  lhs_ = NULL;
  return temp;
}
void ConvolveRequest::_slow_set_allocated_lhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lhs) == NULL) {
      message_arena->Own(*lhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lhs)) {
      ::xla::ComputationDataHandle* new_lhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_lhs->CopyFrom(**lhs);
      *lhs = new_lhs;
    }
}
void ConvolveRequest::unsafe_arena_set_allocated_lhs(
    ::xla::ComputationDataHandle* lhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete lhs_;
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConvolveRequest.lhs)
}
void ConvolveRequest::_slow_mutable_rhs() {
  rhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ConvolveRequest::_slow_release_rhs() {
  if (rhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*rhs_);
    rhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ConvolveRequest::unsafe_arena_release_rhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConvolveRequest.rhs)
  
  ::xla::ComputationDataHandle* temp = rhs_;
  rhs_ = NULL;
  return temp;
}
void ConvolveRequest::_slow_set_allocated_rhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rhs) == NULL) {
      message_arena->Own(*rhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rhs)) {
      ::xla::ComputationDataHandle* new_rhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_rhs->CopyFrom(**rhs);
      *rhs = new_rhs;
    }
}
void ConvolveRequest::unsafe_arena_set_allocated_rhs(
    ::xla::ComputationDataHandle* rhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete rhs_;
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConvolveRequest.rhs)
}
void ConvolveRequest::_slow_mutable_window() {
  window_ = ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
      GetArenaNoVirtual());
}
::xla::Window* ConvolveRequest::_slow_release_window() {
  if (window_ == NULL) {
    return NULL;
  } else {
    ::xla::Window* temp = new ::xla::Window(*window_);
    window_ = NULL;
    return temp;
  }
}
::xla::Window* ConvolveRequest::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConvolveRequest.window)
  
  ::xla::Window* temp = window_;
  window_ = NULL;
  return temp;
}
void ConvolveRequest::_slow_set_allocated_window(
    ::google::protobuf::Arena* message_arena, ::xla::Window** window) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*window) == NULL) {
      message_arena->Own(*window);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*window)) {
      ::xla::Window* new_window = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
            message_arena);
      new_window->CopyFrom(**window);
      *window = new_window;
    }
}
void ConvolveRequest::unsafe_arena_set_allocated_window(
    ::xla::Window* window) {
  if (GetArenaNoVirtual() == NULL) {
    delete window_;
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConvolveRequest.window)
}
void ConvolveRequest::_slow_mutable_dimension_numbers() {
  dimension_numbers_ = ::google::protobuf::Arena::CreateMessage< ::xla::ConvolutionDimensionNumbers >(
      GetArenaNoVirtual());
}
::xla::ConvolutionDimensionNumbers* ConvolveRequest::_slow_release_dimension_numbers() {
  if (dimension_numbers_ == NULL) {
    return NULL;
  } else {
    ::xla::ConvolutionDimensionNumbers* temp = new ::xla::ConvolutionDimensionNumbers(*dimension_numbers_);
    dimension_numbers_ = NULL;
    return temp;
  }
}
::xla::ConvolutionDimensionNumbers* ConvolveRequest::unsafe_arena_release_dimension_numbers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConvolveRequest.dimension_numbers)
  
  ::xla::ConvolutionDimensionNumbers* temp = dimension_numbers_;
  dimension_numbers_ = NULL;
  return temp;
}
void ConvolveRequest::_slow_set_allocated_dimension_numbers(
    ::google::protobuf::Arena* message_arena, ::xla::ConvolutionDimensionNumbers** dimension_numbers) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dimension_numbers) == NULL) {
      message_arena->Own(*dimension_numbers);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dimension_numbers)) {
      ::xla::ConvolutionDimensionNumbers* new_dimension_numbers = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ConvolutionDimensionNumbers >(
            message_arena);
      new_dimension_numbers->CopyFrom(**dimension_numbers);
      *dimension_numbers = new_dimension_numbers;
    }
}
void ConvolveRequest::unsafe_arena_set_allocated_dimension_numbers(
    ::xla::ConvolutionDimensionNumbers* dimension_numbers) {
  if (GetArenaNoVirtual() == NULL) {
    delete dimension_numbers_;
  }
  dimension_numbers_ = dimension_numbers;
  if (dimension_numbers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConvolveRequest.dimension_numbers)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolveRequest::kLhsFieldNumber;
const int ConvolveRequest::kRhsFieldNumber;
const int ConvolveRequest::kWindowFieldNumber;
const int ConvolveRequest::kDimensionNumbersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolveRequest::ConvolveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ConvolveRequest)
}
ConvolveRequest::ConvolveRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ConvolveRequest)
}
ConvolveRequest::ConvolveRequest(const ConvolveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lhs()) {
    lhs_ = new ::xla::ComputationDataHandle(*from.lhs_);
  } else {
    lhs_ = NULL;
  }
  if (from.has_rhs()) {
    rhs_ = new ::xla::ComputationDataHandle(*from.rhs_);
  } else {
    rhs_ = NULL;
  }
  if (from.has_window()) {
    window_ = new ::xla::Window(*from.window_);
  } else {
    window_ = NULL;
  }
  if (from.has_dimension_numbers()) {
    dimension_numbers_ = new ::xla::ConvolutionDimensionNumbers(*from.dimension_numbers_);
  } else {
    dimension_numbers_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ConvolveRequest)
}

void ConvolveRequest::SharedCtor() {
  ::memset(&lhs_, 0, reinterpret_cast<char*>(&dimension_numbers_) -
    reinterpret_cast<char*>(&lhs_) + sizeof(dimension_numbers_));
  _cached_size_ = 0;
}

ConvolveRequest::~ConvolveRequest() {
  // @@protoc_insertion_point(destructor:xla.ConvolveRequest)
  SharedDtor();
}

void ConvolveRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete lhs_;
  }
  if (this != internal_default_instance()) {
    delete rhs_;
  }
  if (this != internal_default_instance()) {
    delete window_;
  }
  if (this != internal_default_instance()) {
    delete dimension_numbers_;
  }
}

void ConvolveRequest::ArenaDtor(void* object) {
  ConvolveRequest* _this = reinterpret_cast< ConvolveRequest* >(object);
  (void)_this;
}
void ConvolveRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConvolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolveRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[23].descriptor;
}

const ConvolveRequest& ConvolveRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolveRequest* ConvolveRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConvolveRequest>(arena);
}

void ConvolveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConvolveRequest)
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) {
    delete lhs_;
  }
  lhs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) {
    delete rhs_;
  }
  rhs_ = NULL;
  if (GetArenaNoVirtual() == NULL && window_ != NULL) {
    delete window_;
  }
  window_ = NULL;
  if (GetArenaNoVirtual() == NULL && dimension_numbers_ != NULL) {
    delete dimension_numbers_;
  }
  dimension_numbers_ = NULL;
}

bool ConvolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ConvolveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle lhs = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle rhs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Window window = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimension_numbers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ConvolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ConvolveRequest)
  return false;
#undef DO_
}

void ConvolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ConvolveRequest)
  // .xla.ComputationDataHandle lhs = 2;
  if (this->has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lhs_, output);
  }

  // .xla.ComputationDataHandle rhs = 3;
  if (this->has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rhs_, output);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->window_, output);
  }

  // .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
  if (this->has_dimension_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dimension_numbers_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ConvolveRequest)
}

::google::protobuf::uint8* ConvolveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConvolveRequest)
  // .xla.ComputationDataHandle lhs = 2;
  if (this->has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lhs_, false, target);
  }

  // .xla.ComputationDataHandle rhs = 3;
  if (this->has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rhs_, false, target);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->window_, false, target);
  }

  // .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
  if (this->has_dimension_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dimension_numbers_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ConvolveRequest)
  return target;
}

size_t ConvolveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConvolveRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle lhs = 2;
  if (this->has_lhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lhs_);
  }

  // .xla.ComputationDataHandle rhs = 3;
  if (this->has_rhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rhs_);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->window_);
  }

  // .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
  if (this->has_dimension_numbers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dimension_numbers_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ConvolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ConvolveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ConvolveRequest)
    MergeFrom(*source);
  }
}

void ConvolveRequest::MergeFrom(const ConvolveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ConvolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lhs()) {
    mutable_lhs()->::xla::ComputationDataHandle::MergeFrom(from.lhs());
  }
  if (from.has_rhs()) {
    mutable_rhs()->::xla::ComputationDataHandle::MergeFrom(from.rhs());
  }
  if (from.has_window()) {
    mutable_window()->::xla::Window::MergeFrom(from.window());
  }
  if (from.has_dimension_numbers()) {
    mutable_dimension_numbers()->::xla::ConvolutionDimensionNumbers::MergeFrom(from.dimension_numbers());
  }
}

void ConvolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ConvolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolveRequest::CopyFrom(const ConvolveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConvolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolveRequest::IsInitialized() const {
  return true;
}

void ConvolveRequest::Swap(ConvolveRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConvolveRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConvolveRequest::UnsafeArenaSwap(ConvolveRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConvolveRequest::InternalSwap(ConvolveRequest* other) {
  std::swap(lhs_, other->lhs_);
  std::swap(rhs_, other->rhs_);
  std::swap(window_, other->window_);
  std::swap(dimension_numbers_, other->dimension_numbers_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolveRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolveRequest

// .xla.ComputationDataHandle lhs = 2;
bool ConvolveRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
void ConvolveRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
const ::xla::ComputationDataHandle& ConvolveRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ConvolveRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.lhs)
  return lhs_;
}
::xla::ComputationDataHandle* ConvolveRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
 void ConvolveRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 3;
bool ConvolveRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
void ConvolveRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
const ::xla::ComputationDataHandle& ConvolveRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ConvolveRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.rhs)
  return rhs_;
}
::xla::ComputationDataHandle* ConvolveRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
 void ConvolveRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.rhs)
}

// .xla.Window window = 4;
bool ConvolveRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
void ConvolveRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
const ::xla::Window& ConvolveRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
::xla::Window* ConvolveRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.window)
  return window_;
}
::xla::Window* ConvolveRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
 void ConvolveRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.window)
}

// .xla.ConvolutionDimensionNumbers dimension_numbers = 5;
bool ConvolveRequest::has_dimension_numbers() const {
  return this != internal_default_instance() && dimension_numbers_ != NULL;
}
void ConvolveRequest::clear_dimension_numbers() {
  if (GetArenaNoVirtual() == NULL && dimension_numbers_ != NULL) delete dimension_numbers_;
  dimension_numbers_ = NULL;
}
const ::xla::ConvolutionDimensionNumbers& ConvolveRequest::dimension_numbers() const {
  // @@protoc_insertion_point(field_get:xla.ConvolveRequest.dimension_numbers)
  return dimension_numbers_ != NULL ? *dimension_numbers_
                         : *::xla::ConvolutionDimensionNumbers::internal_default_instance();
}
::xla::ConvolutionDimensionNumbers* ConvolveRequest::mutable_dimension_numbers() {
  
  if (dimension_numbers_ == NULL) {
    _slow_mutable_dimension_numbers();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvolveRequest.dimension_numbers)
  return dimension_numbers_;
}
::xla::ConvolutionDimensionNumbers* ConvolveRequest::release_dimension_numbers() {
  // @@protoc_insertion_point(field_release:xla.ConvolveRequest.dimension_numbers)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dimension_numbers();
  } else {
    ::xla::ConvolutionDimensionNumbers* temp = dimension_numbers_;
    dimension_numbers_ = NULL;
    return temp;
  }
}
 void ConvolveRequest::set_allocated_dimension_numbers(::xla::ConvolutionDimensionNumbers* dimension_numbers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dimension_numbers_;
  }
  if (dimension_numbers != NULL) {
    _slow_set_allocated_dimension_numbers(message_arena, &dimension_numbers);
  }
  dimension_numbers_ = dimension_numbers;
  if (dimension_numbers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvolveRequest.dimension_numbers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void InfeedRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* InfeedRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* InfeedRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.InfeedRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void InfeedRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void InfeedRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.InfeedRequest.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfeedRequest::kShapeFieldNumber;
const int InfeedRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfeedRequest::InfeedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.InfeedRequest)
}
InfeedRequest::InfeedRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.InfeedRequest)
}
InfeedRequest::InfeedRequest(const InfeedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config().size() > 0) {
    config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.InfeedRequest)
}

void InfeedRequest::SharedCtor() {
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  _cached_size_ = 0;
}

InfeedRequest::~InfeedRequest() {
  // @@protoc_insertion_point(destructor:xla.InfeedRequest)
  SharedDtor();
}

void InfeedRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  config_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void InfeedRequest::ArenaDtor(void* object) {
  InfeedRequest* _this = reinterpret_cast< InfeedRequest* >(object);
  (void)_this;
}
void InfeedRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InfeedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfeedRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[24].descriptor;
}

const InfeedRequest& InfeedRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfeedRequest* InfeedRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<InfeedRequest>(arena);
}

void InfeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.InfeedRequest)
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool InfeedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.InfeedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes config = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.InfeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.InfeedRequest)
  return false;
#undef DO_
}

void InfeedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.InfeedRequest)
  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // bytes config = 3;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->config(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.InfeedRequest)
}

::google::protobuf::uint8* InfeedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.InfeedRequest)
  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // bytes config = 3;
  if (this->config().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.InfeedRequest)
  return target;
}

size_t InfeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.InfeedRequest)
  size_t total_size = 0;

  // bytes config = 3;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config());
  }

  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfeedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.InfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InfeedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfeedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.InfeedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.InfeedRequest)
    MergeFrom(*source);
  }
}

void InfeedRequest::MergeFrom(const InfeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.InfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.config().size() > 0) {
    set_config(from.config());
  }
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
}

void InfeedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.InfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfeedRequest::CopyFrom(const InfeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.InfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfeedRequest::IsInitialized() const {
  return true;
}

void InfeedRequest::Swap(InfeedRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InfeedRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InfeedRequest::UnsafeArenaSwap(InfeedRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InfeedRequest::InternalSwap(InfeedRequest* other) {
  config_.Swap(&other->config_);
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfeedRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfeedRequest

// .xla.Shape shape = 2;
bool InfeedRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void InfeedRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& InfeedRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.InfeedRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* InfeedRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.InfeedRequest.shape)
  return shape_;
}
::xla::Shape* InfeedRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.InfeedRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void InfeedRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.InfeedRequest.shape)
}

// bytes config = 3;
void InfeedRequest::clear_config() {
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& InfeedRequest::config() const {
  // @@protoc_insertion_point(field_get:xla.InfeedRequest.config)
  return config_.Get();
}
void InfeedRequest::set_config(const ::std::string& value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.InfeedRequest.config)
}
void InfeedRequest::set_config(const char* value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.InfeedRequest.config)
}
void InfeedRequest::set_config(const void* value,
    size_t size) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.InfeedRequest.config)
}
::std::string* InfeedRequest::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:xla.InfeedRequest.config)
  return config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InfeedRequest::release_config() {
  // @@protoc_insertion_point(field_release:xla.InfeedRequest.config)
  
  return config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InfeedRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.InfeedRequest.config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void InfeedRequest::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.InfeedRequest.config)
}
void InfeedRequest::unsafe_arena_set_allocated_config(
    ::std::string* config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config != NULL) {
    
  } else {
    
  }
  config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.InfeedRequest.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OutfeedRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* OutfeedRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* OutfeedRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OutfeedRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void OutfeedRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void OutfeedRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OutfeedRequest.shape)
}
void OutfeedRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* OutfeedRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* OutfeedRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OutfeedRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void OutfeedRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void OutfeedRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OutfeedRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutfeedRequest::kShapeFieldNumber;
const int OutfeedRequest::kOperandFieldNumber;
const int OutfeedRequest::kOutfeedConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutfeedRequest::OutfeedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.OutfeedRequest)
}
OutfeedRequest::OutfeedRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.OutfeedRequest)
}
OutfeedRequest::OutfeedRequest(const OutfeedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outfeed_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.outfeed_config().size() > 0) {
    outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outfeed_config(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.OutfeedRequest)
}

void OutfeedRequest::SharedCtor() {
  outfeed_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, reinterpret_cast<char*>(&operand_) -
    reinterpret_cast<char*>(&shape_) + sizeof(operand_));
  _cached_size_ = 0;
}

OutfeedRequest::~OutfeedRequest() {
  // @@protoc_insertion_point(destructor:xla.OutfeedRequest)
  SharedDtor();
}

void OutfeedRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  outfeed_config_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete shape_;
  }
  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void OutfeedRequest::ArenaDtor(void* object) {
  OutfeedRequest* _this = reinterpret_cast< OutfeedRequest* >(object);
  (void)_this;
}
void OutfeedRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OutfeedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutfeedRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[25].descriptor;
}

const OutfeedRequest& OutfeedRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OutfeedRequest* OutfeedRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OutfeedRequest>(arena);
}

void OutfeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OutfeedRequest)
  outfeed_config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool OutfeedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.OutfeedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes outfeed_config = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_outfeed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.OutfeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.OutfeedRequest)
  return false;
#undef DO_
}

void OutfeedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.OutfeedRequest)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // bytes outfeed_config = 3;
  if (this->outfeed_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->outfeed_config(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.OutfeedRequest)
}

::google::protobuf::uint8* OutfeedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.OutfeedRequest)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // bytes outfeed_config = 3;
  if (this->outfeed_config().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->outfeed_config(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.OutfeedRequest)
  return target;
}

size_t OutfeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OutfeedRequest)
  size_t total_size = 0;

  // bytes outfeed_config = 3;
  if (this->outfeed_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->outfeed_config());
  }

  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutfeedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.OutfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OutfeedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutfeedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.OutfeedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.OutfeedRequest)
    MergeFrom(*source);
  }
}

void OutfeedRequest::MergeFrom(const OutfeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.OutfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.outfeed_config().size() > 0) {
    set_outfeed_config(from.outfeed_config());
  }
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void OutfeedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.OutfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutfeedRequest::CopyFrom(const OutfeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OutfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutfeedRequest::IsInitialized() const {
  return true;
}

void OutfeedRequest::Swap(OutfeedRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OutfeedRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OutfeedRequest::UnsafeArenaSwap(OutfeedRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OutfeedRequest::InternalSwap(OutfeedRequest* other) {
  outfeed_config_.Swap(&other->outfeed_config_);
  std::swap(shape_, other->shape_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutfeedRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutfeedRequest

// .xla.Shape shape = 1;
bool OutfeedRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void OutfeedRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& OutfeedRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* OutfeedRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.shape)
  return shape_;
}
::xla::Shape* OutfeedRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void OutfeedRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.shape)
}

// .xla.ComputationDataHandle operand = 2;
bool OutfeedRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void OutfeedRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& OutfeedRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* OutfeedRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* OutfeedRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void OutfeedRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.operand)
}

// bytes outfeed_config = 3;
void OutfeedRequest::clear_outfeed_config() {
  outfeed_config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OutfeedRequest::outfeed_config() const {
  // @@protoc_insertion_point(field_get:xla.OutfeedRequest.outfeed_config)
  return outfeed_config_.Get();
}
void OutfeedRequest::set_outfeed_config(const ::std::string& value) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.OutfeedRequest.outfeed_config)
}
void OutfeedRequest::set_outfeed_config(const char* value) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.OutfeedRequest.outfeed_config)
}
void OutfeedRequest::set_outfeed_config(const void* value,
    size_t size) {
  
  outfeed_config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.OutfeedRequest.outfeed_config)
}
::std::string* OutfeedRequest::mutable_outfeed_config() {
  
  // @@protoc_insertion_point(field_mutable:xla.OutfeedRequest.outfeed_config)
  return outfeed_config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OutfeedRequest::release_outfeed_config() {
  // @@protoc_insertion_point(field_release:xla.OutfeedRequest.outfeed_config)
  
  return outfeed_config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OutfeedRequest::unsafe_arena_release_outfeed_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OutfeedRequest.outfeed_config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return outfeed_config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OutfeedRequest::set_allocated_outfeed_config(::std::string* outfeed_config) {
  if (outfeed_config != NULL) {
    
  } else {
    
  }
  outfeed_config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outfeed_config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.OutfeedRequest.outfeed_config)
}
void OutfeedRequest::unsafe_arena_set_allocated_outfeed_config(
    ::std::string* outfeed_config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (outfeed_config != NULL) {
    
  } else {
    
  }
  outfeed_config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      outfeed_config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OutfeedRequest.outfeed_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CallRequest::_slow_mutable_to_apply() {
  to_apply_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* CallRequest::_slow_release_to_apply() {
  if (to_apply_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*to_apply_);
    to_apply_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* CallRequest::unsafe_arena_release_to_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.CallRequest.to_apply)
  
  ::xla::ComputationHandle* temp = to_apply_;
  to_apply_ = NULL;
  return temp;
}
void CallRequest::_slow_set_allocated_to_apply(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*to_apply) == NULL) {
      message_arena->Own(*to_apply);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*to_apply)) {
      ::xla::ComputationHandle* new_to_apply = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_to_apply->CopyFrom(**to_apply);
      *to_apply = new_to_apply;
    }
}
void CallRequest::unsafe_arena_set_allocated_to_apply(
    ::xla::ComputationHandle* to_apply) {
  if (GetArenaNoVirtual() == NULL) {
    delete to_apply_;
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CallRequest.to_apply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallRequest::kToApplyFieldNumber;
const int CallRequest::kOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallRequest::CallRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.CallRequest)
}
CallRequest::CallRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operands_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.CallRequest)
}
CallRequest::CallRequest(const CallRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operands_(from.operands_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_to_apply()) {
    to_apply_ = new ::xla::ComputationHandle(*from.to_apply_);
  } else {
    to_apply_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.CallRequest)
}

void CallRequest::SharedCtor() {
  to_apply_ = NULL;
  _cached_size_ = 0;
}

CallRequest::~CallRequest() {
  // @@protoc_insertion_point(destructor:xla.CallRequest)
  SharedDtor();
}

void CallRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete to_apply_;
  }
}

void CallRequest::ArenaDtor(void* object) {
  CallRequest* _this = reinterpret_cast< CallRequest* >(object);
  (void)_this;
}
void CallRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[26].descriptor;
}

const CallRequest& CallRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CallRequest* CallRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CallRequest>(arena);
}

void CallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CallRequest)
  operands_.Clear();
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) {
    delete to_apply_;
  }
  to_apply_ = NULL;
}

bool CallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.CallRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle to_apply = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.ComputationDataHandle operands = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.CallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.CallRequest)
  return false;
#undef DO_
}

void CallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.CallRequest)
  // .xla.ComputationHandle to_apply = 2;
  if (this->has_to_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_apply_, output);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.CallRequest)
}

::google::protobuf::uint8* CallRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.CallRequest)
  // .xla.ComputationHandle to_apply = 2;
  if (this->has_to_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_apply_, false, target);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.CallRequest)
  return target;
}

size_t CallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CallRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle operands = 3;
  {
    unsigned int count = this->operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operands(i));
    }
  }

  // .xla.ComputationHandle to_apply = 2;
  if (this->has_to_apply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_apply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.CallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CallRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.CallRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.CallRequest)
    MergeFrom(*source);
  }
}

void CallRequest::MergeFrom(const CallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.CallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operands_.MergeFrom(from.operands_);
  if (from.has_to_apply()) {
    mutable_to_apply()->::xla::ComputationHandle::MergeFrom(from.to_apply());
  }
}

void CallRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.CallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallRequest::CopyFrom(const CallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallRequest::IsInitialized() const {
  return true;
}

void CallRequest::Swap(CallRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CallRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CallRequest::UnsafeArenaSwap(CallRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CallRequest::InternalSwap(CallRequest* other) {
  operands_.UnsafeArenaSwap(&other->operands_);
  std::swap(to_apply_, other->to_apply_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallRequest

// .xla.ComputationHandle to_apply = 2;
bool CallRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
void CallRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
const ::xla::ComputationHandle& CallRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.CallRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* CallRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.CallRequest.to_apply)
  return to_apply_;
}
::xla::ComputationHandle* CallRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.CallRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
 void CallRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CallRequest.to_apply)
}

// repeated .xla.ComputationDataHandle operands = 3;
int CallRequest::operands_size() const {
  return operands_.size();
}
void CallRequest::clear_operands() {
  operands_.Clear();
}
const ::xla::ComputationDataHandle& CallRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.CallRequest.operands)
  return operands_.Get(index);
}
::xla::ComputationDataHandle* CallRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.CallRequest.operands)
  return operands_.Mutable(index);
}
::xla::ComputationDataHandle* CallRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.CallRequest.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
CallRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.CallRequest.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
CallRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.CallRequest.operands)
  return operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CustomCallRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* CustomCallRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* CustomCallRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.CustomCallRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void CustomCallRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void CustomCallRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CustomCallRequest.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomCallRequest::kCallTargetNameFieldNumber;
const int CustomCallRequest::kOperandsFieldNumber;
const int CustomCallRequest::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomCallRequest::CustomCallRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.CustomCallRequest)
}
CustomCallRequest::CustomCallRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operands_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.CustomCallRequest)
}
CustomCallRequest::CustomCallRequest(const CustomCallRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operands_(from.operands_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_target_name().size() > 0) {
    call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_target_name(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.CustomCallRequest)
}

void CustomCallRequest::SharedCtor() {
  call_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  _cached_size_ = 0;
}

CustomCallRequest::~CustomCallRequest() {
  // @@protoc_insertion_point(destructor:xla.CustomCallRequest)
  SharedDtor();
}

void CustomCallRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  call_target_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void CustomCallRequest::ArenaDtor(void* object) {
  CustomCallRequest* _this = reinterpret_cast< CustomCallRequest* >(object);
  (void)_this;
}
void CustomCallRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CustomCallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomCallRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[27].descriptor;
}

const CustomCallRequest& CustomCallRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomCallRequest* CustomCallRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CustomCallRequest>(arena);
}

void CustomCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CustomCallRequest)
  operands_.Clear();
  call_target_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool CustomCallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.CustomCallRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string call_target_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_target_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_target_name().data(), this->call_target_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.CustomCallRequest.call_target_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.ComputationDataHandle operands = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.Shape shape = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.CustomCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.CustomCallRequest)
  return false;
#undef DO_
}

void CustomCallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.CustomCallRequest)
  // string call_target_name = 2;
  if (this->call_target_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_target_name().data(), this->call_target_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.CustomCallRequest.call_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->call_target_name(), output);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.CustomCallRequest)
}

::google::protobuf::uint8* CustomCallRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.CustomCallRequest)
  // string call_target_name = 2;
  if (this->call_target_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_target_name().data(), this->call_target_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.CustomCallRequest.call_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->call_target_name(), target);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.CustomCallRequest)
  return target;
}

size_t CustomCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CustomCallRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle operands = 3;
  {
    unsigned int count = this->operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operands(i));
    }
  }

  // string call_target_name = 2;
  if (this->call_target_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_target_name());
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomCallRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.CustomCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomCallRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomCallRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.CustomCallRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.CustomCallRequest)
    MergeFrom(*source);
  }
}

void CustomCallRequest::MergeFrom(const CustomCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.CustomCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operands_.MergeFrom(from.operands_);
  if (from.call_target_name().size() > 0) {
    set_call_target_name(from.call_target_name());
  }
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
}

void CustomCallRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.CustomCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomCallRequest::CopyFrom(const CustomCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CustomCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomCallRequest::IsInitialized() const {
  return true;
}

void CustomCallRequest::Swap(CustomCallRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CustomCallRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CustomCallRequest::UnsafeArenaSwap(CustomCallRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CustomCallRequest::InternalSwap(CustomCallRequest* other) {
  operands_.UnsafeArenaSwap(&other->operands_);
  call_target_name_.Swap(&other->call_target_name_);
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomCallRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomCallRequest

// string call_target_name = 2;
void CustomCallRequest::clear_call_target_name() {
  call_target_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CustomCallRequest::call_target_name() const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.call_target_name)
  return call_target_name_.Get();
}
void CustomCallRequest::set_call_target_name(const ::std::string& value) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.CustomCallRequest.call_target_name)
}
void CustomCallRequest::set_call_target_name(const char* value) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.CustomCallRequest.call_target_name)
}
void CustomCallRequest::set_call_target_name(const char* value,
    size_t size) {
  
  call_target_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.CustomCallRequest.call_target_name)
}
::std::string* CustomCallRequest::mutable_call_target_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.call_target_name)
  return call_target_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CustomCallRequest::release_call_target_name() {
  // @@protoc_insertion_point(field_release:xla.CustomCallRequest.call_target_name)
  
  return call_target_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CustomCallRequest::unsafe_arena_release_call_target_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.CustomCallRequest.call_target_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_target_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CustomCallRequest::set_allocated_call_target_name(::std::string* call_target_name) {
  if (call_target_name != NULL) {
    
  } else {
    
  }
  call_target_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_target_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.CustomCallRequest.call_target_name)
}
void CustomCallRequest::unsafe_arena_set_allocated_call_target_name(
    ::std::string* call_target_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_target_name != NULL) {
    
  } else {
    
  }
  call_target_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_target_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CustomCallRequest.call_target_name)
}

// repeated .xla.ComputationDataHandle operands = 3;
int CustomCallRequest::operands_size() const {
  return operands_.size();
}
void CustomCallRequest::clear_operands() {
  operands_.Clear();
}
const ::xla::ComputationDataHandle& CustomCallRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.operands)
  return operands_.Get(index);
}
::xla::ComputationDataHandle* CustomCallRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.operands)
  return operands_.Mutable(index);
}
::xla::ComputationDataHandle* CustomCallRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.CustomCallRequest.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
CustomCallRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.CustomCallRequest.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
CustomCallRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.CustomCallRequest.operands)
  return operands_;
}

// .xla.Shape shape = 4;
bool CustomCallRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void CustomCallRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& CustomCallRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.CustomCallRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* CustomCallRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.CustomCallRequest.shape)
  return shape_;
}
::xla::Shape* CustomCallRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.CustomCallRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void CustomCallRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CustomCallRequest.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MapRequest::_slow_mutable_to_apply() {
  to_apply_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* MapRequest::_slow_release_to_apply() {
  if (to_apply_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*to_apply_);
    to_apply_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* MapRequest::unsafe_arena_release_to_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.MapRequest.to_apply)
  
  ::xla::ComputationHandle* temp = to_apply_;
  to_apply_ = NULL;
  return temp;
}
void MapRequest::_slow_set_allocated_to_apply(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*to_apply) == NULL) {
      message_arena->Own(*to_apply);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*to_apply)) {
      ::xla::ComputationHandle* new_to_apply = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_to_apply->CopyFrom(**to_apply);
      *to_apply = new_to_apply;
    }
}
void MapRequest::unsafe_arena_set_allocated_to_apply(
    ::xla::ComputationHandle* to_apply) {
  if (GetArenaNoVirtual() == NULL) {
    delete to_apply_;
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.MapRequest.to_apply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapRequest::kOperandsFieldNumber;
const int MapRequest::kToApplyFieldNumber;
const int MapRequest::kStaticOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapRequest::MapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.MapRequest)
}
MapRequest::MapRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operands_(arena),
  static_operands_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.MapRequest)
}
MapRequest::MapRequest(const MapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operands_(from.operands_),
      static_operands_(from.static_operands_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_to_apply()) {
    to_apply_ = new ::xla::ComputationHandle(*from.to_apply_);
  } else {
    to_apply_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.MapRequest)
}

void MapRequest::SharedCtor() {
  to_apply_ = NULL;
  _cached_size_ = 0;
}

MapRequest::~MapRequest() {
  // @@protoc_insertion_point(destructor:xla.MapRequest)
  SharedDtor();
}

void MapRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete to_apply_;
  }
}

void MapRequest::ArenaDtor(void* object) {
  MapRequest* _this = reinterpret_cast< MapRequest* >(object);
  (void)_this;
}
void MapRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[28].descriptor;
}

const MapRequest& MapRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapRequest* MapRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MapRequest>(arena);
}

void MapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.MapRequest)
  operands_.Clear();
  static_operands_.Clear();
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) {
    delete to_apply_;
  }
  to_apply_ = NULL;
}

bool MapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.MapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.ComputationDataHandle operands = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.ComputationHandle to_apply = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.ComputationDataHandle static_operands = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_static_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.MapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.MapRequest)
  return false;
#undef DO_
}

void MapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.MapRequest)
  // repeated .xla.ComputationDataHandle operands = 2;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operands(i), output);
  }

  // .xla.ComputationHandle to_apply = 3;
  if (this->has_to_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->to_apply_, output);
  }

  // repeated .xla.ComputationDataHandle static_operands = 4;
  for (unsigned int i = 0, n = this->static_operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->static_operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.MapRequest)
}

::google::protobuf::uint8* MapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.MapRequest)
  // repeated .xla.ComputationDataHandle operands = 2;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->operands(i), false, target);
  }

  // .xla.ComputationHandle to_apply = 3;
  if (this->has_to_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->to_apply_, false, target);
  }

  // repeated .xla.ComputationDataHandle static_operands = 4;
  for (unsigned int i = 0, n = this->static_operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->static_operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.MapRequest)
  return target;
}

size_t MapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.MapRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle operands = 2;
  {
    unsigned int count = this->operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operands(i));
    }
  }

  // repeated .xla.ComputationDataHandle static_operands = 4;
  {
    unsigned int count = this->static_operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->static_operands(i));
    }
  }

  // .xla.ComputationHandle to_apply = 3;
  if (this->has_to_apply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_apply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.MapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.MapRequest)
    MergeFrom(*source);
  }
}

void MapRequest::MergeFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operands_.MergeFrom(from.operands_);
  static_operands_.MergeFrom(from.static_operands_);
  if (from.has_to_apply()) {
    mutable_to_apply()->::xla::ComputationHandle::MergeFrom(from.to_apply());
  }
}

void MapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRequest::CopyFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRequest::IsInitialized() const {
  return true;
}

void MapRequest::Swap(MapRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapRequest::UnsafeArenaSwap(MapRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapRequest::InternalSwap(MapRequest* other) {
  operands_.UnsafeArenaSwap(&other->operands_);
  static_operands_.UnsafeArenaSwap(&other->static_operands_);
  std::swap(to_apply_, other->to_apply_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapRequest

// repeated .xla.ComputationDataHandle operands = 2;
int MapRequest::operands_size() const {
  return operands_.size();
}
void MapRequest::clear_operands() {
  operands_.Clear();
}
const ::xla::ComputationDataHandle& MapRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.operands)
  return operands_.Get(index);
}
::xla::ComputationDataHandle* MapRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.operands)
  return operands_.Mutable(index);
}
::xla::ComputationDataHandle* MapRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.MapRequest.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
MapRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.MapRequest.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
MapRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.MapRequest.operands)
  return operands_;
}

// .xla.ComputationHandle to_apply = 3;
bool MapRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
void MapRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
const ::xla::ComputationHandle& MapRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* MapRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.to_apply)
  return to_apply_;
}
::xla::ComputationHandle* MapRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.MapRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
 void MapRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.MapRequest.to_apply)
}

// repeated .xla.ComputationDataHandle static_operands = 4;
int MapRequest::static_operands_size() const {
  return static_operands_.size();
}
void MapRequest::clear_static_operands() {
  static_operands_.Clear();
}
const ::xla::ComputationDataHandle& MapRequest::static_operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.MapRequest.static_operands)
  return static_operands_.Get(index);
}
::xla::ComputationDataHandle* MapRequest::mutable_static_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.MapRequest.static_operands)
  return static_operands_.Mutable(index);
}
::xla::ComputationDataHandle* MapRequest::add_static_operands() {
  // @@protoc_insertion_point(field_add:xla.MapRequest.static_operands)
  return static_operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
MapRequest::mutable_static_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.MapRequest.static_operands)
  return &static_operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
MapRequest::static_operands() const {
  // @@protoc_insertion_point(field_list:xla.MapRequest.static_operands)
  return static_operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReduceRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReduceRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReduceRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ReduceRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void ReduceRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceRequest.operand)
}
void ReduceRequest::_slow_mutable_init_value() {
  init_value_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReduceRequest::_slow_release_init_value() {
  if (init_value_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*init_value_);
    init_value_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReduceRequest::unsafe_arena_release_init_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceRequest.init_value)
  
  ::xla::ComputationDataHandle* temp = init_value_;
  init_value_ = NULL;
  return temp;
}
void ReduceRequest::_slow_set_allocated_init_value(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*init_value) == NULL) {
      message_arena->Own(*init_value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*init_value)) {
      ::xla::ComputationDataHandle* new_init_value = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_init_value->CopyFrom(**init_value);
      *init_value = new_init_value;
    }
}
void ReduceRequest::unsafe_arena_set_allocated_init_value(
    ::xla::ComputationDataHandle* init_value) {
  if (GetArenaNoVirtual() == NULL) {
    delete init_value_;
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceRequest.init_value)
}
void ReduceRequest::_slow_mutable_to_apply() {
  to_apply_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* ReduceRequest::_slow_release_to_apply() {
  if (to_apply_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*to_apply_);
    to_apply_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* ReduceRequest::unsafe_arena_release_to_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceRequest.to_apply)
  
  ::xla::ComputationHandle* temp = to_apply_;
  to_apply_ = NULL;
  return temp;
}
void ReduceRequest::_slow_set_allocated_to_apply(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*to_apply) == NULL) {
      message_arena->Own(*to_apply);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*to_apply)) {
      ::xla::ComputationHandle* new_to_apply = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_to_apply->CopyFrom(**to_apply);
      *to_apply = new_to_apply;
    }
}
void ReduceRequest::unsafe_arena_set_allocated_to_apply(
    ::xla::ComputationHandle* to_apply) {
  if (GetArenaNoVirtual() == NULL) {
    delete to_apply_;
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceRequest.to_apply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReduceRequest::kOperandFieldNumber;
const int ReduceRequest::kInitValueFieldNumber;
const int ReduceRequest::kDimensionsFieldNumber;
const int ReduceRequest::kToApplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReduceRequest::ReduceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ReduceRequest)
}
ReduceRequest::ReduceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ReduceRequest)
}
ReduceRequest::ReduceRequest(const ReduceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_init_value()) {
    init_value_ = new ::xla::ComputationDataHandle(*from.init_value_);
  } else {
    init_value_ = NULL;
  }
  if (from.has_to_apply()) {
    to_apply_ = new ::xla::ComputationHandle(*from.to_apply_);
  } else {
    to_apply_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ReduceRequest)
}

void ReduceRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&to_apply_) -
    reinterpret_cast<char*>(&operand_) + sizeof(to_apply_));
  _cached_size_ = 0;
}

ReduceRequest::~ReduceRequest() {
  // @@protoc_insertion_point(destructor:xla.ReduceRequest)
  SharedDtor();
}

void ReduceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete init_value_;
  }
  if (this != internal_default_instance()) {
    delete to_apply_;
  }
}

void ReduceRequest::ArenaDtor(void* object) {
  ReduceRequest* _this = reinterpret_cast< ReduceRequest* >(object);
  (void)_this;
}
void ReduceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReduceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[29].descriptor;
}

const ReduceRequest& ReduceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReduceRequest* ReduceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReduceRequest>(arena);
}

void ReduceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ReduceRequest)
  dimensions_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) {
    delete init_value_;
  }
  init_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) {
    delete to_apply_;
  }
  to_apply_ = NULL;
}

bool ReduceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ReduceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle init_value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dimensions = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle to_apply = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ReduceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ReduceRequest)
  return false;
#undef DO_
}

void ReduceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ReduceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->init_value_, output);
  }

  // repeated int64 dimensions = 4;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->to_apply_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ReduceRequest)
}

::google::protobuf::uint8* ReduceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ReduceRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->init_value_, false, target);
  }

  // repeated int64 dimensions = 4;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->to_apply_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ReduceRequest)
  return target;
}

size_t ReduceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ReduceRequest)
  size_t total_size = 0;

  // repeated int64 dimensions = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_value_);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_apply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReduceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReduceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ReduceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ReduceRequest)
    MergeFrom(*source);
  }
}

void ReduceRequest::MergeFrom(const ReduceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_init_value()) {
    mutable_init_value()->::xla::ComputationDataHandle::MergeFrom(from.init_value());
  }
  if (from.has_to_apply()) {
    mutable_to_apply()->::xla::ComputationHandle::MergeFrom(from.to_apply());
  }
}

void ReduceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceRequest::CopyFrom(const ReduceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceRequest::IsInitialized() const {
  return true;
}

void ReduceRequest::Swap(ReduceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReduceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReduceRequest::UnsafeArenaSwap(ReduceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReduceRequest::InternalSwap(ReduceRequest* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(operand_, other->operand_);
  std::swap(init_value_, other->init_value_);
  std::swap(to_apply_, other->to_apply_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReduceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReduceRequest

// .xla.ComputationDataHandle operand = 2;
bool ReduceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ReduceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ReduceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReduceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ReduceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void ReduceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.operand)
}

// .xla.ComputationDataHandle init_value = 3;
bool ReduceRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
void ReduceRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
const ::xla::ComputationDataHandle& ReduceRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReduceRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.init_value)
  return init_value_;
}
::xla::ComputationDataHandle* ReduceRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
 void ReduceRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.init_value)
}

// repeated int64 dimensions = 4;
int ReduceRequest::dimensions_size() const {
  return dimensions_.size();
}
void ReduceRequest::clear_dimensions() {
  dimensions_.Clear();
}
::google::protobuf::int64 ReduceRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.dimensions)
  return dimensions_.Get(index);
}
void ReduceRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReduceRequest.dimensions)
}
void ReduceRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReduceRequest.dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReduceRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReduceRequest.dimensions)
  return dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReduceRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReduceRequest.dimensions)
  return &dimensions_;
}

// .xla.ComputationHandle to_apply = 5;
bool ReduceRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
void ReduceRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
const ::xla::ComputationHandle& ReduceRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.ReduceRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ReduceRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceRequest.to_apply)
  return to_apply_;
}
::xla::ComputationHandle* ReduceRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.ReduceRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
 void ReduceRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceRequest.to_apply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReduceWindowRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReduceWindowRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReduceWindowRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceWindowRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ReduceWindowRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void ReduceWindowRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceWindowRequest.operand)
}
void ReduceWindowRequest::_slow_mutable_init_value() {
  init_value_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReduceWindowRequest::_slow_release_init_value() {
  if (init_value_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*init_value_);
    init_value_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReduceWindowRequest::unsafe_arena_release_init_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceWindowRequest.init_value)
  
  ::xla::ComputationDataHandle* temp = init_value_;
  init_value_ = NULL;
  return temp;
}
void ReduceWindowRequest::_slow_set_allocated_init_value(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*init_value) == NULL) {
      message_arena->Own(*init_value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*init_value)) {
      ::xla::ComputationDataHandle* new_init_value = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_init_value->CopyFrom(**init_value);
      *init_value = new_init_value;
    }
}
void ReduceWindowRequest::unsafe_arena_set_allocated_init_value(
    ::xla::ComputationDataHandle* init_value) {
  if (GetArenaNoVirtual() == NULL) {
    delete init_value_;
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceWindowRequest.init_value)
}
void ReduceWindowRequest::_slow_mutable_window() {
  window_ = ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
      GetArenaNoVirtual());
}
::xla::Window* ReduceWindowRequest::_slow_release_window() {
  if (window_ == NULL) {
    return NULL;
  } else {
    ::xla::Window* temp = new ::xla::Window(*window_);
    window_ = NULL;
    return temp;
  }
}
::xla::Window* ReduceWindowRequest::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceWindowRequest.window)
  
  ::xla::Window* temp = window_;
  window_ = NULL;
  return temp;
}
void ReduceWindowRequest::_slow_set_allocated_window(
    ::google::protobuf::Arena* message_arena, ::xla::Window** window) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*window) == NULL) {
      message_arena->Own(*window);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*window)) {
      ::xla::Window* new_window = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
            message_arena);
      new_window->CopyFrom(**window);
      *window = new_window;
    }
}
void ReduceWindowRequest::unsafe_arena_set_allocated_window(
    ::xla::Window* window) {
  if (GetArenaNoVirtual() == NULL) {
    delete window_;
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceWindowRequest.window)
}
void ReduceWindowRequest::_slow_mutable_to_apply() {
  to_apply_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* ReduceWindowRequest::_slow_release_to_apply() {
  if (to_apply_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*to_apply_);
    to_apply_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* ReduceWindowRequest::unsafe_arena_release_to_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReduceWindowRequest.to_apply)
  
  ::xla::ComputationHandle* temp = to_apply_;
  to_apply_ = NULL;
  return temp;
}
void ReduceWindowRequest::_slow_set_allocated_to_apply(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** to_apply) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*to_apply) == NULL) {
      message_arena->Own(*to_apply);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*to_apply)) {
      ::xla::ComputationHandle* new_to_apply = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_to_apply->CopyFrom(**to_apply);
      *to_apply = new_to_apply;
    }
}
void ReduceWindowRequest::unsafe_arena_set_allocated_to_apply(
    ::xla::ComputationHandle* to_apply) {
  if (GetArenaNoVirtual() == NULL) {
    delete to_apply_;
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReduceWindowRequest.to_apply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReduceWindowRequest::kOperandFieldNumber;
const int ReduceWindowRequest::kInitValueFieldNumber;
const int ReduceWindowRequest::kWindowFieldNumber;
const int ReduceWindowRequest::kToApplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReduceWindowRequest::ReduceWindowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ReduceWindowRequest)
}
ReduceWindowRequest::ReduceWindowRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ReduceWindowRequest)
}
ReduceWindowRequest::ReduceWindowRequest(const ReduceWindowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_init_value()) {
    init_value_ = new ::xla::ComputationDataHandle(*from.init_value_);
  } else {
    init_value_ = NULL;
  }
  if (from.has_window()) {
    window_ = new ::xla::Window(*from.window_);
  } else {
    window_ = NULL;
  }
  if (from.has_to_apply()) {
    to_apply_ = new ::xla::ComputationHandle(*from.to_apply_);
  } else {
    to_apply_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ReduceWindowRequest)
}

void ReduceWindowRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&to_apply_) -
    reinterpret_cast<char*>(&operand_) + sizeof(to_apply_));
  _cached_size_ = 0;
}

ReduceWindowRequest::~ReduceWindowRequest() {
  // @@protoc_insertion_point(destructor:xla.ReduceWindowRequest)
  SharedDtor();
}

void ReduceWindowRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete init_value_;
  }
  if (this != internal_default_instance()) {
    delete window_;
  }
  if (this != internal_default_instance()) {
    delete to_apply_;
  }
}

void ReduceWindowRequest::ArenaDtor(void* object) {
  ReduceWindowRequest* _this = reinterpret_cast< ReduceWindowRequest* >(object);
  (void)_this;
}
void ReduceWindowRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReduceWindowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceWindowRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[30].descriptor;
}

const ReduceWindowRequest& ReduceWindowRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReduceWindowRequest* ReduceWindowRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReduceWindowRequest>(arena);
}

void ReduceWindowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ReduceWindowRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) {
    delete init_value_;
  }
  init_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && window_ != NULL) {
    delete window_;
  }
  window_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) {
    delete to_apply_;
  }
  to_apply_ = NULL;
}

bool ReduceWindowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ReduceWindowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle init_value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Window window = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle to_apply = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ReduceWindowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ReduceWindowRequest)
  return false;
#undef DO_
}

void ReduceWindowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ReduceWindowRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->init_value_, output);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->window_, output);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->to_apply_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ReduceWindowRequest)
}

::google::protobuf::uint8* ReduceWindowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ReduceWindowRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->init_value_, false, target);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->window_, false, target);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->to_apply_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ReduceWindowRequest)
  return target;
}

size_t ReduceWindowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ReduceWindowRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle init_value = 3;
  if (this->has_init_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_value_);
  }

  // .xla.Window window = 4;
  if (this->has_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->window_);
  }

  // .xla.ComputationHandle to_apply = 5;
  if (this->has_to_apply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_apply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceWindowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ReduceWindowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReduceWindowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReduceWindowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ReduceWindowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ReduceWindowRequest)
    MergeFrom(*source);
  }
}

void ReduceWindowRequest::MergeFrom(const ReduceWindowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ReduceWindowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_init_value()) {
    mutable_init_value()->::xla::ComputationDataHandle::MergeFrom(from.init_value());
  }
  if (from.has_window()) {
    mutable_window()->::xla::Window::MergeFrom(from.window());
  }
  if (from.has_to_apply()) {
    mutable_to_apply()->::xla::ComputationHandle::MergeFrom(from.to_apply());
  }
}

void ReduceWindowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ReduceWindowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceWindowRequest::CopyFrom(const ReduceWindowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ReduceWindowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceWindowRequest::IsInitialized() const {
  return true;
}

void ReduceWindowRequest::Swap(ReduceWindowRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReduceWindowRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReduceWindowRequest::UnsafeArenaSwap(ReduceWindowRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReduceWindowRequest::InternalSwap(ReduceWindowRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(init_value_, other->init_value_);
  std::swap(window_, other->window_);
  std::swap(to_apply_, other->to_apply_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReduceWindowRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReduceWindowRequest

// .xla.ComputationDataHandle operand = 2;
bool ReduceWindowRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ReduceWindowRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ReduceWindowRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReduceWindowRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ReduceWindowRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void ReduceWindowRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.operand)
}

// .xla.ComputationDataHandle init_value = 3;
bool ReduceWindowRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
void ReduceWindowRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
const ::xla::ComputationDataHandle& ReduceWindowRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReduceWindowRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.init_value)
  return init_value_;
}
::xla::ComputationDataHandle* ReduceWindowRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
 void ReduceWindowRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.init_value)
}

// .xla.Window window = 4;
bool ReduceWindowRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
void ReduceWindowRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
const ::xla::Window& ReduceWindowRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
::xla::Window* ReduceWindowRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.window)
  return window_;
}
::xla::Window* ReduceWindowRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
 void ReduceWindowRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.window)
}

// .xla.ComputationHandle to_apply = 5;
bool ReduceWindowRequest::has_to_apply() const {
  return this != internal_default_instance() && to_apply_ != NULL;
}
void ReduceWindowRequest::clear_to_apply() {
  if (GetArenaNoVirtual() == NULL && to_apply_ != NULL) delete to_apply_;
  to_apply_ = NULL;
}
const ::xla::ComputationHandle& ReduceWindowRequest::to_apply() const {
  // @@protoc_insertion_point(field_get:xla.ReduceWindowRequest.to_apply)
  return to_apply_ != NULL ? *to_apply_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ReduceWindowRequest::mutable_to_apply() {
  
  if (to_apply_ == NULL) {
    _slow_mutable_to_apply();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReduceWindowRequest.to_apply)
  return to_apply_;
}
::xla::ComputationHandle* ReduceWindowRequest::release_to_apply() {
  // @@protoc_insertion_point(field_release:xla.ReduceWindowRequest.to_apply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_to_apply();
  } else {
    ::xla::ComputationHandle* temp = to_apply_;
    to_apply_ = NULL;
    return temp;
  }
}
 void ReduceWindowRequest::set_allocated_to_apply(::xla::ComputationHandle* to_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_apply_;
  }
  if (to_apply != NULL) {
    _slow_set_allocated_to_apply(message_arena, &to_apply);
  }
  to_apply_ = to_apply;
  if (to_apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReduceWindowRequest.to_apply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CrossReplicaSumRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* CrossReplicaSumRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* CrossReplicaSumRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.CrossReplicaSumRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void CrossReplicaSumRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void CrossReplicaSumRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CrossReplicaSumRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrossReplicaSumRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrossReplicaSumRequest::CrossReplicaSumRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.CrossReplicaSumRequest)
}
CrossReplicaSumRequest::CrossReplicaSumRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.CrossReplicaSumRequest)
}
CrossReplicaSumRequest::CrossReplicaSumRequest(const CrossReplicaSumRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.CrossReplicaSumRequest)
}

void CrossReplicaSumRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

CrossReplicaSumRequest::~CrossReplicaSumRequest() {
  // @@protoc_insertion_point(destructor:xla.CrossReplicaSumRequest)
  SharedDtor();
}

void CrossReplicaSumRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void CrossReplicaSumRequest::ArenaDtor(void* object) {
  CrossReplicaSumRequest* _this = reinterpret_cast< CrossReplicaSumRequest* >(object);
  (void)_this;
}
void CrossReplicaSumRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CrossReplicaSumRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossReplicaSumRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[31].descriptor;
}

const CrossReplicaSumRequest& CrossReplicaSumRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrossReplicaSumRequest* CrossReplicaSumRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CrossReplicaSumRequest>(arena);
}

void CrossReplicaSumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CrossReplicaSumRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool CrossReplicaSumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.CrossReplicaSumRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.CrossReplicaSumRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.CrossReplicaSumRequest)
  return false;
#undef DO_
}

void CrossReplicaSumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.CrossReplicaSumRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.CrossReplicaSumRequest)
}

::google::protobuf::uint8* CrossReplicaSumRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.CrossReplicaSumRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.CrossReplicaSumRequest)
  return target;
}

size_t CrossReplicaSumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CrossReplicaSumRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossReplicaSumRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.CrossReplicaSumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CrossReplicaSumRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrossReplicaSumRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.CrossReplicaSumRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.CrossReplicaSumRequest)
    MergeFrom(*source);
  }
}

void CrossReplicaSumRequest::MergeFrom(const CrossReplicaSumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.CrossReplicaSumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void CrossReplicaSumRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.CrossReplicaSumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossReplicaSumRequest::CopyFrom(const CrossReplicaSumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CrossReplicaSumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossReplicaSumRequest::IsInitialized() const {
  return true;
}

void CrossReplicaSumRequest::Swap(CrossReplicaSumRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CrossReplicaSumRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CrossReplicaSumRequest::UnsafeArenaSwap(CrossReplicaSumRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CrossReplicaSumRequest::InternalSwap(CrossReplicaSumRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrossReplicaSumRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrossReplicaSumRequest

// .xla.ComputationDataHandle operand = 2;
bool CrossReplicaSumRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void CrossReplicaSumRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& CrossReplicaSumRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.CrossReplicaSumRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* CrossReplicaSumRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.CrossReplicaSumRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* CrossReplicaSumRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.CrossReplicaSumRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void CrossReplicaSumRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CrossReplicaSumRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SelectAndScatterRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* SelectAndScatterRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* SelectAndScatterRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.operand)
}
void SelectAndScatterRequest::_slow_mutable_source() {
  source_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* SelectAndScatterRequest::_slow_release_source() {
  if (source_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*source_);
    source_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* SelectAndScatterRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.source)
  
  ::xla::ComputationDataHandle* temp = source_;
  source_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_source(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** source) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source) == NULL) {
      message_arena->Own(*source);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source)) {
      ::xla::ComputationDataHandle* new_source = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_source->CopyFrom(**source);
      *source = new_source;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_source(
    ::xla::ComputationDataHandle* source) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_;
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.source)
}
void SelectAndScatterRequest::_slow_mutable_init_value() {
  init_value_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* SelectAndScatterRequest::_slow_release_init_value() {
  if (init_value_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*init_value_);
    init_value_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* SelectAndScatterRequest::unsafe_arena_release_init_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.init_value)
  
  ::xla::ComputationDataHandle* temp = init_value_;
  init_value_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_init_value(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init_value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*init_value) == NULL) {
      message_arena->Own(*init_value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*init_value)) {
      ::xla::ComputationDataHandle* new_init_value = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_init_value->CopyFrom(**init_value);
      *init_value = new_init_value;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_init_value(
    ::xla::ComputationDataHandle* init_value) {
  if (GetArenaNoVirtual() == NULL) {
    delete init_value_;
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.init_value)
}
void SelectAndScatterRequest::_slow_mutable_window() {
  window_ = ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
      GetArenaNoVirtual());
}
::xla::Window* SelectAndScatterRequest::_slow_release_window() {
  if (window_ == NULL) {
    return NULL;
  } else {
    ::xla::Window* temp = new ::xla::Window(*window_);
    window_ = NULL;
    return temp;
  }
}
::xla::Window* SelectAndScatterRequest::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.window)
  
  ::xla::Window* temp = window_;
  window_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_window(
    ::google::protobuf::Arena* message_arena, ::xla::Window** window) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*window) == NULL) {
      message_arena->Own(*window);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*window)) {
      ::xla::Window* new_window = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Window >(
            message_arena);
      new_window->CopyFrom(**window);
      *window = new_window;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_window(
    ::xla::Window* window) {
  if (GetArenaNoVirtual() == NULL) {
    delete window_;
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.window)
}
void SelectAndScatterRequest::_slow_mutable_select() {
  select_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* SelectAndScatterRequest::_slow_release_select() {
  if (select_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*select_);
    select_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* SelectAndScatterRequest::unsafe_arena_release_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.select)
  
  ::xla::ComputationHandle* temp = select_;
  select_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_select(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** select) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*select) == NULL) {
      message_arena->Own(*select);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*select)) {
      ::xla::ComputationHandle* new_select = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_select->CopyFrom(**select);
      *select = new_select;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_select(
    ::xla::ComputationHandle* select) {
  if (GetArenaNoVirtual() == NULL) {
    delete select_;
  }
  select_ = select;
  if (select) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.select)
}
void SelectAndScatterRequest::_slow_mutable_scatter() {
  scatter_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* SelectAndScatterRequest::_slow_release_scatter() {
  if (scatter_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*scatter_);
    scatter_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* SelectAndScatterRequest::unsafe_arena_release_scatter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SelectAndScatterRequest.scatter)
  
  ::xla::ComputationHandle* temp = scatter_;
  scatter_ = NULL;
  return temp;
}
void SelectAndScatterRequest::_slow_set_allocated_scatter(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** scatter) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*scatter) == NULL) {
      message_arena->Own(*scatter);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*scatter)) {
      ::xla::ComputationHandle* new_scatter = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_scatter->CopyFrom(**scatter);
      *scatter = new_scatter;
    }
}
void SelectAndScatterRequest::unsafe_arena_set_allocated_scatter(
    ::xla::ComputationHandle* scatter) {
  if (GetArenaNoVirtual() == NULL) {
    delete scatter_;
  }
  scatter_ = scatter;
  if (scatter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SelectAndScatterRequest.scatter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectAndScatterRequest::kOperandFieldNumber;
const int SelectAndScatterRequest::kSourceFieldNumber;
const int SelectAndScatterRequest::kInitValueFieldNumber;
const int SelectAndScatterRequest::kWindowFieldNumber;
const int SelectAndScatterRequest::kSelectFieldNumber;
const int SelectAndScatterRequest::kScatterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectAndScatterRequest::SelectAndScatterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SelectAndScatterRequest)
}
SelectAndScatterRequest::SelectAndScatterRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.SelectAndScatterRequest)
}
SelectAndScatterRequest::SelectAndScatterRequest(const SelectAndScatterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_source()) {
    source_ = new ::xla::ComputationDataHandle(*from.source_);
  } else {
    source_ = NULL;
  }
  if (from.has_init_value()) {
    init_value_ = new ::xla::ComputationDataHandle(*from.init_value_);
  } else {
    init_value_ = NULL;
  }
  if (from.has_window()) {
    window_ = new ::xla::Window(*from.window_);
  } else {
    window_ = NULL;
  }
  if (from.has_select()) {
    select_ = new ::xla::ComputationHandle(*from.select_);
  } else {
    select_ = NULL;
  }
  if (from.has_scatter()) {
    scatter_ = new ::xla::ComputationHandle(*from.scatter_);
  } else {
    scatter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SelectAndScatterRequest)
}

void SelectAndScatterRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&scatter_) -
    reinterpret_cast<char*>(&operand_) + sizeof(scatter_));
  _cached_size_ = 0;
}

SelectAndScatterRequest::~SelectAndScatterRequest() {
  // @@protoc_insertion_point(destructor:xla.SelectAndScatterRequest)
  SharedDtor();
}

void SelectAndScatterRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete source_;
  }
  if (this != internal_default_instance()) {
    delete init_value_;
  }
  if (this != internal_default_instance()) {
    delete window_;
  }
  if (this != internal_default_instance()) {
    delete select_;
  }
  if (this != internal_default_instance()) {
    delete scatter_;
  }
}

void SelectAndScatterRequest::ArenaDtor(void* object) {
  SelectAndScatterRequest* _this = reinterpret_cast< SelectAndScatterRequest* >(object);
  (void)_this;
}
void SelectAndScatterRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SelectAndScatterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectAndScatterRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[32].descriptor;
}

const SelectAndScatterRequest& SelectAndScatterRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectAndScatterRequest* SelectAndScatterRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SelectAndScatterRequest>(arena);
}

void SelectAndScatterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SelectAndScatterRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) {
    delete init_value_;
  }
  init_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && window_ != NULL) {
    delete window_;
  }
  window_ = NULL;
  if (GetArenaNoVirtual() == NULL && select_ != NULL) {
    delete select_;
  }
  select_ = NULL;
  if (GetArenaNoVirtual() == NULL && scatter_ != NULL) {
    delete scatter_;
  }
  scatter_ = NULL;
}

bool SelectAndScatterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SelectAndScatterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle source = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle init_value = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Window window = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle select = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle scatter = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scatter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SelectAndScatterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SelectAndScatterRequest)
  return false;
#undef DO_
}

void SelectAndScatterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SelectAndScatterRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle source = 3;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->source_, output);
  }

  // .xla.ComputationDataHandle init_value = 4;
  if (this->has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->init_value_, output);
  }

  // .xla.Window window = 5;
  if (this->has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->window_, output);
  }

  // .xla.ComputationHandle select = 6;
  if (this->has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->select_, output);
  }

  // .xla.ComputationHandle scatter = 7;
  if (this->has_scatter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scatter_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SelectAndScatterRequest)
}

::google::protobuf::uint8* SelectAndScatterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SelectAndScatterRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle source = 3;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->source_, false, target);
  }

  // .xla.ComputationDataHandle init_value = 4;
  if (this->has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->init_value_, false, target);
  }

  // .xla.Window window = 5;
  if (this->has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->window_, false, target);
  }

  // .xla.ComputationHandle select = 6;
  if (this->has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->select_, false, target);
  }

  // .xla.ComputationHandle scatter = 7;
  if (this->has_scatter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->scatter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SelectAndScatterRequest)
  return target;
}

size_t SelectAndScatterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SelectAndScatterRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle source = 3;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  // .xla.ComputationDataHandle init_value = 4;
  if (this->has_init_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_value_);
  }

  // .xla.Window window = 5;
  if (this->has_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->window_);
  }

  // .xla.ComputationHandle select = 6;
  if (this->has_select()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->select_);
  }

  // .xla.ComputationHandle scatter = 7;
  if (this->has_scatter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scatter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectAndScatterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SelectAndScatterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectAndScatterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectAndScatterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SelectAndScatterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SelectAndScatterRequest)
    MergeFrom(*source);
  }
}

void SelectAndScatterRequest::MergeFrom(const SelectAndScatterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SelectAndScatterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_source()) {
    mutable_source()->::xla::ComputationDataHandle::MergeFrom(from.source());
  }
  if (from.has_init_value()) {
    mutable_init_value()->::xla::ComputationDataHandle::MergeFrom(from.init_value());
  }
  if (from.has_window()) {
    mutable_window()->::xla::Window::MergeFrom(from.window());
  }
  if (from.has_select()) {
    mutable_select()->::xla::ComputationHandle::MergeFrom(from.select());
  }
  if (from.has_scatter()) {
    mutable_scatter()->::xla::ComputationHandle::MergeFrom(from.scatter());
  }
}

void SelectAndScatterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SelectAndScatterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectAndScatterRequest::CopyFrom(const SelectAndScatterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SelectAndScatterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectAndScatterRequest::IsInitialized() const {
  return true;
}

void SelectAndScatterRequest::Swap(SelectAndScatterRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SelectAndScatterRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SelectAndScatterRequest::UnsafeArenaSwap(SelectAndScatterRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SelectAndScatterRequest::InternalSwap(SelectAndScatterRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(source_, other->source_);
  std::swap(init_value_, other->init_value_);
  std::swap(window_, other->window_);
  std::swap(select_, other->select_);
  std::swap(scatter_, other->scatter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectAndScatterRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectAndScatterRequest

// .xla.ComputationDataHandle operand = 2;
bool SelectAndScatterRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void SelectAndScatterRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& SelectAndScatterRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* SelectAndScatterRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.operand)
}

// .xla.ComputationDataHandle source = 3;
bool SelectAndScatterRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
void SelectAndScatterRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::xla::ComputationDataHandle& SelectAndScatterRequest::source() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.source)
  return source_ != NULL ? *source_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_source() {
  
  if (source_ == NULL) {
    _slow_mutable_source();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.source)
  return source_;
}
::xla::ComputationDataHandle* SelectAndScatterRequest::release_source() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.source)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source();
  } else {
    ::xla::ComputationDataHandle* temp = source_;
    source_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_source(::xla::ComputationDataHandle* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source != NULL) {
    _slow_set_allocated_source(message_arena, &source);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.source)
}

// .xla.ComputationDataHandle init_value = 4;
bool SelectAndScatterRequest::has_init_value() const {
  return this != internal_default_instance() && init_value_ != NULL;
}
void SelectAndScatterRequest::clear_init_value() {
  if (GetArenaNoVirtual() == NULL && init_value_ != NULL) delete init_value_;
  init_value_ = NULL;
}
const ::xla::ComputationDataHandle& SelectAndScatterRequest::init_value() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.init_value)
  return init_value_ != NULL ? *init_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SelectAndScatterRequest::mutable_init_value() {
  
  if (init_value_ == NULL) {
    _slow_mutable_init_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.init_value)
  return init_value_;
}
::xla::ComputationDataHandle* SelectAndScatterRequest::release_init_value() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.init_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init_value();
  } else {
    ::xla::ComputationDataHandle* temp = init_value_;
    init_value_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_init_value(::xla::ComputationDataHandle* init_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_value_;
  }
  if (init_value != NULL) {
    _slow_set_allocated_init_value(message_arena, &init_value);
  }
  init_value_ = init_value;
  if (init_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.init_value)
}

// .xla.Window window = 5;
bool SelectAndScatterRequest::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
void SelectAndScatterRequest::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) delete window_;
  window_ = NULL;
}
const ::xla::Window& SelectAndScatterRequest::window() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.window)
  return window_ != NULL ? *window_
                         : *::xla::Window::internal_default_instance();
}
::xla::Window* SelectAndScatterRequest::mutable_window() {
  
  if (window_ == NULL) {
    _slow_mutable_window();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.window)
  return window_;
}
::xla::Window* SelectAndScatterRequest::release_window() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.window)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_window();
  } else {
    ::xla::Window* temp = window_;
    window_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_window(::xla::Window* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window != NULL) {
    _slow_set_allocated_window(message_arena, &window);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.window)
}

// .xla.ComputationHandle select = 6;
bool SelectAndScatterRequest::has_select() const {
  return this != internal_default_instance() && select_ != NULL;
}
void SelectAndScatterRequest::clear_select() {
  if (GetArenaNoVirtual() == NULL && select_ != NULL) delete select_;
  select_ = NULL;
}
const ::xla::ComputationHandle& SelectAndScatterRequest::select() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.select)
  return select_ != NULL ? *select_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SelectAndScatterRequest::mutable_select() {
  
  if (select_ == NULL) {
    _slow_mutable_select();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.select)
  return select_;
}
::xla::ComputationHandle* SelectAndScatterRequest::release_select() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.select)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_select();
  } else {
    ::xla::ComputationHandle* temp = select_;
    select_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_select(::xla::ComputationHandle* select) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete select_;
  }
  if (select != NULL) {
    _slow_set_allocated_select(message_arena, &select);
  }
  select_ = select;
  if (select) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.select)
}

// .xla.ComputationHandle scatter = 7;
bool SelectAndScatterRequest::has_scatter() const {
  return this != internal_default_instance() && scatter_ != NULL;
}
void SelectAndScatterRequest::clear_scatter() {
  if (GetArenaNoVirtual() == NULL && scatter_ != NULL) delete scatter_;
  scatter_ = NULL;
}
const ::xla::ComputationHandle& SelectAndScatterRequest::scatter() const {
  // @@protoc_insertion_point(field_get:xla.SelectAndScatterRequest.scatter)
  return scatter_ != NULL ? *scatter_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SelectAndScatterRequest::mutable_scatter() {
  
  if (scatter_ == NULL) {
    _slow_mutable_scatter();
  }
  // @@protoc_insertion_point(field_mutable:xla.SelectAndScatterRequest.scatter)
  return scatter_;
}
::xla::ComputationHandle* SelectAndScatterRequest::release_scatter() {
  // @@protoc_insertion_point(field_release:xla.SelectAndScatterRequest.scatter)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scatter();
  } else {
    ::xla::ComputationHandle* temp = scatter_;
    scatter_ = NULL;
    return temp;
  }
}
 void SelectAndScatterRequest::set_allocated_scatter(::xla::ComputationHandle* scatter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scatter_;
  }
  if (scatter != NULL) {
    _slow_set_allocated_scatter(message_arena, &scatter);
  }
  scatter_ = scatter;
  if (scatter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SelectAndScatterRequest.scatter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReverseRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReverseRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReverseRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReverseRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ReverseRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void ReverseRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReverseRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReverseRequest::kOperandFieldNumber;
const int ReverseRequest::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReverseRequest::ReverseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ReverseRequest)
}
ReverseRequest::ReverseRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ReverseRequest)
}
ReverseRequest::ReverseRequest(const ReverseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ReverseRequest)
}

void ReverseRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

ReverseRequest::~ReverseRequest() {
  // @@protoc_insertion_point(destructor:xla.ReverseRequest)
  SharedDtor();
}

void ReverseRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void ReverseRequest::ArenaDtor(void* object) {
  ReverseRequest* _this = reinterpret_cast< ReverseRequest* >(object);
  (void)_this;
}
void ReverseRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReverseRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[33].descriptor;
}

const ReverseRequest& ReverseRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReverseRequest* ReverseRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReverseRequest>(arena);
}

void ReverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ReverseRequest)
  dimensions_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool ReverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ReverseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dimensions = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ReverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ReverseRequest)
  return false;
#undef DO_
}

void ReverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ReverseRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ReverseRequest)
}

::google::protobuf::uint8* ReverseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ReverseRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ReverseRequest)
  return target;
}

size_t ReverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ReverseRequest)
  size_t total_size = 0;

  // repeated int64 dimensions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ReverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReverseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReverseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ReverseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ReverseRequest)
    MergeFrom(*source);
  }
}

void ReverseRequest::MergeFrom(const ReverseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ReverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void ReverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ReverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReverseRequest::CopyFrom(const ReverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ReverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReverseRequest::IsInitialized() const {
  return true;
}

void ReverseRequest::Swap(ReverseRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReverseRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReverseRequest::UnsafeArenaSwap(ReverseRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReverseRequest::InternalSwap(ReverseRequest* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReverseRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReverseRequest

// .xla.ComputationDataHandle operand = 2;
bool ReverseRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ReverseRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ReverseRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReverseRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReverseRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReverseRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ReverseRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReverseRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void ReverseRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReverseRequest.operand)
}

// repeated int64 dimensions = 3;
int ReverseRequest::dimensions_size() const {
  return dimensions_.size();
}
void ReverseRequest::clear_dimensions() {
  dimensions_.Clear();
}
::google::protobuf::int64 ReverseRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReverseRequest.dimensions)
  return dimensions_.Get(index);
}
void ReverseRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReverseRequest.dimensions)
}
void ReverseRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReverseRequest.dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReverseRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReverseRequest.dimensions)
  return dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReverseRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReverseRequest.dimensions)
  return &dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BroadcastRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* BroadcastRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* BroadcastRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.BroadcastRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void BroadcastRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void BroadcastRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.BroadcastRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastRequest::kOperandFieldNumber;
const int BroadcastRequest::kBroadcastSizesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastRequest::BroadcastRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  broadcast_sizes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      broadcast_sizes_(from.broadcast_sizes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:xla.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void BroadcastRequest::ArenaDtor(void* object) {
  BroadcastRequest* _this = reinterpret_cast< BroadcastRequest* >(object);
  (void)_this;
}
void BroadcastRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BroadcastRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[34].descriptor;
}

const BroadcastRequest& BroadcastRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastRequest* BroadcastRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BroadcastRequest>(arena);
}

void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BroadcastRequest)
  broadcast_sizes_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool BroadcastRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.BroadcastRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 broadcast_sizes = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_broadcast_sizes())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_broadcast_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.BroadcastRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.BroadcastRequest)
  return false;
#undef DO_
}

void BroadcastRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.BroadcastRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // repeated int64 broadcast_sizes = 3;
  if (this->broadcast_sizes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_broadcast_sizes_cached_byte_size_);
  }
  for (int i = 0; i < this->broadcast_sizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->broadcast_sizes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.BroadcastRequest)
}

::google::protobuf::uint8* BroadcastRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.BroadcastRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // repeated int64 broadcast_sizes = 3;
  if (this->broadcast_sizes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _broadcast_sizes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->broadcast_sizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->broadcast_sizes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BroadcastRequest)
  size_t total_size = 0;

  // repeated int64 broadcast_sizes = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->broadcast_sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _broadcast_sizes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.BroadcastRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_sizes_.MergeFrom(from.broadcast_sizes_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void BroadcastRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::Swap(BroadcastRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BroadcastRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BroadcastRequest::UnsafeArenaSwap(BroadcastRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  broadcast_sizes_.UnsafeArenaSwap(&other->broadcast_sizes_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastRequest

// .xla.ComputationDataHandle operand = 2;
bool BroadcastRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void BroadcastRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& BroadcastRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.BroadcastRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* BroadcastRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.BroadcastRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* BroadcastRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.BroadcastRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void BroadcastRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BroadcastRequest.operand)
}

// repeated int64 broadcast_sizes = 3;
int BroadcastRequest::broadcast_sizes_size() const {
  return broadcast_sizes_.size();
}
void BroadcastRequest::clear_broadcast_sizes() {
  broadcast_sizes_.Clear();
}
::google::protobuf::int64 BroadcastRequest::broadcast_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.BroadcastRequest.broadcast_sizes)
  return broadcast_sizes_.Get(index);
}
void BroadcastRequest::set_broadcast_sizes(int index, ::google::protobuf::int64 value) {
  broadcast_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.BroadcastRequest.broadcast_sizes)
}
void BroadcastRequest::add_broadcast_sizes(::google::protobuf::int64 value) {
  broadcast_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.BroadcastRequest.broadcast_sizes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BroadcastRequest::broadcast_sizes() const {
  // @@protoc_insertion_point(field_list:xla.BroadcastRequest.broadcast_sizes)
  return broadcast_sizes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BroadcastRequest::mutable_broadcast_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.BroadcastRequest.broadcast_sizes)
  return &broadcast_sizes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void PadRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* PadRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* PadRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.PadRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void PadRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void PadRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.PadRequest.operand)
}
void PadRequest::_slow_mutable_padding_value() {
  padding_value_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* PadRequest::_slow_release_padding_value() {
  if (padding_value_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*padding_value_);
    padding_value_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* PadRequest::unsafe_arena_release_padding_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.PadRequest.padding_value)
  
  ::xla::ComputationDataHandle* temp = padding_value_;
  padding_value_ = NULL;
  return temp;
}
void PadRequest::_slow_set_allocated_padding_value(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** padding_value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*padding_value) == NULL) {
      message_arena->Own(*padding_value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*padding_value)) {
      ::xla::ComputationDataHandle* new_padding_value = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_padding_value->CopyFrom(**padding_value);
      *padding_value = new_padding_value;
    }
}
void PadRequest::unsafe_arena_set_allocated_padding_value(
    ::xla::ComputationDataHandle* padding_value) {
  if (GetArenaNoVirtual() == NULL) {
    delete padding_value_;
  }
  padding_value_ = padding_value;
  if (padding_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.PadRequest.padding_value)
}
void PadRequest::_slow_mutable_padding_config() {
  padding_config_ = ::google::protobuf::Arena::CreateMessage< ::xla::PaddingConfig >(
      GetArenaNoVirtual());
}
::xla::PaddingConfig* PadRequest::_slow_release_padding_config() {
  if (padding_config_ == NULL) {
    return NULL;
  } else {
    ::xla::PaddingConfig* temp = new ::xla::PaddingConfig(*padding_config_);
    padding_config_ = NULL;
    return temp;
  }
}
::xla::PaddingConfig* PadRequest::unsafe_arena_release_padding_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.PadRequest.padding_config)
  
  ::xla::PaddingConfig* temp = padding_config_;
  padding_config_ = NULL;
  return temp;
}
void PadRequest::_slow_set_allocated_padding_config(
    ::google::protobuf::Arena* message_arena, ::xla::PaddingConfig** padding_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*padding_config) == NULL) {
      message_arena->Own(*padding_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*padding_config)) {
      ::xla::PaddingConfig* new_padding_config = 
            ::google::protobuf::Arena::CreateMessage< ::xla::PaddingConfig >(
            message_arena);
      new_padding_config->CopyFrom(**padding_config);
      *padding_config = new_padding_config;
    }
}
void PadRequest::unsafe_arena_set_allocated_padding_config(
    ::xla::PaddingConfig* padding_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete padding_config_;
  }
  padding_config_ = padding_config;
  if (padding_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.PadRequest.padding_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadRequest::kOperandFieldNumber;
const int PadRequest::kPaddingValueFieldNumber;
const int PadRequest::kPaddingConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadRequest::PadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.PadRequest)
}
PadRequest::PadRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.PadRequest)
}
PadRequest::PadRequest(const PadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_padding_value()) {
    padding_value_ = new ::xla::ComputationDataHandle(*from.padding_value_);
  } else {
    padding_value_ = NULL;
  }
  if (from.has_padding_config()) {
    padding_config_ = new ::xla::PaddingConfig(*from.padding_config_);
  } else {
    padding_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.PadRequest)
}

void PadRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&padding_config_) -
    reinterpret_cast<char*>(&operand_) + sizeof(padding_config_));
  _cached_size_ = 0;
}

PadRequest::~PadRequest() {
  // @@protoc_insertion_point(destructor:xla.PadRequest)
  SharedDtor();
}

void PadRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete padding_value_;
  }
  if (this != internal_default_instance()) {
    delete padding_config_;
  }
}

void PadRequest::ArenaDtor(void* object) {
  PadRequest* _this = reinterpret_cast< PadRequest* >(object);
  (void)_this;
}
void PadRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[35].descriptor;
}

const PadRequest& PadRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadRequest* PadRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PadRequest>(arena);
}

void PadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.PadRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && padding_value_ != NULL) {
    delete padding_value_;
  }
  padding_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && padding_config_ != NULL) {
    delete padding_config_;
  }
  padding_config_ = NULL;
}

bool PadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.PadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle padding_value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.PaddingConfig padding_config = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.PadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.PadRequest)
  return false;
#undef DO_
}

void PadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.PadRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.ComputationDataHandle padding_value = 3;
  if (this->has_padding_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->padding_value_, output);
  }

  // .xla.PaddingConfig padding_config = 4;
  if (this->has_padding_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->padding_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.PadRequest)
}

::google::protobuf::uint8* PadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.PadRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.ComputationDataHandle padding_value = 3;
  if (this->has_padding_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->padding_value_, false, target);
  }

  // .xla.PaddingConfig padding_config = 4;
  if (this->has_padding_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->padding_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.PadRequest)
  return target;
}

size_t PadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.PadRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ComputationDataHandle padding_value = 3;
  if (this->has_padding_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->padding_value_);
  }

  // .xla.PaddingConfig padding_config = 4;
  if (this->has_padding_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->padding_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.PadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.PadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.PadRequest)
    MergeFrom(*source);
  }
}

void PadRequest::MergeFrom(const PadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.PadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_padding_value()) {
    mutable_padding_value()->::xla::ComputationDataHandle::MergeFrom(from.padding_value());
  }
  if (from.has_padding_config()) {
    mutable_padding_config()->::xla::PaddingConfig::MergeFrom(from.padding_config());
  }
}

void PadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.PadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadRequest::CopyFrom(const PadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.PadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadRequest::IsInitialized() const {
  return true;
}

void PadRequest::Swap(PadRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PadRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PadRequest::UnsafeArenaSwap(PadRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PadRequest::InternalSwap(PadRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(padding_value_, other->padding_value_);
  std::swap(padding_config_, other->padding_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadRequest

// .xla.ComputationDataHandle operand = 2;
bool PadRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void PadRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& PadRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* PadRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* PadRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void PadRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.operand)
}

// .xla.ComputationDataHandle padding_value = 3;
bool PadRequest::has_padding_value() const {
  return this != internal_default_instance() && padding_value_ != NULL;
}
void PadRequest::clear_padding_value() {
  if (GetArenaNoVirtual() == NULL && padding_value_ != NULL) delete padding_value_;
  padding_value_ = NULL;
}
const ::xla::ComputationDataHandle& PadRequest::padding_value() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.padding_value)
  return padding_value_ != NULL ? *padding_value_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* PadRequest::mutable_padding_value() {
  
  if (padding_value_ == NULL) {
    _slow_mutable_padding_value();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.padding_value)
  return padding_value_;
}
::xla::ComputationDataHandle* PadRequest::release_padding_value() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.padding_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_padding_value();
  } else {
    ::xla::ComputationDataHandle* temp = padding_value_;
    padding_value_ = NULL;
    return temp;
  }
}
 void PadRequest::set_allocated_padding_value(::xla::ComputationDataHandle* padding_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete padding_value_;
  }
  if (padding_value != NULL) {
    _slow_set_allocated_padding_value(message_arena, &padding_value);
  }
  padding_value_ = padding_value;
  if (padding_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.padding_value)
}

// .xla.PaddingConfig padding_config = 4;
bool PadRequest::has_padding_config() const {
  return this != internal_default_instance() && padding_config_ != NULL;
}
void PadRequest::clear_padding_config() {
  if (GetArenaNoVirtual() == NULL && padding_config_ != NULL) delete padding_config_;
  padding_config_ = NULL;
}
const ::xla::PaddingConfig& PadRequest::padding_config() const {
  // @@protoc_insertion_point(field_get:xla.PadRequest.padding_config)
  return padding_config_ != NULL ? *padding_config_
                         : *::xla::PaddingConfig::internal_default_instance();
}
::xla::PaddingConfig* PadRequest::mutable_padding_config() {
  
  if (padding_config_ == NULL) {
    _slow_mutable_padding_config();
  }
  // @@protoc_insertion_point(field_mutable:xla.PadRequest.padding_config)
  return padding_config_;
}
::xla::PaddingConfig* PadRequest::release_padding_config() {
  // @@protoc_insertion_point(field_release:xla.PadRequest.padding_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_padding_config();
  } else {
    ::xla::PaddingConfig* temp = padding_config_;
    padding_config_ = NULL;
    return temp;
  }
}
 void PadRequest::set_allocated_padding_config(::xla::PaddingConfig* padding_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete padding_config_;
  }
  if (padding_config != NULL) {
    _slow_set_allocated_padding_config(message_arena, &padding_config);
  }
  padding_config_ = padding_config;
  if (padding_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PadRequest.padding_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReshapeRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ReshapeRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ReshapeRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ReshapeRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ReshapeRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void ReshapeRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ReshapeRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeRequest::kOperandFieldNumber;
const int ReshapeRequest::kDimensionsFieldNumber;
const int ReshapeRequest::kNewSizesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeRequest::ReshapeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ReshapeRequest)
}
ReshapeRequest::ReshapeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena),
  new_sizes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ReshapeRequest)
}
ReshapeRequest::ReshapeRequest(const ReshapeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      new_sizes_(from.new_sizes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ReshapeRequest)
}

void ReshapeRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

ReshapeRequest::~ReshapeRequest() {
  // @@protoc_insertion_point(destructor:xla.ReshapeRequest)
  SharedDtor();
}

void ReshapeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void ReshapeRequest::ArenaDtor(void* object) {
  ReshapeRequest* _this = reinterpret_cast< ReshapeRequest* >(object);
  (void)_this;
}
void ReshapeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReshapeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[36].descriptor;
}

const ReshapeRequest& ReshapeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReshapeRequest* ReshapeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReshapeRequest>(arena);
}

void ReshapeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ReshapeRequest)
  dimensions_.Clear();
  new_sizes_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool ReshapeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ReshapeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dimensions = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 new_sizes = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_new_sizes())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_new_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ReshapeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ReshapeRequest)
  return false;
#undef DO_
}

void ReshapeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ReshapeRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // repeated int64 new_sizes = 4;
  if (this->new_sizes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_sizes_cached_byte_size_);
  }
  for (int i = 0; i < this->new_sizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->new_sizes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ReshapeRequest)
}

::google::protobuf::uint8* ReshapeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ReshapeRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // repeated int64 new_sizes = 4;
  if (this->new_sizes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_sizes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_sizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->new_sizes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ReshapeRequest)
  return target;
}

size_t ReshapeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ReshapeRequest)
  size_t total_size = 0;

  // repeated int64 dimensions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 new_sizes = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->new_sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_sizes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ReshapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReshapeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReshapeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ReshapeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ReshapeRequest)
    MergeFrom(*source);
  }
}

void ReshapeRequest::MergeFrom(const ReshapeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ReshapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
  new_sizes_.MergeFrom(from.new_sizes_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void ReshapeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ReshapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeRequest::CopyFrom(const ReshapeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ReshapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeRequest::IsInitialized() const {
  return true;
}

void ReshapeRequest::Swap(ReshapeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReshapeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReshapeRequest::UnsafeArenaSwap(ReshapeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReshapeRequest::InternalSwap(ReshapeRequest* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  new_sizes_.UnsafeArenaSwap(&other->new_sizes_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReshapeRequest

// .xla.ComputationDataHandle operand = 2;
bool ReshapeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ReshapeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ReshapeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ReshapeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ReshapeRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ReshapeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ReshapeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void ReshapeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ReshapeRequest.operand)
}

// repeated int64 dimensions = 3;
int ReshapeRequest::dimensions_size() const {
  return dimensions_.size();
}
void ReshapeRequest::clear_dimensions() {
  dimensions_.Clear();
}
::google::protobuf::int64 ReshapeRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.dimensions)
  return dimensions_.Get(index);
}
void ReshapeRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReshapeRequest.dimensions)
}
void ReshapeRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReshapeRequest.dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReshapeRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.ReshapeRequest.dimensions)
  return dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReshapeRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReshapeRequest.dimensions)
  return &dimensions_;
}

// repeated int64 new_sizes = 4;
int ReshapeRequest::new_sizes_size() const {
  return new_sizes_.size();
}
void ReshapeRequest::clear_new_sizes() {
  new_sizes_.Clear();
}
::google::protobuf::int64 ReshapeRequest::new_sizes(int index) const {
  // @@protoc_insertion_point(field_get:xla.ReshapeRequest.new_sizes)
  return new_sizes_.Get(index);
}
void ReshapeRequest::set_new_sizes(int index, ::google::protobuf::int64 value) {
  new_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ReshapeRequest.new_sizes)
}
void ReshapeRequest::add_new_sizes(::google::protobuf::int64 value) {
  new_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:xla.ReshapeRequest.new_sizes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReshapeRequest::new_sizes() const {
  // @@protoc_insertion_point(field_list:xla.ReshapeRequest.new_sizes)
  return new_sizes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReshapeRequest::mutable_new_sizes() {
  // @@protoc_insertion_point(field_mutable_list:xla.ReshapeRequest.new_sizes)
  return &new_sizes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TransposeRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* TransposeRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* TransposeRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TransposeRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void TransposeRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void TransposeRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransposeRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransposeRequest::kOperandFieldNumber;
const int TransposeRequest::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransposeRequest::TransposeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransposeRequest)
}
TransposeRequest::TransposeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.TransposeRequest)
}
TransposeRequest::TransposeRequest(const TransposeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransposeRequest)
}

void TransposeRequest::SharedCtor() {
  operand_ = NULL;
  _cached_size_ = 0;
}

TransposeRequest::~TransposeRequest() {
  // @@protoc_insertion_point(destructor:xla.TransposeRequest)
  SharedDtor();
}

void TransposeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void TransposeRequest::ArenaDtor(void* object) {
  TransposeRequest* _this = reinterpret_cast< TransposeRequest* >(object);
  (void)_this;
}
void TransposeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TransposeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransposeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[37].descriptor;
}

const TransposeRequest& TransposeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransposeRequest* TransposeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TransposeRequest>(arena);
}

void TransposeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransposeRequest)
  dimensions_.Clear();
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool TransposeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransposeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dimensions = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransposeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransposeRequest)
  return false;
#undef DO_
}

void TransposeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransposeRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransposeRequest)
}

::google::protobuf::uint8* TransposeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransposeRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // repeated int64 dimensions = 3;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransposeRequest)
  return target;
}

size_t TransposeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransposeRequest)
  size_t total_size = 0;

  // repeated int64 dimensions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransposeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransposeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransposeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransposeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransposeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransposeRequest)
    MergeFrom(*source);
  }
}

void TransposeRequest::MergeFrom(const TransposeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransposeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensions_.MergeFrom(from.dimensions_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void TransposeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransposeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransposeRequest::CopyFrom(const TransposeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransposeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransposeRequest::IsInitialized() const {
  return true;
}

void TransposeRequest::Swap(TransposeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TransposeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TransposeRequest::UnsafeArenaSwap(TransposeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TransposeRequest::InternalSwap(TransposeRequest* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransposeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransposeRequest

// .xla.ComputationDataHandle operand = 2;
bool TransposeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void TransposeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& TransposeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.TransposeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* TransposeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.TransposeRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* TransposeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.TransposeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void TransposeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransposeRequest.operand)
}

// repeated int64 dimensions = 3;
int TransposeRequest::dimensions_size() const {
  return dimensions_.size();
}
void TransposeRequest::clear_dimensions() {
  dimensions_.Clear();
}
::google::protobuf::int64 TransposeRequest::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.TransposeRequest.dimensions)
  return dimensions_.Get(index);
}
void TransposeRequest::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.TransposeRequest.dimensions)
}
void TransposeRequest::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.TransposeRequest.dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TransposeRequest::dimensions() const {
  // @@protoc_insertion_point(field_list:xla.TransposeRequest.dimensions)
  return dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TransposeRequest::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.TransposeRequest.dimensions)
  return &dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ParameterRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* ParameterRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* ParameterRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ParameterRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ParameterRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void ParameterRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ParameterRequest.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterRequest::kShapeFieldNumber;
const int ParameterRequest::kParameterFieldNumber;
const int ParameterRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterRequest::ParameterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ParameterRequest)
}
ParameterRequest::ParameterRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ParameterRequest)
}
ParameterRequest::ParameterRequest(const ParameterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  parameter_ = from.parameter_;
  // @@protoc_insertion_point(copy_constructor:xla.ParameterRequest)
}

void ParameterRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, reinterpret_cast<char*>(&parameter_) -
    reinterpret_cast<char*>(&shape_) + sizeof(parameter_));
  _cached_size_ = 0;
}

ParameterRequest::~ParameterRequest() {
  // @@protoc_insertion_point(destructor:xla.ParameterRequest)
  SharedDtor();
}

void ParameterRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void ParameterRequest::ArenaDtor(void* object) {
  ParameterRequest* _this = reinterpret_cast< ParameterRequest* >(object);
  (void)_this;
}
void ParameterRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ParameterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[38].descriptor;
}

const ParameterRequest& ParameterRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParameterRequest* ParameterRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ParameterRequest>(arena);
}

void ParameterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ParameterRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  parameter_ = GOOGLE_LONGLONG(0);
}

bool ParameterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ParameterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parameter = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.ParameterRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ParameterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ParameterRequest)
  return false;
#undef DO_
}

void ParameterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ParameterRequest)
  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // int64 parameter = 3;
  if (this->parameter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parameter(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ParameterRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ParameterRequest)
}

::google::protobuf::uint8* ParameterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ParameterRequest)
  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // int64 parameter = 3;
  if (this->parameter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parameter(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ParameterRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ParameterRequest)
  return target;
}

size_t ParameterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ParameterRequest)
  size_t total_size = 0;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // int64 parameter = 3;
  if (this->parameter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parameter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParameterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ParameterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ParameterRequest)
    MergeFrom(*source);
  }
}

void ParameterRequest::MergeFrom(const ParameterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
  if (from.parameter() != 0) {
    set_parameter(from.parameter());
  }
}

void ParameterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterRequest::CopyFrom(const ParameterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterRequest::IsInitialized() const {
  return true;
}

void ParameterRequest::Swap(ParameterRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ParameterRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ParameterRequest::UnsafeArenaSwap(ParameterRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ParameterRequest::InternalSwap(ParameterRequest* other) {
  name_.Swap(&other->name_);
  std::swap(shape_, other->shape_);
  std::swap(parameter_, other->parameter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterRequest

// .xla.Shape shape = 2;
bool ParameterRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void ParameterRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& ParameterRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* ParameterRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.ParameterRequest.shape)
  return shape_;
}
::xla::Shape* ParameterRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.ParameterRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void ParameterRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ParameterRequest.shape)
}

// int64 parameter = 3;
void ParameterRequest::clear_parameter() {
  parameter_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ParameterRequest::parameter() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.parameter)
  return parameter_;
}
void ParameterRequest::set_parameter(::google::protobuf::int64 value) {
  
  parameter_ = value;
  // @@protoc_insertion_point(field_set:xla.ParameterRequest.parameter)
}

// string name = 4;
void ParameterRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ParameterRequest::name() const {
  // @@protoc_insertion_point(field_get:xla.ParameterRequest.name)
  return name_.Get();
}
void ParameterRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.ParameterRequest.name)
}
void ParameterRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.ParameterRequest.name)
}
void ParameterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.ParameterRequest.name)
}
::std::string* ParameterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.ParameterRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ParameterRequest::release_name() {
  // @@protoc_insertion_point(field_release:xla.ParameterRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ParameterRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ParameterRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ParameterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.ParameterRequest.name)
}
void ParameterRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ParameterRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetLocalShapeRequest::_slow_mutable_computation() {
  computation_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* GetLocalShapeRequest::_slow_release_computation() {
  if (computation_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*computation_);
    computation_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* GetLocalShapeRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.GetLocalShapeRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void GetLocalShapeRequest::_slow_set_allocated_computation(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** computation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*computation) == NULL) {
      message_arena->Own(*computation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*computation)) {
      ::xla::ComputationHandle* new_computation = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_computation->CopyFrom(**computation);
      *computation = new_computation;
    }
}
void GetLocalShapeRequest::unsafe_arena_set_allocated_computation(
    ::xla::ComputationHandle* computation) {
  if (GetArenaNoVirtual() == NULL) {
    delete computation_;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetLocalShapeRequest.computation)
}
void GetLocalShapeRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* GetLocalShapeRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* GetLocalShapeRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.GetLocalShapeRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void GetLocalShapeRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void GetLocalShapeRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetLocalShapeRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocalShapeRequest::kComputationFieldNumber;
const int GetLocalShapeRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocalShapeRequest::GetLocalShapeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetLocalShapeRequest)
}
GetLocalShapeRequest::GetLocalShapeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.GetLocalShapeRequest)
}
GetLocalShapeRequest::GetLocalShapeRequest(const GetLocalShapeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetLocalShapeRequest)
}

void GetLocalShapeRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&operand_) -
    reinterpret_cast<char*>(&computation_) + sizeof(operand_));
  _cached_size_ = 0;
}

GetLocalShapeRequest::~GetLocalShapeRequest() {
  // @@protoc_insertion_point(destructor:xla.GetLocalShapeRequest)
  SharedDtor();
}

void GetLocalShapeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void GetLocalShapeRequest::ArenaDtor(void* object) {
  GetLocalShapeRequest* _this = reinterpret_cast< GetLocalShapeRequest* >(object);
  (void)_this;
}
void GetLocalShapeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetLocalShapeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocalShapeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[39].descriptor;
}

const GetLocalShapeRequest& GetLocalShapeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocalShapeRequest* GetLocalShapeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetLocalShapeRequest>(arena);
}

void GetLocalShapeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetLocalShapeRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool GetLocalShapeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetLocalShapeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetLocalShapeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetLocalShapeRequest)
  return false;
#undef DO_
}

void GetLocalShapeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetLocalShapeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetLocalShapeRequest)
}

::google::protobuf::uint8* GetLocalShapeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetLocalShapeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetLocalShapeRequest)
  return target;
}

size_t GetLocalShapeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetLocalShapeRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocalShapeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetLocalShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalShapeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocalShapeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetLocalShapeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetLocalShapeRequest)
    MergeFrom(*source);
  }
}

void GetLocalShapeRequest::MergeFrom(const GetLocalShapeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetLocalShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void GetLocalShapeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetLocalShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalShapeRequest::CopyFrom(const GetLocalShapeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetLocalShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalShapeRequest::IsInitialized() const {
  return true;
}

void GetLocalShapeRequest::Swap(GetLocalShapeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetLocalShapeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetLocalShapeRequest::UnsafeArenaSwap(GetLocalShapeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetLocalShapeRequest::InternalSwap(GetLocalShapeRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocalShapeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocalShapeRequest

// .xla.ComputationHandle computation = 1;
bool GetLocalShapeRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void GetLocalShapeRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& GetLocalShapeRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* GetLocalShapeRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    _slow_mutable_computation();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeRequest.computation)
  return computation_;
}
::xla::ComputationHandle* GetLocalShapeRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeRequest.computation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_computation();
  } else {
    ::xla::ComputationHandle* temp = computation_;
    computation_ = NULL;
    return temp;
  }
}
 void GetLocalShapeRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete computation_;
  }
  if (computation != NULL) {
    _slow_set_allocated_computation(message_arena, &computation);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeRequest.computation)
}

// .xla.ComputationDataHandle operand = 2;
bool GetLocalShapeRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void GetLocalShapeRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& GetLocalShapeRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* GetLocalShapeRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* GetLocalShapeRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void GetLocalShapeRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetLocalShapeResponse::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* GetLocalShapeResponse::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* GetLocalShapeResponse::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.GetLocalShapeResponse.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void GetLocalShapeResponse::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void GetLocalShapeResponse::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetLocalShapeResponse.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocalShapeResponse::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocalShapeResponse::GetLocalShapeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetLocalShapeResponse)
}
GetLocalShapeResponse::GetLocalShapeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.GetLocalShapeResponse)
}
GetLocalShapeResponse::GetLocalShapeResponse(const GetLocalShapeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetLocalShapeResponse)
}

void GetLocalShapeResponse::SharedCtor() {
  shape_ = NULL;
  _cached_size_ = 0;
}

GetLocalShapeResponse::~GetLocalShapeResponse() {
  // @@protoc_insertion_point(destructor:xla.GetLocalShapeResponse)
  SharedDtor();
}

void GetLocalShapeResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void GetLocalShapeResponse::ArenaDtor(void* object) {
  GetLocalShapeResponse* _this = reinterpret_cast< GetLocalShapeResponse* >(object);
  (void)_this;
}
void GetLocalShapeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetLocalShapeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocalShapeResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[40].descriptor;
}

const GetLocalShapeResponse& GetLocalShapeResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocalShapeResponse* GetLocalShapeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetLocalShapeResponse>(arena);
}

void GetLocalShapeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetLocalShapeResponse)
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool GetLocalShapeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetLocalShapeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetLocalShapeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetLocalShapeResponse)
  return false;
#undef DO_
}

void GetLocalShapeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetLocalShapeResponse)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetLocalShapeResponse)
}

::google::protobuf::uint8* GetLocalShapeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetLocalShapeResponse)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetLocalShapeResponse)
  return target;
}

size_t GetLocalShapeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetLocalShapeResponse)
  size_t total_size = 0;

  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocalShapeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetLocalShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalShapeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocalShapeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetLocalShapeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetLocalShapeResponse)
    MergeFrom(*source);
  }
}

void GetLocalShapeResponse::MergeFrom(const GetLocalShapeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetLocalShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
}

void GetLocalShapeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetLocalShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalShapeResponse::CopyFrom(const GetLocalShapeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetLocalShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalShapeResponse::IsInitialized() const {
  return true;
}

void GetLocalShapeResponse::Swap(GetLocalShapeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetLocalShapeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetLocalShapeResponse::UnsafeArenaSwap(GetLocalShapeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetLocalShapeResponse::InternalSwap(GetLocalShapeResponse* other) {
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocalShapeResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocalShapeResponse

// .xla.Shape shape = 1;
bool GetLocalShapeResponse::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void GetLocalShapeResponse::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& GetLocalShapeResponse::shape() const {
  // @@protoc_insertion_point(field_get:xla.GetLocalShapeResponse.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* GetLocalShapeResponse::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.GetLocalShapeResponse.shape)
  return shape_;
}
::xla::Shape* GetLocalShapeResponse::release_shape() {
  // @@protoc_insertion_point(field_release:xla.GetLocalShapeResponse.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void GetLocalShapeResponse::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetLocalShapeResponse.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TraceRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* TraceRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* TraceRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TraceRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void TraceRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void TraceRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TraceRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceRequest::kTagFieldNumber;
const int TraceRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceRequest::TraceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TraceRequest)
}
TraceRequest::TraceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.TraceRequest)
}
TraceRequest::TraceRequest(const TraceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag(),
      GetArenaNoVirtual());
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TraceRequest)
}

void TraceRequest::SharedCtor() {
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operand_ = NULL;
  _cached_size_ = 0;
}

TraceRequest::~TraceRequest() {
  // @@protoc_insertion_point(destructor:xla.TraceRequest)
  SharedDtor();
}

void TraceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  tag_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void TraceRequest::ArenaDtor(void* object) {
  TraceRequest* _this = reinterpret_cast< TraceRequest* >(object);
  (void)_this;
}
void TraceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TraceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[41].descriptor;
}

const TraceRequest& TraceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceRequest* TraceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TraceRequest>(arena);
}

void TraceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TraceRequest)
  tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool TraceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TraceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tag = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.TraceRequest.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TraceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TraceRequest)
  return false;
#undef DO_
}

void TraceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TraceRequest)
  // string tag = 2;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.TraceRequest.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TraceRequest)
}

::google::protobuf::uint8* TraceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TraceRequest)
  // string tag = 2;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.TraceRequest.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TraceRequest)
  return target;
}

size_t TraceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TraceRequest)
  size_t total_size = 0;

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TraceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TraceRequest)
    MergeFrom(*source);
  }
}

void TraceRequest::MergeFrom(const TraceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tag().size() > 0) {
    set_tag(from.tag());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void TraceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceRequest::CopyFrom(const TraceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRequest::IsInitialized() const {
  return true;
}

void TraceRequest::Swap(TraceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TraceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TraceRequest::UnsafeArenaSwap(TraceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TraceRequest::InternalSwap(TraceRequest* other) {
  tag_.Swap(&other->tag_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceRequest

// string tag = 2;
void TraceRequest::clear_tag() {
  tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TraceRequest::tag() const {
  // @@protoc_insertion_point(field_get:xla.TraceRequest.tag)
  return tag_.Get();
}
void TraceRequest::set_tag(const ::std::string& value) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:xla.TraceRequest.tag)
}
void TraceRequest::set_tag(const char* value) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:xla.TraceRequest.tag)
}
void TraceRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:xla.TraceRequest.tag)
}
::std::string* TraceRequest::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:xla.TraceRequest.tag)
  return tag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TraceRequest::release_tag() {
  // @@protoc_insertion_point(field_release:xla.TraceRequest.tag)
  
  return tag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TraceRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TraceRequest.tag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TraceRequest::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:xla.TraceRequest.tag)
}
void TraceRequest::unsafe_arena_set_allocated_tag(
    ::std::string* tag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TraceRequest.tag)
}

// .xla.ComputationDataHandle operand = 3;
bool TraceRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void TraceRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& TraceRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.TraceRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* TraceRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.TraceRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* TraceRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.TraceRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void TraceRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TraceRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ConvertRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* ConvertRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* ConvertRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.ConvertRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ConvertRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void ConvertRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ConvertRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvertRequest::kOperandFieldNumber;
const int ConvertRequest::kNewElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvertRequest::ConvertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ConvertRequest)
}
ConvertRequest::ConvertRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ConvertRequest)
}
ConvertRequest::ConvertRequest(const ConvertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  new_element_type_ = from.new_element_type_;
  // @@protoc_insertion_point(copy_constructor:xla.ConvertRequest)
}

void ConvertRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&new_element_type_) -
    reinterpret_cast<char*>(&operand_) + sizeof(new_element_type_));
  _cached_size_ = 0;
}

ConvertRequest::~ConvertRequest() {
  // @@protoc_insertion_point(destructor:xla.ConvertRequest)
  SharedDtor();
}

void ConvertRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void ConvertRequest::ArenaDtor(void* object) {
  ConvertRequest* _this = reinterpret_cast< ConvertRequest* >(object);
  (void)_this;
}
void ConvertRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConvertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[42].descriptor;
}

const ConvertRequest& ConvertRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvertRequest* ConvertRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConvertRequest>(arena);
}

void ConvertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConvertRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  new_element_type_ = 0;
}

bool ConvertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ConvertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.PrimitiveType new_element_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_new_element_type(static_cast< ::xla::PrimitiveType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ConvertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ConvertRequest)
  return false;
#undef DO_
}

void ConvertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ConvertRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.PrimitiveType new_element_type = 3;
  if (this->new_element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_element_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ConvertRequest)
}

::google::protobuf::uint8* ConvertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConvertRequest)
  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.PrimitiveType new_element_type = 3;
  if (this->new_element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_element_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ConvertRequest)
  return target;
}

size_t ConvertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConvertRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.PrimitiveType new_element_type = 3;
  if (this->new_element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_element_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ConvertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ConvertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ConvertRequest)
    MergeFrom(*source);
  }
}

void ConvertRequest::MergeFrom(const ConvertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ConvertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.new_element_type() != 0) {
    set_new_element_type(from.new_element_type());
  }
}

void ConvertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ConvertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertRequest::CopyFrom(const ConvertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConvertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertRequest::IsInitialized() const {
  return true;
}

void ConvertRequest::Swap(ConvertRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConvertRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConvertRequest::UnsafeArenaSwap(ConvertRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConvertRequest::InternalSwap(ConvertRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(new_element_type_, other->new_element_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvertRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvertRequest

// .xla.ComputationDataHandle operand = 2;
bool ConvertRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ConvertRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ConvertRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ConvertRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ConvertRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.ConvertRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ConvertRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ConvertRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void ConvertRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ConvertRequest.operand)
}

// .xla.PrimitiveType new_element_type = 3;
void ConvertRequest::clear_new_element_type() {
  new_element_type_ = 0;
}
::xla::PrimitiveType ConvertRequest::new_element_type() const {
  // @@protoc_insertion_point(field_get:xla.ConvertRequest.new_element_type)
  return static_cast< ::xla::PrimitiveType >(new_element_type_);
}
void ConvertRequest::set_new_element_type(::xla::PrimitiveType value) {
  
  new_element_type_ = value;
  // @@protoc_insertion_point(field_set:xla.ConvertRequest.new_element_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatenateRequest::kOperandsFieldNumber;
const int ConcatenateRequest::kDimensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatenateRequest::ConcatenateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ConcatenateRequest)
}
ConcatenateRequest::ConcatenateRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operands_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ConcatenateRequest)
}
ConcatenateRequest::ConcatenateRequest(const ConcatenateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operands_(from.operands_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimension_ = from.dimension_;
  // @@protoc_insertion_point(copy_constructor:xla.ConcatenateRequest)
}

void ConcatenateRequest::SharedCtor() {
  dimension_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ConcatenateRequest::~ConcatenateRequest() {
  // @@protoc_insertion_point(destructor:xla.ConcatenateRequest)
  SharedDtor();
}

void ConcatenateRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ConcatenateRequest::ArenaDtor(void* object) {
  ConcatenateRequest* _this = reinterpret_cast< ConcatenateRequest* >(object);
  (void)_this;
}
void ConcatenateRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConcatenateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatenateRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[43].descriptor;
}

const ConcatenateRequest& ConcatenateRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConcatenateRequest* ConcatenateRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConcatenateRequest>(arena);
}

void ConcatenateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ConcatenateRequest)
  operands_.Clear();
  dimension_ = GOOGLE_LONGLONG(0);
}

bool ConcatenateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ConcatenateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.ComputationDataHandle operands = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 dimension = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ConcatenateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ConcatenateRequest)
  return false;
#undef DO_
}

void ConcatenateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ConcatenateRequest)
  // repeated .xla.ComputationDataHandle operands = 2;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operands(i), output);
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dimension(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ConcatenateRequest)
}

::google::protobuf::uint8* ConcatenateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ConcatenateRequest)
  // repeated .xla.ComputationDataHandle operands = 2;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->operands(i), false, target);
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dimension(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ConcatenateRequest)
  return target;
}

size_t ConcatenateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ConcatenateRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle operands = 2;
  {
    unsigned int count = this->operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operands(i));
    }
  }

  // int64 dimension = 3;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dimension());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatenateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ConcatenateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatenateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatenateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ConcatenateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ConcatenateRequest)
    MergeFrom(*source);
  }
}

void ConcatenateRequest::MergeFrom(const ConcatenateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ConcatenateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operands_.MergeFrom(from.operands_);
  if (from.dimension() != 0) {
    set_dimension(from.dimension());
  }
}

void ConcatenateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ConcatenateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatenateRequest::CopyFrom(const ConcatenateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ConcatenateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatenateRequest::IsInitialized() const {
  return true;
}

void ConcatenateRequest::Swap(ConcatenateRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConcatenateRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConcatenateRequest::UnsafeArenaSwap(ConcatenateRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConcatenateRequest::InternalSwap(ConcatenateRequest* other) {
  operands_.UnsafeArenaSwap(&other->operands_);
  std::swap(dimension_, other->dimension_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatenateRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatenateRequest

// repeated .xla.ComputationDataHandle operands = 2;
int ConcatenateRequest::operands_size() const {
  return operands_.size();
}
void ConcatenateRequest::clear_operands() {
  operands_.Clear();
}
const ::xla::ComputationDataHandle& ConcatenateRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.ConcatenateRequest.operands)
  return operands_.Get(index);
}
::xla::ComputationDataHandle* ConcatenateRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ConcatenateRequest.operands)
  return operands_.Mutable(index);
}
::xla::ComputationDataHandle* ConcatenateRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.ConcatenateRequest.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
ConcatenateRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.ConcatenateRequest.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
ConcatenateRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.ConcatenateRequest.operands)
  return operands_;
}

// int64 dimension = 3;
void ConcatenateRequest::clear_dimension() {
  dimension_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConcatenateRequest::dimension() const {
  // @@protoc_insertion_point(field_get:xla.ConcatenateRequest.dimension)
  return dimension_;
}
void ConcatenateRequest::set_dimension(::google::protobuf::int64 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:xla.ConcatenateRequest.dimension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void WhileRequest::_slow_mutable_condition() {
  condition_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* WhileRequest::_slow_release_condition() {
  if (condition_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*condition_);
    condition_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* WhileRequest::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.WhileRequest.condition)
  
  ::xla::ComputationHandle* temp = condition_;
  condition_ = NULL;
  return temp;
}
void WhileRequest::_slow_set_allocated_condition(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** condition) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*condition) == NULL) {
      message_arena->Own(*condition);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*condition)) {
      ::xla::ComputationHandle* new_condition = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_condition->CopyFrom(**condition);
      *condition = new_condition;
    }
}
void WhileRequest::unsafe_arena_set_allocated_condition(
    ::xla::ComputationHandle* condition) {
  if (GetArenaNoVirtual() == NULL) {
    delete condition_;
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WhileRequest.condition)
}
void WhileRequest::_slow_mutable_body() {
  body_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* WhileRequest::_slow_release_body() {
  if (body_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*body_);
    body_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* WhileRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.WhileRequest.body)
  
  ::xla::ComputationHandle* temp = body_;
  body_ = NULL;
  return temp;
}
void WhileRequest::_slow_set_allocated_body(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** body) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*body) == NULL) {
      message_arena->Own(*body);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*body)) {
      ::xla::ComputationHandle* new_body = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_body->CopyFrom(**body);
      *body = new_body;
    }
}
void WhileRequest::unsafe_arena_set_allocated_body(
    ::xla::ComputationHandle* body) {
  if (GetArenaNoVirtual() == NULL) {
    delete body_;
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WhileRequest.body)
}
void WhileRequest::_slow_mutable_init() {
  init_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* WhileRequest::_slow_release_init() {
  if (init_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*init_);
    init_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* WhileRequest::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.WhileRequest.init)
  
  ::xla::ComputationDataHandle* temp = init_;
  init_ = NULL;
  return temp;
}
void WhileRequest::_slow_set_allocated_init(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** init) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*init) == NULL) {
      message_arena->Own(*init);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*init)) {
      ::xla::ComputationDataHandle* new_init = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_init->CopyFrom(**init);
      *init = new_init;
    }
}
void WhileRequest::unsafe_arena_set_allocated_init(
    ::xla::ComputationDataHandle* init) {
  if (GetArenaNoVirtual() == NULL) {
    delete init_;
  }
  init_ = init;
  if (init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WhileRequest.init)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhileRequest::kConditionFieldNumber;
const int WhileRequest::kBodyFieldNumber;
const int WhileRequest::kInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhileRequest::WhileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.WhileRequest)
}
WhileRequest::WhileRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.WhileRequest)
}
WhileRequest::WhileRequest(const WhileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::xla::ComputationHandle(*from.condition_);
  } else {
    condition_ = NULL;
  }
  if (from.has_body()) {
    body_ = new ::xla::ComputationHandle(*from.body_);
  } else {
    body_ = NULL;
  }
  if (from.has_init()) {
    init_ = new ::xla::ComputationDataHandle(*from.init_);
  } else {
    init_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.WhileRequest)
}

void WhileRequest::SharedCtor() {
  ::memset(&condition_, 0, reinterpret_cast<char*>(&init_) -
    reinterpret_cast<char*>(&condition_) + sizeof(init_));
  _cached_size_ = 0;
}

WhileRequest::~WhileRequest() {
  // @@protoc_insertion_point(destructor:xla.WhileRequest)
  SharedDtor();
}

void WhileRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete condition_;
  }
  if (this != internal_default_instance()) {
    delete body_;
  }
  if (this != internal_default_instance()) {
    delete init_;
  }
}

void WhileRequest::ArenaDtor(void* object) {
  WhileRequest* _this = reinterpret_cast< WhileRequest* >(object);
  (void)_this;
}
void WhileRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WhileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhileRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[44].descriptor;
}

const WhileRequest& WhileRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhileRequest* WhileRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WhileRequest>(arena);
}

void WhileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WhileRequest)
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_ != NULL) {
    delete init_;
  }
  init_ = NULL;
}

bool WhileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.WhileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle condition = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle body = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle init = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.WhileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.WhileRequest)
  return false;
#undef DO_
}

void WhileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.WhileRequest)
  // .xla.ComputationHandle condition = 2;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->condition_, output);
  }

  // .xla.ComputationHandle body = 3;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->body_, output);
  }

  // .xla.ComputationDataHandle init = 4;
  if (this->has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->init_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.WhileRequest)
}

::google::protobuf::uint8* WhileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.WhileRequest)
  // .xla.ComputationHandle condition = 2;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->condition_, false, target);
  }

  // .xla.ComputationHandle body = 3;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->body_, false, target);
  }

  // .xla.ComputationDataHandle init = 4;
  if (this->has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->init_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.WhileRequest)
  return target;
}

size_t WhileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WhileRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle condition = 2;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->condition_);
  }

  // .xla.ComputationHandle body = 3;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  // .xla.ComputationDataHandle init = 4;
  if (this->has_init()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.WhileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WhileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.WhileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.WhileRequest)
    MergeFrom(*source);
  }
}

void WhileRequest::MergeFrom(const WhileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.WhileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    mutable_condition()->::xla::ComputationHandle::MergeFrom(from.condition());
  }
  if (from.has_body()) {
    mutable_body()->::xla::ComputationHandle::MergeFrom(from.body());
  }
  if (from.has_init()) {
    mutable_init()->::xla::ComputationDataHandle::MergeFrom(from.init());
  }
}

void WhileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.WhileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhileRequest::CopyFrom(const WhileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WhileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileRequest::IsInitialized() const {
  return true;
}

void WhileRequest::Swap(WhileRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WhileRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WhileRequest::UnsafeArenaSwap(WhileRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WhileRequest::InternalSwap(WhileRequest* other) {
  std::swap(condition_, other->condition_);
  std::swap(body_, other->body_);
  std::swap(init_, other->init_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhileRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhileRequest

// .xla.ComputationHandle condition = 2;
bool WhileRequest::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
void WhileRequest::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}
const ::xla::ComputationHandle& WhileRequest::condition() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.condition)
  return condition_ != NULL ? *condition_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* WhileRequest::mutable_condition() {
  
  if (condition_ == NULL) {
    _slow_mutable_condition();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.condition)
  return condition_;
}
::xla::ComputationHandle* WhileRequest::release_condition() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.condition)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_condition();
  } else {
    ::xla::ComputationHandle* temp = condition_;
    condition_ = NULL;
    return temp;
  }
}
 void WhileRequest::set_allocated_condition(::xla::ComputationHandle* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition != NULL) {
    _slow_set_allocated_condition(message_arena, &condition);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.condition)
}

// .xla.ComputationHandle body = 3;
bool WhileRequest::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
void WhileRequest::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
const ::xla::ComputationHandle& WhileRequest::body() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.body)
  return body_ != NULL ? *body_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* WhileRequest::mutable_body() {
  
  if (body_ == NULL) {
    _slow_mutable_body();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.body)
  return body_;
}
::xla::ComputationHandle* WhileRequest::release_body() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.body)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_body();
  } else {
    ::xla::ComputationHandle* temp = body_;
    body_ = NULL;
    return temp;
  }
}
 void WhileRequest::set_allocated_body(::xla::ComputationHandle* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body != NULL) {
    _slow_set_allocated_body(message_arena, &body);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.body)
}

// .xla.ComputationDataHandle init = 4;
bool WhileRequest::has_init() const {
  return this != internal_default_instance() && init_ != NULL;
}
void WhileRequest::clear_init() {
  if (GetArenaNoVirtual() == NULL && init_ != NULL) delete init_;
  init_ = NULL;
}
const ::xla::ComputationDataHandle& WhileRequest::init() const {
  // @@protoc_insertion_point(field_get:xla.WhileRequest.init)
  return init_ != NULL ? *init_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* WhileRequest::mutable_init() {
  
  if (init_ == NULL) {
    _slow_mutable_init();
  }
  // @@protoc_insertion_point(field_mutable:xla.WhileRequest.init)
  return init_;
}
::xla::ComputationDataHandle* WhileRequest::release_init() {
  // @@protoc_insertion_point(field_release:xla.WhileRequest.init)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_init();
  } else {
    ::xla::ComputationDataHandle* temp = init_;
    init_ = NULL;
    return temp;
  }
}
 void WhileRequest::set_allocated_init(::xla::ComputationDataHandle* init) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_;
  }
  if (init != NULL) {
    _slow_set_allocated_init(message_arena, &init);
  }
  init_ = init;
  if (init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WhileRequest.init)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UnaryOpRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* UnaryOpRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* UnaryOpRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.UnaryOpRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void UnaryOpRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void UnaryOpRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.UnaryOpRequest.operand)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnaryOpRequest::kUnopFieldNumber;
const int UnaryOpRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnaryOpRequest::UnaryOpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.UnaryOpRequest)
}
UnaryOpRequest::UnaryOpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.UnaryOpRequest)
}
UnaryOpRequest::UnaryOpRequest(const UnaryOpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  unop_ = from.unop_;
  // @@protoc_insertion_point(copy_constructor:xla.UnaryOpRequest)
}

void UnaryOpRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&unop_) -
    reinterpret_cast<char*>(&operand_) + sizeof(unop_));
  _cached_size_ = 0;
}

UnaryOpRequest::~UnaryOpRequest() {
  // @@protoc_insertion_point(destructor:xla.UnaryOpRequest)
  SharedDtor();
}

void UnaryOpRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void UnaryOpRequest::ArenaDtor(void* object) {
  UnaryOpRequest* _this = reinterpret_cast< UnaryOpRequest* >(object);
  (void)_this;
}
void UnaryOpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UnaryOpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnaryOpRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[45].descriptor;
}

const UnaryOpRequest& UnaryOpRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnaryOpRequest* UnaryOpRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UnaryOpRequest>(arena);
}

void UnaryOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.UnaryOpRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  unop_ = 0;
}

bool UnaryOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.UnaryOpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.UnaryOperation unop = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unop(static_cast< ::xla::UnaryOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.UnaryOpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.UnaryOpRequest)
  return false;
#undef DO_
}

void UnaryOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.UnaryOpRequest)
  // .xla.UnaryOperation unop = 2;
  if (this->unop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unop(), output);
  }

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.UnaryOpRequest)
}

::google::protobuf::uint8* UnaryOpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.UnaryOpRequest)
  // .xla.UnaryOperation unop = 2;
  if (this->unop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unop(), target);
  }

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.UnaryOpRequest)
  return target;
}

size_t UnaryOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.UnaryOpRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 3;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.UnaryOperation unop = 2;
  if (this->unop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnaryOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.UnaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryOpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnaryOpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.UnaryOpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.UnaryOpRequest)
    MergeFrom(*source);
  }
}

void UnaryOpRequest::MergeFrom(const UnaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.UnaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.unop() != 0) {
    set_unop(from.unop());
  }
}

void UnaryOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.UnaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryOpRequest::CopyFrom(const UnaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.UnaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryOpRequest::IsInitialized() const {
  return true;
}

void UnaryOpRequest::Swap(UnaryOpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UnaryOpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UnaryOpRequest::UnsafeArenaSwap(UnaryOpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UnaryOpRequest::InternalSwap(UnaryOpRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(unop_, other->unop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnaryOpRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnaryOpRequest

// .xla.UnaryOperation unop = 2;
void UnaryOpRequest::clear_unop() {
  unop_ = 0;
}
::xla::UnaryOperation UnaryOpRequest::unop() const {
  // @@protoc_insertion_point(field_get:xla.UnaryOpRequest.unop)
  return static_cast< ::xla::UnaryOperation >(unop_);
}
void UnaryOpRequest::set_unop(::xla::UnaryOperation value) {
  
  unop_ = value;
  // @@protoc_insertion_point(field_set:xla.UnaryOpRequest.unop)
}

// .xla.ComputationDataHandle operand = 3;
bool UnaryOpRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void UnaryOpRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& UnaryOpRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.UnaryOpRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* UnaryOpRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.UnaryOpRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* UnaryOpRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.UnaryOpRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void UnaryOpRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.UnaryOpRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BinaryOpRequest::_slow_mutable_lhs() {
  lhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* BinaryOpRequest::_slow_release_lhs() {
  if (lhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*lhs_);
    lhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* BinaryOpRequest::unsafe_arena_release_lhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.BinaryOpRequest.lhs)
  
  ::xla::ComputationDataHandle* temp = lhs_;
  lhs_ = NULL;
  return temp;
}
void BinaryOpRequest::_slow_set_allocated_lhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lhs) == NULL) {
      message_arena->Own(*lhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lhs)) {
      ::xla::ComputationDataHandle* new_lhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_lhs->CopyFrom(**lhs);
      *lhs = new_lhs;
    }
}
void BinaryOpRequest::unsafe_arena_set_allocated_lhs(
    ::xla::ComputationDataHandle* lhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete lhs_;
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.BinaryOpRequest.lhs)
}
void BinaryOpRequest::_slow_mutable_rhs() {
  rhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* BinaryOpRequest::_slow_release_rhs() {
  if (rhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*rhs_);
    rhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* BinaryOpRequest::unsafe_arena_release_rhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.BinaryOpRequest.rhs)
  
  ::xla::ComputationDataHandle* temp = rhs_;
  rhs_ = NULL;
  return temp;
}
void BinaryOpRequest::_slow_set_allocated_rhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rhs) == NULL) {
      message_arena->Own(*rhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rhs)) {
      ::xla::ComputationDataHandle* new_rhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_rhs->CopyFrom(**rhs);
      *rhs = new_rhs;
    }
}
void BinaryOpRequest::unsafe_arena_set_allocated_rhs(
    ::xla::ComputationDataHandle* rhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete rhs_;
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.BinaryOpRequest.rhs)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryOpRequest::kBinopFieldNumber;
const int BinaryOpRequest::kLhsFieldNumber;
const int BinaryOpRequest::kRhsFieldNumber;
const int BinaryOpRequest::kBroadcastDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryOpRequest::BinaryOpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.BinaryOpRequest)
}
BinaryOpRequest::BinaryOpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  broadcast_dimensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.BinaryOpRequest)
}
BinaryOpRequest::BinaryOpRequest(const BinaryOpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      broadcast_dimensions_(from.broadcast_dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lhs()) {
    lhs_ = new ::xla::ComputationDataHandle(*from.lhs_);
  } else {
    lhs_ = NULL;
  }
  if (from.has_rhs()) {
    rhs_ = new ::xla::ComputationDataHandle(*from.rhs_);
  } else {
    rhs_ = NULL;
  }
  binop_ = from.binop_;
  // @@protoc_insertion_point(copy_constructor:xla.BinaryOpRequest)
}

void BinaryOpRequest::SharedCtor() {
  ::memset(&lhs_, 0, reinterpret_cast<char*>(&binop_) -
    reinterpret_cast<char*>(&lhs_) + sizeof(binop_));
  _cached_size_ = 0;
}

BinaryOpRequest::~BinaryOpRequest() {
  // @@protoc_insertion_point(destructor:xla.BinaryOpRequest)
  SharedDtor();
}

void BinaryOpRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete lhs_;
  }
  if (this != internal_default_instance()) {
    delete rhs_;
  }
}

void BinaryOpRequest::ArenaDtor(void* object) {
  BinaryOpRequest* _this = reinterpret_cast< BinaryOpRequest* >(object);
  (void)_this;
}
void BinaryOpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BinaryOpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryOpRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[46].descriptor;
}

const BinaryOpRequest& BinaryOpRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

BinaryOpRequest* BinaryOpRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BinaryOpRequest>(arena);
}

void BinaryOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.BinaryOpRequest)
  broadcast_dimensions_.Clear();
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) {
    delete lhs_;
  }
  lhs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) {
    delete rhs_;
  }
  rhs_ = NULL;
  binop_ = 0;
}

bool BinaryOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.BinaryOpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.BinaryOperation binop = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_binop(static_cast< ::xla::BinaryOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle lhs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle rhs = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 broadcast_dimensions = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_broadcast_dimensions())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_broadcast_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.BinaryOpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.BinaryOpRequest)
  return false;
#undef DO_
}

void BinaryOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.BinaryOpRequest)
  // .xla.BinaryOperation binop = 2;
  if (this->binop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->binop(), output);
  }

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lhs_, output);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rhs_, output);
  }

  // repeated int64 broadcast_dimensions = 5;
  if (this->broadcast_dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_broadcast_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->broadcast_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->broadcast_dimensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.BinaryOpRequest)
}

::google::protobuf::uint8* BinaryOpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.BinaryOpRequest)
  // .xla.BinaryOperation binop = 2;
  if (this->binop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->binop(), target);
  }

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lhs_, false, target);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rhs_, false, target);
  }

  // repeated int64 broadcast_dimensions = 5;
  if (this->broadcast_dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _broadcast_dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->broadcast_dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->broadcast_dimensions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.BinaryOpRequest)
  return target;
}

size_t BinaryOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.BinaryOpRequest)
  size_t total_size = 0;

  // repeated int64 broadcast_dimensions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->broadcast_dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _broadcast_dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lhs_);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rhs_);
  }

  // .xla.BinaryOperation binop = 2;
  if (this->binop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->binop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.BinaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryOpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinaryOpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.BinaryOpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.BinaryOpRequest)
    MergeFrom(*source);
  }
}

void BinaryOpRequest::MergeFrom(const BinaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.BinaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_dimensions_.MergeFrom(from.broadcast_dimensions_);
  if (from.has_lhs()) {
    mutable_lhs()->::xla::ComputationDataHandle::MergeFrom(from.lhs());
  }
  if (from.has_rhs()) {
    mutable_rhs()->::xla::ComputationDataHandle::MergeFrom(from.rhs());
  }
  if (from.binop() != 0) {
    set_binop(from.binop());
  }
}

void BinaryOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.BinaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryOpRequest::CopyFrom(const BinaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.BinaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOpRequest::IsInitialized() const {
  return true;
}

void BinaryOpRequest::Swap(BinaryOpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BinaryOpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BinaryOpRequest::UnsafeArenaSwap(BinaryOpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BinaryOpRequest::InternalSwap(BinaryOpRequest* other) {
  broadcast_dimensions_.UnsafeArenaSwap(&other->broadcast_dimensions_);
  std::swap(lhs_, other->lhs_);
  std::swap(rhs_, other->rhs_);
  std::swap(binop_, other->binop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinaryOpRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinaryOpRequest

// .xla.BinaryOperation binop = 2;
void BinaryOpRequest::clear_binop() {
  binop_ = 0;
}
::xla::BinaryOperation BinaryOpRequest::binop() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.binop)
  return static_cast< ::xla::BinaryOperation >(binop_);
}
void BinaryOpRequest::set_binop(::xla::BinaryOperation value) {
  
  binop_ = value;
  // @@protoc_insertion_point(field_set:xla.BinaryOpRequest.binop)
}

// .xla.ComputationDataHandle lhs = 3;
bool BinaryOpRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
void BinaryOpRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
const ::xla::ComputationDataHandle& BinaryOpRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* BinaryOpRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.BinaryOpRequest.lhs)
  return lhs_;
}
::xla::ComputationDataHandle* BinaryOpRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.BinaryOpRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
 void BinaryOpRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BinaryOpRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 4;
bool BinaryOpRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
void BinaryOpRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
const ::xla::ComputationDataHandle& BinaryOpRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* BinaryOpRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.BinaryOpRequest.rhs)
  return rhs_;
}
::xla::ComputationDataHandle* BinaryOpRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.BinaryOpRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
 void BinaryOpRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.BinaryOpRequest.rhs)
}

// repeated int64 broadcast_dimensions = 5;
int BinaryOpRequest::broadcast_dimensions_size() const {
  return broadcast_dimensions_.size();
}
void BinaryOpRequest::clear_broadcast_dimensions() {
  broadcast_dimensions_.Clear();
}
::google::protobuf::int64 BinaryOpRequest::broadcast_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:xla.BinaryOpRequest.broadcast_dimensions)
  return broadcast_dimensions_.Get(index);
}
void BinaryOpRequest::set_broadcast_dimensions(int index, ::google::protobuf::int64 value) {
  broadcast_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.BinaryOpRequest.broadcast_dimensions)
}
void BinaryOpRequest::add_broadcast_dimensions(::google::protobuf::int64 value) {
  broadcast_dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.BinaryOpRequest.broadcast_dimensions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BinaryOpRequest::broadcast_dimensions() const {
  // @@protoc_insertion_point(field_list:xla.BinaryOpRequest.broadcast_dimensions)
  return broadcast_dimensions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BinaryOpRequest::mutable_broadcast_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:xla.BinaryOpRequest.broadcast_dimensions)
  return &broadcast_dimensions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RngRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* RngRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* RngRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.RngRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void RngRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void RngRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.RngRequest.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RngRequest::kDistributionFieldNumber;
const int RngRequest::kParameterFieldNumber;
const int RngRequest::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RngRequest::RngRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.RngRequest)
}
RngRequest::RngRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parameter_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.RngRequest)
}
RngRequest::RngRequest(const RngRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parameter_(from.parameter_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  distribution_ = from.distribution_;
  // @@protoc_insertion_point(copy_constructor:xla.RngRequest)
}

void RngRequest::SharedCtor() {
  ::memset(&shape_, 0, reinterpret_cast<char*>(&distribution_) -
    reinterpret_cast<char*>(&shape_) + sizeof(distribution_));
  _cached_size_ = 0;
}

RngRequest::~RngRequest() {
  // @@protoc_insertion_point(destructor:xla.RngRequest)
  SharedDtor();
}

void RngRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void RngRequest::ArenaDtor(void* object) {
  RngRequest* _this = reinterpret_cast< RngRequest* >(object);
  (void)_this;
}
void RngRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RngRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RngRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[47].descriptor;
}

const RngRequest& RngRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RngRequest* RngRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RngRequest>(arena);
}

void RngRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.RngRequest)
  parameter_.Clear();
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  distribution_ = 0;
}

bool RngRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.RngRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.RandomDistribution distribution = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_distribution(static_cast< ::xla::RandomDistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.ComputationDataHandle parameter = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_parameter()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.Shape shape = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.RngRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.RngRequest)
  return false;
#undef DO_
}

void RngRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.RngRequest)
  // .xla.RandomDistribution distribution = 2;
  if (this->distribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->distribution(), output);
  }

  // repeated .xla.ComputationDataHandle parameter = 3;
  for (unsigned int i = 0, n = this->parameter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameter(i), output);
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.RngRequest)
}

::google::protobuf::uint8* RngRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.RngRequest)
  // .xla.RandomDistribution distribution = 2;
  if (this->distribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->distribution(), target);
  }

  // repeated .xla.ComputationDataHandle parameter = 3;
  for (unsigned int i = 0, n = this->parameter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->parameter(i), false, target);
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.RngRequest)
  return target;
}

size_t RngRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.RngRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle parameter = 3;
  {
    unsigned int count = this->parameter_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameter(i));
    }
  }

  // .xla.Shape shape = 4;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // .xla.RandomDistribution distribution = 2;
  if (this->distribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->distribution());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RngRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.RngRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RngRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RngRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.RngRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.RngRequest)
    MergeFrom(*source);
  }
}

void RngRequest::MergeFrom(const RngRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.RngRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameter_.MergeFrom(from.parameter_);
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
  if (from.distribution() != 0) {
    set_distribution(from.distribution());
  }
}

void RngRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.RngRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RngRequest::CopyFrom(const RngRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.RngRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RngRequest::IsInitialized() const {
  return true;
}

void RngRequest::Swap(RngRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RngRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RngRequest::UnsafeArenaSwap(RngRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RngRequest::InternalSwap(RngRequest* other) {
  parameter_.UnsafeArenaSwap(&other->parameter_);
  std::swap(shape_, other->shape_);
  std::swap(distribution_, other->distribution_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RngRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RngRequest

// .xla.RandomDistribution distribution = 2;
void RngRequest::clear_distribution() {
  distribution_ = 0;
}
::xla::RandomDistribution RngRequest::distribution() const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.distribution)
  return static_cast< ::xla::RandomDistribution >(distribution_);
}
void RngRequest::set_distribution(::xla::RandomDistribution value) {
  
  distribution_ = value;
  // @@protoc_insertion_point(field_set:xla.RngRequest.distribution)
}

// repeated .xla.ComputationDataHandle parameter = 3;
int RngRequest::parameter_size() const {
  return parameter_.size();
}
void RngRequest::clear_parameter() {
  parameter_.Clear();
}
const ::xla::ComputationDataHandle& RngRequest::parameter(int index) const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.parameter)
  return parameter_.Get(index);
}
::xla::ComputationDataHandle* RngRequest::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:xla.RngRequest.parameter)
  return parameter_.Mutable(index);
}
::xla::ComputationDataHandle* RngRequest::add_parameter() {
  // @@protoc_insertion_point(field_add:xla.RngRequest.parameter)
  return parameter_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
RngRequest::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:xla.RngRequest.parameter)
  return &parameter_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
RngRequest::parameter() const {
  // @@protoc_insertion_point(field_list:xla.RngRequest.parameter)
  return parameter_;
}

// .xla.Shape shape = 4;
bool RngRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void RngRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& RngRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.RngRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* RngRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.RngRequest.shape)
  return shape_;
}
::xla::Shape* RngRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.RngRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void RngRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RngRequest.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TernaryOpRequest::_slow_mutable_lhs() {
  lhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* TernaryOpRequest::_slow_release_lhs() {
  if (lhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*lhs_);
    lhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* TernaryOpRequest::unsafe_arena_release_lhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TernaryOpRequest.lhs)
  
  ::xla::ComputationDataHandle* temp = lhs_;
  lhs_ = NULL;
  return temp;
}
void TernaryOpRequest::_slow_set_allocated_lhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** lhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lhs) == NULL) {
      message_arena->Own(*lhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lhs)) {
      ::xla::ComputationDataHandle* new_lhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_lhs->CopyFrom(**lhs);
      *lhs = new_lhs;
    }
}
void TernaryOpRequest::unsafe_arena_set_allocated_lhs(
    ::xla::ComputationDataHandle* lhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete lhs_;
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TernaryOpRequest.lhs)
}
void TernaryOpRequest::_slow_mutable_rhs() {
  rhs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* TernaryOpRequest::_slow_release_rhs() {
  if (rhs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*rhs_);
    rhs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* TernaryOpRequest::unsafe_arena_release_rhs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TernaryOpRequest.rhs)
  
  ::xla::ComputationDataHandle* temp = rhs_;
  rhs_ = NULL;
  return temp;
}
void TernaryOpRequest::_slow_set_allocated_rhs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** rhs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rhs) == NULL) {
      message_arena->Own(*rhs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rhs)) {
      ::xla::ComputationDataHandle* new_rhs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_rhs->CopyFrom(**rhs);
      *rhs = new_rhs;
    }
}
void TernaryOpRequest::unsafe_arena_set_allocated_rhs(
    ::xla::ComputationDataHandle* rhs) {
  if (GetArenaNoVirtual() == NULL) {
    delete rhs_;
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TernaryOpRequest.rhs)
}
void TernaryOpRequest::_slow_mutable_ehs() {
  ehs_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* TernaryOpRequest::_slow_release_ehs() {
  if (ehs_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*ehs_);
    ehs_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* TernaryOpRequest::unsafe_arena_release_ehs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.TernaryOpRequest.ehs)
  
  ::xla::ComputationDataHandle* temp = ehs_;
  ehs_ = NULL;
  return temp;
}
void TernaryOpRequest::_slow_set_allocated_ehs(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** ehs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ehs) == NULL) {
      message_arena->Own(*ehs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ehs)) {
      ::xla::ComputationDataHandle* new_ehs = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_ehs->CopyFrom(**ehs);
      *ehs = new_ehs;
    }
}
void TernaryOpRequest::unsafe_arena_set_allocated_ehs(
    ::xla::ComputationDataHandle* ehs) {
  if (GetArenaNoVirtual() == NULL) {
    delete ehs_;
  }
  ehs_ = ehs;
  if (ehs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TernaryOpRequest.ehs)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TernaryOpRequest::kTriopFieldNumber;
const int TernaryOpRequest::kLhsFieldNumber;
const int TernaryOpRequest::kRhsFieldNumber;
const int TernaryOpRequest::kEhsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TernaryOpRequest::TernaryOpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TernaryOpRequest)
}
TernaryOpRequest::TernaryOpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.TernaryOpRequest)
}
TernaryOpRequest::TernaryOpRequest(const TernaryOpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lhs()) {
    lhs_ = new ::xla::ComputationDataHandle(*from.lhs_);
  } else {
    lhs_ = NULL;
  }
  if (from.has_rhs()) {
    rhs_ = new ::xla::ComputationDataHandle(*from.rhs_);
  } else {
    rhs_ = NULL;
  }
  if (from.has_ehs()) {
    ehs_ = new ::xla::ComputationDataHandle(*from.ehs_);
  } else {
    ehs_ = NULL;
  }
  triop_ = from.triop_;
  // @@protoc_insertion_point(copy_constructor:xla.TernaryOpRequest)
}

void TernaryOpRequest::SharedCtor() {
  ::memset(&lhs_, 0, reinterpret_cast<char*>(&triop_) -
    reinterpret_cast<char*>(&lhs_) + sizeof(triop_));
  _cached_size_ = 0;
}

TernaryOpRequest::~TernaryOpRequest() {
  // @@protoc_insertion_point(destructor:xla.TernaryOpRequest)
  SharedDtor();
}

void TernaryOpRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete lhs_;
  }
  if (this != internal_default_instance()) {
    delete rhs_;
  }
  if (this != internal_default_instance()) {
    delete ehs_;
  }
}

void TernaryOpRequest::ArenaDtor(void* object) {
  TernaryOpRequest* _this = reinterpret_cast< TernaryOpRequest* >(object);
  (void)_this;
}
void TernaryOpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TernaryOpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TernaryOpRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[48].descriptor;
}

const TernaryOpRequest& TernaryOpRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TernaryOpRequest* TernaryOpRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TernaryOpRequest>(arena);
}

void TernaryOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TernaryOpRequest)
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) {
    delete lhs_;
  }
  lhs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) {
    delete rhs_;
  }
  rhs_ = NULL;
  if (GetArenaNoVirtual() == NULL && ehs_ != NULL) {
    delete ehs_;
  }
  ehs_ = NULL;
  triop_ = 0;
}

bool TernaryOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TernaryOpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.TernaryOperation triop = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_triop(static_cast< ::xla::TernaryOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle lhs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle rhs = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rhs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle ehs = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ehs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TernaryOpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TernaryOpRequest)
  return false;
#undef DO_
}

void TernaryOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TernaryOpRequest)
  // .xla.TernaryOperation triop = 2;
  if (this->triop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->triop(), output);
  }

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lhs_, output);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rhs_, output);
  }

  // .xla.ComputationDataHandle ehs = 5;
  if (this->has_ehs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ehs_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TernaryOpRequest)
}

::google::protobuf::uint8* TernaryOpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TernaryOpRequest)
  // .xla.TernaryOperation triop = 2;
  if (this->triop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->triop(), target);
  }

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lhs_, false, target);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rhs_, false, target);
  }

  // .xla.ComputationDataHandle ehs = 5;
  if (this->has_ehs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ehs_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TernaryOpRequest)
  return target;
}

size_t TernaryOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TernaryOpRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle lhs = 3;
  if (this->has_lhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lhs_);
  }

  // .xla.ComputationDataHandle rhs = 4;
  if (this->has_rhs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rhs_);
  }

  // .xla.ComputationDataHandle ehs = 5;
  if (this->has_ehs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ehs_);
  }

  // .xla.TernaryOperation triop = 2;
  if (this->triop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->triop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TernaryOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TernaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TernaryOpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TernaryOpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TernaryOpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TernaryOpRequest)
    MergeFrom(*source);
  }
}

void TernaryOpRequest::MergeFrom(const TernaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TernaryOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lhs()) {
    mutable_lhs()->::xla::ComputationDataHandle::MergeFrom(from.lhs());
  }
  if (from.has_rhs()) {
    mutable_rhs()->::xla::ComputationDataHandle::MergeFrom(from.rhs());
  }
  if (from.has_ehs()) {
    mutable_ehs()->::xla::ComputationDataHandle::MergeFrom(from.ehs());
  }
  if (from.triop() != 0) {
    set_triop(from.triop());
  }
}

void TernaryOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TernaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TernaryOpRequest::CopyFrom(const TernaryOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TernaryOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TernaryOpRequest::IsInitialized() const {
  return true;
}

void TernaryOpRequest::Swap(TernaryOpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TernaryOpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TernaryOpRequest::UnsafeArenaSwap(TernaryOpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TernaryOpRequest::InternalSwap(TernaryOpRequest* other) {
  std::swap(lhs_, other->lhs_);
  std::swap(rhs_, other->rhs_);
  std::swap(ehs_, other->ehs_);
  std::swap(triop_, other->triop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TernaryOpRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TernaryOpRequest

// .xla.TernaryOperation triop = 2;
void TernaryOpRequest::clear_triop() {
  triop_ = 0;
}
::xla::TernaryOperation TernaryOpRequest::triop() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.triop)
  return static_cast< ::xla::TernaryOperation >(triop_);
}
void TernaryOpRequest::set_triop(::xla::TernaryOperation value) {
  
  triop_ = value;
  // @@protoc_insertion_point(field_set:xla.TernaryOpRequest.triop)
}

// .xla.ComputationDataHandle lhs = 3;
bool TernaryOpRequest::has_lhs() const {
  return this != internal_default_instance() && lhs_ != NULL;
}
void TernaryOpRequest::clear_lhs() {
  if (GetArenaNoVirtual() == NULL && lhs_ != NULL) delete lhs_;
  lhs_ = NULL;
}
const ::xla::ComputationDataHandle& TernaryOpRequest::lhs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.lhs)
  return lhs_ != NULL ? *lhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* TernaryOpRequest::mutable_lhs() {
  
  if (lhs_ == NULL) {
    _slow_mutable_lhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.lhs)
  return lhs_;
}
::xla::ComputationDataHandle* TernaryOpRequest::release_lhs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.lhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lhs();
  } else {
    ::xla::ComputationDataHandle* temp = lhs_;
    lhs_ = NULL;
    return temp;
  }
}
 void TernaryOpRequest::set_allocated_lhs(::xla::ComputationDataHandle* lhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lhs_;
  }
  if (lhs != NULL) {
    _slow_set_allocated_lhs(message_arena, &lhs);
  }
  lhs_ = lhs;
  if (lhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.lhs)
}

// .xla.ComputationDataHandle rhs = 4;
bool TernaryOpRequest::has_rhs() const {
  return this != internal_default_instance() && rhs_ != NULL;
}
void TernaryOpRequest::clear_rhs() {
  if (GetArenaNoVirtual() == NULL && rhs_ != NULL) delete rhs_;
  rhs_ = NULL;
}
const ::xla::ComputationDataHandle& TernaryOpRequest::rhs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.rhs)
  return rhs_ != NULL ? *rhs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* TernaryOpRequest::mutable_rhs() {
  
  if (rhs_ == NULL) {
    _slow_mutable_rhs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.rhs)
  return rhs_;
}
::xla::ComputationDataHandle* TernaryOpRequest::release_rhs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.rhs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rhs();
  } else {
    ::xla::ComputationDataHandle* temp = rhs_;
    rhs_ = NULL;
    return temp;
  }
}
 void TernaryOpRequest::set_allocated_rhs(::xla::ComputationDataHandle* rhs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rhs_;
  }
  if (rhs != NULL) {
    _slow_set_allocated_rhs(message_arena, &rhs);
  }
  rhs_ = rhs;
  if (rhs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.rhs)
}

// .xla.ComputationDataHandle ehs = 5;
bool TernaryOpRequest::has_ehs() const {
  return this != internal_default_instance() && ehs_ != NULL;
}
void TernaryOpRequest::clear_ehs() {
  if (GetArenaNoVirtual() == NULL && ehs_ != NULL) delete ehs_;
  ehs_ = NULL;
}
const ::xla::ComputationDataHandle& TernaryOpRequest::ehs() const {
  // @@protoc_insertion_point(field_get:xla.TernaryOpRequest.ehs)
  return ehs_ != NULL ? *ehs_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* TernaryOpRequest::mutable_ehs() {
  
  if (ehs_ == NULL) {
    _slow_mutable_ehs();
  }
  // @@protoc_insertion_point(field_mutable:xla.TernaryOpRequest.ehs)
  return ehs_;
}
::xla::ComputationDataHandle* TernaryOpRequest::release_ehs() {
  // @@protoc_insertion_point(field_release:xla.TernaryOpRequest.ehs)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ehs();
  } else {
    ::xla::ComputationDataHandle* temp = ehs_;
    ehs_ = NULL;
    return temp;
  }
}
 void TernaryOpRequest::set_allocated_ehs(::xla::ComputationDataHandle* ehs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ehs_;
  }
  if (ehs != NULL) {
    _slow_set_allocated_ehs(message_arena, &ehs);
  }
  ehs_ = ehs;
  if (ehs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TernaryOpRequest.ehs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariadicOpRequest::kVaropFieldNumber;
const int VariadicOpRequest::kOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariadicOpRequest::VariadicOpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.VariadicOpRequest)
}
VariadicOpRequest::VariadicOpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operands_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.VariadicOpRequest)
}
VariadicOpRequest::VariadicOpRequest(const VariadicOpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operands_(from.operands_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  varop_ = from.varop_;
  // @@protoc_insertion_point(copy_constructor:xla.VariadicOpRequest)
}

void VariadicOpRequest::SharedCtor() {
  varop_ = 0;
  _cached_size_ = 0;
}

VariadicOpRequest::~VariadicOpRequest() {
  // @@protoc_insertion_point(destructor:xla.VariadicOpRequest)
  SharedDtor();
}

void VariadicOpRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void VariadicOpRequest::ArenaDtor(void* object) {
  VariadicOpRequest* _this = reinterpret_cast< VariadicOpRequest* >(object);
  (void)_this;
}
void VariadicOpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariadicOpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariadicOpRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[49].descriptor;
}

const VariadicOpRequest& VariadicOpRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariadicOpRequest* VariadicOpRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariadicOpRequest>(arena);
}

void VariadicOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.VariadicOpRequest)
  operands_.Clear();
  varop_ = 0;
}

bool VariadicOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.VariadicOpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.VariadicOperation varop = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_varop(static_cast< ::xla::VariadicOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.ComputationDataHandle operands = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.VariadicOpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.VariadicOpRequest)
  return false;
#undef DO_
}

void VariadicOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.VariadicOpRequest)
  // .xla.VariadicOperation varop = 2;
  if (this->varop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->varop(), output);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.VariadicOpRequest)
}

::google::protobuf::uint8* VariadicOpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.VariadicOpRequest)
  // .xla.VariadicOperation varop = 2;
  if (this->varop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->varop(), target);
  }

  // repeated .xla.ComputationDataHandle operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.VariadicOpRequest)
  return target;
}

size_t VariadicOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.VariadicOpRequest)
  size_t total_size = 0;

  // repeated .xla.ComputationDataHandle operands = 3;
  {
    unsigned int count = this->operands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operands(i));
    }
  }

  // .xla.VariadicOperation varop = 2;
  if (this->varop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->varop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariadicOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.VariadicOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VariadicOpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariadicOpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.VariadicOpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.VariadicOpRequest)
    MergeFrom(*source);
  }
}

void VariadicOpRequest::MergeFrom(const VariadicOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.VariadicOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operands_.MergeFrom(from.operands_);
  if (from.varop() != 0) {
    set_varop(from.varop());
  }
}

void VariadicOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.VariadicOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariadicOpRequest::CopyFrom(const VariadicOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.VariadicOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariadicOpRequest::IsInitialized() const {
  return true;
}

void VariadicOpRequest::Swap(VariadicOpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariadicOpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariadicOpRequest::UnsafeArenaSwap(VariadicOpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariadicOpRequest::InternalSwap(VariadicOpRequest* other) {
  operands_.UnsafeArenaSwap(&other->operands_);
  std::swap(varop_, other->varop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariadicOpRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariadicOpRequest

// .xla.VariadicOperation varop = 2;
void VariadicOpRequest::clear_varop() {
  varop_ = 0;
}
::xla::VariadicOperation VariadicOpRequest::varop() const {
  // @@protoc_insertion_point(field_get:xla.VariadicOpRequest.varop)
  return static_cast< ::xla::VariadicOperation >(varop_);
}
void VariadicOpRequest::set_varop(::xla::VariadicOperation value) {
  
  varop_ = value;
  // @@protoc_insertion_point(field_set:xla.VariadicOpRequest.varop)
}

// repeated .xla.ComputationDataHandle operands = 3;
int VariadicOpRequest::operands_size() const {
  return operands_.size();
}
void VariadicOpRequest::clear_operands() {
  operands_.Clear();
}
const ::xla::ComputationDataHandle& VariadicOpRequest::operands(int index) const {
  // @@protoc_insertion_point(field_get:xla.VariadicOpRequest.operands)
  return operands_.Get(index);
}
::xla::ComputationDataHandle* VariadicOpRequest::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:xla.VariadicOpRequest.operands)
  return operands_.Mutable(index);
}
::xla::ComputationDataHandle* VariadicOpRequest::add_operands() {
  // @@protoc_insertion_point(field_add:xla.VariadicOpRequest.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >*
VariadicOpRequest::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:xla.VariadicOpRequest.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ComputationDataHandle >&
VariadicOpRequest::operands() const {
  // @@protoc_insertion_point(field_list:xla.VariadicOpRequest.operands)
  return operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SendRequest::_slow_mutable_operand() {
  operand_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* SendRequest::_slow_release_operand() {
  if (operand_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*operand_);
    operand_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* SendRequest::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SendRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void SendRequest::_slow_set_allocated_operand(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** operand) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operand) == NULL) {
      message_arena->Own(*operand);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operand)) {
      ::xla::ComputationDataHandle* new_operand = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_operand->CopyFrom(**operand);
      *operand = new_operand;
    }
}
void SendRequest::unsafe_arena_set_allocated_operand(
    ::xla::ComputationDataHandle* operand) {
  if (GetArenaNoVirtual() == NULL) {
    delete operand_;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SendRequest.operand)
}
void SendRequest::_slow_mutable_channel_handle() {
  channel_handle_ = ::google::protobuf::Arena::CreateMessage< ::xla::ChannelHandle >(
      GetArenaNoVirtual());
}
::xla::ChannelHandle* SendRequest::_slow_release_channel_handle() {
  if (channel_handle_ == NULL) {
    return NULL;
  } else {
    ::xla::ChannelHandle* temp = new ::xla::ChannelHandle(*channel_handle_);
    channel_handle_ = NULL;
    return temp;
  }
}
::xla::ChannelHandle* SendRequest::unsafe_arena_release_channel_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.SendRequest.channel_handle)
  
  ::xla::ChannelHandle* temp = channel_handle_;
  channel_handle_ = NULL;
  return temp;
}
void SendRequest::_slow_set_allocated_channel_handle(
    ::google::protobuf::Arena* message_arena, ::xla::ChannelHandle** channel_handle) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*channel_handle) == NULL) {
      message_arena->Own(*channel_handle);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*channel_handle)) {
      ::xla::ChannelHandle* new_channel_handle = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ChannelHandle >(
            message_arena);
      new_channel_handle->CopyFrom(**channel_handle);
      *channel_handle = new_channel_handle;
    }
}
void SendRequest::unsafe_arena_set_allocated_channel_handle(
    ::xla::ChannelHandle* channel_handle) {
  if (GetArenaNoVirtual() == NULL) {
    delete channel_handle_;
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.SendRequest.channel_handle)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendRequest::kOperandFieldNumber;
const int SendRequest::kChannelHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendRequest::SendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SendRequest)
}
SendRequest::SendRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_channel_handle()) {
    channel_handle_ = new ::xla::ChannelHandle(*from.channel_handle_);
  } else {
    channel_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SendRequest)
}

void SendRequest::SharedCtor() {
  ::memset(&operand_, 0, reinterpret_cast<char*>(&channel_handle_) -
    reinterpret_cast<char*>(&operand_) + sizeof(channel_handle_));
  _cached_size_ = 0;
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:xla.SendRequest)
  SharedDtor();
}

void SendRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete channel_handle_;
  }
}

void SendRequest::ArenaDtor(void* object) {
  SendRequest* _this = reinterpret_cast< SendRequest* >(object);
  (void)_this;
}
void SendRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[50].descriptor;
}

const SendRequest& SendRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendRequest* SendRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SendRequest>(arena);
}

void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SendRequest)
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) {
    delete channel_handle_;
  }
  channel_handle_ = NULL;
}

bool SendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle operand = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ChannelHandle channel_handle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SendRequest)
  return false;
#undef DO_
}

void SendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SendRequest)
  // .xla.ComputationDataHandle operand = 1;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->operand_, output);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SendRequest)
}

::google::protobuf::uint8* SendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SendRequest)
  // .xla.ComputationDataHandle operand = 1;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->operand_, false, target);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SendRequest)
  size_t total_size = 0;

  // .xla.ComputationDataHandle operand = 1;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SendRequest)
    MergeFrom(*source);
  }
}

void SendRequest::MergeFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_channel_handle()) {
    mutable_channel_handle()->::xla::ChannelHandle::MergeFrom(from.channel_handle());
  }
}

void SendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::Swap(SendRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SendRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SendRequest::UnsafeArenaSwap(SendRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SendRequest::InternalSwap(SendRequest* other) {
  std::swap(operand_, other->operand_);
  std::swap(channel_handle_, other->channel_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendRequest

// .xla.ComputationDataHandle operand = 1;
bool SendRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void SendRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& SendRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SendRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SendRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    _slow_mutable_operand();
  }
  // @@protoc_insertion_point(field_mutable:xla.SendRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* SendRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SendRequest.operand)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operand();
  } else {
    ::xla::ComputationDataHandle* temp = operand_;
    operand_ = NULL;
    return temp;
  }
}
 void SendRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operand_;
  }
  if (operand != NULL) {
    _slow_set_allocated_operand(message_arena, &operand);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SendRequest.operand)
}

// .xla.ChannelHandle channel_handle = 2;
bool SendRequest::has_channel_handle() const {
  return this != internal_default_instance() && channel_handle_ != NULL;
}
void SendRequest::clear_channel_handle() {
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) delete channel_handle_;
  channel_handle_ = NULL;
}
const ::xla::ChannelHandle& SendRequest::channel_handle() const {
  // @@protoc_insertion_point(field_get:xla.SendRequest.channel_handle)
  return channel_handle_ != NULL ? *channel_handle_
                         : *::xla::ChannelHandle::internal_default_instance();
}
::xla::ChannelHandle* SendRequest::mutable_channel_handle() {
  
  if (channel_handle_ == NULL) {
    _slow_mutable_channel_handle();
  }
  // @@protoc_insertion_point(field_mutable:xla.SendRequest.channel_handle)
  return channel_handle_;
}
::xla::ChannelHandle* SendRequest::release_channel_handle() {
  // @@protoc_insertion_point(field_release:xla.SendRequest.channel_handle)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_channel_handle();
  } else {
    ::xla::ChannelHandle* temp = channel_handle_;
    channel_handle_ = NULL;
    return temp;
  }
}
 void SendRequest::set_allocated_channel_handle(::xla::ChannelHandle* channel_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_handle_;
  }
  if (channel_handle != NULL) {
    _slow_set_allocated_channel_handle(message_arena, &channel_handle);
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SendRequest.channel_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
      GetArenaNoVirtual());
}
::xla::Shape* RecvRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::xla::Shape* temp = new ::xla::Shape(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::xla::Shape* RecvRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.RecvRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void RecvRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::xla::Shape** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::xla::Shape* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::xla::Shape >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void RecvRequest::unsafe_arena_set_allocated_shape(
    ::xla::Shape* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.RecvRequest.shape)
}
void RecvRequest::_slow_mutable_channel_handle() {
  channel_handle_ = ::google::protobuf::Arena::CreateMessage< ::xla::ChannelHandle >(
      GetArenaNoVirtual());
}
::xla::ChannelHandle* RecvRequest::_slow_release_channel_handle() {
  if (channel_handle_ == NULL) {
    return NULL;
  } else {
    ::xla::ChannelHandle* temp = new ::xla::ChannelHandle(*channel_handle_);
    channel_handle_ = NULL;
    return temp;
  }
}
::xla::ChannelHandle* RecvRequest::unsafe_arena_release_channel_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.RecvRequest.channel_handle)
  
  ::xla::ChannelHandle* temp = channel_handle_;
  channel_handle_ = NULL;
  return temp;
}
void RecvRequest::_slow_set_allocated_channel_handle(
    ::google::protobuf::Arena* message_arena, ::xla::ChannelHandle** channel_handle) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*channel_handle) == NULL) {
      message_arena->Own(*channel_handle);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*channel_handle)) {
      ::xla::ChannelHandle* new_channel_handle = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ChannelHandle >(
            message_arena);
      new_channel_handle->CopyFrom(**channel_handle);
      *channel_handle = new_channel_handle;
    }
}
void RecvRequest::unsafe_arena_set_allocated_channel_handle(
    ::xla::ChannelHandle* channel_handle) {
  if (GetArenaNoVirtual() == NULL) {
    delete channel_handle_;
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.RecvRequest.channel_handle)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvRequest::kShapeFieldNumber;
const int RecvRequest::kChannelHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvRequest::RecvRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.RecvRequest)
}
RecvRequest::RecvRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.RecvRequest)
}
RecvRequest::RecvRequest(const RecvRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_channel_handle()) {
    channel_handle_ = new ::xla::ChannelHandle(*from.channel_handle_);
  } else {
    channel_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.RecvRequest)
}

void RecvRequest::SharedCtor() {
  ::memset(&shape_, 0, reinterpret_cast<char*>(&channel_handle_) -
    reinterpret_cast<char*>(&shape_) + sizeof(channel_handle_));
  _cached_size_ = 0;
}

RecvRequest::~RecvRequest() {
  // @@protoc_insertion_point(destructor:xla.RecvRequest)
  SharedDtor();
}

void RecvRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete shape_;
  }
  if (this != internal_default_instance()) {
    delete channel_handle_;
  }
}

void RecvRequest::ArenaDtor(void* object) {
  RecvRequest* _this = reinterpret_cast< RecvRequest* >(object);
  (void)_this;
}
void RecvRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[51].descriptor;
}

const RecvRequest& RecvRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecvRequest* RecvRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvRequest>(arena);
}

void RecvRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.RecvRequest)
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) {
    delete channel_handle_;
  }
  channel_handle_ = NULL;
}

bool RecvRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.RecvRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ChannelHandle channel_handle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.RecvRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.RecvRequest)
  return false;
#undef DO_
}

void RecvRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.RecvRequest)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.RecvRequest)
}

::google::protobuf::uint8* RecvRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.RecvRequest)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.RecvRequest)
  return target;
}

size_t RecvRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.RecvRequest)
  size_t total_size = 0;

  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // .xla.ChannelHandle channel_handle = 2;
  if (this->has_channel_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.RecvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.RecvRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.RecvRequest)
    MergeFrom(*source);
  }
}

void RecvRequest::MergeFrom(const RecvRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.RecvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
  if (from.has_channel_handle()) {
    mutable_channel_handle()->::xla::ChannelHandle::MergeFrom(from.channel_handle());
  }
}

void RecvRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.RecvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvRequest::CopyFrom(const RecvRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.RecvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvRequest::IsInitialized() const {
  return true;
}

void RecvRequest::Swap(RecvRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecvRequest::UnsafeArenaSwap(RecvRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvRequest::InternalSwap(RecvRequest* other) {
  std::swap(shape_, other->shape_);
  std::swap(channel_handle_, other->channel_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvRequest

// .xla.Shape shape = 1;
bool RecvRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void RecvRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& RecvRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.RecvRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* RecvRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:xla.RecvRequest.shape)
  return shape_;
}
::xla::Shape* RecvRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.RecvRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::xla::Shape* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void RecvRequest::set_allocated_shape(::xla::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RecvRequest.shape)
}

// .xla.ChannelHandle channel_handle = 2;
bool RecvRequest::has_channel_handle() const {
  return this != internal_default_instance() && channel_handle_ != NULL;
}
void RecvRequest::clear_channel_handle() {
  if (GetArenaNoVirtual() == NULL && channel_handle_ != NULL) delete channel_handle_;
  channel_handle_ = NULL;
}
const ::xla::ChannelHandle& RecvRequest::channel_handle() const {
  // @@protoc_insertion_point(field_get:xla.RecvRequest.channel_handle)
  return channel_handle_ != NULL ? *channel_handle_
                         : *::xla::ChannelHandle::internal_default_instance();
}
::xla::ChannelHandle* RecvRequest::mutable_channel_handle() {
  
  if (channel_handle_ == NULL) {
    _slow_mutable_channel_handle();
  }
  // @@protoc_insertion_point(field_mutable:xla.RecvRequest.channel_handle)
  return channel_handle_;
}
::xla::ChannelHandle* RecvRequest::release_channel_handle() {
  // @@protoc_insertion_point(field_release:xla.RecvRequest.channel_handle)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_channel_handle();
  } else {
    ::xla::ChannelHandle* temp = channel_handle_;
    channel_handle_ = NULL;
    return temp;
  }
}
 void RecvRequest::set_allocated_channel_handle(::xla::ChannelHandle* channel_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_handle_;
  }
  if (channel_handle != NULL) {
    _slow_set_allocated_channel_handle(message_arena, &channel_handle);
  }
  channel_handle_ = channel_handle;
  if (channel_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.RecvRequest.channel_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OpRequest::_slow_mutable_computation() {
  computation_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationHandle* OpRequest::_slow_release_computation() {
  if (computation_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationHandle* temp = new ::xla::ComputationHandle(*computation_);
    computation_ = NULL;
    return temp;
  }
}
::xla::ComputationHandle* OpRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void OpRequest::_slow_set_allocated_computation(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationHandle** computation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*computation) == NULL) {
      message_arena->Own(*computation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*computation)) {
      ::xla::ComputationHandle* new_computation = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationHandle >(
            message_arena);
      new_computation->CopyFrom(**computation);
      *computation = new_computation;
    }
}
void OpRequest::unsafe_arena_set_allocated_computation(
    ::xla::ComputationHandle* computation) {
  if (GetArenaNoVirtual() == NULL) {
    delete computation_;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.computation)
}
void OpRequest::_slow_mutable_metadata() {
  metadata_ = ::google::protobuf::Arena::CreateMessage< ::xla::OpMetadata >(
      GetArenaNoVirtual());
}
::xla::OpMetadata* OpRequest::_slow_release_metadata() {
  if (metadata_ == NULL) {
    return NULL;
  } else {
    ::xla::OpMetadata* temp = new ::xla::OpMetadata(*metadata_);
    metadata_ = NULL;
    return temp;
  }
}
::xla::OpMetadata* OpRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.metadata)
  
  ::xla::OpMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void OpRequest::_slow_set_allocated_metadata(
    ::google::protobuf::Arena* message_arena, ::xla::OpMetadata** metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metadata) == NULL) {
      message_arena->Own(*metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metadata)) {
      ::xla::OpMetadata* new_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::xla::OpMetadata >(
            message_arena);
      new_metadata->CopyFrom(**metadata);
      *metadata = new_metadata;
    }
}
void OpRequest::unsafe_arena_set_allocated_metadata(
    ::xla::OpMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpRequest::kComputationFieldNumber;
const int OpRequest::kMetadataFieldNumber;
const int OpRequest::kBinaryOpRequestFieldNumber;
const int OpRequest::kBroadcastRequestFieldNumber;
const int OpRequest::kCallRequestFieldNumber;
const int OpRequest::kConcatenateRequestFieldNumber;
const int OpRequest::kConstantRequestFieldNumber;
const int OpRequest::kConvertRequestFieldNumber;
const int OpRequest::kConvolveRequestFieldNumber;
const int OpRequest::kCrossReplicaSumRequestFieldNumber;
const int OpRequest::kCustomCallRequestFieldNumber;
const int OpRequest::kDynamicSliceRequestFieldNumber;
const int OpRequest::kDynamicUpdateSliceRequestFieldNumber;
const int OpRequest::kGetTupleElementRequestFieldNumber;
const int OpRequest::kInfeedRequestFieldNumber;
const int OpRequest::kMapRequestFieldNumber;
const int OpRequest::kPadRequestFieldNumber;
const int OpRequest::kParameterRequestFieldNumber;
const int OpRequest::kReduceRequestFieldNumber;
const int OpRequest::kReduceWindowRequestFieldNumber;
const int OpRequest::kReshapeRequestFieldNumber;
const int OpRequest::kReverseRequestFieldNumber;
const int OpRequest::kRngRequestFieldNumber;
const int OpRequest::kSelectAndScatterRequestFieldNumber;
const int OpRequest::kSliceRequestFieldNumber;
const int OpRequest::kTernaryOpRequestFieldNumber;
const int OpRequest::kTraceRequestFieldNumber;
const int OpRequest::kTransposeRequestFieldNumber;
const int OpRequest::kUnaryOpRequestFieldNumber;
const int OpRequest::kVariadicOpRequestFieldNumber;
const int OpRequest::kWhileRequestFieldNumber;
const int OpRequest::kSendRequestFieldNumber;
const int OpRequest::kRecvRequestFieldNumber;
const int OpRequest::kOutfeedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpRequest::OpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.OpRequest)
}
OpRequest::OpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.OpRequest)
}
OpRequest::OpRequest(const OpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::xla::OpMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  clear_has_op();
  switch (from.op_case()) {
    case kBinaryOpRequest: {
      mutable_binary_op_request()->::xla::BinaryOpRequest::MergeFrom(from.binary_op_request());
      break;
    }
    case kBroadcastRequest: {
      mutable_broadcast_request()->::xla::BroadcastRequest::MergeFrom(from.broadcast_request());
      break;
    }
    case kCallRequest: {
      mutable_call_request()->::xla::CallRequest::MergeFrom(from.call_request());
      break;
    }
    case kConcatenateRequest: {
      mutable_concatenate_request()->::xla::ConcatenateRequest::MergeFrom(from.concatenate_request());
      break;
    }
    case kConstantRequest: {
      mutable_constant_request()->::xla::ConstantRequest::MergeFrom(from.constant_request());
      break;
    }
    case kConvertRequest: {
      mutable_convert_request()->::xla::ConvertRequest::MergeFrom(from.convert_request());
      break;
    }
    case kConvolveRequest: {
      mutable_convolve_request()->::xla::ConvolveRequest::MergeFrom(from.convolve_request());
      break;
    }
    case kCrossReplicaSumRequest: {
      mutable_cross_replica_sum_request()->::xla::CrossReplicaSumRequest::MergeFrom(from.cross_replica_sum_request());
      break;
    }
    case kCustomCallRequest: {
      mutable_custom_call_request()->::xla::CustomCallRequest::MergeFrom(from.custom_call_request());
      break;
    }
    case kDynamicSliceRequest: {
      mutable_dynamic_slice_request()->::xla::DynamicSliceRequest::MergeFrom(from.dynamic_slice_request());
      break;
    }
    case kDynamicUpdateSliceRequest: {
      mutable_dynamic_update_slice_request()->::xla::DynamicUpdateSliceRequest::MergeFrom(from.dynamic_update_slice_request());
      break;
    }
    case kGetTupleElementRequest: {
      mutable_get_tuple_element_request()->::xla::GetTupleElementRequest::MergeFrom(from.get_tuple_element_request());
      break;
    }
    case kInfeedRequest: {
      mutable_infeed_request()->::xla::InfeedRequest::MergeFrom(from.infeed_request());
      break;
    }
    case kMapRequest: {
      mutable_map_request()->::xla::MapRequest::MergeFrom(from.map_request());
      break;
    }
    case kPadRequest: {
      mutable_pad_request()->::xla::PadRequest::MergeFrom(from.pad_request());
      break;
    }
    case kParameterRequest: {
      mutable_parameter_request()->::xla::ParameterRequest::MergeFrom(from.parameter_request());
      break;
    }
    case kReduceRequest: {
      mutable_reduce_request()->::xla::ReduceRequest::MergeFrom(from.reduce_request());
      break;
    }
    case kReduceWindowRequest: {
      mutable_reduce_window_request()->::xla::ReduceWindowRequest::MergeFrom(from.reduce_window_request());
      break;
    }
    case kReshapeRequest: {
      mutable_reshape_request()->::xla::ReshapeRequest::MergeFrom(from.reshape_request());
      break;
    }
    case kReverseRequest: {
      mutable_reverse_request()->::xla::ReverseRequest::MergeFrom(from.reverse_request());
      break;
    }
    case kRngRequest: {
      mutable_rng_request()->::xla::RngRequest::MergeFrom(from.rng_request());
      break;
    }
    case kSelectAndScatterRequest: {
      mutable_select_and_scatter_request()->::xla::SelectAndScatterRequest::MergeFrom(from.select_and_scatter_request());
      break;
    }
    case kSliceRequest: {
      mutable_slice_request()->::xla::SliceRequest::MergeFrom(from.slice_request());
      break;
    }
    case kTernaryOpRequest: {
      mutable_ternary_op_request()->::xla::TernaryOpRequest::MergeFrom(from.ternary_op_request());
      break;
    }
    case kTraceRequest: {
      mutable_trace_request()->::xla::TraceRequest::MergeFrom(from.trace_request());
      break;
    }
    case kTransposeRequest: {
      mutable_transpose_request()->::xla::TransposeRequest::MergeFrom(from.transpose_request());
      break;
    }
    case kUnaryOpRequest: {
      mutable_unary_op_request()->::xla::UnaryOpRequest::MergeFrom(from.unary_op_request());
      break;
    }
    case kVariadicOpRequest: {
      mutable_variadic_op_request()->::xla::VariadicOpRequest::MergeFrom(from.variadic_op_request());
      break;
    }
    case kWhileRequest: {
      mutable_while_request()->::xla::WhileRequest::MergeFrom(from.while_request());
      break;
    }
    case kSendRequest: {
      mutable_send_request()->::xla::SendRequest::MergeFrom(from.send_request());
      break;
    }
    case kRecvRequest: {
      mutable_recv_request()->::xla::RecvRequest::MergeFrom(from.recv_request());
      break;
    }
    case kOutfeedRequest: {
      mutable_outfeed_request()->::xla::OutfeedRequest::MergeFrom(from.outfeed_request());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xla.OpRequest)
}

void OpRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&computation_) + sizeof(metadata_));
  clear_has_op();
  _cached_size_ = 0;
}

OpRequest::~OpRequest() {
  // @@protoc_insertion_point(destructor:xla.OpRequest)
  SharedDtor();
}

void OpRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
  if (has_op()) {
    clear_op();
  }
}

void OpRequest::ArenaDtor(void* object) {
  OpRequest* _this = reinterpret_cast< OpRequest* >(object);
  (void)_this;
}
void OpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[52].descriptor;
}

const OpRequest& OpRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpRequest* OpRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpRequest>(arena);
}

void OpRequest::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:xla.OpRequest)
  switch (op_case()) {
    case kBinaryOpRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.binary_op_request_;
      }
      break;
    }
    case kBroadcastRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.broadcast_request_;
      }
      break;
    }
    case kCallRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.call_request_;
      }
      break;
    }
    case kConcatenateRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.concatenate_request_;
      }
      break;
    }
    case kConstantRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.constant_request_;
      }
      break;
    }
    case kConvertRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.convert_request_;
      }
      break;
    }
    case kConvolveRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.convolve_request_;
      }
      break;
    }
    case kCrossReplicaSumRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.cross_replica_sum_request_;
      }
      break;
    }
    case kCustomCallRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.custom_call_request_;
      }
      break;
    }
    case kDynamicSliceRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.dynamic_slice_request_;
      }
      break;
    }
    case kDynamicUpdateSliceRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.dynamic_update_slice_request_;
      }
      break;
    }
    case kGetTupleElementRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.get_tuple_element_request_;
      }
      break;
    }
    case kInfeedRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.infeed_request_;
      }
      break;
    }
    case kMapRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.map_request_;
      }
      break;
    }
    case kPadRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.pad_request_;
      }
      break;
    }
    case kParameterRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.parameter_request_;
      }
      break;
    }
    case kReduceRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reduce_request_;
      }
      break;
    }
    case kReduceWindowRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reduce_window_request_;
      }
      break;
    }
    case kReshapeRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reshape_request_;
      }
      break;
    }
    case kReverseRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reverse_request_;
      }
      break;
    }
    case kRngRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.rng_request_;
      }
      break;
    }
    case kSelectAndScatterRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.select_and_scatter_request_;
      }
      break;
    }
    case kSliceRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.slice_request_;
      }
      break;
    }
    case kTernaryOpRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.ternary_op_request_;
      }
      break;
    }
    case kTraceRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.trace_request_;
      }
      break;
    }
    case kTransposeRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.transpose_request_;
      }
      break;
    }
    case kUnaryOpRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.unary_op_request_;
      }
      break;
    }
    case kVariadicOpRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.variadic_op_request_;
      }
      break;
    }
    case kWhileRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.while_request_;
      }
      break;
    }
    case kSendRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.send_request_;
      }
      break;
    }
    case kRecvRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.recv_request_;
      }
      break;
    }
    case kOutfeedRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.outfeed_request_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void OpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  clear_op();
}

bool OpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.OpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.BinaryOpRequest binary_op_request = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binary_op_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.BroadcastRequest broadcast_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.CallRequest call_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ConcatenateRequest concatenate_request = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concatenate_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ConstantRequest constant_request = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ConvertRequest convert_request = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convert_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ConvolveRequest convolve_request = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolve_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_replica_sum_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.CustomCallRequest custom_call_request = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_call_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DynamicSliceRequest dynamic_slice_request = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic_slice_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic_update_slice_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.GetTupleElementRequest get_tuple_element_request = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_tuple_element_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.InfeedRequest infeed_request = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infeed_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.MapRequest map_request = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.PadRequest pad_request = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ParameterRequest parameter_request = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameter_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ReduceRequest reduce_request = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduce_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ReduceWindowRequest reduce_window_request = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduce_window_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ReshapeRequest reshape_request = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ReverseRequest reverse_request = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reverse_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.RngRequest rng_request = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rng_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.SelectAndScatterRequest select_and_scatter_request = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_and_scatter_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.SliceRequest slice_request = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.TernaryOpRequest ternary_op_request = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ternary_op_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.TraceRequest trace_request = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.UnaryOpRequest unary_op_request = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unary_op_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.VariadicOpRequest variadic_op_request = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variadic_op_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.WhileRequest while_request = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_while_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.SendRequest send_request = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.RecvRequest recv_request = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recv_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.OutfeedRequest outfeed_request = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outfeed_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.OpMetadata metadata = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.TransposeRequest transpose_request = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transpose_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.OpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.OpRequest)
  return false;
#undef DO_
}

void OpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.OpRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // .xla.BinaryOpRequest binary_op_request = 2;
  if (has_binary_op_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *op_.binary_op_request_, output);
  }

  // .xla.BroadcastRequest broadcast_request = 3;
  if (has_broadcast_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *op_.broadcast_request_, output);
  }

  // .xla.CallRequest call_request = 4;
  if (has_call_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *op_.call_request_, output);
  }

  // .xla.ConcatenateRequest concatenate_request = 5;
  if (has_concatenate_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *op_.concatenate_request_, output);
  }

  // .xla.ConstantRequest constant_request = 6;
  if (has_constant_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *op_.constant_request_, output);
  }

  // .xla.ConvertRequest convert_request = 7;
  if (has_convert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *op_.convert_request_, output);
  }

  // .xla.ConvolveRequest convolve_request = 8;
  if (has_convolve_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *op_.convolve_request_, output);
  }

  // .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
  if (has_cross_replica_sum_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *op_.cross_replica_sum_request_, output);
  }

  // .xla.CustomCallRequest custom_call_request = 10;
  if (has_custom_call_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *op_.custom_call_request_, output);
  }

  // .xla.DynamicSliceRequest dynamic_slice_request = 11;
  if (has_dynamic_slice_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *op_.dynamic_slice_request_, output);
  }

  // .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
  if (has_dynamic_update_slice_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *op_.dynamic_update_slice_request_, output);
  }

  // .xla.GetTupleElementRequest get_tuple_element_request = 13;
  if (has_get_tuple_element_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *op_.get_tuple_element_request_, output);
  }

  // .xla.InfeedRequest infeed_request = 14;
  if (has_infeed_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *op_.infeed_request_, output);
  }

  // .xla.MapRequest map_request = 15;
  if (has_map_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *op_.map_request_, output);
  }

  // .xla.PadRequest pad_request = 16;
  if (has_pad_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *op_.pad_request_, output);
  }

  // .xla.ParameterRequest parameter_request = 17;
  if (has_parameter_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *op_.parameter_request_, output);
  }

  // .xla.ReduceRequest reduce_request = 18;
  if (has_reduce_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *op_.reduce_request_, output);
  }

  // .xla.ReduceWindowRequest reduce_window_request = 19;
  if (has_reduce_window_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *op_.reduce_window_request_, output);
  }

  // .xla.ReshapeRequest reshape_request = 20;
  if (has_reshape_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *op_.reshape_request_, output);
  }

  // .xla.ReverseRequest reverse_request = 21;
  if (has_reverse_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *op_.reverse_request_, output);
  }

  // .xla.RngRequest rng_request = 22;
  if (has_rng_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *op_.rng_request_, output);
  }

  // .xla.SelectAndScatterRequest select_and_scatter_request = 23;
  if (has_select_and_scatter_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *op_.select_and_scatter_request_, output);
  }

  // .xla.SliceRequest slice_request = 24;
  if (has_slice_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *op_.slice_request_, output);
  }

  // .xla.TernaryOpRequest ternary_op_request = 25;
  if (has_ternary_op_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *op_.ternary_op_request_, output);
  }

  // .xla.TraceRequest trace_request = 26;
  if (has_trace_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *op_.trace_request_, output);
  }

  // .xla.UnaryOpRequest unary_op_request = 27;
  if (has_unary_op_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *op_.unary_op_request_, output);
  }

  // .xla.VariadicOpRequest variadic_op_request = 28;
  if (has_variadic_op_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *op_.variadic_op_request_, output);
  }

  // .xla.WhileRequest while_request = 29;
  if (has_while_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *op_.while_request_, output);
  }

  // .xla.SendRequest send_request = 30;
  if (has_send_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *op_.send_request_, output);
  }

  // .xla.RecvRequest recv_request = 31;
  if (has_recv_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *op_.recv_request_, output);
  }

  // .xla.OutfeedRequest outfeed_request = 32;
  if (has_outfeed_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *op_.outfeed_request_, output);
  }

  // .xla.OpMetadata metadata = 33;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->metadata_, output);
  }

  // .xla.TransposeRequest transpose_request = 34;
  if (has_transpose_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *op_.transpose_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.OpRequest)
}

::google::protobuf::uint8* OpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // .xla.BinaryOpRequest binary_op_request = 2;
  if (has_binary_op_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *op_.binary_op_request_, false, target);
  }

  // .xla.BroadcastRequest broadcast_request = 3;
  if (has_broadcast_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *op_.broadcast_request_, false, target);
  }

  // .xla.CallRequest call_request = 4;
  if (has_call_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *op_.call_request_, false, target);
  }

  // .xla.ConcatenateRequest concatenate_request = 5;
  if (has_concatenate_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *op_.concatenate_request_, false, target);
  }

  // .xla.ConstantRequest constant_request = 6;
  if (has_constant_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *op_.constant_request_, false, target);
  }

  // .xla.ConvertRequest convert_request = 7;
  if (has_convert_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *op_.convert_request_, false, target);
  }

  // .xla.ConvolveRequest convolve_request = 8;
  if (has_convolve_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *op_.convolve_request_, false, target);
  }

  // .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
  if (has_cross_replica_sum_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *op_.cross_replica_sum_request_, false, target);
  }

  // .xla.CustomCallRequest custom_call_request = 10;
  if (has_custom_call_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *op_.custom_call_request_, false, target);
  }

  // .xla.DynamicSliceRequest dynamic_slice_request = 11;
  if (has_dynamic_slice_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *op_.dynamic_slice_request_, false, target);
  }

  // .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
  if (has_dynamic_update_slice_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *op_.dynamic_update_slice_request_, false, target);
  }

  // .xla.GetTupleElementRequest get_tuple_element_request = 13;
  if (has_get_tuple_element_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *op_.get_tuple_element_request_, false, target);
  }

  // .xla.InfeedRequest infeed_request = 14;
  if (has_infeed_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *op_.infeed_request_, false, target);
  }

  // .xla.MapRequest map_request = 15;
  if (has_map_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *op_.map_request_, false, target);
  }

  // .xla.PadRequest pad_request = 16;
  if (has_pad_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *op_.pad_request_, false, target);
  }

  // .xla.ParameterRequest parameter_request = 17;
  if (has_parameter_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *op_.parameter_request_, false, target);
  }

  // .xla.ReduceRequest reduce_request = 18;
  if (has_reduce_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *op_.reduce_request_, false, target);
  }

  // .xla.ReduceWindowRequest reduce_window_request = 19;
  if (has_reduce_window_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *op_.reduce_window_request_, false, target);
  }

  // .xla.ReshapeRequest reshape_request = 20;
  if (has_reshape_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *op_.reshape_request_, false, target);
  }

  // .xla.ReverseRequest reverse_request = 21;
  if (has_reverse_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *op_.reverse_request_, false, target);
  }

  // .xla.RngRequest rng_request = 22;
  if (has_rng_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *op_.rng_request_, false, target);
  }

  // .xla.SelectAndScatterRequest select_and_scatter_request = 23;
  if (has_select_and_scatter_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *op_.select_and_scatter_request_, false, target);
  }

  // .xla.SliceRequest slice_request = 24;
  if (has_slice_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *op_.slice_request_, false, target);
  }

  // .xla.TernaryOpRequest ternary_op_request = 25;
  if (has_ternary_op_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *op_.ternary_op_request_, false, target);
  }

  // .xla.TraceRequest trace_request = 26;
  if (has_trace_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *op_.trace_request_, false, target);
  }

  // .xla.UnaryOpRequest unary_op_request = 27;
  if (has_unary_op_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *op_.unary_op_request_, false, target);
  }

  // .xla.VariadicOpRequest variadic_op_request = 28;
  if (has_variadic_op_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *op_.variadic_op_request_, false, target);
  }

  // .xla.WhileRequest while_request = 29;
  if (has_while_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *op_.while_request_, false, target);
  }

  // .xla.SendRequest send_request = 30;
  if (has_send_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *op_.send_request_, false, target);
  }

  // .xla.RecvRequest recv_request = 31;
  if (has_recv_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *op_.recv_request_, false, target);
  }

  // .xla.OutfeedRequest outfeed_request = 32;
  if (has_outfeed_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *op_.outfeed_request_, false, target);
  }

  // .xla.OpMetadata metadata = 33;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->metadata_, false, target);
  }

  // .xla.TransposeRequest transpose_request = 34;
  if (has_transpose_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *op_.transpose_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.OpRequest)
  return target;
}

size_t OpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.OpMetadata metadata = 33;
  if (this->has_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  switch (op_case()) {
    // .xla.BinaryOpRequest binary_op_request = 2;
    case kBinaryOpRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.binary_op_request_);
      break;
    }
    // .xla.BroadcastRequest broadcast_request = 3;
    case kBroadcastRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.broadcast_request_);
      break;
    }
    // .xla.CallRequest call_request = 4;
    case kCallRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.call_request_);
      break;
    }
    // .xla.ConcatenateRequest concatenate_request = 5;
    case kConcatenateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.concatenate_request_);
      break;
    }
    // .xla.ConstantRequest constant_request = 6;
    case kConstantRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.constant_request_);
      break;
    }
    // .xla.ConvertRequest convert_request = 7;
    case kConvertRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.convert_request_);
      break;
    }
    // .xla.ConvolveRequest convolve_request = 8;
    case kConvolveRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.convolve_request_);
      break;
    }
    // .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
    case kCrossReplicaSumRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.cross_replica_sum_request_);
      break;
    }
    // .xla.CustomCallRequest custom_call_request = 10;
    case kCustomCallRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.custom_call_request_);
      break;
    }
    // .xla.DynamicSliceRequest dynamic_slice_request = 11;
    case kDynamicSliceRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.dynamic_slice_request_);
      break;
    }
    // .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
    case kDynamicUpdateSliceRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.dynamic_update_slice_request_);
      break;
    }
    // .xla.GetTupleElementRequest get_tuple_element_request = 13;
    case kGetTupleElementRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.get_tuple_element_request_);
      break;
    }
    // .xla.InfeedRequest infeed_request = 14;
    case kInfeedRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.infeed_request_);
      break;
    }
    // .xla.MapRequest map_request = 15;
    case kMapRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.map_request_);
      break;
    }
    // .xla.PadRequest pad_request = 16;
    case kPadRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.pad_request_);
      break;
    }
    // .xla.ParameterRequest parameter_request = 17;
    case kParameterRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.parameter_request_);
      break;
    }
    // .xla.ReduceRequest reduce_request = 18;
    case kReduceRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.reduce_request_);
      break;
    }
    // .xla.ReduceWindowRequest reduce_window_request = 19;
    case kReduceWindowRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.reduce_window_request_);
      break;
    }
    // .xla.ReshapeRequest reshape_request = 20;
    case kReshapeRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.reshape_request_);
      break;
    }
    // .xla.ReverseRequest reverse_request = 21;
    case kReverseRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.reverse_request_);
      break;
    }
    // .xla.RngRequest rng_request = 22;
    case kRngRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.rng_request_);
      break;
    }
    // .xla.SelectAndScatterRequest select_and_scatter_request = 23;
    case kSelectAndScatterRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.select_and_scatter_request_);
      break;
    }
    // .xla.SliceRequest slice_request = 24;
    case kSliceRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.slice_request_);
      break;
    }
    // .xla.TernaryOpRequest ternary_op_request = 25;
    case kTernaryOpRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.ternary_op_request_);
      break;
    }
    // .xla.TraceRequest trace_request = 26;
    case kTraceRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.trace_request_);
      break;
    }
    // .xla.TransposeRequest transpose_request = 34;
    case kTransposeRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.transpose_request_);
      break;
    }
    // .xla.UnaryOpRequest unary_op_request = 27;
    case kUnaryOpRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.unary_op_request_);
      break;
    }
    // .xla.VariadicOpRequest variadic_op_request = 28;
    case kVariadicOpRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.variadic_op_request_);
      break;
    }
    // .xla.WhileRequest while_request = 29;
    case kWhileRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.while_request_);
      break;
    }
    // .xla.SendRequest send_request = 30;
    case kSendRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.send_request_);
      break;
    }
    // .xla.RecvRequest recv_request = 31;
    case kRecvRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.recv_request_);
      break;
    }
    // .xla.OutfeedRequest outfeed_request = 32;
    case kOutfeedRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.outfeed_request_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.OpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.OpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.OpRequest)
    MergeFrom(*source);
  }
}

void OpRequest::MergeFrom(const OpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.OpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::xla::OpMetadata::MergeFrom(from.metadata());
  }
  switch (from.op_case()) {
    case kBinaryOpRequest: {
      mutable_binary_op_request()->::xla::BinaryOpRequest::MergeFrom(from.binary_op_request());
      break;
    }
    case kBroadcastRequest: {
      mutable_broadcast_request()->::xla::BroadcastRequest::MergeFrom(from.broadcast_request());
      break;
    }
    case kCallRequest: {
      mutable_call_request()->::xla::CallRequest::MergeFrom(from.call_request());
      break;
    }
    case kConcatenateRequest: {
      mutable_concatenate_request()->::xla::ConcatenateRequest::MergeFrom(from.concatenate_request());
      break;
    }
    case kConstantRequest: {
      mutable_constant_request()->::xla::ConstantRequest::MergeFrom(from.constant_request());
      break;
    }
    case kConvertRequest: {
      mutable_convert_request()->::xla::ConvertRequest::MergeFrom(from.convert_request());
      break;
    }
    case kConvolveRequest: {
      mutable_convolve_request()->::xla::ConvolveRequest::MergeFrom(from.convolve_request());
      break;
    }
    case kCrossReplicaSumRequest: {
      mutable_cross_replica_sum_request()->::xla::CrossReplicaSumRequest::MergeFrom(from.cross_replica_sum_request());
      break;
    }
    case kCustomCallRequest: {
      mutable_custom_call_request()->::xla::CustomCallRequest::MergeFrom(from.custom_call_request());
      break;
    }
    case kDynamicSliceRequest: {
      mutable_dynamic_slice_request()->::xla::DynamicSliceRequest::MergeFrom(from.dynamic_slice_request());
      break;
    }
    case kDynamicUpdateSliceRequest: {
      mutable_dynamic_update_slice_request()->::xla::DynamicUpdateSliceRequest::MergeFrom(from.dynamic_update_slice_request());
      break;
    }
    case kGetTupleElementRequest: {
      mutable_get_tuple_element_request()->::xla::GetTupleElementRequest::MergeFrom(from.get_tuple_element_request());
      break;
    }
    case kInfeedRequest: {
      mutable_infeed_request()->::xla::InfeedRequest::MergeFrom(from.infeed_request());
      break;
    }
    case kMapRequest: {
      mutable_map_request()->::xla::MapRequest::MergeFrom(from.map_request());
      break;
    }
    case kPadRequest: {
      mutable_pad_request()->::xla::PadRequest::MergeFrom(from.pad_request());
      break;
    }
    case kParameterRequest: {
      mutable_parameter_request()->::xla::ParameterRequest::MergeFrom(from.parameter_request());
      break;
    }
    case kReduceRequest: {
      mutable_reduce_request()->::xla::ReduceRequest::MergeFrom(from.reduce_request());
      break;
    }
    case kReduceWindowRequest: {
      mutable_reduce_window_request()->::xla::ReduceWindowRequest::MergeFrom(from.reduce_window_request());
      break;
    }
    case kReshapeRequest: {
      mutable_reshape_request()->::xla::ReshapeRequest::MergeFrom(from.reshape_request());
      break;
    }
    case kReverseRequest: {
      mutable_reverse_request()->::xla::ReverseRequest::MergeFrom(from.reverse_request());
      break;
    }
    case kRngRequest: {
      mutable_rng_request()->::xla::RngRequest::MergeFrom(from.rng_request());
      break;
    }
    case kSelectAndScatterRequest: {
      mutable_select_and_scatter_request()->::xla::SelectAndScatterRequest::MergeFrom(from.select_and_scatter_request());
      break;
    }
    case kSliceRequest: {
      mutable_slice_request()->::xla::SliceRequest::MergeFrom(from.slice_request());
      break;
    }
    case kTernaryOpRequest: {
      mutable_ternary_op_request()->::xla::TernaryOpRequest::MergeFrom(from.ternary_op_request());
      break;
    }
    case kTraceRequest: {
      mutable_trace_request()->::xla::TraceRequest::MergeFrom(from.trace_request());
      break;
    }
    case kTransposeRequest: {
      mutable_transpose_request()->::xla::TransposeRequest::MergeFrom(from.transpose_request());
      break;
    }
    case kUnaryOpRequest: {
      mutable_unary_op_request()->::xla::UnaryOpRequest::MergeFrom(from.unary_op_request());
      break;
    }
    case kVariadicOpRequest: {
      mutable_variadic_op_request()->::xla::VariadicOpRequest::MergeFrom(from.variadic_op_request());
      break;
    }
    case kWhileRequest: {
      mutable_while_request()->::xla::WhileRequest::MergeFrom(from.while_request());
      break;
    }
    case kSendRequest: {
      mutable_send_request()->::xla::SendRequest::MergeFrom(from.send_request());
      break;
    }
    case kRecvRequest: {
      mutable_recv_request()->::xla::RecvRequest::MergeFrom(from.recv_request());
      break;
    }
    case kOutfeedRequest: {
      mutable_outfeed_request()->::xla::OutfeedRequest::MergeFrom(from.outfeed_request());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
}

void OpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.OpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpRequest::CopyFrom(const OpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRequest::IsInitialized() const {
  return true;
}

void OpRequest::Swap(OpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpRequest::UnsafeArenaSwap(OpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpRequest::InternalSwap(OpRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(metadata_, other->metadata_);
  std::swap(op_, other->op_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpRequest

// .xla.ComputationHandle computation = 1;
bool OpRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void OpRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& OpRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* OpRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    _slow_mutable_computation();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.computation)
  return computation_;
}
::xla::ComputationHandle* OpRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.computation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_computation();
  } else {
    ::xla::ComputationHandle* temp = computation_;
    computation_ = NULL;
    return temp;
  }
}
 void OpRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete computation_;
  }
  if (computation != NULL) {
    _slow_set_allocated_computation(message_arena, &computation);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.computation)
}

// .xla.OpMetadata metadata = 33;
bool OpRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void OpRequest::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::xla::OpMetadata& OpRequest::metadata() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::xla::OpMetadata::internal_default_instance();
}
::xla::OpMetadata* OpRequest::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.metadata)
  return metadata_;
}
::xla::OpMetadata* OpRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::xla::OpMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
 void OpRequest::set_allocated_metadata(::xla::OpMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.metadata)
}

// .xla.BinaryOpRequest binary_op_request = 2;
bool OpRequest::has_binary_op_request() const {
  return op_case() == kBinaryOpRequest;
}
void OpRequest::set_has_binary_op_request() {
  _oneof_case_[0] = kBinaryOpRequest;
}
void OpRequest::clear_binary_op_request() {
  if (has_binary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.binary_op_request_;
    }
    clear_has_op();
  }
}
 const ::xla::BinaryOpRequest& OpRequest::binary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.binary_op_request)
  return has_binary_op_request()
      ? *op_.binary_op_request_
      : ::xla::BinaryOpRequest::default_instance();
}
::xla::BinaryOpRequest* OpRequest::mutable_binary_op_request() {
  if (!has_binary_op_request()) {
    clear_op();
    set_has_binary_op_request();
    op_.binary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::BinaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.binary_op_request)
  return op_.binary_op_request_;
}
::xla::BinaryOpRequest* OpRequest::release_binary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.binary_op_request)
  if (has_binary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::BinaryOpRequest* temp = new ::xla::BinaryOpRequest(*op_.binary_op_request_);
      op_.binary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::BinaryOpRequest* temp = op_.binary_op_request_;
      op_.binary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_binary_op_request(::xla::BinaryOpRequest* binary_op_request) {
  clear_op();
  if (binary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(binary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(binary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(binary_op_request)) {
      ::xla::BinaryOpRequest* new_binary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::BinaryOpRequest >(
          GetArenaNoVirtual());
      new_binary_op_request->CopyFrom(*binary_op_request);
      binary_op_request = new_binary_op_request;
    }
    set_has_binary_op_request();
    op_.binary_op_request_ = binary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.binary_op_request)
}
 ::xla::BinaryOpRequest* OpRequest::unsafe_arena_release_binary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.binary_op_request)
  if (has_binary_op_request()) {
    clear_has_op();
    ::xla::BinaryOpRequest* temp = op_.binary_op_request_;
    op_.binary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_binary_op_request(::xla::BinaryOpRequest* binary_op_request) {
  clear_op();
  if (binary_op_request) {
    set_has_binary_op_request();
    op_.binary_op_request_ = binary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.binary_op_request)
}

// .xla.BroadcastRequest broadcast_request = 3;
bool OpRequest::has_broadcast_request() const {
  return op_case() == kBroadcastRequest;
}
void OpRequest::set_has_broadcast_request() {
  _oneof_case_[0] = kBroadcastRequest;
}
void OpRequest::clear_broadcast_request() {
  if (has_broadcast_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.broadcast_request_;
    }
    clear_has_op();
  }
}
 const ::xla::BroadcastRequest& OpRequest::broadcast_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.broadcast_request)
  return has_broadcast_request()
      ? *op_.broadcast_request_
      : ::xla::BroadcastRequest::default_instance();
}
::xla::BroadcastRequest* OpRequest::mutable_broadcast_request() {
  if (!has_broadcast_request()) {
    clear_op();
    set_has_broadcast_request();
    op_.broadcast_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::BroadcastRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.broadcast_request)
  return op_.broadcast_request_;
}
::xla::BroadcastRequest* OpRequest::release_broadcast_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.broadcast_request)
  if (has_broadcast_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::BroadcastRequest* temp = new ::xla::BroadcastRequest(*op_.broadcast_request_);
      op_.broadcast_request_ = NULL;
      return temp;
    } else {
      ::xla::BroadcastRequest* temp = op_.broadcast_request_;
      op_.broadcast_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_broadcast_request(::xla::BroadcastRequest* broadcast_request) {
  clear_op();
  if (broadcast_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(broadcast_request) == NULL) {
      GetArenaNoVirtual()->Own(broadcast_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(broadcast_request)) {
      ::xla::BroadcastRequest* new_broadcast_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::BroadcastRequest >(
          GetArenaNoVirtual());
      new_broadcast_request->CopyFrom(*broadcast_request);
      broadcast_request = new_broadcast_request;
    }
    set_has_broadcast_request();
    op_.broadcast_request_ = broadcast_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.broadcast_request)
}
 ::xla::BroadcastRequest* OpRequest::unsafe_arena_release_broadcast_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.broadcast_request)
  if (has_broadcast_request()) {
    clear_has_op();
    ::xla::BroadcastRequest* temp = op_.broadcast_request_;
    op_.broadcast_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_broadcast_request(::xla::BroadcastRequest* broadcast_request) {
  clear_op();
  if (broadcast_request) {
    set_has_broadcast_request();
    op_.broadcast_request_ = broadcast_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.broadcast_request)
}

// .xla.CallRequest call_request = 4;
bool OpRequest::has_call_request() const {
  return op_case() == kCallRequest;
}
void OpRequest::set_has_call_request() {
  _oneof_case_[0] = kCallRequest;
}
void OpRequest::clear_call_request() {
  if (has_call_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.call_request_;
    }
    clear_has_op();
  }
}
 const ::xla::CallRequest& OpRequest::call_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.call_request)
  return has_call_request()
      ? *op_.call_request_
      : ::xla::CallRequest::default_instance();
}
::xla::CallRequest* OpRequest::mutable_call_request() {
  if (!has_call_request()) {
    clear_op();
    set_has_call_request();
    op_.call_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CallRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.call_request)
  return op_.call_request_;
}
::xla::CallRequest* OpRequest::release_call_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.call_request)
  if (has_call_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CallRequest* temp = new ::xla::CallRequest(*op_.call_request_);
      op_.call_request_ = NULL;
      return temp;
    } else {
      ::xla::CallRequest* temp = op_.call_request_;
      op_.call_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_call_request(::xla::CallRequest* call_request) {
  clear_op();
  if (call_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(call_request) == NULL) {
      GetArenaNoVirtual()->Own(call_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(call_request)) {
      ::xla::CallRequest* new_call_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CallRequest >(
          GetArenaNoVirtual());
      new_call_request->CopyFrom(*call_request);
      call_request = new_call_request;
    }
    set_has_call_request();
    op_.call_request_ = call_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.call_request)
}
 ::xla::CallRequest* OpRequest::unsafe_arena_release_call_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.call_request)
  if (has_call_request()) {
    clear_has_op();
    ::xla::CallRequest* temp = op_.call_request_;
    op_.call_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_call_request(::xla::CallRequest* call_request) {
  clear_op();
  if (call_request) {
    set_has_call_request();
    op_.call_request_ = call_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.call_request)
}

// .xla.ConcatenateRequest concatenate_request = 5;
bool OpRequest::has_concatenate_request() const {
  return op_case() == kConcatenateRequest;
}
void OpRequest::set_has_concatenate_request() {
  _oneof_case_[0] = kConcatenateRequest;
}
void OpRequest::clear_concatenate_request() {
  if (has_concatenate_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.concatenate_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ConcatenateRequest& OpRequest::concatenate_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.concatenate_request)
  return has_concatenate_request()
      ? *op_.concatenate_request_
      : ::xla::ConcatenateRequest::default_instance();
}
::xla::ConcatenateRequest* OpRequest::mutable_concatenate_request() {
  if (!has_concatenate_request()) {
    clear_op();
    set_has_concatenate_request();
    op_.concatenate_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConcatenateRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.concatenate_request)
  return op_.concatenate_request_;
}
::xla::ConcatenateRequest* OpRequest::release_concatenate_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.concatenate_request)
  if (has_concatenate_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConcatenateRequest* temp = new ::xla::ConcatenateRequest(*op_.concatenate_request_);
      op_.concatenate_request_ = NULL;
      return temp;
    } else {
      ::xla::ConcatenateRequest* temp = op_.concatenate_request_;
      op_.concatenate_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_concatenate_request(::xla::ConcatenateRequest* concatenate_request) {
  clear_op();
  if (concatenate_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(concatenate_request) == NULL) {
      GetArenaNoVirtual()->Own(concatenate_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(concatenate_request)) {
      ::xla::ConcatenateRequest* new_concatenate_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConcatenateRequest >(
          GetArenaNoVirtual());
      new_concatenate_request->CopyFrom(*concatenate_request);
      concatenate_request = new_concatenate_request;
    }
    set_has_concatenate_request();
    op_.concatenate_request_ = concatenate_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.concatenate_request)
}
 ::xla::ConcatenateRequest* OpRequest::unsafe_arena_release_concatenate_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.concatenate_request)
  if (has_concatenate_request()) {
    clear_has_op();
    ::xla::ConcatenateRequest* temp = op_.concatenate_request_;
    op_.concatenate_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_concatenate_request(::xla::ConcatenateRequest* concatenate_request) {
  clear_op();
  if (concatenate_request) {
    set_has_concatenate_request();
    op_.concatenate_request_ = concatenate_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.concatenate_request)
}

// .xla.ConstantRequest constant_request = 6;
bool OpRequest::has_constant_request() const {
  return op_case() == kConstantRequest;
}
void OpRequest::set_has_constant_request() {
  _oneof_case_[0] = kConstantRequest;
}
void OpRequest::clear_constant_request() {
  if (has_constant_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.constant_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ConstantRequest& OpRequest::constant_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.constant_request)
  return has_constant_request()
      ? *op_.constant_request_
      : ::xla::ConstantRequest::default_instance();
}
::xla::ConstantRequest* OpRequest::mutable_constant_request() {
  if (!has_constant_request()) {
    clear_op();
    set_has_constant_request();
    op_.constant_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConstantRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.constant_request)
  return op_.constant_request_;
}
::xla::ConstantRequest* OpRequest::release_constant_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.constant_request)
  if (has_constant_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConstantRequest* temp = new ::xla::ConstantRequest(*op_.constant_request_);
      op_.constant_request_ = NULL;
      return temp;
    } else {
      ::xla::ConstantRequest* temp = op_.constant_request_;
      op_.constant_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_constant_request(::xla::ConstantRequest* constant_request) {
  clear_op();
  if (constant_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(constant_request) == NULL) {
      GetArenaNoVirtual()->Own(constant_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(constant_request)) {
      ::xla::ConstantRequest* new_constant_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConstantRequest >(
          GetArenaNoVirtual());
      new_constant_request->CopyFrom(*constant_request);
      constant_request = new_constant_request;
    }
    set_has_constant_request();
    op_.constant_request_ = constant_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.constant_request)
}
 ::xla::ConstantRequest* OpRequest::unsafe_arena_release_constant_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.constant_request)
  if (has_constant_request()) {
    clear_has_op();
    ::xla::ConstantRequest* temp = op_.constant_request_;
    op_.constant_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_constant_request(::xla::ConstantRequest* constant_request) {
  clear_op();
  if (constant_request) {
    set_has_constant_request();
    op_.constant_request_ = constant_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.constant_request)
}

// .xla.ConvertRequest convert_request = 7;
bool OpRequest::has_convert_request() const {
  return op_case() == kConvertRequest;
}
void OpRequest::set_has_convert_request() {
  _oneof_case_[0] = kConvertRequest;
}
void OpRequest::clear_convert_request() {
  if (has_convert_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.convert_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ConvertRequest& OpRequest::convert_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.convert_request)
  return has_convert_request()
      ? *op_.convert_request_
      : ::xla::ConvertRequest::default_instance();
}
::xla::ConvertRequest* OpRequest::mutable_convert_request() {
  if (!has_convert_request()) {
    clear_op();
    set_has_convert_request();
    op_.convert_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConvertRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.convert_request)
  return op_.convert_request_;
}
::xla::ConvertRequest* OpRequest::release_convert_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.convert_request)
  if (has_convert_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConvertRequest* temp = new ::xla::ConvertRequest(*op_.convert_request_);
      op_.convert_request_ = NULL;
      return temp;
    } else {
      ::xla::ConvertRequest* temp = op_.convert_request_;
      op_.convert_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_convert_request(::xla::ConvertRequest* convert_request) {
  clear_op();
  if (convert_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(convert_request) == NULL) {
      GetArenaNoVirtual()->Own(convert_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(convert_request)) {
      ::xla::ConvertRequest* new_convert_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConvertRequest >(
          GetArenaNoVirtual());
      new_convert_request->CopyFrom(*convert_request);
      convert_request = new_convert_request;
    }
    set_has_convert_request();
    op_.convert_request_ = convert_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.convert_request)
}
 ::xla::ConvertRequest* OpRequest::unsafe_arena_release_convert_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.convert_request)
  if (has_convert_request()) {
    clear_has_op();
    ::xla::ConvertRequest* temp = op_.convert_request_;
    op_.convert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_convert_request(::xla::ConvertRequest* convert_request) {
  clear_op();
  if (convert_request) {
    set_has_convert_request();
    op_.convert_request_ = convert_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.convert_request)
}

// .xla.ConvolveRequest convolve_request = 8;
bool OpRequest::has_convolve_request() const {
  return op_case() == kConvolveRequest;
}
void OpRequest::set_has_convolve_request() {
  _oneof_case_[0] = kConvolveRequest;
}
void OpRequest::clear_convolve_request() {
  if (has_convolve_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.convolve_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ConvolveRequest& OpRequest::convolve_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.convolve_request)
  return has_convolve_request()
      ? *op_.convolve_request_
      : ::xla::ConvolveRequest::default_instance();
}
::xla::ConvolveRequest* OpRequest::mutable_convolve_request() {
  if (!has_convolve_request()) {
    clear_op();
    set_has_convolve_request();
    op_.convolve_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ConvolveRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.convolve_request)
  return op_.convolve_request_;
}
::xla::ConvolveRequest* OpRequest::release_convolve_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.convolve_request)
  if (has_convolve_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ConvolveRequest* temp = new ::xla::ConvolveRequest(*op_.convolve_request_);
      op_.convolve_request_ = NULL;
      return temp;
    } else {
      ::xla::ConvolveRequest* temp = op_.convolve_request_;
      op_.convolve_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_convolve_request(::xla::ConvolveRequest* convolve_request) {
  clear_op();
  if (convolve_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(convolve_request) == NULL) {
      GetArenaNoVirtual()->Own(convolve_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(convolve_request)) {
      ::xla::ConvolveRequest* new_convolve_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ConvolveRequest >(
          GetArenaNoVirtual());
      new_convolve_request->CopyFrom(*convolve_request);
      convolve_request = new_convolve_request;
    }
    set_has_convolve_request();
    op_.convolve_request_ = convolve_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.convolve_request)
}
 ::xla::ConvolveRequest* OpRequest::unsafe_arena_release_convolve_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.convolve_request)
  if (has_convolve_request()) {
    clear_has_op();
    ::xla::ConvolveRequest* temp = op_.convolve_request_;
    op_.convolve_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_convolve_request(::xla::ConvolveRequest* convolve_request) {
  clear_op();
  if (convolve_request) {
    set_has_convolve_request();
    op_.convolve_request_ = convolve_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.convolve_request)
}

// .xla.CrossReplicaSumRequest cross_replica_sum_request = 9;
bool OpRequest::has_cross_replica_sum_request() const {
  return op_case() == kCrossReplicaSumRequest;
}
void OpRequest::set_has_cross_replica_sum_request() {
  _oneof_case_[0] = kCrossReplicaSumRequest;
}
void OpRequest::clear_cross_replica_sum_request() {
  if (has_cross_replica_sum_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.cross_replica_sum_request_;
    }
    clear_has_op();
  }
}
 const ::xla::CrossReplicaSumRequest& OpRequest::cross_replica_sum_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.cross_replica_sum_request)
  return has_cross_replica_sum_request()
      ? *op_.cross_replica_sum_request_
      : ::xla::CrossReplicaSumRequest::default_instance();
}
::xla::CrossReplicaSumRequest* OpRequest::mutable_cross_replica_sum_request() {
  if (!has_cross_replica_sum_request()) {
    clear_op();
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CrossReplicaSumRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.cross_replica_sum_request)
  return op_.cross_replica_sum_request_;
}
::xla::CrossReplicaSumRequest* OpRequest::release_cross_replica_sum_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.cross_replica_sum_request)
  if (has_cross_replica_sum_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CrossReplicaSumRequest* temp = new ::xla::CrossReplicaSumRequest(*op_.cross_replica_sum_request_);
      op_.cross_replica_sum_request_ = NULL;
      return temp;
    } else {
      ::xla::CrossReplicaSumRequest* temp = op_.cross_replica_sum_request_;
      op_.cross_replica_sum_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_cross_replica_sum_request(::xla::CrossReplicaSumRequest* cross_replica_sum_request) {
  clear_op();
  if (cross_replica_sum_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(cross_replica_sum_request) == NULL) {
      GetArenaNoVirtual()->Own(cross_replica_sum_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(cross_replica_sum_request)) {
      ::xla::CrossReplicaSumRequest* new_cross_replica_sum_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CrossReplicaSumRequest >(
          GetArenaNoVirtual());
      new_cross_replica_sum_request->CopyFrom(*cross_replica_sum_request);
      cross_replica_sum_request = new_cross_replica_sum_request;
    }
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = cross_replica_sum_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.cross_replica_sum_request)
}
 ::xla::CrossReplicaSumRequest* OpRequest::unsafe_arena_release_cross_replica_sum_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.cross_replica_sum_request)
  if (has_cross_replica_sum_request()) {
    clear_has_op();
    ::xla::CrossReplicaSumRequest* temp = op_.cross_replica_sum_request_;
    op_.cross_replica_sum_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_cross_replica_sum_request(::xla::CrossReplicaSumRequest* cross_replica_sum_request) {
  clear_op();
  if (cross_replica_sum_request) {
    set_has_cross_replica_sum_request();
    op_.cross_replica_sum_request_ = cross_replica_sum_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.cross_replica_sum_request)
}

// .xla.CustomCallRequest custom_call_request = 10;
bool OpRequest::has_custom_call_request() const {
  return op_case() == kCustomCallRequest;
}
void OpRequest::set_has_custom_call_request() {
  _oneof_case_[0] = kCustomCallRequest;
}
void OpRequest::clear_custom_call_request() {
  if (has_custom_call_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.custom_call_request_;
    }
    clear_has_op();
  }
}
 const ::xla::CustomCallRequest& OpRequest::custom_call_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.custom_call_request)
  return has_custom_call_request()
      ? *op_.custom_call_request_
      : ::xla::CustomCallRequest::default_instance();
}
::xla::CustomCallRequest* OpRequest::mutable_custom_call_request() {
  if (!has_custom_call_request()) {
    clear_op();
    set_has_custom_call_request();
    op_.custom_call_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::CustomCallRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.custom_call_request)
  return op_.custom_call_request_;
}
::xla::CustomCallRequest* OpRequest::release_custom_call_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.custom_call_request)
  if (has_custom_call_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::CustomCallRequest* temp = new ::xla::CustomCallRequest(*op_.custom_call_request_);
      op_.custom_call_request_ = NULL;
      return temp;
    } else {
      ::xla::CustomCallRequest* temp = op_.custom_call_request_;
      op_.custom_call_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_custom_call_request(::xla::CustomCallRequest* custom_call_request) {
  clear_op();
  if (custom_call_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(custom_call_request) == NULL) {
      GetArenaNoVirtual()->Own(custom_call_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(custom_call_request)) {
      ::xla::CustomCallRequest* new_custom_call_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::CustomCallRequest >(
          GetArenaNoVirtual());
      new_custom_call_request->CopyFrom(*custom_call_request);
      custom_call_request = new_custom_call_request;
    }
    set_has_custom_call_request();
    op_.custom_call_request_ = custom_call_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.custom_call_request)
}
 ::xla::CustomCallRequest* OpRequest::unsafe_arena_release_custom_call_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.custom_call_request)
  if (has_custom_call_request()) {
    clear_has_op();
    ::xla::CustomCallRequest* temp = op_.custom_call_request_;
    op_.custom_call_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_custom_call_request(::xla::CustomCallRequest* custom_call_request) {
  clear_op();
  if (custom_call_request) {
    set_has_custom_call_request();
    op_.custom_call_request_ = custom_call_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.custom_call_request)
}

// .xla.DynamicSliceRequest dynamic_slice_request = 11;
bool OpRequest::has_dynamic_slice_request() const {
  return op_case() == kDynamicSliceRequest;
}
void OpRequest::set_has_dynamic_slice_request() {
  _oneof_case_[0] = kDynamicSliceRequest;
}
void OpRequest::clear_dynamic_slice_request() {
  if (has_dynamic_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.dynamic_slice_request_;
    }
    clear_has_op();
  }
}
 const ::xla::DynamicSliceRequest& OpRequest::dynamic_slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.dynamic_slice_request)
  return has_dynamic_slice_request()
      ? *op_.dynamic_slice_request_
      : ::xla::DynamicSliceRequest::default_instance();
}
::xla::DynamicSliceRequest* OpRequest::mutable_dynamic_slice_request() {
  if (!has_dynamic_slice_request()) {
    clear_op();
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::DynamicSliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.dynamic_slice_request)
  return op_.dynamic_slice_request_;
}
::xla::DynamicSliceRequest* OpRequest::release_dynamic_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.dynamic_slice_request)
  if (has_dynamic_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::DynamicSliceRequest* temp = new ::xla::DynamicSliceRequest(*op_.dynamic_slice_request_);
      op_.dynamic_slice_request_ = NULL;
      return temp;
    } else {
      ::xla::DynamicSliceRequest* temp = op_.dynamic_slice_request_;
      op_.dynamic_slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_dynamic_slice_request(::xla::DynamicSliceRequest* dynamic_slice_request) {
  clear_op();
  if (dynamic_slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dynamic_slice_request) == NULL) {
      GetArenaNoVirtual()->Own(dynamic_slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dynamic_slice_request)) {
      ::xla::DynamicSliceRequest* new_dynamic_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::DynamicSliceRequest >(
          GetArenaNoVirtual());
      new_dynamic_slice_request->CopyFrom(*dynamic_slice_request);
      dynamic_slice_request = new_dynamic_slice_request;
    }
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = dynamic_slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.dynamic_slice_request)
}
 ::xla::DynamicSliceRequest* OpRequest::unsafe_arena_release_dynamic_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.dynamic_slice_request)
  if (has_dynamic_slice_request()) {
    clear_has_op();
    ::xla::DynamicSliceRequest* temp = op_.dynamic_slice_request_;
    op_.dynamic_slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_dynamic_slice_request(::xla::DynamicSliceRequest* dynamic_slice_request) {
  clear_op();
  if (dynamic_slice_request) {
    set_has_dynamic_slice_request();
    op_.dynamic_slice_request_ = dynamic_slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.dynamic_slice_request)
}

// .xla.DynamicUpdateSliceRequest dynamic_update_slice_request = 12;
bool OpRequest::has_dynamic_update_slice_request() const {
  return op_case() == kDynamicUpdateSliceRequest;
}
void OpRequest::set_has_dynamic_update_slice_request() {
  _oneof_case_[0] = kDynamicUpdateSliceRequest;
}
void OpRequest::clear_dynamic_update_slice_request() {
  if (has_dynamic_update_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.dynamic_update_slice_request_;
    }
    clear_has_op();
  }
}
 const ::xla::DynamicUpdateSliceRequest& OpRequest::dynamic_update_slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.dynamic_update_slice_request)
  return has_dynamic_update_slice_request()
      ? *op_.dynamic_update_slice_request_
      : ::xla::DynamicUpdateSliceRequest::default_instance();
}
::xla::DynamicUpdateSliceRequest* OpRequest::mutable_dynamic_update_slice_request() {
  if (!has_dynamic_update_slice_request()) {
    clear_op();
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::DynamicUpdateSliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.dynamic_update_slice_request)
  return op_.dynamic_update_slice_request_;
}
::xla::DynamicUpdateSliceRequest* OpRequest::release_dynamic_update_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.dynamic_update_slice_request)
  if (has_dynamic_update_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::DynamicUpdateSliceRequest* temp = new ::xla::DynamicUpdateSliceRequest(*op_.dynamic_update_slice_request_);
      op_.dynamic_update_slice_request_ = NULL;
      return temp;
    } else {
      ::xla::DynamicUpdateSliceRequest* temp = op_.dynamic_update_slice_request_;
      op_.dynamic_update_slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_dynamic_update_slice_request(::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request) {
  clear_op();
  if (dynamic_update_slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(dynamic_update_slice_request) == NULL) {
      GetArenaNoVirtual()->Own(dynamic_update_slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(dynamic_update_slice_request)) {
      ::xla::DynamicUpdateSliceRequest* new_dynamic_update_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::DynamicUpdateSliceRequest >(
          GetArenaNoVirtual());
      new_dynamic_update_slice_request->CopyFrom(*dynamic_update_slice_request);
      dynamic_update_slice_request = new_dynamic_update_slice_request;
    }
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = dynamic_update_slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.dynamic_update_slice_request)
}
 ::xla::DynamicUpdateSliceRequest* OpRequest::unsafe_arena_release_dynamic_update_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.dynamic_update_slice_request)
  if (has_dynamic_update_slice_request()) {
    clear_has_op();
    ::xla::DynamicUpdateSliceRequest* temp = op_.dynamic_update_slice_request_;
    op_.dynamic_update_slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_dynamic_update_slice_request(::xla::DynamicUpdateSliceRequest* dynamic_update_slice_request) {
  clear_op();
  if (dynamic_update_slice_request) {
    set_has_dynamic_update_slice_request();
    op_.dynamic_update_slice_request_ = dynamic_update_slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.dynamic_update_slice_request)
}

// .xla.GetTupleElementRequest get_tuple_element_request = 13;
bool OpRequest::has_get_tuple_element_request() const {
  return op_case() == kGetTupleElementRequest;
}
void OpRequest::set_has_get_tuple_element_request() {
  _oneof_case_[0] = kGetTupleElementRequest;
}
void OpRequest::clear_get_tuple_element_request() {
  if (has_get_tuple_element_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.get_tuple_element_request_;
    }
    clear_has_op();
  }
}
 const ::xla::GetTupleElementRequest& OpRequest::get_tuple_element_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.get_tuple_element_request)
  return has_get_tuple_element_request()
      ? *op_.get_tuple_element_request_
      : ::xla::GetTupleElementRequest::default_instance();
}
::xla::GetTupleElementRequest* OpRequest::mutable_get_tuple_element_request() {
  if (!has_get_tuple_element_request()) {
    clear_op();
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::GetTupleElementRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.get_tuple_element_request)
  return op_.get_tuple_element_request_;
}
::xla::GetTupleElementRequest* OpRequest::release_get_tuple_element_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.get_tuple_element_request)
  if (has_get_tuple_element_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::GetTupleElementRequest* temp = new ::xla::GetTupleElementRequest(*op_.get_tuple_element_request_);
      op_.get_tuple_element_request_ = NULL;
      return temp;
    } else {
      ::xla::GetTupleElementRequest* temp = op_.get_tuple_element_request_;
      op_.get_tuple_element_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_get_tuple_element_request(::xla::GetTupleElementRequest* get_tuple_element_request) {
  clear_op();
  if (get_tuple_element_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(get_tuple_element_request) == NULL) {
      GetArenaNoVirtual()->Own(get_tuple_element_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(get_tuple_element_request)) {
      ::xla::GetTupleElementRequest* new_get_tuple_element_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::GetTupleElementRequest >(
          GetArenaNoVirtual());
      new_get_tuple_element_request->CopyFrom(*get_tuple_element_request);
      get_tuple_element_request = new_get_tuple_element_request;
    }
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = get_tuple_element_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.get_tuple_element_request)
}
 ::xla::GetTupleElementRequest* OpRequest::unsafe_arena_release_get_tuple_element_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.get_tuple_element_request)
  if (has_get_tuple_element_request()) {
    clear_has_op();
    ::xla::GetTupleElementRequest* temp = op_.get_tuple_element_request_;
    op_.get_tuple_element_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_get_tuple_element_request(::xla::GetTupleElementRequest* get_tuple_element_request) {
  clear_op();
  if (get_tuple_element_request) {
    set_has_get_tuple_element_request();
    op_.get_tuple_element_request_ = get_tuple_element_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.get_tuple_element_request)
}

// .xla.InfeedRequest infeed_request = 14;
bool OpRequest::has_infeed_request() const {
  return op_case() == kInfeedRequest;
}
void OpRequest::set_has_infeed_request() {
  _oneof_case_[0] = kInfeedRequest;
}
void OpRequest::clear_infeed_request() {
  if (has_infeed_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.infeed_request_;
    }
    clear_has_op();
  }
}
 const ::xla::InfeedRequest& OpRequest::infeed_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.infeed_request)
  return has_infeed_request()
      ? *op_.infeed_request_
      : ::xla::InfeedRequest::default_instance();
}
::xla::InfeedRequest* OpRequest::mutable_infeed_request() {
  if (!has_infeed_request()) {
    clear_op();
    set_has_infeed_request();
    op_.infeed_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::InfeedRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.infeed_request)
  return op_.infeed_request_;
}
::xla::InfeedRequest* OpRequest::release_infeed_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.infeed_request)
  if (has_infeed_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::InfeedRequest* temp = new ::xla::InfeedRequest(*op_.infeed_request_);
      op_.infeed_request_ = NULL;
      return temp;
    } else {
      ::xla::InfeedRequest* temp = op_.infeed_request_;
      op_.infeed_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_infeed_request(::xla::InfeedRequest* infeed_request) {
  clear_op();
  if (infeed_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(infeed_request) == NULL) {
      GetArenaNoVirtual()->Own(infeed_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(infeed_request)) {
      ::xla::InfeedRequest* new_infeed_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::InfeedRequest >(
          GetArenaNoVirtual());
      new_infeed_request->CopyFrom(*infeed_request);
      infeed_request = new_infeed_request;
    }
    set_has_infeed_request();
    op_.infeed_request_ = infeed_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.infeed_request)
}
 ::xla::InfeedRequest* OpRequest::unsafe_arena_release_infeed_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.infeed_request)
  if (has_infeed_request()) {
    clear_has_op();
    ::xla::InfeedRequest* temp = op_.infeed_request_;
    op_.infeed_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_infeed_request(::xla::InfeedRequest* infeed_request) {
  clear_op();
  if (infeed_request) {
    set_has_infeed_request();
    op_.infeed_request_ = infeed_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.infeed_request)
}

// .xla.MapRequest map_request = 15;
bool OpRequest::has_map_request() const {
  return op_case() == kMapRequest;
}
void OpRequest::set_has_map_request() {
  _oneof_case_[0] = kMapRequest;
}
void OpRequest::clear_map_request() {
  if (has_map_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.map_request_;
    }
    clear_has_op();
  }
}
 const ::xla::MapRequest& OpRequest::map_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.map_request)
  return has_map_request()
      ? *op_.map_request_
      : ::xla::MapRequest::default_instance();
}
::xla::MapRequest* OpRequest::mutable_map_request() {
  if (!has_map_request()) {
    clear_op();
    set_has_map_request();
    op_.map_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::MapRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.map_request)
  return op_.map_request_;
}
::xla::MapRequest* OpRequest::release_map_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.map_request)
  if (has_map_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::MapRequest* temp = new ::xla::MapRequest(*op_.map_request_);
      op_.map_request_ = NULL;
      return temp;
    } else {
      ::xla::MapRequest* temp = op_.map_request_;
      op_.map_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_map_request(::xla::MapRequest* map_request) {
  clear_op();
  if (map_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(map_request) == NULL) {
      GetArenaNoVirtual()->Own(map_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(map_request)) {
      ::xla::MapRequest* new_map_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::MapRequest >(
          GetArenaNoVirtual());
      new_map_request->CopyFrom(*map_request);
      map_request = new_map_request;
    }
    set_has_map_request();
    op_.map_request_ = map_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.map_request)
}
 ::xla::MapRequest* OpRequest::unsafe_arena_release_map_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.map_request)
  if (has_map_request()) {
    clear_has_op();
    ::xla::MapRequest* temp = op_.map_request_;
    op_.map_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_map_request(::xla::MapRequest* map_request) {
  clear_op();
  if (map_request) {
    set_has_map_request();
    op_.map_request_ = map_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.map_request)
}

// .xla.PadRequest pad_request = 16;
bool OpRequest::has_pad_request() const {
  return op_case() == kPadRequest;
}
void OpRequest::set_has_pad_request() {
  _oneof_case_[0] = kPadRequest;
}
void OpRequest::clear_pad_request() {
  if (has_pad_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.pad_request_;
    }
    clear_has_op();
  }
}
 const ::xla::PadRequest& OpRequest::pad_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.pad_request)
  return has_pad_request()
      ? *op_.pad_request_
      : ::xla::PadRequest::default_instance();
}
::xla::PadRequest* OpRequest::mutable_pad_request() {
  if (!has_pad_request()) {
    clear_op();
    set_has_pad_request();
    op_.pad_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::PadRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.pad_request)
  return op_.pad_request_;
}
::xla::PadRequest* OpRequest::release_pad_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.pad_request)
  if (has_pad_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::PadRequest* temp = new ::xla::PadRequest(*op_.pad_request_);
      op_.pad_request_ = NULL;
      return temp;
    } else {
      ::xla::PadRequest* temp = op_.pad_request_;
      op_.pad_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_pad_request(::xla::PadRequest* pad_request) {
  clear_op();
  if (pad_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(pad_request) == NULL) {
      GetArenaNoVirtual()->Own(pad_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(pad_request)) {
      ::xla::PadRequest* new_pad_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::PadRequest >(
          GetArenaNoVirtual());
      new_pad_request->CopyFrom(*pad_request);
      pad_request = new_pad_request;
    }
    set_has_pad_request();
    op_.pad_request_ = pad_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.pad_request)
}
 ::xla::PadRequest* OpRequest::unsafe_arena_release_pad_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.pad_request)
  if (has_pad_request()) {
    clear_has_op();
    ::xla::PadRequest* temp = op_.pad_request_;
    op_.pad_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_pad_request(::xla::PadRequest* pad_request) {
  clear_op();
  if (pad_request) {
    set_has_pad_request();
    op_.pad_request_ = pad_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.pad_request)
}

// .xla.ParameterRequest parameter_request = 17;
bool OpRequest::has_parameter_request() const {
  return op_case() == kParameterRequest;
}
void OpRequest::set_has_parameter_request() {
  _oneof_case_[0] = kParameterRequest;
}
void OpRequest::clear_parameter_request() {
  if (has_parameter_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.parameter_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ParameterRequest& OpRequest::parameter_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.parameter_request)
  return has_parameter_request()
      ? *op_.parameter_request_
      : ::xla::ParameterRequest::default_instance();
}
::xla::ParameterRequest* OpRequest::mutable_parameter_request() {
  if (!has_parameter_request()) {
    clear_op();
    set_has_parameter_request();
    op_.parameter_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ParameterRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.parameter_request)
  return op_.parameter_request_;
}
::xla::ParameterRequest* OpRequest::release_parameter_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.parameter_request)
  if (has_parameter_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ParameterRequest* temp = new ::xla::ParameterRequest(*op_.parameter_request_);
      op_.parameter_request_ = NULL;
      return temp;
    } else {
      ::xla::ParameterRequest* temp = op_.parameter_request_;
      op_.parameter_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_parameter_request(::xla::ParameterRequest* parameter_request) {
  clear_op();
  if (parameter_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(parameter_request) == NULL) {
      GetArenaNoVirtual()->Own(parameter_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(parameter_request)) {
      ::xla::ParameterRequest* new_parameter_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ParameterRequest >(
          GetArenaNoVirtual());
      new_parameter_request->CopyFrom(*parameter_request);
      parameter_request = new_parameter_request;
    }
    set_has_parameter_request();
    op_.parameter_request_ = parameter_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.parameter_request)
}
 ::xla::ParameterRequest* OpRequest::unsafe_arena_release_parameter_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.parameter_request)
  if (has_parameter_request()) {
    clear_has_op();
    ::xla::ParameterRequest* temp = op_.parameter_request_;
    op_.parameter_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_parameter_request(::xla::ParameterRequest* parameter_request) {
  clear_op();
  if (parameter_request) {
    set_has_parameter_request();
    op_.parameter_request_ = parameter_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.parameter_request)
}

// .xla.ReduceRequest reduce_request = 18;
bool OpRequest::has_reduce_request() const {
  return op_case() == kReduceRequest;
}
void OpRequest::set_has_reduce_request() {
  _oneof_case_[0] = kReduceRequest;
}
void OpRequest::clear_reduce_request() {
  if (has_reduce_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reduce_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ReduceRequest& OpRequest::reduce_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reduce_request)
  return has_reduce_request()
      ? *op_.reduce_request_
      : ::xla::ReduceRequest::default_instance();
}
::xla::ReduceRequest* OpRequest::mutable_reduce_request() {
  if (!has_reduce_request()) {
    clear_op();
    set_has_reduce_request();
    op_.reduce_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReduceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reduce_request)
  return op_.reduce_request_;
}
::xla::ReduceRequest* OpRequest::release_reduce_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reduce_request)
  if (has_reduce_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReduceRequest* temp = new ::xla::ReduceRequest(*op_.reduce_request_);
      op_.reduce_request_ = NULL;
      return temp;
    } else {
      ::xla::ReduceRequest* temp = op_.reduce_request_;
      op_.reduce_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_reduce_request(::xla::ReduceRequest* reduce_request) {
  clear_op();
  if (reduce_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reduce_request) == NULL) {
      GetArenaNoVirtual()->Own(reduce_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reduce_request)) {
      ::xla::ReduceRequest* new_reduce_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReduceRequest >(
          GetArenaNoVirtual());
      new_reduce_request->CopyFrom(*reduce_request);
      reduce_request = new_reduce_request;
    }
    set_has_reduce_request();
    op_.reduce_request_ = reduce_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reduce_request)
}
 ::xla::ReduceRequest* OpRequest::unsafe_arena_release_reduce_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reduce_request)
  if (has_reduce_request()) {
    clear_has_op();
    ::xla::ReduceRequest* temp = op_.reduce_request_;
    op_.reduce_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_reduce_request(::xla::ReduceRequest* reduce_request) {
  clear_op();
  if (reduce_request) {
    set_has_reduce_request();
    op_.reduce_request_ = reduce_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reduce_request)
}

// .xla.ReduceWindowRequest reduce_window_request = 19;
bool OpRequest::has_reduce_window_request() const {
  return op_case() == kReduceWindowRequest;
}
void OpRequest::set_has_reduce_window_request() {
  _oneof_case_[0] = kReduceWindowRequest;
}
void OpRequest::clear_reduce_window_request() {
  if (has_reduce_window_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reduce_window_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ReduceWindowRequest& OpRequest::reduce_window_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reduce_window_request)
  return has_reduce_window_request()
      ? *op_.reduce_window_request_
      : ::xla::ReduceWindowRequest::default_instance();
}
::xla::ReduceWindowRequest* OpRequest::mutable_reduce_window_request() {
  if (!has_reduce_window_request()) {
    clear_op();
    set_has_reduce_window_request();
    op_.reduce_window_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReduceWindowRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reduce_window_request)
  return op_.reduce_window_request_;
}
::xla::ReduceWindowRequest* OpRequest::release_reduce_window_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reduce_window_request)
  if (has_reduce_window_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReduceWindowRequest* temp = new ::xla::ReduceWindowRequest(*op_.reduce_window_request_);
      op_.reduce_window_request_ = NULL;
      return temp;
    } else {
      ::xla::ReduceWindowRequest* temp = op_.reduce_window_request_;
      op_.reduce_window_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_reduce_window_request(::xla::ReduceWindowRequest* reduce_window_request) {
  clear_op();
  if (reduce_window_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reduce_window_request) == NULL) {
      GetArenaNoVirtual()->Own(reduce_window_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reduce_window_request)) {
      ::xla::ReduceWindowRequest* new_reduce_window_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReduceWindowRequest >(
          GetArenaNoVirtual());
      new_reduce_window_request->CopyFrom(*reduce_window_request);
      reduce_window_request = new_reduce_window_request;
    }
    set_has_reduce_window_request();
    op_.reduce_window_request_ = reduce_window_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reduce_window_request)
}
 ::xla::ReduceWindowRequest* OpRequest::unsafe_arena_release_reduce_window_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reduce_window_request)
  if (has_reduce_window_request()) {
    clear_has_op();
    ::xla::ReduceWindowRequest* temp = op_.reduce_window_request_;
    op_.reduce_window_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_reduce_window_request(::xla::ReduceWindowRequest* reduce_window_request) {
  clear_op();
  if (reduce_window_request) {
    set_has_reduce_window_request();
    op_.reduce_window_request_ = reduce_window_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reduce_window_request)
}

// .xla.ReshapeRequest reshape_request = 20;
bool OpRequest::has_reshape_request() const {
  return op_case() == kReshapeRequest;
}
void OpRequest::set_has_reshape_request() {
  _oneof_case_[0] = kReshapeRequest;
}
void OpRequest::clear_reshape_request() {
  if (has_reshape_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reshape_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ReshapeRequest& OpRequest::reshape_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reshape_request)
  return has_reshape_request()
      ? *op_.reshape_request_
      : ::xla::ReshapeRequest::default_instance();
}
::xla::ReshapeRequest* OpRequest::mutable_reshape_request() {
  if (!has_reshape_request()) {
    clear_op();
    set_has_reshape_request();
    op_.reshape_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReshapeRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reshape_request)
  return op_.reshape_request_;
}
::xla::ReshapeRequest* OpRequest::release_reshape_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reshape_request)
  if (has_reshape_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReshapeRequest* temp = new ::xla::ReshapeRequest(*op_.reshape_request_);
      op_.reshape_request_ = NULL;
      return temp;
    } else {
      ::xla::ReshapeRequest* temp = op_.reshape_request_;
      op_.reshape_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_reshape_request(::xla::ReshapeRequest* reshape_request) {
  clear_op();
  if (reshape_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reshape_request) == NULL) {
      GetArenaNoVirtual()->Own(reshape_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reshape_request)) {
      ::xla::ReshapeRequest* new_reshape_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReshapeRequest >(
          GetArenaNoVirtual());
      new_reshape_request->CopyFrom(*reshape_request);
      reshape_request = new_reshape_request;
    }
    set_has_reshape_request();
    op_.reshape_request_ = reshape_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reshape_request)
}
 ::xla::ReshapeRequest* OpRequest::unsafe_arena_release_reshape_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reshape_request)
  if (has_reshape_request()) {
    clear_has_op();
    ::xla::ReshapeRequest* temp = op_.reshape_request_;
    op_.reshape_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_reshape_request(::xla::ReshapeRequest* reshape_request) {
  clear_op();
  if (reshape_request) {
    set_has_reshape_request();
    op_.reshape_request_ = reshape_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reshape_request)
}

// .xla.ReverseRequest reverse_request = 21;
bool OpRequest::has_reverse_request() const {
  return op_case() == kReverseRequest;
}
void OpRequest::set_has_reverse_request() {
  _oneof_case_[0] = kReverseRequest;
}
void OpRequest::clear_reverse_request() {
  if (has_reverse_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reverse_request_;
    }
    clear_has_op();
  }
}
 const ::xla::ReverseRequest& OpRequest::reverse_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.reverse_request)
  return has_reverse_request()
      ? *op_.reverse_request_
      : ::xla::ReverseRequest::default_instance();
}
::xla::ReverseRequest* OpRequest::mutable_reverse_request() {
  if (!has_reverse_request()) {
    clear_op();
    set_has_reverse_request();
    op_.reverse_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::ReverseRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.reverse_request)
  return op_.reverse_request_;
}
::xla::ReverseRequest* OpRequest::release_reverse_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.reverse_request)
  if (has_reverse_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::ReverseRequest* temp = new ::xla::ReverseRequest(*op_.reverse_request_);
      op_.reverse_request_ = NULL;
      return temp;
    } else {
      ::xla::ReverseRequest* temp = op_.reverse_request_;
      op_.reverse_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_reverse_request(::xla::ReverseRequest* reverse_request) {
  clear_op();
  if (reverse_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reverse_request) == NULL) {
      GetArenaNoVirtual()->Own(reverse_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reverse_request)) {
      ::xla::ReverseRequest* new_reverse_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::ReverseRequest >(
          GetArenaNoVirtual());
      new_reverse_request->CopyFrom(*reverse_request);
      reverse_request = new_reverse_request;
    }
    set_has_reverse_request();
    op_.reverse_request_ = reverse_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.reverse_request)
}
 ::xla::ReverseRequest* OpRequest::unsafe_arena_release_reverse_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.reverse_request)
  if (has_reverse_request()) {
    clear_has_op();
    ::xla::ReverseRequest* temp = op_.reverse_request_;
    op_.reverse_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_reverse_request(::xla::ReverseRequest* reverse_request) {
  clear_op();
  if (reverse_request) {
    set_has_reverse_request();
    op_.reverse_request_ = reverse_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.reverse_request)
}

// .xla.RngRequest rng_request = 22;
bool OpRequest::has_rng_request() const {
  return op_case() == kRngRequest;
}
void OpRequest::set_has_rng_request() {
  _oneof_case_[0] = kRngRequest;
}
void OpRequest::clear_rng_request() {
  if (has_rng_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.rng_request_;
    }
    clear_has_op();
  }
}
 const ::xla::RngRequest& OpRequest::rng_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.rng_request)
  return has_rng_request()
      ? *op_.rng_request_
      : ::xla::RngRequest::default_instance();
}
::xla::RngRequest* OpRequest::mutable_rng_request() {
  if (!has_rng_request()) {
    clear_op();
    set_has_rng_request();
    op_.rng_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::RngRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.rng_request)
  return op_.rng_request_;
}
::xla::RngRequest* OpRequest::release_rng_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.rng_request)
  if (has_rng_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::RngRequest* temp = new ::xla::RngRequest(*op_.rng_request_);
      op_.rng_request_ = NULL;
      return temp;
    } else {
      ::xla::RngRequest* temp = op_.rng_request_;
      op_.rng_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_rng_request(::xla::RngRequest* rng_request) {
  clear_op();
  if (rng_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(rng_request) == NULL) {
      GetArenaNoVirtual()->Own(rng_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(rng_request)) {
      ::xla::RngRequest* new_rng_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::RngRequest >(
          GetArenaNoVirtual());
      new_rng_request->CopyFrom(*rng_request);
      rng_request = new_rng_request;
    }
    set_has_rng_request();
    op_.rng_request_ = rng_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.rng_request)
}
 ::xla::RngRequest* OpRequest::unsafe_arena_release_rng_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.rng_request)
  if (has_rng_request()) {
    clear_has_op();
    ::xla::RngRequest* temp = op_.rng_request_;
    op_.rng_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_rng_request(::xla::RngRequest* rng_request) {
  clear_op();
  if (rng_request) {
    set_has_rng_request();
    op_.rng_request_ = rng_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.rng_request)
}

// .xla.SelectAndScatterRequest select_and_scatter_request = 23;
bool OpRequest::has_select_and_scatter_request() const {
  return op_case() == kSelectAndScatterRequest;
}
void OpRequest::set_has_select_and_scatter_request() {
  _oneof_case_[0] = kSelectAndScatterRequest;
}
void OpRequest::clear_select_and_scatter_request() {
  if (has_select_and_scatter_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.select_and_scatter_request_;
    }
    clear_has_op();
  }
}
 const ::xla::SelectAndScatterRequest& OpRequest::select_and_scatter_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.select_and_scatter_request)
  return has_select_and_scatter_request()
      ? *op_.select_and_scatter_request_
      : ::xla::SelectAndScatterRequest::default_instance();
}
::xla::SelectAndScatterRequest* OpRequest::mutable_select_and_scatter_request() {
  if (!has_select_and_scatter_request()) {
    clear_op();
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SelectAndScatterRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.select_and_scatter_request)
  return op_.select_and_scatter_request_;
}
::xla::SelectAndScatterRequest* OpRequest::release_select_and_scatter_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.select_and_scatter_request)
  if (has_select_and_scatter_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SelectAndScatterRequest* temp = new ::xla::SelectAndScatterRequest(*op_.select_and_scatter_request_);
      op_.select_and_scatter_request_ = NULL;
      return temp;
    } else {
      ::xla::SelectAndScatterRequest* temp = op_.select_and_scatter_request_;
      op_.select_and_scatter_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_select_and_scatter_request(::xla::SelectAndScatterRequest* select_and_scatter_request) {
  clear_op();
  if (select_and_scatter_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(select_and_scatter_request) == NULL) {
      GetArenaNoVirtual()->Own(select_and_scatter_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(select_and_scatter_request)) {
      ::xla::SelectAndScatterRequest* new_select_and_scatter_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SelectAndScatterRequest >(
          GetArenaNoVirtual());
      new_select_and_scatter_request->CopyFrom(*select_and_scatter_request);
      select_and_scatter_request = new_select_and_scatter_request;
    }
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = select_and_scatter_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.select_and_scatter_request)
}
 ::xla::SelectAndScatterRequest* OpRequest::unsafe_arena_release_select_and_scatter_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.select_and_scatter_request)
  if (has_select_and_scatter_request()) {
    clear_has_op();
    ::xla::SelectAndScatterRequest* temp = op_.select_and_scatter_request_;
    op_.select_and_scatter_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_select_and_scatter_request(::xla::SelectAndScatterRequest* select_and_scatter_request) {
  clear_op();
  if (select_and_scatter_request) {
    set_has_select_and_scatter_request();
    op_.select_and_scatter_request_ = select_and_scatter_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.select_and_scatter_request)
}

// .xla.SliceRequest slice_request = 24;
bool OpRequest::has_slice_request() const {
  return op_case() == kSliceRequest;
}
void OpRequest::set_has_slice_request() {
  _oneof_case_[0] = kSliceRequest;
}
void OpRequest::clear_slice_request() {
  if (has_slice_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.slice_request_;
    }
    clear_has_op();
  }
}
 const ::xla::SliceRequest& OpRequest::slice_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.slice_request)
  return has_slice_request()
      ? *op_.slice_request_
      : ::xla::SliceRequest::default_instance();
}
::xla::SliceRequest* OpRequest::mutable_slice_request() {
  if (!has_slice_request()) {
    clear_op();
    set_has_slice_request();
    op_.slice_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SliceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.slice_request)
  return op_.slice_request_;
}
::xla::SliceRequest* OpRequest::release_slice_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.slice_request)
  if (has_slice_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SliceRequest* temp = new ::xla::SliceRequest(*op_.slice_request_);
      op_.slice_request_ = NULL;
      return temp;
    } else {
      ::xla::SliceRequest* temp = op_.slice_request_;
      op_.slice_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_slice_request(::xla::SliceRequest* slice_request) {
  clear_op();
  if (slice_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(slice_request) == NULL) {
      GetArenaNoVirtual()->Own(slice_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(slice_request)) {
      ::xla::SliceRequest* new_slice_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SliceRequest >(
          GetArenaNoVirtual());
      new_slice_request->CopyFrom(*slice_request);
      slice_request = new_slice_request;
    }
    set_has_slice_request();
    op_.slice_request_ = slice_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.slice_request)
}
 ::xla::SliceRequest* OpRequest::unsafe_arena_release_slice_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.slice_request)
  if (has_slice_request()) {
    clear_has_op();
    ::xla::SliceRequest* temp = op_.slice_request_;
    op_.slice_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_slice_request(::xla::SliceRequest* slice_request) {
  clear_op();
  if (slice_request) {
    set_has_slice_request();
    op_.slice_request_ = slice_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.slice_request)
}

// .xla.TernaryOpRequest ternary_op_request = 25;
bool OpRequest::has_ternary_op_request() const {
  return op_case() == kTernaryOpRequest;
}
void OpRequest::set_has_ternary_op_request() {
  _oneof_case_[0] = kTernaryOpRequest;
}
void OpRequest::clear_ternary_op_request() {
  if (has_ternary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.ternary_op_request_;
    }
    clear_has_op();
  }
}
 const ::xla::TernaryOpRequest& OpRequest::ternary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.ternary_op_request)
  return has_ternary_op_request()
      ? *op_.ternary_op_request_
      : ::xla::TernaryOpRequest::default_instance();
}
::xla::TernaryOpRequest* OpRequest::mutable_ternary_op_request() {
  if (!has_ternary_op_request()) {
    clear_op();
    set_has_ternary_op_request();
    op_.ternary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TernaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.ternary_op_request)
  return op_.ternary_op_request_;
}
::xla::TernaryOpRequest* OpRequest::release_ternary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.ternary_op_request)
  if (has_ternary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TernaryOpRequest* temp = new ::xla::TernaryOpRequest(*op_.ternary_op_request_);
      op_.ternary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::TernaryOpRequest* temp = op_.ternary_op_request_;
      op_.ternary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_ternary_op_request(::xla::TernaryOpRequest* ternary_op_request) {
  clear_op();
  if (ternary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(ternary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(ternary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(ternary_op_request)) {
      ::xla::TernaryOpRequest* new_ternary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TernaryOpRequest >(
          GetArenaNoVirtual());
      new_ternary_op_request->CopyFrom(*ternary_op_request);
      ternary_op_request = new_ternary_op_request;
    }
    set_has_ternary_op_request();
    op_.ternary_op_request_ = ternary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.ternary_op_request)
}
 ::xla::TernaryOpRequest* OpRequest::unsafe_arena_release_ternary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.ternary_op_request)
  if (has_ternary_op_request()) {
    clear_has_op();
    ::xla::TernaryOpRequest* temp = op_.ternary_op_request_;
    op_.ternary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_ternary_op_request(::xla::TernaryOpRequest* ternary_op_request) {
  clear_op();
  if (ternary_op_request) {
    set_has_ternary_op_request();
    op_.ternary_op_request_ = ternary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.ternary_op_request)
}

// .xla.TraceRequest trace_request = 26;
bool OpRequest::has_trace_request() const {
  return op_case() == kTraceRequest;
}
void OpRequest::set_has_trace_request() {
  _oneof_case_[0] = kTraceRequest;
}
void OpRequest::clear_trace_request() {
  if (has_trace_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.trace_request_;
    }
    clear_has_op();
  }
}
 const ::xla::TraceRequest& OpRequest::trace_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.trace_request)
  return has_trace_request()
      ? *op_.trace_request_
      : ::xla::TraceRequest::default_instance();
}
::xla::TraceRequest* OpRequest::mutable_trace_request() {
  if (!has_trace_request()) {
    clear_op();
    set_has_trace_request();
    op_.trace_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TraceRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.trace_request)
  return op_.trace_request_;
}
::xla::TraceRequest* OpRequest::release_trace_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.trace_request)
  if (has_trace_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TraceRequest* temp = new ::xla::TraceRequest(*op_.trace_request_);
      op_.trace_request_ = NULL;
      return temp;
    } else {
      ::xla::TraceRequest* temp = op_.trace_request_;
      op_.trace_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_trace_request(::xla::TraceRequest* trace_request) {
  clear_op();
  if (trace_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(trace_request) == NULL) {
      GetArenaNoVirtual()->Own(trace_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(trace_request)) {
      ::xla::TraceRequest* new_trace_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TraceRequest >(
          GetArenaNoVirtual());
      new_trace_request->CopyFrom(*trace_request);
      trace_request = new_trace_request;
    }
    set_has_trace_request();
    op_.trace_request_ = trace_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.trace_request)
}
 ::xla::TraceRequest* OpRequest::unsafe_arena_release_trace_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.trace_request)
  if (has_trace_request()) {
    clear_has_op();
    ::xla::TraceRequest* temp = op_.trace_request_;
    op_.trace_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_trace_request(::xla::TraceRequest* trace_request) {
  clear_op();
  if (trace_request) {
    set_has_trace_request();
    op_.trace_request_ = trace_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.trace_request)
}

// .xla.TransposeRequest transpose_request = 34;
bool OpRequest::has_transpose_request() const {
  return op_case() == kTransposeRequest;
}
void OpRequest::set_has_transpose_request() {
  _oneof_case_[0] = kTransposeRequest;
}
void OpRequest::clear_transpose_request() {
  if (has_transpose_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.transpose_request_;
    }
    clear_has_op();
  }
}
 const ::xla::TransposeRequest& OpRequest::transpose_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.transpose_request)
  return has_transpose_request()
      ? *op_.transpose_request_
      : ::xla::TransposeRequest::default_instance();
}
::xla::TransposeRequest* OpRequest::mutable_transpose_request() {
  if (!has_transpose_request()) {
    clear_op();
    set_has_transpose_request();
    op_.transpose_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::TransposeRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.transpose_request)
  return op_.transpose_request_;
}
::xla::TransposeRequest* OpRequest::release_transpose_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.transpose_request)
  if (has_transpose_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::TransposeRequest* temp = new ::xla::TransposeRequest(*op_.transpose_request_);
      op_.transpose_request_ = NULL;
      return temp;
    } else {
      ::xla::TransposeRequest* temp = op_.transpose_request_;
      op_.transpose_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_transpose_request(::xla::TransposeRequest* transpose_request) {
  clear_op();
  if (transpose_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(transpose_request) == NULL) {
      GetArenaNoVirtual()->Own(transpose_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(transpose_request)) {
      ::xla::TransposeRequest* new_transpose_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::TransposeRequest >(
          GetArenaNoVirtual());
      new_transpose_request->CopyFrom(*transpose_request);
      transpose_request = new_transpose_request;
    }
    set_has_transpose_request();
    op_.transpose_request_ = transpose_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.transpose_request)
}
 ::xla::TransposeRequest* OpRequest::unsafe_arena_release_transpose_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.transpose_request)
  if (has_transpose_request()) {
    clear_has_op();
    ::xla::TransposeRequest* temp = op_.transpose_request_;
    op_.transpose_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_transpose_request(::xla::TransposeRequest* transpose_request) {
  clear_op();
  if (transpose_request) {
    set_has_transpose_request();
    op_.transpose_request_ = transpose_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.transpose_request)
}

// .xla.UnaryOpRequest unary_op_request = 27;
bool OpRequest::has_unary_op_request() const {
  return op_case() == kUnaryOpRequest;
}
void OpRequest::set_has_unary_op_request() {
  _oneof_case_[0] = kUnaryOpRequest;
}
void OpRequest::clear_unary_op_request() {
  if (has_unary_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.unary_op_request_;
    }
    clear_has_op();
  }
}
 const ::xla::UnaryOpRequest& OpRequest::unary_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.unary_op_request)
  return has_unary_op_request()
      ? *op_.unary_op_request_
      : ::xla::UnaryOpRequest::default_instance();
}
::xla::UnaryOpRequest* OpRequest::mutable_unary_op_request() {
  if (!has_unary_op_request()) {
    clear_op();
    set_has_unary_op_request();
    op_.unary_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::UnaryOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.unary_op_request)
  return op_.unary_op_request_;
}
::xla::UnaryOpRequest* OpRequest::release_unary_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.unary_op_request)
  if (has_unary_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::UnaryOpRequest* temp = new ::xla::UnaryOpRequest(*op_.unary_op_request_);
      op_.unary_op_request_ = NULL;
      return temp;
    } else {
      ::xla::UnaryOpRequest* temp = op_.unary_op_request_;
      op_.unary_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_unary_op_request(::xla::UnaryOpRequest* unary_op_request) {
  clear_op();
  if (unary_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(unary_op_request) == NULL) {
      GetArenaNoVirtual()->Own(unary_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(unary_op_request)) {
      ::xla::UnaryOpRequest* new_unary_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::UnaryOpRequest >(
          GetArenaNoVirtual());
      new_unary_op_request->CopyFrom(*unary_op_request);
      unary_op_request = new_unary_op_request;
    }
    set_has_unary_op_request();
    op_.unary_op_request_ = unary_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.unary_op_request)
}
 ::xla::UnaryOpRequest* OpRequest::unsafe_arena_release_unary_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.unary_op_request)
  if (has_unary_op_request()) {
    clear_has_op();
    ::xla::UnaryOpRequest* temp = op_.unary_op_request_;
    op_.unary_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_unary_op_request(::xla::UnaryOpRequest* unary_op_request) {
  clear_op();
  if (unary_op_request) {
    set_has_unary_op_request();
    op_.unary_op_request_ = unary_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.unary_op_request)
}

// .xla.VariadicOpRequest variadic_op_request = 28;
bool OpRequest::has_variadic_op_request() const {
  return op_case() == kVariadicOpRequest;
}
void OpRequest::set_has_variadic_op_request() {
  _oneof_case_[0] = kVariadicOpRequest;
}
void OpRequest::clear_variadic_op_request() {
  if (has_variadic_op_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.variadic_op_request_;
    }
    clear_has_op();
  }
}
 const ::xla::VariadicOpRequest& OpRequest::variadic_op_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.variadic_op_request)
  return has_variadic_op_request()
      ? *op_.variadic_op_request_
      : ::xla::VariadicOpRequest::default_instance();
}
::xla::VariadicOpRequest* OpRequest::mutable_variadic_op_request() {
  if (!has_variadic_op_request()) {
    clear_op();
    set_has_variadic_op_request();
    op_.variadic_op_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::VariadicOpRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.variadic_op_request)
  return op_.variadic_op_request_;
}
::xla::VariadicOpRequest* OpRequest::release_variadic_op_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.variadic_op_request)
  if (has_variadic_op_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::VariadicOpRequest* temp = new ::xla::VariadicOpRequest(*op_.variadic_op_request_);
      op_.variadic_op_request_ = NULL;
      return temp;
    } else {
      ::xla::VariadicOpRequest* temp = op_.variadic_op_request_;
      op_.variadic_op_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_variadic_op_request(::xla::VariadicOpRequest* variadic_op_request) {
  clear_op();
  if (variadic_op_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(variadic_op_request) == NULL) {
      GetArenaNoVirtual()->Own(variadic_op_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(variadic_op_request)) {
      ::xla::VariadicOpRequest* new_variadic_op_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::VariadicOpRequest >(
          GetArenaNoVirtual());
      new_variadic_op_request->CopyFrom(*variadic_op_request);
      variadic_op_request = new_variadic_op_request;
    }
    set_has_variadic_op_request();
    op_.variadic_op_request_ = variadic_op_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.variadic_op_request)
}
 ::xla::VariadicOpRequest* OpRequest::unsafe_arena_release_variadic_op_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.variadic_op_request)
  if (has_variadic_op_request()) {
    clear_has_op();
    ::xla::VariadicOpRequest* temp = op_.variadic_op_request_;
    op_.variadic_op_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_variadic_op_request(::xla::VariadicOpRequest* variadic_op_request) {
  clear_op();
  if (variadic_op_request) {
    set_has_variadic_op_request();
    op_.variadic_op_request_ = variadic_op_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.variadic_op_request)
}

// .xla.WhileRequest while_request = 29;
bool OpRequest::has_while_request() const {
  return op_case() == kWhileRequest;
}
void OpRequest::set_has_while_request() {
  _oneof_case_[0] = kWhileRequest;
}
void OpRequest::clear_while_request() {
  if (has_while_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.while_request_;
    }
    clear_has_op();
  }
}
 const ::xla::WhileRequest& OpRequest::while_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.while_request)
  return has_while_request()
      ? *op_.while_request_
      : ::xla::WhileRequest::default_instance();
}
::xla::WhileRequest* OpRequest::mutable_while_request() {
  if (!has_while_request()) {
    clear_op();
    set_has_while_request();
    op_.while_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::WhileRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.while_request)
  return op_.while_request_;
}
::xla::WhileRequest* OpRequest::release_while_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.while_request)
  if (has_while_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::WhileRequest* temp = new ::xla::WhileRequest(*op_.while_request_);
      op_.while_request_ = NULL;
      return temp;
    } else {
      ::xla::WhileRequest* temp = op_.while_request_;
      op_.while_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_while_request(::xla::WhileRequest* while_request) {
  clear_op();
  if (while_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(while_request) == NULL) {
      GetArenaNoVirtual()->Own(while_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(while_request)) {
      ::xla::WhileRequest* new_while_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::WhileRequest >(
          GetArenaNoVirtual());
      new_while_request->CopyFrom(*while_request);
      while_request = new_while_request;
    }
    set_has_while_request();
    op_.while_request_ = while_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.while_request)
}
 ::xla::WhileRequest* OpRequest::unsafe_arena_release_while_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.while_request)
  if (has_while_request()) {
    clear_has_op();
    ::xla::WhileRequest* temp = op_.while_request_;
    op_.while_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_while_request(::xla::WhileRequest* while_request) {
  clear_op();
  if (while_request) {
    set_has_while_request();
    op_.while_request_ = while_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.while_request)
}

// .xla.SendRequest send_request = 30;
bool OpRequest::has_send_request() const {
  return op_case() == kSendRequest;
}
void OpRequest::set_has_send_request() {
  _oneof_case_[0] = kSendRequest;
}
void OpRequest::clear_send_request() {
  if (has_send_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.send_request_;
    }
    clear_has_op();
  }
}
 const ::xla::SendRequest& OpRequest::send_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.send_request)
  return has_send_request()
      ? *op_.send_request_
      : ::xla::SendRequest::default_instance();
}
::xla::SendRequest* OpRequest::mutable_send_request() {
  if (!has_send_request()) {
    clear_op();
    set_has_send_request();
    op_.send_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::SendRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.send_request)
  return op_.send_request_;
}
::xla::SendRequest* OpRequest::release_send_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.send_request)
  if (has_send_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::SendRequest* temp = new ::xla::SendRequest(*op_.send_request_);
      op_.send_request_ = NULL;
      return temp;
    } else {
      ::xla::SendRequest* temp = op_.send_request_;
      op_.send_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_send_request(::xla::SendRequest* send_request) {
  clear_op();
  if (send_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(send_request) == NULL) {
      GetArenaNoVirtual()->Own(send_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(send_request)) {
      ::xla::SendRequest* new_send_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::SendRequest >(
          GetArenaNoVirtual());
      new_send_request->CopyFrom(*send_request);
      send_request = new_send_request;
    }
    set_has_send_request();
    op_.send_request_ = send_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.send_request)
}
 ::xla::SendRequest* OpRequest::unsafe_arena_release_send_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.send_request)
  if (has_send_request()) {
    clear_has_op();
    ::xla::SendRequest* temp = op_.send_request_;
    op_.send_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_send_request(::xla::SendRequest* send_request) {
  clear_op();
  if (send_request) {
    set_has_send_request();
    op_.send_request_ = send_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.send_request)
}

// .xla.RecvRequest recv_request = 31;
bool OpRequest::has_recv_request() const {
  return op_case() == kRecvRequest;
}
void OpRequest::set_has_recv_request() {
  _oneof_case_[0] = kRecvRequest;
}
void OpRequest::clear_recv_request() {
  if (has_recv_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.recv_request_;
    }
    clear_has_op();
  }
}
 const ::xla::RecvRequest& OpRequest::recv_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.recv_request)
  return has_recv_request()
      ? *op_.recv_request_
      : ::xla::RecvRequest::default_instance();
}
::xla::RecvRequest* OpRequest::mutable_recv_request() {
  if (!has_recv_request()) {
    clear_op();
    set_has_recv_request();
    op_.recv_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::RecvRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.recv_request)
  return op_.recv_request_;
}
::xla::RecvRequest* OpRequest::release_recv_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.recv_request)
  if (has_recv_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::RecvRequest* temp = new ::xla::RecvRequest(*op_.recv_request_);
      op_.recv_request_ = NULL;
      return temp;
    } else {
      ::xla::RecvRequest* temp = op_.recv_request_;
      op_.recv_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_recv_request(::xla::RecvRequest* recv_request) {
  clear_op();
  if (recv_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(recv_request) == NULL) {
      GetArenaNoVirtual()->Own(recv_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(recv_request)) {
      ::xla::RecvRequest* new_recv_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::RecvRequest >(
          GetArenaNoVirtual());
      new_recv_request->CopyFrom(*recv_request);
      recv_request = new_recv_request;
    }
    set_has_recv_request();
    op_.recv_request_ = recv_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.recv_request)
}
 ::xla::RecvRequest* OpRequest::unsafe_arena_release_recv_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.recv_request)
  if (has_recv_request()) {
    clear_has_op();
    ::xla::RecvRequest* temp = op_.recv_request_;
    op_.recv_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_recv_request(::xla::RecvRequest* recv_request) {
  clear_op();
  if (recv_request) {
    set_has_recv_request();
    op_.recv_request_ = recv_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.recv_request)
}

// .xla.OutfeedRequest outfeed_request = 32;
bool OpRequest::has_outfeed_request() const {
  return op_case() == kOutfeedRequest;
}
void OpRequest::set_has_outfeed_request() {
  _oneof_case_[0] = kOutfeedRequest;
}
void OpRequest::clear_outfeed_request() {
  if (has_outfeed_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.outfeed_request_;
    }
    clear_has_op();
  }
}
 const ::xla::OutfeedRequest& OpRequest::outfeed_request() const {
  // @@protoc_insertion_point(field_get:xla.OpRequest.outfeed_request)
  return has_outfeed_request()
      ? *op_.outfeed_request_
      : ::xla::OutfeedRequest::default_instance();
}
::xla::OutfeedRequest* OpRequest::mutable_outfeed_request() {
  if (!has_outfeed_request()) {
    clear_op();
    set_has_outfeed_request();
    op_.outfeed_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::xla::OutfeedRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:xla.OpRequest.outfeed_request)
  return op_.outfeed_request_;
}
::xla::OutfeedRequest* OpRequest::release_outfeed_request() {
  // @@protoc_insertion_point(field_release:xla.OpRequest.outfeed_request)
  if (has_outfeed_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::xla::OutfeedRequest* temp = new ::xla::OutfeedRequest(*op_.outfeed_request_);
      op_.outfeed_request_ = NULL;
      return temp;
    } else {
      ::xla::OutfeedRequest* temp = op_.outfeed_request_;
      op_.outfeed_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpRequest::set_allocated_outfeed_request(::xla::OutfeedRequest* outfeed_request) {
  clear_op();
  if (outfeed_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(outfeed_request) == NULL) {
      GetArenaNoVirtual()->Own(outfeed_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(outfeed_request)) {
      ::xla::OutfeedRequest* new_outfeed_request = 
          ::google::protobuf::Arena::CreateMessage< ::xla::OutfeedRequest >(
          GetArenaNoVirtual());
      new_outfeed_request->CopyFrom(*outfeed_request);
      outfeed_request = new_outfeed_request;
    }
    set_has_outfeed_request();
    op_.outfeed_request_ = outfeed_request;
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpRequest.outfeed_request)
}
 ::xla::OutfeedRequest* OpRequest::unsafe_arena_release_outfeed_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpRequest.outfeed_request)
  if (has_outfeed_request()) {
    clear_has_op();
    ::xla::OutfeedRequest* temp = op_.outfeed_request_;
    op_.outfeed_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpRequest::unsafe_arena_set_allocated_outfeed_request(::xla::OutfeedRequest* outfeed_request) {
  clear_op();
  if (outfeed_request) {
    set_has_outfeed_request();
    op_.outfeed_request_ = outfeed_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpRequest.outfeed_request)
}

bool OpRequest::has_op() const {
  return op_case() != OP_NOT_SET;
}
void OpRequest::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
OpRequest::OpCase OpRequest::op_case() const {
  return OpRequest::OpCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OpResponse::_slow_mutable_output() {
  output_ = ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
      GetArenaNoVirtual());
}
::xla::ComputationDataHandle* OpResponse::_slow_release_output() {
  if (output_ == NULL) {
    return NULL;
  } else {
    ::xla::ComputationDataHandle* temp = new ::xla::ComputationDataHandle(*output_);
    output_ = NULL;
    return temp;
  }
}
::xla::ComputationDataHandle* OpResponse::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.OpResponse.output)
  
  ::xla::ComputationDataHandle* temp = output_;
  output_ = NULL;
  return temp;
}
void OpResponse::_slow_set_allocated_output(
    ::google::protobuf::Arena* message_arena, ::xla::ComputationDataHandle** output) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*output) == NULL) {
      message_arena->Own(*output);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*output)) {
      ::xla::ComputationDataHandle* new_output = 
            ::google::protobuf::Arena::CreateMessage< ::xla::ComputationDataHandle >(
            message_arena);
      new_output->CopyFrom(**output);
      *output = new_output;
    }
}
void OpResponse::unsafe_arena_set_allocated_output(
    ::xla::ComputationDataHandle* output) {
  if (GetArenaNoVirtual() == NULL) {
    delete output_;
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.OpResponse.output)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpResponse::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpResponse::OpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.OpResponse)
}
OpResponse::OpResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.OpResponse)
}
OpResponse::OpResponse(const OpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    output_ = new ::xla::ComputationDataHandle(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.OpResponse)
}

void OpResponse::SharedCtor() {
  output_ = NULL;
  _cached_size_ = 0;
}

OpResponse::~OpResponse() {
  // @@protoc_insertion_point(destructor:xla.OpResponse)
  SharedDtor();
}

void OpResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete output_;
  }
}

void OpResponse::ArenaDtor(void* object) {
  OpResponse* _this = reinterpret_cast< OpResponse* >(object);
  (void)_this;
}
void OpResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[53].descriptor;
}

const OpResponse& OpResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpResponse* OpResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpResponse>(arena);
}

void OpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OpResponse)
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}

bool OpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.OpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle output = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.OpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.OpResponse)
  return false;
#undef DO_
}

void OpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.OpResponse)
  // .xla.ComputationDataHandle output = 1;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->output_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.OpResponse)
}

::google::protobuf::uint8* OpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.OpResponse)
  // .xla.ComputationDataHandle output = 1;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->output_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.OpResponse)
  return target;
}

size_t OpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OpResponse)
  size_t total_size = 0;

  // .xla.ComputationDataHandle output = 1;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.OpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.OpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.OpResponse)
    MergeFrom(*source);
  }
}

void OpResponse::MergeFrom(const OpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.OpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    mutable_output()->::xla::ComputationDataHandle::MergeFrom(from.output());
  }
}

void OpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.OpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpResponse::CopyFrom(const OpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpResponse::IsInitialized() const {
  return true;
}

void OpResponse::Swap(OpResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpResponse::UnsafeArenaSwap(OpResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpResponse::InternalSwap(OpResponse* other) {
  std::swap(output_, other->output_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpResponse

// .xla.ComputationDataHandle output = 1;
bool OpResponse::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
void OpResponse::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::xla::ComputationDataHandle& OpResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.OpResponse.output)
  return output_ != NULL ? *output_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* OpResponse::mutable_output() {
  
  if (output_ == NULL) {
    _slow_mutable_output();
  }
  // @@protoc_insertion_point(field_mutable:xla.OpResponse.output)
  return output_;
}
::xla::ComputationDataHandle* OpResponse::release_output() {
  // @@protoc_insertion_point(field_release:xla.OpResponse.output)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_output();
  } else {
    ::xla::ComputationDataHandle* temp = output_;
    output_ = NULL;
    return temp;
  }
}
 void OpResponse::set_allocated_output(::xla::ComputationDataHandle* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output != NULL) {
    _slow_set_allocated_output(message_arena, &output);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OpResponse.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)
