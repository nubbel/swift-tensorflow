// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/xla.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/compiler/xla/xla.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xla {
class ExecutionOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecutionOptions> {
} _ExecutionOptions_default_instance_;
class SnapshotComputationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotComputationRequest> {
} _SnapshotComputationRequest_default_instance_;
class SnapshotComputationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotComputationResponse> {
} _SnapshotComputationResponse_default_instance_;
class LoadComputationSnapshotRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadComputationSnapshotRequest> {
} _LoadComputationSnapshotRequest_default_instance_;
class LoadComputationSnapshotResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadComputationSnapshotResponse> {
} _LoadComputationSnapshotResponse_default_instance_;
class GetDeviceHandlesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDeviceHandlesRequest> {
} _GetDeviceHandlesRequest_default_instance_;
class GetDeviceHandlesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDeviceHandlesResponse> {
} _GetDeviceHandlesResponse_default_instance_;
class TransferToClientRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToClientRequest> {
} _TransferToClientRequest_default_instance_;
class TransferToClientResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToClientResponse> {
} _TransferToClientResponse_default_instance_;
class TransferToServerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToServerRequest> {
} _TransferToServerRequest_default_instance_;
class TransferToServerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToServerResponse> {
} _TransferToServerResponse_default_instance_;
class TransferToServerInProcessRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToServerInProcessRequest> {
} _TransferToServerInProcessRequest_default_instance_;
class TransferToServerInProcessResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToServerInProcessResponse> {
} _TransferToServerInProcessResponse_default_instance_;
class TransferToClientInProcessRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToClientInProcessRequest> {
} _TransferToClientInProcessRequest_default_instance_;
class TransferToClientInProcessResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToClientInProcessResponse> {
} _TransferToClientInProcessResponse_default_instance_;
class TransferToInfeedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToInfeedRequest> {
} _TransferToInfeedRequest_default_instance_;
class TransferToInfeedResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferToInfeedResponse> {
} _TransferToInfeedResponse_default_instance_;
class TransferFromOutfeedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferFromOutfeedRequest> {
} _TransferFromOutfeedRequest_default_instance_;
class TransferFromOutfeedResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferFromOutfeedResponse> {
} _TransferFromOutfeedResponse_default_instance_;
class ResetDeviceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetDeviceRequest> {
} _ResetDeviceRequest_default_instance_;
class ResetDeviceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetDeviceResponse> {
} _ResetDeviceResponse_default_instance_;
class ComputationStatsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationStatsRequest> {
} _ComputationStatsRequest_default_instance_;
class ComputationStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationStatsResponse> {
} _ComputationStatsResponse_default_instance_;
class ComputationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationRequest> {
} _ComputationRequest_default_instance_;
class ComputationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputationResponse> {
} _ComputationResponse_default_instance_;
class CreateChannelHandleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChannelHandleRequest> {
} _CreateChannelHandleRequest_default_instance_;
class CreateChannelHandleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChannelHandleResponse> {
} _CreateChannelHandleResponse_default_instance_;
class UnregisterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnregisterRequest> {
} _UnregisterRequest_default_instance_;
class UnregisterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnregisterResponse> {
} _UnregisterResponse_default_instance_;
class SetReturnValueRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetReturnValueRequest> {
} _SetReturnValueRequest_default_instance_;
class SetReturnValueResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetReturnValueResponse> {
} _SetReturnValueResponse_default_instance_;
class ExecuteRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteRequest> {
} _ExecuteRequest_default_instance_;
class ExecuteParallelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteParallelRequest> {
} _ExecuteParallelRequest_default_instance_;
class ExecuteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteResponse> {
} _ExecuteResponse_default_instance_;
class ExecuteParallelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteParallelResponse> {
} _ExecuteParallelResponse_default_instance_;
class ExecuteAsyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteAsyncRequest> {
} _ExecuteAsyncRequest_default_instance_;
class ExecuteAsyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExecuteAsyncResponse> {
} _ExecuteAsyncResponse_default_instance_;
class WaitForExecutionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WaitForExecutionRequest> {
} _WaitForExecutionRequest_default_instance_;
class WaitForExecutionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WaitForExecutionResponse> {
} _WaitForExecutionResponse_default_instance_;
class IsConstantRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsConstantRequest> {
} _IsConstantRequest_default_instance_;
class IsConstantResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsConstantResponse> {
} _IsConstantResponse_default_instance_;
class ComputeConstantRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputeConstantRequest> {
} _ComputeConstantRequest_default_instance_;
class ComputeConstantResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputeConstantResponse> {
} _ComputeConstantResponse_default_instance_;
class DeconstructTupleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeconstructTupleRequest> {
} _DeconstructTupleRequest_default_instance_;
class DeconstructTupleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeconstructTupleResponse> {
} _DeconstructTupleResponse_default_instance_;
class LoadDataRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadDataRequest> {
} _LoadDataRequest_default_instance_;
class LoadDataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadDataResponse> {
} _LoadDataResponse_default_instance_;
class SpecializeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpecializeRequest> {
} _SpecializeRequest_default_instance_;
class SpecializeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpecializeResponse> {
} _SpecializeResponse_default_instance_;
class GetShapeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetShapeRequest> {
} _GetShapeRequest_default_instance_;
class GetShapeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetShapeResponse> {
} _GetShapeResponse_default_instance_;
class GetComputationShapeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetComputationShapeRequest> {
} _GetComputationShapeRequest_default_instance_;
class GetComputationShapeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetComputationShapeResponse> {
} _GetComputationShapeResponse_default_instance_;
class UnpackRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnpackRequest> {
} _UnpackRequest_default_instance_;
class UnpackResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnpackResponse> {
} _UnpackResponse_default_instance_;

namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[55];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionOptions, disable_fast_math_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionOptions, shape_with_output_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionOptions, seed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotComputationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotComputationRequest, computation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotComputationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotComputationResponse, module_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComputationSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComputationSnapshotRequest, module_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComputationSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComputationSnapshotResponse, computation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceHandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceHandlesRequest, device_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceHandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceHandlesResponse, device_handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientRequest, shape_with_layout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientResponse, literal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerRequest, literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerRequest, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerResponse, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerInProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerInProcessRequest, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerInProcessRequest, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerInProcessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToServerInProcessResponse, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientInProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientInProcessRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientInProcessRequest, buffer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToClientInProcessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToInfeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToInfeedRequest, literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToInfeedRequest, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToInfeedRequest, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToInfeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedRequest, shape_with_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedRequest, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedRequest, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFromOutfeedResponse, literal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDeviceRequest, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStatsRequest, computation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationStatsResponse, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationResponse, computation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelHandleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelHandleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelHandleResponse, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReturnValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReturnValueRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReturnValueRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReturnValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, arguments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, device_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, execution_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteParallelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteParallelRequest, requests_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, profile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteParallelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteParallelResponse, responses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncRequest, arguments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncRequest, execution_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteAsyncResponse, execution_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForExecutionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForExecutionRequest, execution_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForExecutionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForExecutionResponse, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForExecutionResponse, profile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsConstantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsConstantRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsConstantRequest, operand_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsConstantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsConstantResponse, is_constant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantRequest, operand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantRequest, output_layout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeConstantResponse, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeconstructTupleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeconstructTupleRequest, tuple_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeconstructTupleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeconstructTupleResponse, element_handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, columnio_tablet_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, columnio_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, element_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataRequest, zip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, data_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, available_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, rows_loaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataResponse, nanoseconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializeRequest, computation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializeRequest, arguments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShapeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShapeRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShapeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShapeResponse, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetComputationShapeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetComputationShapeRequest, computation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetComputationShapeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetComputationShapeResponse, program_shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpackRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpackResponse, tied_data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ExecutionOptions)},
  { 7, -1, sizeof(SnapshotComputationRequest)},
  { 12, -1, sizeof(SnapshotComputationResponse)},
  { 17, -1, sizeof(LoadComputationSnapshotRequest)},
  { 22, -1, sizeof(LoadComputationSnapshotResponse)},
  { 27, -1, sizeof(GetDeviceHandlesRequest)},
  { 32, -1, sizeof(GetDeviceHandlesResponse)},
  { 37, -1, sizeof(TransferToClientRequest)},
  { 43, -1, sizeof(TransferToClientResponse)},
  { 48, -1, sizeof(TransferToServerRequest)},
  { 54, -1, sizeof(TransferToServerResponse)},
  { 59, -1, sizeof(TransferToServerInProcessRequest)},
  { 65, -1, sizeof(TransferToServerInProcessResponse)},
  { 70, -1, sizeof(TransferToClientInProcessRequest)},
  { 76, -1, sizeof(TransferToClientInProcessResponse)},
  { 80, -1, sizeof(TransferToInfeedRequest)},
  { 87, -1, sizeof(TransferToInfeedResponse)},
  { 91, -1, sizeof(TransferFromOutfeedRequest)},
  { 98, -1, sizeof(TransferFromOutfeedResponse)},
  { 103, -1, sizeof(ResetDeviceRequest)},
  { 108, -1, sizeof(ResetDeviceResponse)},
  { 112, -1, sizeof(ComputationStatsRequest)},
  { 117, -1, sizeof(ComputationStatsResponse)},
  { 122, -1, sizeof(ComputationRequest)},
  { 127, -1, sizeof(ComputationResponse)},
  { 132, -1, sizeof(CreateChannelHandleRequest)},
  { 136, -1, sizeof(CreateChannelHandleResponse)},
  { 141, -1, sizeof(UnregisterRequest)},
  { 146, -1, sizeof(UnregisterResponse)},
  { 150, -1, sizeof(SetReturnValueRequest)},
  { 156, -1, sizeof(SetReturnValueResponse)},
  { 160, -1, sizeof(ExecuteRequest)},
  { 168, -1, sizeof(ExecuteParallelRequest)},
  { 173, -1, sizeof(ExecuteResponse)},
  { 179, -1, sizeof(ExecuteParallelResponse)},
  { 184, -1, sizeof(ExecuteAsyncRequest)},
  { 191, -1, sizeof(ExecuteAsyncResponse)},
  { 196, -1, sizeof(WaitForExecutionRequest)},
  { 201, -1, sizeof(WaitForExecutionResponse)},
  { 207, -1, sizeof(IsConstantRequest)},
  { 213, -1, sizeof(IsConstantResponse)},
  { 218, -1, sizeof(ComputeConstantRequest)},
  { 225, -1, sizeof(ComputeConstantResponse)},
  { 230, -1, sizeof(DeconstructTupleRequest)},
  { 235, -1, sizeof(DeconstructTupleResponse)},
  { 240, -1, sizeof(LoadDataRequest)},
  { 250, -1, sizeof(LoadDataResponse)},
  { 259, -1, sizeof(SpecializeRequest)},
  { 265, -1, sizeof(SpecializeResponse)},
  { 269, -1, sizeof(GetShapeRequest)},
  { 274, -1, sizeof(GetShapeResponse)},
  { 279, -1, sizeof(GetComputationShapeRequest)},
  { 284, -1, sizeof(GetComputationShapeResponse)},
  { 289, -1, sizeof(UnpackRequest)},
  { 294, -1, sizeof(UnpackResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutionOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotComputationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotComputationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadComputationSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadComputationSnapshotResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDeviceHandlesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDeviceHandlesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToClientRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToClientResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToServerInProcessRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToServerInProcessResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToClientInProcessRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToClientInProcessResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToInfeedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferToInfeedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferFromOutfeedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferFromOutfeedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetDeviceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationStatsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChannelHandleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChannelHandleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnregisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnregisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetReturnValueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetReturnValueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteParallelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteParallelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteAsyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecuteAsyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WaitForExecutionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WaitForExecutionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsConstantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsConstantResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputeConstantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputeConstantResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeconstructTupleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeconstructTupleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpecializeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpecializeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetShapeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetShapeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetComputationShapeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetComputationShapeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnpackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnpackResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/compiler/xla/xla.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 55);
}

}  // namespace

void TableStruct::Shutdown() {
  _ExecutionOptions_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SnapshotComputationRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SnapshotComputationResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LoadComputationSnapshotRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LoadComputationSnapshotResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GetDeviceHandlesRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GetDeviceHandlesResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TransferToClientRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TransferToClientResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _TransferToServerRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TransferToServerResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _TransferToServerInProcessRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _TransferToServerInProcessResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _TransferToClientInProcessRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _TransferToClientInProcessResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _TransferToInfeedRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _TransferToInfeedResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _TransferFromOutfeedRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _TransferFromOutfeedResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ResetDeviceRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ResetDeviceResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ComputationStatsRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ComputationStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ComputationRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ComputationResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CreateChannelHandleRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CreateChannelHandleResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _UnregisterRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _UnregisterResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _SetReturnValueRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SetReturnValueResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ExecuteRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ExecuteParallelRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ExecuteResponse_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _ExecuteParallelResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ExecuteAsyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ExecuteAsyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _WaitForExecutionRequest_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _WaitForExecutionResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _IsConstantRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _IsConstantResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _ComputeConstantRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _ComputeConstantResponse_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _DeconstructTupleRequest_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _DeconstructTupleResponse_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _LoadDataRequest_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _LoadDataResponse_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _SpecializeRequest_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _SpecializeResponse_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _GetShapeRequest_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _GetShapeResponse_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _GetComputationShapeRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _GetComputationShapeResponse_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _UnpackRequest_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _UnpackResponse_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  _ExecutionOptions_default_instance_.DefaultConstruct();
  _SnapshotComputationRequest_default_instance_.DefaultConstruct();
  _SnapshotComputationResponse_default_instance_.DefaultConstruct();
  _LoadComputationSnapshotRequest_default_instance_.DefaultConstruct();
  _LoadComputationSnapshotResponse_default_instance_.DefaultConstruct();
  _GetDeviceHandlesRequest_default_instance_.DefaultConstruct();
  _GetDeviceHandlesResponse_default_instance_.DefaultConstruct();
  _TransferToClientRequest_default_instance_.DefaultConstruct();
  _TransferToClientResponse_default_instance_.DefaultConstruct();
  _TransferToServerRequest_default_instance_.DefaultConstruct();
  _TransferToServerResponse_default_instance_.DefaultConstruct();
  _TransferToServerInProcessRequest_default_instance_.DefaultConstruct();
  _TransferToServerInProcessResponse_default_instance_.DefaultConstruct();
  _TransferToClientInProcessRequest_default_instance_.DefaultConstruct();
  _TransferToClientInProcessResponse_default_instance_.DefaultConstruct();
  _TransferToInfeedRequest_default_instance_.DefaultConstruct();
  _TransferToInfeedResponse_default_instance_.DefaultConstruct();
  _TransferFromOutfeedRequest_default_instance_.DefaultConstruct();
  _TransferFromOutfeedResponse_default_instance_.DefaultConstruct();
  _ResetDeviceRequest_default_instance_.DefaultConstruct();
  _ResetDeviceResponse_default_instance_.DefaultConstruct();
  _ComputationStatsRequest_default_instance_.DefaultConstruct();
  _ComputationStatsResponse_default_instance_.DefaultConstruct();
  _ComputationRequest_default_instance_.DefaultConstruct();
  _ComputationResponse_default_instance_.DefaultConstruct();
  _CreateChannelHandleRequest_default_instance_.DefaultConstruct();
  _CreateChannelHandleResponse_default_instance_.DefaultConstruct();
  _UnregisterRequest_default_instance_.DefaultConstruct();
  _UnregisterResponse_default_instance_.DefaultConstruct();
  _SetReturnValueRequest_default_instance_.DefaultConstruct();
  _SetReturnValueResponse_default_instance_.DefaultConstruct();
  _ExecuteRequest_default_instance_.DefaultConstruct();
  _ExecuteParallelRequest_default_instance_.DefaultConstruct();
  _ExecuteResponse_default_instance_.DefaultConstruct();
  _ExecuteParallelResponse_default_instance_.DefaultConstruct();
  _ExecuteAsyncRequest_default_instance_.DefaultConstruct();
  _ExecuteAsyncResponse_default_instance_.DefaultConstruct();
  _WaitForExecutionRequest_default_instance_.DefaultConstruct();
  _WaitForExecutionResponse_default_instance_.DefaultConstruct();
  _IsConstantRequest_default_instance_.DefaultConstruct();
  _IsConstantResponse_default_instance_.DefaultConstruct();
  _ComputeConstantRequest_default_instance_.DefaultConstruct();
  _ComputeConstantResponse_default_instance_.DefaultConstruct();
  _DeconstructTupleRequest_default_instance_.DefaultConstruct();
  _DeconstructTupleResponse_default_instance_.DefaultConstruct();
  _LoadDataRequest_default_instance_.DefaultConstruct();
  _LoadDataResponse_default_instance_.DefaultConstruct();
  _SpecializeRequest_default_instance_.DefaultConstruct();
  _SpecializeResponse_default_instance_.DefaultConstruct();
  _GetShapeRequest_default_instance_.DefaultConstruct();
  _GetShapeResponse_default_instance_.DefaultConstruct();
  _GetComputationShapeRequest_default_instance_.DefaultConstruct();
  _GetComputationShapeResponse_default_instance_.DefaultConstruct();
  _UnpackRequest_default_instance_.DefaultConstruct();
  _UnpackResponse_default_instance_.DefaultConstruct();
  _ExecutionOptions_default_instance_.get_mutable()->shape_with_output_layout_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _SnapshotComputationRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _SnapshotComputationResponse_default_instance_.get_mutable()->module_ = const_cast< ::xla::SessionModule*>(
      ::xla::SessionModule::internal_default_instance());
  _LoadComputationSnapshotRequest_default_instance_.get_mutable()->module_ = const_cast< ::xla::SessionModule*>(
      ::xla::SessionModule::internal_default_instance());
  _LoadComputationSnapshotResponse_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _TransferToClientRequest_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _TransferToClientRequest_default_instance_.get_mutable()->shape_with_layout_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _TransferToClientResponse_default_instance_.get_mutable()->literal_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
  _TransferToServerRequest_default_instance_.get_mutable()->literal_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
  _TransferToServerRequest_default_instance_.get_mutable()->device_handle_ = const_cast< ::xla::DeviceHandle*>(
      ::xla::DeviceHandle::internal_default_instance());
  _TransferToServerResponse_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _TransferToServerInProcessRequest_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _TransferToServerInProcessResponse_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _TransferToClientInProcessRequest_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _TransferToInfeedRequest_default_instance_.get_mutable()->literal_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
  _TransferToInfeedRequest_default_instance_.get_mutable()->device_handle_ = const_cast< ::xla::DeviceHandle*>(
      ::xla::DeviceHandle::internal_default_instance());
  _TransferFromOutfeedRequest_default_instance_.get_mutable()->shape_with_layout_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _TransferFromOutfeedRequest_default_instance_.get_mutable()->device_handle_ = const_cast< ::xla::DeviceHandle*>(
      ::xla::DeviceHandle::internal_default_instance());
  _TransferFromOutfeedResponse_default_instance_.get_mutable()->literal_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
  _ResetDeviceRequest_default_instance_.get_mutable()->device_handle_ = const_cast< ::xla::DeviceHandle*>(
      ::xla::DeviceHandle::internal_default_instance());
  _ComputationStatsRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ComputationStatsResponse_default_instance_.get_mutable()->stats_ = const_cast< ::xla::ComputationStats*>(
      ::xla::ComputationStats::internal_default_instance());
  _ComputationResponse_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _CreateChannelHandleResponse_default_instance_.get_mutable()->channel_ = const_cast< ::xla::ChannelHandle*>(
      ::xla::ChannelHandle::internal_default_instance());
  _UnregisterRequest_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _SetReturnValueRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _SetReturnValueRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ExecuteRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ExecuteRequest_default_instance_.get_mutable()->device_handle_ = const_cast< ::xla::DeviceHandle*>(
      ::xla::DeviceHandle::internal_default_instance());
  _ExecuteRequest_default_instance_.get_mutable()->execution_options_ = const_cast< ::xla::ExecutionOptions*>(
      ::xla::ExecutionOptions::internal_default_instance());
  _ExecuteResponse_default_instance_.get_mutable()->output_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _ExecuteResponse_default_instance_.get_mutable()->profile_ = const_cast< ::xla::ExecutionProfile*>(
      ::xla::ExecutionProfile::internal_default_instance());
  _ExecuteAsyncRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ExecuteAsyncRequest_default_instance_.get_mutable()->execution_options_ = const_cast< ::xla::ExecutionOptions*>(
      ::xla::ExecutionOptions::internal_default_instance());
  _ExecuteAsyncResponse_default_instance_.get_mutable()->execution_ = const_cast< ::xla::ExecutionHandle*>(
      ::xla::ExecutionHandle::internal_default_instance());
  _WaitForExecutionRequest_default_instance_.get_mutable()->execution_ = const_cast< ::xla::ExecutionHandle*>(
      ::xla::ExecutionHandle::internal_default_instance());
  _WaitForExecutionResponse_default_instance_.get_mutable()->output_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _WaitForExecutionResponse_default_instance_.get_mutable()->profile_ = const_cast< ::xla::ExecutionProfile*>(
      ::xla::ExecutionProfile::internal_default_instance());
  _IsConstantRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _IsConstantRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ComputeConstantRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _ComputeConstantRequest_default_instance_.get_mutable()->operand_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _ComputeConstantRequest_default_instance_.get_mutable()->output_layout_ = const_cast< ::xla::Layout*>(
      ::xla::Layout::internal_default_instance());
  _ComputeConstantResponse_default_instance_.get_mutable()->output_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _DeconstructTupleRequest_default_instance_.get_mutable()->tuple_handle_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _LoadDataRequest_default_instance_.get_mutable()->element_shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _LoadDataResponse_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _LoadDataResponse_default_instance_.get_mutable()->data_shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _SpecializeRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _GetShapeRequest_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
  _GetShapeResponse_default_instance_.get_mutable()->shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _GetComputationShapeRequest_default_instance_.get_mutable()->computation_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _GetComputationShapeResponse_default_instance_.get_mutable()->program_shape_ = const_cast< ::xla::ProgramShape*>(
      ::xla::ProgramShape::internal_default_instance());
  _UnpackRequest_default_instance_.get_mutable()->data_ = const_cast< ::xla::GlobalDataHandle*>(
      ::xla::GlobalDataHandle::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!tensorflow/compiler/xla/xla.proto\022\003xla"
      "\032&tensorflow/compiler/xla/xla_data.proto"
      "\032-tensorflow/compiler/xla/service/sessio"
      "n.proto\"i\n\020ExecutionOptions\022\031\n\021disable_f"
      "ast_math\030\001 \001(\010\022,\n\030shape_with_output_layo"
      "ut\030\002 \001(\0132\n.xla.Shape\022\014\n\004seed\030\003 \001(\004\"I\n\032Sn"
      "apshotComputationRequest\022+\n\013computation\030"
      "\001 \001(\0132\026.xla.ComputationHandle\"A\n\033Snapsho"
      "tComputationResponse\022\"\n\006module\030\001 \001(\0132\022.x"
      "la.SessionModule\"D\n\036LoadComputationSnaps"
      "hotRequest\022\"\n\006module\030\001 \001(\0132\022.xla.Session"
      "Module\"N\n\037LoadComputationSnapshotRespons"
      "e\022+\n\013computation\030\001 \001(\0132\026.xla.Computation"
      "Handle\"/\n\027GetDeviceHandlesRequest\022\024\n\014dev"
      "ice_count\030\001 \001(\003\"E\n\030GetDeviceHandlesRespo"
      "nse\022)\n\016device_handles\030\001 \003(\0132\021.xla.Device"
      "Handle\"e\n\027TransferToClientRequest\022#\n\004dat"
      "a\030\001 \001(\0132\025.xla.GlobalDataHandle\022%\n\021shape_"
      "with_layout\030\002 \001(\0132\n.xla.Shape\"9\n\030Transfe"
      "rToClientResponse\022\035\n\007literal\030\001 \001(\0132\014.xla"
      ".Literal\"b\n\027TransferToServerRequest\022\035\n\007l"
      "iteral\030\001 \001(\0132\014.xla.Literal\022(\n\rdevice_han"
      "dle\030\002 \001(\0132\021.xla.DeviceHandle\"\?\n\030Transfer"
      "ToServerResponse\022#\n\004data\030\001 \001(\0132\025.xla.Glo"
      "balDataHandle\"M\n TransferToServerInProce"
      "ssRequest\022\016\n\006buffer\030\001 \001(\004\022\031\n\005shape\030\002 \001(\013"
      "2\n.xla.Shape\"H\n!TransferToServerInProces"
      "sResponse\022#\n\004data\030\001 \001(\0132\025.xla.GlobalData"
      "Handle\"W\n TransferToClientInProcessReque"
      "st\022#\n\004data\030\001 \001(\0132\025.xla.GlobalDataHandle\022"
      "\016\n\006buffer\030\002 \001(\004\"#\n!TransferToClientInPro"
      "cessResponse\"v\n\027TransferToInfeedRequest\022"
      "\035\n\007literal\030\001 \001(\0132\014.xla.Literal\022\022\n\nreplic"
      "a_id\030\002 \001(\003\022(\n\rdevice_handle\030\003 \001(\0132\021.xla."
      "DeviceHandle\"\032\n\030TransferToInfeedResponse"
      "\"\201\001\n\032TransferFromOutfeedRequest\022%\n\021shape"
      "_with_layout\030\001 \001(\0132\n.xla.Shape\022\022\n\nreplic"
      "a_id\030\002 \001(\003\022(\n\rdevice_handle\030\003 \001(\0132\021.xla."
      "DeviceHandle\"<\n\033TransferFromOutfeedRespo"
      "nse\022\035\n\007literal\030\001 \001(\0132\014.xla.Literal\">\n\022Re"
      "setDeviceRequest\022(\n\rdevice_handle\030\001 \001(\0132"
      "\021.xla.DeviceHandle\"\025\n\023ResetDeviceRespons"
      "e\"F\n\027ComputationStatsRequest\022+\n\013computat"
      "ion\030\001 \001(\0132\026.xla.ComputationHandle\"@\n\030Com"
      "putationStatsResponse\022$\n\005stats\030\001 \001(\0132\025.x"
      "la.ComputationStats\"\"\n\022ComputationReques"
      "t\022\014\n\004name\030\001 \001(\t\"B\n\023ComputationResponse\022+"
      "\n\013computation\030\001 \001(\0132\026.xla.ComputationHan"
      "dle\"\034\n\032CreateChannelHandleRequest\"B\n\033Cre"
      "ateChannelHandleResponse\022#\n\007channel\030\001 \001("
      "\0132\022.xla.ChannelHandle\"8\n\021UnregisterReque"
      "st\022#\n\004data\030\001 \001(\0132\025.xla.GlobalDataHandle\""
      "\024\n\022UnregisterResponse\"q\n\025SetReturnValueR"
      "equest\022+\n\013computation\030\001 \001(\0132\026.xla.Comput"
      "ationHandle\022+\n\007operand\030\002 \001(\0132\032.xla.Compu"
      "tationDataHandle\"\030\n\026SetReturnValueRespon"
      "se\"\317\001\n\016ExecuteRequest\022+\n\013computation\030\001 \001"
      "(\0132\026.xla.ComputationHandle\022(\n\targuments\030"
      "\002 \003(\0132\025.xla.GlobalDataHandle\022(\n\rdevice_h"
      "andle\030\005 \001(\0132\021.xla.DeviceHandle\0220\n\021execut"
      "ion_options\030\006 \001(\0132\025.xla.ExecutionOptions"
      "J\004\010\003\020\004J\004\010\004\020\005\"\?\n\026ExecuteParallelRequest\022%"
      "\n\010requests\030\001 \003(\0132\023.xla.ExecuteRequest\"`\n"
      "\017ExecuteResponse\022%\n\006output\030\001 \001(\0132\025.xla.G"
      "lobalDataHandle\022&\n\007profile\030\002 \001(\0132\025.xla.E"
      "xecutionProfile\"B\n\027ExecuteParallelRespon"
      "se\022\'\n\tresponses\030\001 \003(\0132\024.xla.ExecuteRespo"
      "nse\"\252\001\n\023ExecuteAsyncRequest\022+\n\013computati"
      "on\030\001 \001(\0132\026.xla.ComputationHandle\022(\n\targu"
      "ments\030\002 \003(\0132\025.xla.GlobalDataHandle\0220\n\021ex"
      "ecution_options\030\006 \001(\0132\025.xla.ExecutionOpt"
      "ionsJ\004\010\003\020\004J\004\010\004\020\005\"\?\n\024ExecuteAsyncResponse"
      "\022\'\n\texecution\030\001 \001(\0132\024.xla.ExecutionHandl"
      "e\"B\n\027WaitForExecutionRequest\022\'\n\texecutio"
      "n\030\001 \001(\0132\024.xla.ExecutionHandle\"i\n\030WaitFor"
      "ExecutionResponse\022%\n\006output\030\001 \001(\0132\025.xla."
      "GlobalDataHandle\022&\n\007profile\030\002 \001(\0132\025.xla."
      "ExecutionProfile\"m\n\021IsConstantRequest\022+\n"
      "\013computation\030\001 \001(\0132\026.xla.ComputationHand"
      "le\022+\n\007operand\030\002 \001(\0132\032.xla.ComputationDat"
      "aHandle\")\n\022IsConstantResponse\022\023\n\013is_cons"
      "tant\030\001 \001(\010\"\226\001\n\026ComputeConstantRequest\022+\n"
      "\013computation\030\001 \001(\0132\026.xla.ComputationHand"
      "le\022+\n\007operand\030\002 \001(\0132\032.xla.ComputationDat"
      "aHandle\022\"\n\routput_layout\030\003 \001(\0132\013.xla.Lay"
      "out\"@\n\027ComputeConstantResponse\022%\n\006output"
      "\030\001 \001(\0132\025.xla.GlobalDataHandle\"F\n\027Deconst"
      "ructTupleRequest\022+\n\014tuple_handle\030\002 \001(\0132\025"
      ".xla.GlobalDataHandle\"J\n\030DeconstructTupl"
      "eResponse\022.\n\017element_handles\030\001 \003(\0132\025.xla"
      ".GlobalDataHandle\"\226\001\n\017LoadDataRequest\022\034\n"
      "\024columnio_tablet_path\030\001 \001(\t\022\026\n\016columnio_"
      "field\030\002 \001(\t\022!\n\relement_shape\030\003 \001(\0132\n.xla"
      ".Shape\022\016\n\006offset\030\004 \001(\003\022\r\n\005limit\030\005 \001(\003\022\013\n"
      "\003zip\030\006 \001(\010\"\231\001\n\020LoadDataResponse\022#\n\004data\030"
      "\001 \001(\0132\025.xla.GlobalDataHandle\022\036\n\ndata_sha"
      "pe\030\002 \001(\0132\n.xla.Shape\022\026\n\016available_rows\030\003"
      " \001(\003\022\023\n\013rows_loaded\030\004 \001(\003\022\023\n\013nanoseconds"
      "\030\005 \001(\003\"j\n\021SpecializeRequest\022+\n\013computati"
      "on\030\001 \001(\0132\026.xla.ComputationHandle\022(\n\targu"
      "ments\030\002 \003(\0132\025.xla.GlobalDataHandle\"\024\n\022Sp"
      "ecializeResponse\"6\n\017GetShapeRequest\022#\n\004d"
      "ata\030\001 \001(\0132\025.xla.GlobalDataHandle\"-\n\020GetS"
      "hapeResponse\022\031\n\005shape\030\001 \001(\0132\n.xla.Shape\""
      "I\n\032GetComputationShapeRequest\022+\n\013computa"
      "tion\030\001 \001(\0132\026.xla.ComputationHandle\"G\n\033Ge"
      "tComputationShapeResponse\022(\n\rprogram_sha"
      "pe\030\001 \001(\0132\021.xla.ProgramShape\"4\n\rUnpackReq"
      "uest\022#\n\004data\030\001 \001(\0132\025.xla.GlobalDataHandl"
      "e\":\n\016UnpackResponse\022(\n\ttied_data\030\001 \003(\0132\025"
      ".xla.GlobalDataHandleb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/compiler/xla/xla.proto", &protobuf_RegisterTypes);
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::AddDescriptors();
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionOptions::kDisableFastMathFieldNumber;
const int ExecutionOptions::kShapeWithOutputLayoutFieldNumber;
const int ExecutionOptions::kSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionOptions::ExecutionOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecutionOptions)
}
ExecutionOptions::ExecutionOptions(const ExecutionOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape_with_output_layout()) {
    shape_with_output_layout_ = new ::xla::Shape(*from.shape_with_output_layout_);
  } else {
    shape_with_output_layout_ = NULL;
  }
  ::memcpy(&seed_, &from.seed_,
    reinterpret_cast<char*>(&disable_fast_math_) -
    reinterpret_cast<char*>(&seed_) + sizeof(disable_fast_math_));
  // @@protoc_insertion_point(copy_constructor:xla.ExecutionOptions)
}

void ExecutionOptions::SharedCtor() {
  ::memset(&shape_with_output_layout_, 0, reinterpret_cast<char*>(&disable_fast_math_) -
    reinterpret_cast<char*>(&shape_with_output_layout_) + sizeof(disable_fast_math_));
  _cached_size_ = 0;
}

ExecutionOptions::~ExecutionOptions() {
  // @@protoc_insertion_point(destructor:xla.ExecutionOptions)
  SharedDtor();
}

void ExecutionOptions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_with_output_layout_;
  }
}

void ExecutionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionOptions::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[0].descriptor;
}

const ExecutionOptions& ExecutionOptions::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutionOptions* ExecutionOptions::New(::google::protobuf::Arena* arena) const {
  ExecutionOptions* n = new ExecutionOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionOptions)
  if (GetArenaNoVirtual() == NULL && shape_with_output_layout_ != NULL) {
    delete shape_with_output_layout_;
  }
  shape_with_output_layout_ = NULL;
  ::memset(&seed_, 0, reinterpret_cast<char*>(&disable_fast_math_) -
    reinterpret_cast<char*>(&seed_) + sizeof(disable_fast_math_));
}

bool ExecutionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecutionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable_fast_math = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fast_math_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape shape_with_output_layout = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_with_output_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seed = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecutionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecutionOptions)
  return false;
#undef DO_
}

void ExecutionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecutionOptions)
  // bool disable_fast_math = 1;
  if (this->disable_fast_math() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_fast_math(), output);
  }

  // .xla.Shape shape_with_output_layout = 2;
  if (this->has_shape_with_output_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_with_output_layout_, output);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seed(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecutionOptions)
}

::google::protobuf::uint8* ExecutionOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionOptions)
  // bool disable_fast_math = 1;
  if (this->disable_fast_math() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_fast_math(), target);
  }

  // .xla.Shape shape_with_output_layout = 2;
  if (this->has_shape_with_output_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_with_output_layout_, false, target);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionOptions)
  return target;
}

size_t ExecutionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecutionOptions)
  size_t total_size = 0;

  // .xla.Shape shape_with_output_layout = 2;
  if (this->has_shape_with_output_layout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_with_output_layout_);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seed());
  }

  // bool disable_fast_math = 1;
  if (this->disable_fast_math() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecutionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecutionOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecutionOptions)
    MergeFrom(*source);
  }
}

void ExecutionOptions::MergeFrom(const ExecutionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape_with_output_layout()) {
    mutable_shape_with_output_layout()->::xla::Shape::MergeFrom(from.shape_with_output_layout());
  }
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
  if (from.disable_fast_math() != 0) {
    set_disable_fast_math(from.disable_fast_math());
  }
}

void ExecutionOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecutionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionOptions::CopyFrom(const ExecutionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionOptions::IsInitialized() const {
  return true;
}

void ExecutionOptions::Swap(ExecutionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionOptions::InternalSwap(ExecutionOptions* other) {
  std::swap(shape_with_output_layout_, other->shape_with_output_layout_);
  std::swap(seed_, other->seed_);
  std::swap(disable_fast_math_, other->disable_fast_math_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionOptions::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionOptions

// bool disable_fast_math = 1;
void ExecutionOptions::clear_disable_fast_math() {
  disable_fast_math_ = false;
}
bool ExecutionOptions::disable_fast_math() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.disable_fast_math)
  return disable_fast_math_;
}
void ExecutionOptions::set_disable_fast_math(bool value) {
  
  disable_fast_math_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.disable_fast_math)
}

// .xla.Shape shape_with_output_layout = 2;
bool ExecutionOptions::has_shape_with_output_layout() const {
  return this != internal_default_instance() && shape_with_output_layout_ != NULL;
}
void ExecutionOptions::clear_shape_with_output_layout() {
  if (GetArenaNoVirtual() == NULL && shape_with_output_layout_ != NULL) delete shape_with_output_layout_;
  shape_with_output_layout_ = NULL;
}
const ::xla::Shape& ExecutionOptions::shape_with_output_layout() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.shape_with_output_layout)
  return shape_with_output_layout_ != NULL ? *shape_with_output_layout_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* ExecutionOptions::mutable_shape_with_output_layout() {
  
  if (shape_with_output_layout_ == NULL) {
    shape_with_output_layout_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecutionOptions.shape_with_output_layout)
  return shape_with_output_layout_;
}
::xla::Shape* ExecutionOptions::release_shape_with_output_layout() {
  // @@protoc_insertion_point(field_release:xla.ExecutionOptions.shape_with_output_layout)
  
  ::xla::Shape* temp = shape_with_output_layout_;
  shape_with_output_layout_ = NULL;
  return temp;
}
void ExecutionOptions::set_allocated_shape_with_output_layout(::xla::Shape* shape_with_output_layout) {
  delete shape_with_output_layout_;
  if (shape_with_output_layout != NULL && shape_with_output_layout->GetArena() != NULL) {
    ::xla::Shape* new_shape_with_output_layout = new ::xla::Shape;
    new_shape_with_output_layout->CopyFrom(*shape_with_output_layout);
    shape_with_output_layout = new_shape_with_output_layout;
  }
  shape_with_output_layout_ = shape_with_output_layout;
  if (shape_with_output_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecutionOptions.shape_with_output_layout)
}

// uint64 seed = 3;
void ExecutionOptions::clear_seed() {
  seed_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ExecutionOptions::seed() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.seed)
  return seed_;
}
void ExecutionOptions::set_seed(::google::protobuf::uint64 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.seed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotComputationRequest::kComputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotComputationRequest::SnapshotComputationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SnapshotComputationRequest)
}
SnapshotComputationRequest::SnapshotComputationRequest(const SnapshotComputationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SnapshotComputationRequest)
}

void SnapshotComputationRequest::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

SnapshotComputationRequest::~SnapshotComputationRequest() {
  // @@protoc_insertion_point(destructor:xla.SnapshotComputationRequest)
  SharedDtor();
}

void SnapshotComputationRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void SnapshotComputationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotComputationRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[1].descriptor;
}

const SnapshotComputationRequest& SnapshotComputationRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotComputationRequest* SnapshotComputationRequest::New(::google::protobuf::Arena* arena) const {
  SnapshotComputationRequest* n = new SnapshotComputationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotComputationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SnapshotComputationRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool SnapshotComputationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SnapshotComputationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SnapshotComputationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SnapshotComputationRequest)
  return false;
#undef DO_
}

void SnapshotComputationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SnapshotComputationRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SnapshotComputationRequest)
}

::google::protobuf::uint8* SnapshotComputationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SnapshotComputationRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SnapshotComputationRequest)
  return target;
}

size_t SnapshotComputationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SnapshotComputationRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotComputationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SnapshotComputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotComputationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotComputationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SnapshotComputationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SnapshotComputationRequest)
    MergeFrom(*source);
  }
}

void SnapshotComputationRequest::MergeFrom(const SnapshotComputationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SnapshotComputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void SnapshotComputationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SnapshotComputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotComputationRequest::CopyFrom(const SnapshotComputationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SnapshotComputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotComputationRequest::IsInitialized() const {
  return true;
}

void SnapshotComputationRequest::Swap(SnapshotComputationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotComputationRequest::InternalSwap(SnapshotComputationRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotComputationRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotComputationRequest

// .xla.ComputationHandle computation = 1;
bool SnapshotComputationRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void SnapshotComputationRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& SnapshotComputationRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.SnapshotComputationRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SnapshotComputationRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.SnapshotComputationRequest.computation)
  return computation_;
}
::xla::ComputationHandle* SnapshotComputationRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.SnapshotComputationRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void SnapshotComputationRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SnapshotComputationRequest.computation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotComputationResponse::kModuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotComputationResponse::SnapshotComputationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SnapshotComputationResponse)
}
SnapshotComputationResponse::SnapshotComputationResponse(const SnapshotComputationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    module_ = new ::xla::SessionModule(*from.module_);
  } else {
    module_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SnapshotComputationResponse)
}

void SnapshotComputationResponse::SharedCtor() {
  module_ = NULL;
  _cached_size_ = 0;
}

SnapshotComputationResponse::~SnapshotComputationResponse() {
  // @@protoc_insertion_point(destructor:xla.SnapshotComputationResponse)
  SharedDtor();
}

void SnapshotComputationResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete module_;
  }
}

void SnapshotComputationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotComputationResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[2].descriptor;
}

const SnapshotComputationResponse& SnapshotComputationResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotComputationResponse* SnapshotComputationResponse::New(::google::protobuf::Arena* arena) const {
  SnapshotComputationResponse* n = new SnapshotComputationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotComputationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SnapshotComputationResponse)
  if (GetArenaNoVirtual() == NULL && module_ != NULL) {
    delete module_;
  }
  module_ = NULL;
}

bool SnapshotComputationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SnapshotComputationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.SessionModule module = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SnapshotComputationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SnapshotComputationResponse)
  return false;
#undef DO_
}

void SnapshotComputationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SnapshotComputationResponse)
  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->module_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SnapshotComputationResponse)
}

::google::protobuf::uint8* SnapshotComputationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SnapshotComputationResponse)
  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->module_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SnapshotComputationResponse)
  return target;
}

size_t SnapshotComputationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SnapshotComputationResponse)
  size_t total_size = 0;

  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotComputationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SnapshotComputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotComputationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotComputationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SnapshotComputationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SnapshotComputationResponse)
    MergeFrom(*source);
  }
}

void SnapshotComputationResponse::MergeFrom(const SnapshotComputationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SnapshotComputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    mutable_module()->::xla::SessionModule::MergeFrom(from.module());
  }
}

void SnapshotComputationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SnapshotComputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotComputationResponse::CopyFrom(const SnapshotComputationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SnapshotComputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotComputationResponse::IsInitialized() const {
  return true;
}

void SnapshotComputationResponse::Swap(SnapshotComputationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotComputationResponse::InternalSwap(SnapshotComputationResponse* other) {
  std::swap(module_, other->module_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotComputationResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotComputationResponse

// .xla.SessionModule module = 1;
bool SnapshotComputationResponse::has_module() const {
  return this != internal_default_instance() && module_ != NULL;
}
void SnapshotComputationResponse::clear_module() {
  if (GetArenaNoVirtual() == NULL && module_ != NULL) delete module_;
  module_ = NULL;
}
const ::xla::SessionModule& SnapshotComputationResponse::module() const {
  // @@protoc_insertion_point(field_get:xla.SnapshotComputationResponse.module)
  return module_ != NULL ? *module_
                         : *::xla::SessionModule::internal_default_instance();
}
::xla::SessionModule* SnapshotComputationResponse::mutable_module() {
  
  if (module_ == NULL) {
    module_ = new ::xla::SessionModule;
  }
  // @@protoc_insertion_point(field_mutable:xla.SnapshotComputationResponse.module)
  return module_;
}
::xla::SessionModule* SnapshotComputationResponse::release_module() {
  // @@protoc_insertion_point(field_release:xla.SnapshotComputationResponse.module)
  
  ::xla::SessionModule* temp = module_;
  module_ = NULL;
  return temp;
}
void SnapshotComputationResponse::set_allocated_module(::xla::SessionModule* module) {
  delete module_;
  module_ = module;
  if (module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SnapshotComputationResponse.module)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadComputationSnapshotRequest::kModuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadComputationSnapshotRequest::LoadComputationSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.LoadComputationSnapshotRequest)
}
LoadComputationSnapshotRequest::LoadComputationSnapshotRequest(const LoadComputationSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    module_ = new ::xla::SessionModule(*from.module_);
  } else {
    module_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.LoadComputationSnapshotRequest)
}

void LoadComputationSnapshotRequest::SharedCtor() {
  module_ = NULL;
  _cached_size_ = 0;
}

LoadComputationSnapshotRequest::~LoadComputationSnapshotRequest() {
  // @@protoc_insertion_point(destructor:xla.LoadComputationSnapshotRequest)
  SharedDtor();
}

void LoadComputationSnapshotRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete module_;
  }
}

void LoadComputationSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadComputationSnapshotRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[3].descriptor;
}

const LoadComputationSnapshotRequest& LoadComputationSnapshotRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadComputationSnapshotRequest* LoadComputationSnapshotRequest::New(::google::protobuf::Arena* arena) const {
  LoadComputationSnapshotRequest* n = new LoadComputationSnapshotRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadComputationSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LoadComputationSnapshotRequest)
  if (GetArenaNoVirtual() == NULL && module_ != NULL) {
    delete module_;
  }
  module_ = NULL;
}

bool LoadComputationSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.LoadComputationSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.SessionModule module = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.LoadComputationSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.LoadComputationSnapshotRequest)
  return false;
#undef DO_
}

void LoadComputationSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.LoadComputationSnapshotRequest)
  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->module_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.LoadComputationSnapshotRequest)
}

::google::protobuf::uint8* LoadComputationSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.LoadComputationSnapshotRequest)
  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->module_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.LoadComputationSnapshotRequest)
  return target;
}

size_t LoadComputationSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LoadComputationSnapshotRequest)
  size_t total_size = 0;

  // .xla.SessionModule module = 1;
  if (this->has_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadComputationSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.LoadComputationSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadComputationSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadComputationSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.LoadComputationSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.LoadComputationSnapshotRequest)
    MergeFrom(*source);
  }
}

void LoadComputationSnapshotRequest::MergeFrom(const LoadComputationSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.LoadComputationSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    mutable_module()->::xla::SessionModule::MergeFrom(from.module());
  }
}

void LoadComputationSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.LoadComputationSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadComputationSnapshotRequest::CopyFrom(const LoadComputationSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LoadComputationSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadComputationSnapshotRequest::IsInitialized() const {
  return true;
}

void LoadComputationSnapshotRequest::Swap(LoadComputationSnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadComputationSnapshotRequest::InternalSwap(LoadComputationSnapshotRequest* other) {
  std::swap(module_, other->module_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadComputationSnapshotRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadComputationSnapshotRequest

// .xla.SessionModule module = 1;
bool LoadComputationSnapshotRequest::has_module() const {
  return this != internal_default_instance() && module_ != NULL;
}
void LoadComputationSnapshotRequest::clear_module() {
  if (GetArenaNoVirtual() == NULL && module_ != NULL) delete module_;
  module_ = NULL;
}
const ::xla::SessionModule& LoadComputationSnapshotRequest::module() const {
  // @@protoc_insertion_point(field_get:xla.LoadComputationSnapshotRequest.module)
  return module_ != NULL ? *module_
                         : *::xla::SessionModule::internal_default_instance();
}
::xla::SessionModule* LoadComputationSnapshotRequest::mutable_module() {
  
  if (module_ == NULL) {
    module_ = new ::xla::SessionModule;
  }
  // @@protoc_insertion_point(field_mutable:xla.LoadComputationSnapshotRequest.module)
  return module_;
}
::xla::SessionModule* LoadComputationSnapshotRequest::release_module() {
  // @@protoc_insertion_point(field_release:xla.LoadComputationSnapshotRequest.module)
  
  ::xla::SessionModule* temp = module_;
  module_ = NULL;
  return temp;
}
void LoadComputationSnapshotRequest::set_allocated_module(::xla::SessionModule* module) {
  delete module_;
  module_ = module;
  if (module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.LoadComputationSnapshotRequest.module)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadComputationSnapshotResponse::kComputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadComputationSnapshotResponse::LoadComputationSnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.LoadComputationSnapshotResponse)
}
LoadComputationSnapshotResponse::LoadComputationSnapshotResponse(const LoadComputationSnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.LoadComputationSnapshotResponse)
}

void LoadComputationSnapshotResponse::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

LoadComputationSnapshotResponse::~LoadComputationSnapshotResponse() {
  // @@protoc_insertion_point(destructor:xla.LoadComputationSnapshotResponse)
  SharedDtor();
}

void LoadComputationSnapshotResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void LoadComputationSnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadComputationSnapshotResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[4].descriptor;
}

const LoadComputationSnapshotResponse& LoadComputationSnapshotResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadComputationSnapshotResponse* LoadComputationSnapshotResponse::New(::google::protobuf::Arena* arena) const {
  LoadComputationSnapshotResponse* n = new LoadComputationSnapshotResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadComputationSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LoadComputationSnapshotResponse)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool LoadComputationSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.LoadComputationSnapshotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.LoadComputationSnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.LoadComputationSnapshotResponse)
  return false;
#undef DO_
}

void LoadComputationSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.LoadComputationSnapshotResponse)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.LoadComputationSnapshotResponse)
}

::google::protobuf::uint8* LoadComputationSnapshotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.LoadComputationSnapshotResponse)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.LoadComputationSnapshotResponse)
  return target;
}

size_t LoadComputationSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LoadComputationSnapshotResponse)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadComputationSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.LoadComputationSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadComputationSnapshotResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadComputationSnapshotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.LoadComputationSnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.LoadComputationSnapshotResponse)
    MergeFrom(*source);
  }
}

void LoadComputationSnapshotResponse::MergeFrom(const LoadComputationSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.LoadComputationSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void LoadComputationSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.LoadComputationSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadComputationSnapshotResponse::CopyFrom(const LoadComputationSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LoadComputationSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadComputationSnapshotResponse::IsInitialized() const {
  return true;
}

void LoadComputationSnapshotResponse::Swap(LoadComputationSnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadComputationSnapshotResponse::InternalSwap(LoadComputationSnapshotResponse* other) {
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadComputationSnapshotResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadComputationSnapshotResponse

// .xla.ComputationHandle computation = 1;
bool LoadComputationSnapshotResponse::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void LoadComputationSnapshotResponse::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& LoadComputationSnapshotResponse::computation() const {
  // @@protoc_insertion_point(field_get:xla.LoadComputationSnapshotResponse.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* LoadComputationSnapshotResponse::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.LoadComputationSnapshotResponse.computation)
  return computation_;
}
::xla::ComputationHandle* LoadComputationSnapshotResponse::release_computation() {
  // @@protoc_insertion_point(field_release:xla.LoadComputationSnapshotResponse.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void LoadComputationSnapshotResponse::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.LoadComputationSnapshotResponse.computation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDeviceHandlesRequest::kDeviceCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDeviceHandlesRequest::GetDeviceHandlesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetDeviceHandlesRequest)
}
GetDeviceHandlesRequest::GetDeviceHandlesRequest(const GetDeviceHandlesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_count_ = from.device_count_;
  // @@protoc_insertion_point(copy_constructor:xla.GetDeviceHandlesRequest)
}

void GetDeviceHandlesRequest::SharedCtor() {
  device_count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

GetDeviceHandlesRequest::~GetDeviceHandlesRequest() {
  // @@protoc_insertion_point(destructor:xla.GetDeviceHandlesRequest)
  SharedDtor();
}

void GetDeviceHandlesRequest::SharedDtor() {
}

void GetDeviceHandlesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceHandlesRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[5].descriptor;
}

const GetDeviceHandlesRequest& GetDeviceHandlesRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDeviceHandlesRequest* GetDeviceHandlesRequest::New(::google::protobuf::Arena* arena) const {
  GetDeviceHandlesRequest* n = new GetDeviceHandlesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDeviceHandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetDeviceHandlesRequest)
  device_count_ = GOOGLE_LONGLONG(0);
}

bool GetDeviceHandlesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetDeviceHandlesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 device_count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetDeviceHandlesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetDeviceHandlesRequest)
  return false;
#undef DO_
}

void GetDeviceHandlesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetDeviceHandlesRequest)
  // int64 device_count = 1;
  if (this->device_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->device_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetDeviceHandlesRequest)
}

::google::protobuf::uint8* GetDeviceHandlesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetDeviceHandlesRequest)
  // int64 device_count = 1;
  if (this->device_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->device_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetDeviceHandlesRequest)
  return target;
}

size_t GetDeviceHandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetDeviceHandlesRequest)
  size_t total_size = 0;

  // int64 device_count = 1;
  if (this->device_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceHandlesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetDeviceHandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceHandlesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDeviceHandlesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetDeviceHandlesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetDeviceHandlesRequest)
    MergeFrom(*source);
  }
}

void GetDeviceHandlesRequest::MergeFrom(const GetDeviceHandlesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetDeviceHandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_count() != 0) {
    set_device_count(from.device_count());
  }
}

void GetDeviceHandlesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetDeviceHandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceHandlesRequest::CopyFrom(const GetDeviceHandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetDeviceHandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceHandlesRequest::IsInitialized() const {
  return true;
}

void GetDeviceHandlesRequest::Swap(GetDeviceHandlesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDeviceHandlesRequest::InternalSwap(GetDeviceHandlesRequest* other) {
  std::swap(device_count_, other->device_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDeviceHandlesRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDeviceHandlesRequest

// int64 device_count = 1;
void GetDeviceHandlesRequest::clear_device_count() {
  device_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetDeviceHandlesRequest::device_count() const {
  // @@protoc_insertion_point(field_get:xla.GetDeviceHandlesRequest.device_count)
  return device_count_;
}
void GetDeviceHandlesRequest::set_device_count(::google::protobuf::int64 value) {
  
  device_count_ = value;
  // @@protoc_insertion_point(field_set:xla.GetDeviceHandlesRequest.device_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDeviceHandlesResponse::kDeviceHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDeviceHandlesResponse::GetDeviceHandlesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetDeviceHandlesResponse)
}
GetDeviceHandlesResponse::GetDeviceHandlesResponse(const GetDeviceHandlesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      device_handles_(from.device_handles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.GetDeviceHandlesResponse)
}

void GetDeviceHandlesResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetDeviceHandlesResponse::~GetDeviceHandlesResponse() {
  // @@protoc_insertion_point(destructor:xla.GetDeviceHandlesResponse)
  SharedDtor();
}

void GetDeviceHandlesResponse::SharedDtor() {
}

void GetDeviceHandlesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceHandlesResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[6].descriptor;
}

const GetDeviceHandlesResponse& GetDeviceHandlesResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDeviceHandlesResponse* GetDeviceHandlesResponse::New(::google::protobuf::Arena* arena) const {
  GetDeviceHandlesResponse* n = new GetDeviceHandlesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDeviceHandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetDeviceHandlesResponse)
  device_handles_.Clear();
}

bool GetDeviceHandlesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetDeviceHandlesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.DeviceHandle device_handles = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_device_handles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetDeviceHandlesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetDeviceHandlesResponse)
  return false;
#undef DO_
}

void GetDeviceHandlesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetDeviceHandlesResponse)
  // repeated .xla.DeviceHandle device_handles = 1;
  for (unsigned int i = 0, n = this->device_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_handles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetDeviceHandlesResponse)
}

::google::protobuf::uint8* GetDeviceHandlesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetDeviceHandlesResponse)
  // repeated .xla.DeviceHandle device_handles = 1;
  for (unsigned int i = 0, n = this->device_handles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->device_handles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetDeviceHandlesResponse)
  return target;
}

size_t GetDeviceHandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetDeviceHandlesResponse)
  size_t total_size = 0;

  // repeated .xla.DeviceHandle device_handles = 1;
  {
    unsigned int count = this->device_handles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_handles(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceHandlesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetDeviceHandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceHandlesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDeviceHandlesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetDeviceHandlesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetDeviceHandlesResponse)
    MergeFrom(*source);
  }
}

void GetDeviceHandlesResponse::MergeFrom(const GetDeviceHandlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetDeviceHandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_handles_.MergeFrom(from.device_handles_);
}

void GetDeviceHandlesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetDeviceHandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceHandlesResponse::CopyFrom(const GetDeviceHandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetDeviceHandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceHandlesResponse::IsInitialized() const {
  return true;
}

void GetDeviceHandlesResponse::Swap(GetDeviceHandlesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDeviceHandlesResponse::InternalSwap(GetDeviceHandlesResponse* other) {
  device_handles_.UnsafeArenaSwap(&other->device_handles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDeviceHandlesResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDeviceHandlesResponse

// repeated .xla.DeviceHandle device_handles = 1;
int GetDeviceHandlesResponse::device_handles_size() const {
  return device_handles_.size();
}
void GetDeviceHandlesResponse::clear_device_handles() {
  device_handles_.Clear();
}
const ::xla::DeviceHandle& GetDeviceHandlesResponse::device_handles(int index) const {
  // @@protoc_insertion_point(field_get:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_.Get(index);
}
::xla::DeviceHandle* GetDeviceHandlesResponse::mutable_device_handles(int index) {
  // @@protoc_insertion_point(field_mutable:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_.Mutable(index);
}
::xla::DeviceHandle* GetDeviceHandlesResponse::add_device_handles() {
  // @@protoc_insertion_point(field_add:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::DeviceHandle >*
GetDeviceHandlesResponse::mutable_device_handles() {
  // @@protoc_insertion_point(field_mutable_list:xla.GetDeviceHandlesResponse.device_handles)
  return &device_handles_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::DeviceHandle >&
GetDeviceHandlesResponse::device_handles() const {
  // @@protoc_insertion_point(field_list:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToClientRequest::kDataFieldNumber;
const int TransferToClientRequest::kShapeWithLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToClientRequest::TransferToClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToClientRequest)
}
TransferToClientRequest::TransferToClientRequest(const TransferToClientRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_shape_with_layout()) {
    shape_with_layout_ = new ::xla::Shape(*from.shape_with_layout_);
  } else {
    shape_with_layout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferToClientRequest)
}

void TransferToClientRequest::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&shape_with_layout_) -
    reinterpret_cast<char*>(&data_) + sizeof(shape_with_layout_));
  _cached_size_ = 0;
}

TransferToClientRequest::~TransferToClientRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferToClientRequest)
  SharedDtor();
}

void TransferToClientRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
  if (this != internal_default_instance()) {
    delete shape_with_layout_;
  }
}

void TransferToClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToClientRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[7].descriptor;
}

const TransferToClientRequest& TransferToClientRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToClientRequest* TransferToClientRequest::New(::google::protobuf::Arena* arena) const {
  TransferToClientRequest* n = new TransferToClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToClientRequest)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_with_layout_ != NULL) {
    delete shape_with_layout_;
  }
  shape_with_layout_ = NULL;
}

bool TransferToClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape shape_with_layout = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_with_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToClientRequest)
  return false;
#undef DO_
}

void TransferToClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToClientRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // .xla.Shape shape_with_layout = 2;
  if (this->has_shape_with_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_with_layout_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToClientRequest)
}

::google::protobuf::uint8* TransferToClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToClientRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // .xla.Shape shape_with_layout = 2;
  if (this->has_shape_with_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_with_layout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToClientRequest)
  return target;
}

size_t TransferToClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToClientRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // .xla.Shape shape_with_layout = 2;
  if (this->has_shape_with_layout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_with_layout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToClientRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToClientRequest)
    MergeFrom(*source);
  }
}

void TransferToClientRequest::MergeFrom(const TransferToClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
  if (from.has_shape_with_layout()) {
    mutable_shape_with_layout()->::xla::Shape::MergeFrom(from.shape_with_layout());
  }
}

void TransferToClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToClientRequest::CopyFrom(const TransferToClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToClientRequest::IsInitialized() const {
  return true;
}

void TransferToClientRequest::Swap(TransferToClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToClientRequest::InternalSwap(TransferToClientRequest* other) {
  std::swap(data_, other->data_);
  std::swap(shape_with_layout_, other->shape_with_layout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToClientRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToClientRequest

// .xla.GlobalDataHandle data = 1;
bool TransferToClientRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void TransferToClientRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& TransferToClientRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientRequest.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* TransferToClientRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientRequest.data)
  return data_;
}
::xla::GlobalDataHandle* TransferToClientRequest::release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void TransferToClientRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientRequest.data)
}

// .xla.Shape shape_with_layout = 2;
bool TransferToClientRequest::has_shape_with_layout() const {
  return this != internal_default_instance() && shape_with_layout_ != NULL;
}
void TransferToClientRequest::clear_shape_with_layout() {
  if (GetArenaNoVirtual() == NULL && shape_with_layout_ != NULL) delete shape_with_layout_;
  shape_with_layout_ = NULL;
}
const ::xla::Shape& TransferToClientRequest::shape_with_layout() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientRequest.shape_with_layout)
  return shape_with_layout_ != NULL ? *shape_with_layout_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* TransferToClientRequest::mutable_shape_with_layout() {
  
  if (shape_with_layout_ == NULL) {
    shape_with_layout_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientRequest.shape_with_layout)
  return shape_with_layout_;
}
::xla::Shape* TransferToClientRequest::release_shape_with_layout() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientRequest.shape_with_layout)
  
  ::xla::Shape* temp = shape_with_layout_;
  shape_with_layout_ = NULL;
  return temp;
}
void TransferToClientRequest::set_allocated_shape_with_layout(::xla::Shape* shape_with_layout) {
  delete shape_with_layout_;
  if (shape_with_layout != NULL && shape_with_layout->GetArena() != NULL) {
    ::xla::Shape* new_shape_with_layout = new ::xla::Shape;
    new_shape_with_layout->CopyFrom(*shape_with_layout);
    shape_with_layout = new_shape_with_layout;
  }
  shape_with_layout_ = shape_with_layout;
  if (shape_with_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientRequest.shape_with_layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToClientResponse::kLiteralFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToClientResponse::TransferToClientResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToClientResponse)
}
TransferToClientResponse::TransferToClientResponse(const TransferToClientResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    literal_ = new ::xla::Literal(*from.literal_);
  } else {
    literal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferToClientResponse)
}

void TransferToClientResponse::SharedCtor() {
  literal_ = NULL;
  _cached_size_ = 0;
}

TransferToClientResponse::~TransferToClientResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferToClientResponse)
  SharedDtor();
}

void TransferToClientResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete literal_;
  }
}

void TransferToClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToClientResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[8].descriptor;
}

const TransferToClientResponse& TransferToClientResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToClientResponse* TransferToClientResponse::New(::google::protobuf::Arena* arena) const {
  TransferToClientResponse* n = new TransferToClientResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToClientResponse)
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) {
    delete literal_;
  }
  literal_ = NULL;
}

bool TransferToClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Literal literal = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToClientResponse)
  return false;
#undef DO_
}

void TransferToClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToClientResponse)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->literal_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToClientResponse)
}

::google::protobuf::uint8* TransferToClientResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToClientResponse)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->literal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToClientResponse)
  return target;
}

size_t TransferToClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToClientResponse)
  size_t total_size = 0;

  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->literal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToClientResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToClientResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToClientResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToClientResponse)
    MergeFrom(*source);
  }
}

void TransferToClientResponse::MergeFrom(const TransferToClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    mutable_literal()->::xla::Literal::MergeFrom(from.literal());
  }
}

void TransferToClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToClientResponse::CopyFrom(const TransferToClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToClientResponse::IsInitialized() const {
  return true;
}

void TransferToClientResponse::Swap(TransferToClientResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToClientResponse::InternalSwap(TransferToClientResponse* other) {
  std::swap(literal_, other->literal_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToClientResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToClientResponse

// .xla.Literal literal = 1;
bool TransferToClientResponse::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
void TransferToClientResponse::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
const ::xla::Literal& TransferToClientResponse::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientResponse.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* TransferToClientResponse::mutable_literal() {
  
  if (literal_ == NULL) {
    literal_ = new ::xla::Literal;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientResponse.literal)
  return literal_;
}
::xla::Literal* TransferToClientResponse::release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientResponse.literal)
  
  ::xla::Literal* temp = literal_;
  literal_ = NULL;
  return temp;
}
void TransferToClientResponse::set_allocated_literal(::xla::Literal* literal) {
  delete literal_;
  if (literal != NULL && literal->GetArena() != NULL) {
    ::xla::Literal* new_literal = new ::xla::Literal;
    new_literal->CopyFrom(*literal);
    literal = new_literal;
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientResponse.literal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToServerRequest::kLiteralFieldNumber;
const int TransferToServerRequest::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToServerRequest::TransferToServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToServerRequest)
}
TransferToServerRequest::TransferToServerRequest(const TransferToServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    literal_ = new ::xla::Literal(*from.literal_);
  } else {
    literal_ = NULL;
  }
  if (from.has_device_handle()) {
    device_handle_ = new ::xla::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferToServerRequest)
}

void TransferToServerRequest::SharedCtor() {
  ::memset(&literal_, 0, reinterpret_cast<char*>(&device_handle_) -
    reinterpret_cast<char*>(&literal_) + sizeof(device_handle_));
  _cached_size_ = 0;
}

TransferToServerRequest::~TransferToServerRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferToServerRequest)
  SharedDtor();
}

void TransferToServerRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete literal_;
  }
  if (this != internal_default_instance()) {
    delete device_handle_;
  }
}

void TransferToServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToServerRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[9].descriptor;
}

const TransferToServerRequest& TransferToServerRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToServerRequest* TransferToServerRequest::New(::google::protobuf::Arena* arena) const {
  TransferToServerRequest* n = new TransferToServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToServerRequest)
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) {
    delete literal_;
  }
  literal_ = NULL;
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
}

bool TransferToServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Literal literal = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DeviceHandle device_handle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToServerRequest)
  return false;
#undef DO_
}

void TransferToServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToServerRequest)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->literal_, output);
  }

  // .xla.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->device_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToServerRequest)
}

::google::protobuf::uint8* TransferToServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToServerRequest)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->literal_, false, target);
  }

  // .xla.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->device_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToServerRequest)
  return target;
}

size_t TransferToServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToServerRequest)
  size_t total_size = 0;

  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->literal_);
  }

  // .xla.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToServerRequest)
    MergeFrom(*source);
  }
}

void TransferToServerRequest::MergeFrom(const TransferToServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    mutable_literal()->::xla::Literal::MergeFrom(from.literal());
  }
  if (from.has_device_handle()) {
    mutable_device_handle()->::xla::DeviceHandle::MergeFrom(from.device_handle());
  }
}

void TransferToServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToServerRequest::CopyFrom(const TransferToServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToServerRequest::IsInitialized() const {
  return true;
}

void TransferToServerRequest::Swap(TransferToServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToServerRequest::InternalSwap(TransferToServerRequest* other) {
  std::swap(literal_, other->literal_);
  std::swap(device_handle_, other->device_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToServerRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToServerRequest

// .xla.Literal literal = 1;
bool TransferToServerRequest::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
void TransferToServerRequest::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
const ::xla::Literal& TransferToServerRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerRequest.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* TransferToServerRequest::mutable_literal() {
  
  if (literal_ == NULL) {
    literal_ = new ::xla::Literal;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerRequest.literal)
  return literal_;
}
::xla::Literal* TransferToServerRequest::release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerRequest.literal)
  
  ::xla::Literal* temp = literal_;
  literal_ = NULL;
  return temp;
}
void TransferToServerRequest::set_allocated_literal(::xla::Literal* literal) {
  delete literal_;
  if (literal != NULL && literal->GetArena() != NULL) {
    ::xla::Literal* new_literal = new ::xla::Literal;
    new_literal->CopyFrom(*literal);
    literal = new_literal;
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerRequest.literal)
}

// .xla.DeviceHandle device_handle = 2;
bool TransferToServerRequest::has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != NULL;
}
void TransferToServerRequest::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) delete device_handle_;
  device_handle_ = NULL;
}
const ::xla::DeviceHandle& TransferToServerRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerRequest.device_handle)
  return device_handle_ != NULL ? *device_handle_
                         : *::xla::DeviceHandle::internal_default_instance();
}
::xla::DeviceHandle* TransferToServerRequest::mutable_device_handle() {
  
  if (device_handle_ == NULL) {
    device_handle_ = new ::xla::DeviceHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerRequest.device_handle)
  return device_handle_;
}
::xla::DeviceHandle* TransferToServerRequest::release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = NULL;
  return temp;
}
void TransferToServerRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  delete device_handle_;
  if (device_handle != NULL && device_handle->GetArena() != NULL) {
    ::xla::DeviceHandle* new_device_handle = new ::xla::DeviceHandle;
    new_device_handle->CopyFrom(*device_handle);
    device_handle = new_device_handle;
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerRequest.device_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToServerResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToServerResponse::TransferToServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToServerResponse)
}
TransferToServerResponse::TransferToServerResponse(const TransferToServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferToServerResponse)
}

void TransferToServerResponse::SharedCtor() {
  data_ = NULL;
  _cached_size_ = 0;
}

TransferToServerResponse::~TransferToServerResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferToServerResponse)
  SharedDtor();
}

void TransferToServerResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void TransferToServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToServerResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[10].descriptor;
}

const TransferToServerResponse& TransferToServerResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToServerResponse* TransferToServerResponse::New(::google::protobuf::Arena* arena) const {
  TransferToServerResponse* n = new TransferToServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToServerResponse)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool TransferToServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToServerResponse)
  return false;
#undef DO_
}

void TransferToServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToServerResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToServerResponse)
}

::google::protobuf::uint8* TransferToServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToServerResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToServerResponse)
  return target;
}

size_t TransferToServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToServerResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToServerResponse)
    MergeFrom(*source);
  }
}

void TransferToServerResponse::MergeFrom(const TransferToServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
}

void TransferToServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToServerResponse::CopyFrom(const TransferToServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToServerResponse::IsInitialized() const {
  return true;
}

void TransferToServerResponse::Swap(TransferToServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToServerResponse::InternalSwap(TransferToServerResponse* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToServerResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToServerResponse

// .xla.GlobalDataHandle data = 1;
bool TransferToServerResponse::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void TransferToServerResponse::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& TransferToServerResponse::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerResponse.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* TransferToServerResponse::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerResponse.data)
  return data_;
}
::xla::GlobalDataHandle* TransferToServerResponse::release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerResponse.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void TransferToServerResponse::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerResponse.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToServerInProcessRequest::kBufferFieldNumber;
const int TransferToServerInProcessRequest::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToServerInProcessRequest::TransferToServerInProcessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToServerInProcessRequest)
}
TransferToServerInProcessRequest::TransferToServerInProcessRequest(const TransferToServerInProcessRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  buffer_ = from.buffer_;
  // @@protoc_insertion_point(copy_constructor:xla.TransferToServerInProcessRequest)
}

void TransferToServerInProcessRequest::SharedCtor() {
  ::memset(&shape_, 0, reinterpret_cast<char*>(&buffer_) -
    reinterpret_cast<char*>(&shape_) + sizeof(buffer_));
  _cached_size_ = 0;
}

TransferToServerInProcessRequest::~TransferToServerInProcessRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferToServerInProcessRequest)
  SharedDtor();
}

void TransferToServerInProcessRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void TransferToServerInProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToServerInProcessRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[11].descriptor;
}

const TransferToServerInProcessRequest& TransferToServerInProcessRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToServerInProcessRequest* TransferToServerInProcessRequest::New(::google::protobuf::Arena* arena) const {
  TransferToServerInProcessRequest* n = new TransferToServerInProcessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToServerInProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToServerInProcessRequest)
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  buffer_ = GOOGLE_ULONGLONG(0);
}

bool TransferToServerInProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToServerInProcessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 buffer = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToServerInProcessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToServerInProcessRequest)
  return false;
#undef DO_
}

void TransferToServerInProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToServerInProcessRequest)
  // uint64 buffer = 1;
  if (this->buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buffer(), output);
  }

  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToServerInProcessRequest)
}

::google::protobuf::uint8* TransferToServerInProcessRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToServerInProcessRequest)
  // uint64 buffer = 1;
  if (this->buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buffer(), target);
  }

  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToServerInProcessRequest)
  return target;
}

size_t TransferToServerInProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToServerInProcessRequest)
  size_t total_size = 0;

  // .xla.Shape shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // uint64 buffer = 1;
  if (this->buffer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToServerInProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToServerInProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToServerInProcessRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToServerInProcessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToServerInProcessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToServerInProcessRequest)
    MergeFrom(*source);
  }
}

void TransferToServerInProcessRequest::MergeFrom(const TransferToServerInProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToServerInProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
  if (from.buffer() != 0) {
    set_buffer(from.buffer());
  }
}

void TransferToServerInProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToServerInProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToServerInProcessRequest::CopyFrom(const TransferToServerInProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToServerInProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToServerInProcessRequest::IsInitialized() const {
  return true;
}

void TransferToServerInProcessRequest::Swap(TransferToServerInProcessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToServerInProcessRequest::InternalSwap(TransferToServerInProcessRequest* other) {
  std::swap(shape_, other->shape_);
  std::swap(buffer_, other->buffer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToServerInProcessRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToServerInProcessRequest

// uint64 buffer = 1;
void TransferToServerInProcessRequest::clear_buffer() {
  buffer_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TransferToServerInProcessRequest::buffer() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerInProcessRequest.buffer)
  return buffer_;
}
void TransferToServerInProcessRequest::set_buffer(::google::protobuf::uint64 value) {
  
  buffer_ = value;
  // @@protoc_insertion_point(field_set:xla.TransferToServerInProcessRequest.buffer)
}

// .xla.Shape shape = 2;
bool TransferToServerInProcessRequest::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void TransferToServerInProcessRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& TransferToServerInProcessRequest::shape() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerInProcessRequest.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* TransferToServerInProcessRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerInProcessRequest.shape)
  return shape_;
}
::xla::Shape* TransferToServerInProcessRequest::release_shape() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerInProcessRequest.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void TransferToServerInProcessRequest::set_allocated_shape(::xla::Shape* shape) {
  delete shape_;
  if (shape != NULL && shape->GetArena() != NULL) {
    ::xla::Shape* new_shape = new ::xla::Shape;
    new_shape->CopyFrom(*shape);
    shape = new_shape;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerInProcessRequest.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToServerInProcessResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToServerInProcessResponse::TransferToServerInProcessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToServerInProcessResponse)
}
TransferToServerInProcessResponse::TransferToServerInProcessResponse(const TransferToServerInProcessResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferToServerInProcessResponse)
}

void TransferToServerInProcessResponse::SharedCtor() {
  data_ = NULL;
  _cached_size_ = 0;
}

TransferToServerInProcessResponse::~TransferToServerInProcessResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferToServerInProcessResponse)
  SharedDtor();
}

void TransferToServerInProcessResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void TransferToServerInProcessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToServerInProcessResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[12].descriptor;
}

const TransferToServerInProcessResponse& TransferToServerInProcessResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToServerInProcessResponse* TransferToServerInProcessResponse::New(::google::protobuf::Arena* arena) const {
  TransferToServerInProcessResponse* n = new TransferToServerInProcessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToServerInProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToServerInProcessResponse)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool TransferToServerInProcessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToServerInProcessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToServerInProcessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToServerInProcessResponse)
  return false;
#undef DO_
}

void TransferToServerInProcessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToServerInProcessResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToServerInProcessResponse)
}

::google::protobuf::uint8* TransferToServerInProcessResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToServerInProcessResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToServerInProcessResponse)
  return target;
}

size_t TransferToServerInProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToServerInProcessResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToServerInProcessResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToServerInProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToServerInProcessResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToServerInProcessResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToServerInProcessResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToServerInProcessResponse)
    MergeFrom(*source);
  }
}

void TransferToServerInProcessResponse::MergeFrom(const TransferToServerInProcessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToServerInProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
}

void TransferToServerInProcessResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToServerInProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToServerInProcessResponse::CopyFrom(const TransferToServerInProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToServerInProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToServerInProcessResponse::IsInitialized() const {
  return true;
}

void TransferToServerInProcessResponse::Swap(TransferToServerInProcessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToServerInProcessResponse::InternalSwap(TransferToServerInProcessResponse* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToServerInProcessResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToServerInProcessResponse

// .xla.GlobalDataHandle data = 1;
bool TransferToServerInProcessResponse::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void TransferToServerInProcessResponse::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& TransferToServerInProcessResponse::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerInProcessResponse.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* TransferToServerInProcessResponse::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerInProcessResponse.data)
  return data_;
}
::xla::GlobalDataHandle* TransferToServerInProcessResponse::release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerInProcessResponse.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void TransferToServerInProcessResponse::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerInProcessResponse.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToClientInProcessRequest::kDataFieldNumber;
const int TransferToClientInProcessRequest::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToClientInProcessRequest::TransferToClientInProcessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToClientInProcessRequest)
}
TransferToClientInProcessRequest::TransferToClientInProcessRequest(const TransferToClientInProcessRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  buffer_ = from.buffer_;
  // @@protoc_insertion_point(copy_constructor:xla.TransferToClientInProcessRequest)
}

void TransferToClientInProcessRequest::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&buffer_) -
    reinterpret_cast<char*>(&data_) + sizeof(buffer_));
  _cached_size_ = 0;
}

TransferToClientInProcessRequest::~TransferToClientInProcessRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferToClientInProcessRequest)
  SharedDtor();
}

void TransferToClientInProcessRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void TransferToClientInProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToClientInProcessRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[13].descriptor;
}

const TransferToClientInProcessRequest& TransferToClientInProcessRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToClientInProcessRequest* TransferToClientInProcessRequest::New(::google::protobuf::Arena* arena) const {
  TransferToClientInProcessRequest* n = new TransferToClientInProcessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToClientInProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToClientInProcessRequest)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  buffer_ = GOOGLE_ULONGLONG(0);
}

bool TransferToClientInProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToClientInProcessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 buffer = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToClientInProcessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToClientInProcessRequest)
  return false;
#undef DO_
}

void TransferToClientInProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToClientInProcessRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // uint64 buffer = 2;
  if (this->buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buffer(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToClientInProcessRequest)
}

::google::protobuf::uint8* TransferToClientInProcessRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToClientInProcessRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // uint64 buffer = 2;
  if (this->buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buffer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToClientInProcessRequest)
  return target;
}

size_t TransferToClientInProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToClientInProcessRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // uint64 buffer = 2;
  if (this->buffer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToClientInProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToClientInProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToClientInProcessRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToClientInProcessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToClientInProcessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToClientInProcessRequest)
    MergeFrom(*source);
  }
}

void TransferToClientInProcessRequest::MergeFrom(const TransferToClientInProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToClientInProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
  if (from.buffer() != 0) {
    set_buffer(from.buffer());
  }
}

void TransferToClientInProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToClientInProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToClientInProcessRequest::CopyFrom(const TransferToClientInProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToClientInProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToClientInProcessRequest::IsInitialized() const {
  return true;
}

void TransferToClientInProcessRequest::Swap(TransferToClientInProcessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToClientInProcessRequest::InternalSwap(TransferToClientInProcessRequest* other) {
  std::swap(data_, other->data_);
  std::swap(buffer_, other->buffer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToClientInProcessRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToClientInProcessRequest

// .xla.GlobalDataHandle data = 1;
bool TransferToClientInProcessRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void TransferToClientInProcessRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& TransferToClientInProcessRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientInProcessRequest.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* TransferToClientInProcessRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientInProcessRequest.data)
  return data_;
}
::xla::GlobalDataHandle* TransferToClientInProcessRequest::release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientInProcessRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void TransferToClientInProcessRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientInProcessRequest.data)
}

// uint64 buffer = 2;
void TransferToClientInProcessRequest::clear_buffer() {
  buffer_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TransferToClientInProcessRequest::buffer() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientInProcessRequest.buffer)
  return buffer_;
}
void TransferToClientInProcessRequest::set_buffer(::google::protobuf::uint64 value) {
  
  buffer_ = value;
  // @@protoc_insertion_point(field_set:xla.TransferToClientInProcessRequest.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToClientInProcessResponse::TransferToClientInProcessResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToClientInProcessResponse)
}
TransferToClientInProcessResponse::TransferToClientInProcessResponse(const TransferToClientInProcessResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.TransferToClientInProcessResponse)
}

void TransferToClientInProcessResponse::SharedCtor() {
  _cached_size_ = 0;
}

TransferToClientInProcessResponse::~TransferToClientInProcessResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferToClientInProcessResponse)
  SharedDtor();
}

void TransferToClientInProcessResponse::SharedDtor() {
}

void TransferToClientInProcessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToClientInProcessResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[14].descriptor;
}

const TransferToClientInProcessResponse& TransferToClientInProcessResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToClientInProcessResponse* TransferToClientInProcessResponse::New(::google::protobuf::Arena* arena) const {
  TransferToClientInProcessResponse* n = new TransferToClientInProcessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToClientInProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToClientInProcessResponse)
}

bool TransferToClientInProcessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToClientInProcessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToClientInProcessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToClientInProcessResponse)
  return false;
#undef DO_
}

void TransferToClientInProcessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToClientInProcessResponse)
  // @@protoc_insertion_point(serialize_end:xla.TransferToClientInProcessResponse)
}

::google::protobuf::uint8* TransferToClientInProcessResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToClientInProcessResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToClientInProcessResponse)
  return target;
}

size_t TransferToClientInProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToClientInProcessResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToClientInProcessResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToClientInProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToClientInProcessResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToClientInProcessResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToClientInProcessResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToClientInProcessResponse)
    MergeFrom(*source);
  }
}

void TransferToClientInProcessResponse::MergeFrom(const TransferToClientInProcessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToClientInProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TransferToClientInProcessResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToClientInProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToClientInProcessResponse::CopyFrom(const TransferToClientInProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToClientInProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToClientInProcessResponse::IsInitialized() const {
  return true;
}

void TransferToClientInProcessResponse::Swap(TransferToClientInProcessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToClientInProcessResponse::InternalSwap(TransferToClientInProcessResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToClientInProcessResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToClientInProcessResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferToInfeedRequest::kLiteralFieldNumber;
const int TransferToInfeedRequest::kReplicaIdFieldNumber;
const int TransferToInfeedRequest::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToInfeedRequest::TransferToInfeedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToInfeedRequest)
}
TransferToInfeedRequest::TransferToInfeedRequest(const TransferToInfeedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    literal_ = new ::xla::Literal(*from.literal_);
  } else {
    literal_ = NULL;
  }
  if (from.has_device_handle()) {
    device_handle_ = new ::xla::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  replica_id_ = from.replica_id_;
  // @@protoc_insertion_point(copy_constructor:xla.TransferToInfeedRequest)
}

void TransferToInfeedRequest::SharedCtor() {
  ::memset(&literal_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&literal_) + sizeof(replica_id_));
  _cached_size_ = 0;
}

TransferToInfeedRequest::~TransferToInfeedRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferToInfeedRequest)
  SharedDtor();
}

void TransferToInfeedRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete literal_;
  }
  if (this != internal_default_instance()) {
    delete device_handle_;
  }
}

void TransferToInfeedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToInfeedRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[15].descriptor;
}

const TransferToInfeedRequest& TransferToInfeedRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToInfeedRequest* TransferToInfeedRequest::New(::google::protobuf::Arena* arena) const {
  TransferToInfeedRequest* n = new TransferToInfeedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToInfeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToInfeedRequest)
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) {
    delete literal_;
  }
  literal_ = NULL;
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
  replica_id_ = GOOGLE_LONGLONG(0);
}

bool TransferToInfeedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToInfeedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Literal literal = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 replica_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DeviceHandle device_handle = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToInfeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToInfeedRequest)
  return false;
#undef DO_
}

void TransferToInfeedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToInfeedRequest)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->literal_, output);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->replica_id(), output);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->device_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferToInfeedRequest)
}

::google::protobuf::uint8* TransferToInfeedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToInfeedRequest)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->literal_, false, target);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->replica_id(), target);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->device_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToInfeedRequest)
  return target;
}

size_t TransferToInfeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToInfeedRequest)
  size_t total_size = 0;

  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->literal_);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_handle_);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToInfeedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToInfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToInfeedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToInfeedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToInfeedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToInfeedRequest)
    MergeFrom(*source);
  }
}

void TransferToInfeedRequest::MergeFrom(const TransferToInfeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToInfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    mutable_literal()->::xla::Literal::MergeFrom(from.literal());
  }
  if (from.has_device_handle()) {
    mutable_device_handle()->::xla::DeviceHandle::MergeFrom(from.device_handle());
  }
  if (from.replica_id() != 0) {
    set_replica_id(from.replica_id());
  }
}

void TransferToInfeedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToInfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToInfeedRequest::CopyFrom(const TransferToInfeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToInfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToInfeedRequest::IsInitialized() const {
  return true;
}

void TransferToInfeedRequest::Swap(TransferToInfeedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToInfeedRequest::InternalSwap(TransferToInfeedRequest* other) {
  std::swap(literal_, other->literal_);
  std::swap(device_handle_, other->device_handle_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToInfeedRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToInfeedRequest

// .xla.Literal literal = 1;
bool TransferToInfeedRequest::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
void TransferToInfeedRequest::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
const ::xla::Literal& TransferToInfeedRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* TransferToInfeedRequest::mutable_literal() {
  
  if (literal_ == NULL) {
    literal_ = new ::xla::Literal;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToInfeedRequest.literal)
  return literal_;
}
::xla::Literal* TransferToInfeedRequest::release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToInfeedRequest.literal)
  
  ::xla::Literal* temp = literal_;
  literal_ = NULL;
  return temp;
}
void TransferToInfeedRequest::set_allocated_literal(::xla::Literal* literal) {
  delete literal_;
  if (literal != NULL && literal->GetArena() != NULL) {
    ::xla::Literal* new_literal = new ::xla::Literal;
    new_literal->CopyFrom(*literal);
    literal = new_literal;
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToInfeedRequest.literal)
}

// int64 replica_id = 2;
void TransferToInfeedRequest::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TransferToInfeedRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.replica_id)
  return replica_id_;
}
void TransferToInfeedRequest::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:xla.TransferToInfeedRequest.replica_id)
}

// .xla.DeviceHandle device_handle = 3;
bool TransferToInfeedRequest::has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != NULL;
}
void TransferToInfeedRequest::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) delete device_handle_;
  device_handle_ = NULL;
}
const ::xla::DeviceHandle& TransferToInfeedRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.device_handle)
  return device_handle_ != NULL ? *device_handle_
                         : *::xla::DeviceHandle::internal_default_instance();
}
::xla::DeviceHandle* TransferToInfeedRequest::mutable_device_handle() {
  
  if (device_handle_ == NULL) {
    device_handle_ = new ::xla::DeviceHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferToInfeedRequest.device_handle)
  return device_handle_;
}
::xla::DeviceHandle* TransferToInfeedRequest::release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferToInfeedRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = NULL;
  return temp;
}
void TransferToInfeedRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  delete device_handle_;
  if (device_handle != NULL && device_handle->GetArena() != NULL) {
    ::xla::DeviceHandle* new_device_handle = new ::xla::DeviceHandle;
    new_device_handle->CopyFrom(*device_handle);
    device_handle = new_device_handle;
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToInfeedRequest.device_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferToInfeedResponse::TransferToInfeedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferToInfeedResponse)
}
TransferToInfeedResponse::TransferToInfeedResponse(const TransferToInfeedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.TransferToInfeedResponse)
}

void TransferToInfeedResponse::SharedCtor() {
  _cached_size_ = 0;
}

TransferToInfeedResponse::~TransferToInfeedResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferToInfeedResponse)
  SharedDtor();
}

void TransferToInfeedResponse::SharedDtor() {
}

void TransferToInfeedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToInfeedResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[16].descriptor;
}

const TransferToInfeedResponse& TransferToInfeedResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferToInfeedResponse* TransferToInfeedResponse::New(::google::protobuf::Arena* arena) const {
  TransferToInfeedResponse* n = new TransferToInfeedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferToInfeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferToInfeedResponse)
}

bool TransferToInfeedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferToInfeedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferToInfeedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferToInfeedResponse)
  return false;
#undef DO_
}

void TransferToInfeedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferToInfeedResponse)
  // @@protoc_insertion_point(serialize_end:xla.TransferToInfeedResponse)
}

::google::protobuf::uint8* TransferToInfeedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferToInfeedResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferToInfeedResponse)
  return target;
}

size_t TransferToInfeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferToInfeedResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToInfeedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferToInfeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferToInfeedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferToInfeedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferToInfeedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferToInfeedResponse)
    MergeFrom(*source);
  }
}

void TransferToInfeedResponse::MergeFrom(const TransferToInfeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferToInfeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TransferToInfeedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferToInfeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToInfeedResponse::CopyFrom(const TransferToInfeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferToInfeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToInfeedResponse::IsInitialized() const {
  return true;
}

void TransferToInfeedResponse::Swap(TransferToInfeedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferToInfeedResponse::InternalSwap(TransferToInfeedResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferToInfeedResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferToInfeedResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferFromOutfeedRequest::kShapeWithLayoutFieldNumber;
const int TransferFromOutfeedRequest::kReplicaIdFieldNumber;
const int TransferFromOutfeedRequest::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferFromOutfeedRequest::TransferFromOutfeedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferFromOutfeedRequest)
}
TransferFromOutfeedRequest::TransferFromOutfeedRequest(const TransferFromOutfeedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape_with_layout()) {
    shape_with_layout_ = new ::xla::Shape(*from.shape_with_layout_);
  } else {
    shape_with_layout_ = NULL;
  }
  if (from.has_device_handle()) {
    device_handle_ = new ::xla::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  replica_id_ = from.replica_id_;
  // @@protoc_insertion_point(copy_constructor:xla.TransferFromOutfeedRequest)
}

void TransferFromOutfeedRequest::SharedCtor() {
  ::memset(&shape_with_layout_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&shape_with_layout_) + sizeof(replica_id_));
  _cached_size_ = 0;
}

TransferFromOutfeedRequest::~TransferFromOutfeedRequest() {
  // @@protoc_insertion_point(destructor:xla.TransferFromOutfeedRequest)
  SharedDtor();
}

void TransferFromOutfeedRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_with_layout_;
  }
  if (this != internal_default_instance()) {
    delete device_handle_;
  }
}

void TransferFromOutfeedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferFromOutfeedRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[17].descriptor;
}

const TransferFromOutfeedRequest& TransferFromOutfeedRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferFromOutfeedRequest* TransferFromOutfeedRequest::New(::google::protobuf::Arena* arena) const {
  TransferFromOutfeedRequest* n = new TransferFromOutfeedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferFromOutfeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferFromOutfeedRequest)
  if (GetArenaNoVirtual() == NULL && shape_with_layout_ != NULL) {
    delete shape_with_layout_;
  }
  shape_with_layout_ = NULL;
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
  replica_id_ = GOOGLE_LONGLONG(0);
}

bool TransferFromOutfeedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferFromOutfeedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape_with_layout = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_with_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 replica_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DeviceHandle device_handle = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferFromOutfeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferFromOutfeedRequest)
  return false;
#undef DO_
}

void TransferFromOutfeedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferFromOutfeedRequest)
  // .xla.Shape shape_with_layout = 1;
  if (this->has_shape_with_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_with_layout_, output);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->replica_id(), output);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->device_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferFromOutfeedRequest)
}

::google::protobuf::uint8* TransferFromOutfeedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferFromOutfeedRequest)
  // .xla.Shape shape_with_layout = 1;
  if (this->has_shape_with_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_with_layout_, false, target);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->replica_id(), target);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->device_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferFromOutfeedRequest)
  return target;
}

size_t TransferFromOutfeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferFromOutfeedRequest)
  size_t total_size = 0;

  // .xla.Shape shape_with_layout = 1;
  if (this->has_shape_with_layout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_with_layout_);
  }

  // .xla.DeviceHandle device_handle = 3;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_handle_);
  }

  // int64 replica_id = 2;
  if (this->replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferFromOutfeedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferFromOutfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFromOutfeedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferFromOutfeedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferFromOutfeedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferFromOutfeedRequest)
    MergeFrom(*source);
  }
}

void TransferFromOutfeedRequest::MergeFrom(const TransferFromOutfeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferFromOutfeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape_with_layout()) {
    mutable_shape_with_layout()->::xla::Shape::MergeFrom(from.shape_with_layout());
  }
  if (from.has_device_handle()) {
    mutable_device_handle()->::xla::DeviceHandle::MergeFrom(from.device_handle());
  }
  if (from.replica_id() != 0) {
    set_replica_id(from.replica_id());
  }
}

void TransferFromOutfeedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferFromOutfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFromOutfeedRequest::CopyFrom(const TransferFromOutfeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferFromOutfeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFromOutfeedRequest::IsInitialized() const {
  return true;
}

void TransferFromOutfeedRequest::Swap(TransferFromOutfeedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferFromOutfeedRequest::InternalSwap(TransferFromOutfeedRequest* other) {
  std::swap(shape_with_layout_, other->shape_with_layout_);
  std::swap(device_handle_, other->device_handle_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferFromOutfeedRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferFromOutfeedRequest

// .xla.Shape shape_with_layout = 1;
bool TransferFromOutfeedRequest::has_shape_with_layout() const {
  return this != internal_default_instance() && shape_with_layout_ != NULL;
}
void TransferFromOutfeedRequest::clear_shape_with_layout() {
  if (GetArenaNoVirtual() == NULL && shape_with_layout_ != NULL) delete shape_with_layout_;
  shape_with_layout_ = NULL;
}
const ::xla::Shape& TransferFromOutfeedRequest::shape_with_layout() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.shape_with_layout)
  return shape_with_layout_ != NULL ? *shape_with_layout_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* TransferFromOutfeedRequest::mutable_shape_with_layout() {
  
  if (shape_with_layout_ == NULL) {
    shape_with_layout_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedRequest.shape_with_layout)
  return shape_with_layout_;
}
::xla::Shape* TransferFromOutfeedRequest::release_shape_with_layout() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedRequest.shape_with_layout)
  
  ::xla::Shape* temp = shape_with_layout_;
  shape_with_layout_ = NULL;
  return temp;
}
void TransferFromOutfeedRequest::set_allocated_shape_with_layout(::xla::Shape* shape_with_layout) {
  delete shape_with_layout_;
  if (shape_with_layout != NULL && shape_with_layout->GetArena() != NULL) {
    ::xla::Shape* new_shape_with_layout = new ::xla::Shape;
    new_shape_with_layout->CopyFrom(*shape_with_layout);
    shape_with_layout = new_shape_with_layout;
  }
  shape_with_layout_ = shape_with_layout;
  if (shape_with_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedRequest.shape_with_layout)
}

// int64 replica_id = 2;
void TransferFromOutfeedRequest::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TransferFromOutfeedRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.replica_id)
  return replica_id_;
}
void TransferFromOutfeedRequest::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:xla.TransferFromOutfeedRequest.replica_id)
}

// .xla.DeviceHandle device_handle = 3;
bool TransferFromOutfeedRequest::has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != NULL;
}
void TransferFromOutfeedRequest::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) delete device_handle_;
  device_handle_ = NULL;
}
const ::xla::DeviceHandle& TransferFromOutfeedRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.device_handle)
  return device_handle_ != NULL ? *device_handle_
                         : *::xla::DeviceHandle::internal_default_instance();
}
::xla::DeviceHandle* TransferFromOutfeedRequest::mutable_device_handle() {
  
  if (device_handle_ == NULL) {
    device_handle_ = new ::xla::DeviceHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedRequest.device_handle)
  return device_handle_;
}
::xla::DeviceHandle* TransferFromOutfeedRequest::release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = NULL;
  return temp;
}
void TransferFromOutfeedRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  delete device_handle_;
  if (device_handle != NULL && device_handle->GetArena() != NULL) {
    ::xla::DeviceHandle* new_device_handle = new ::xla::DeviceHandle;
    new_device_handle->CopyFrom(*device_handle);
    device_handle = new_device_handle;
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedRequest.device_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferFromOutfeedResponse::kLiteralFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferFromOutfeedResponse::TransferFromOutfeedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.TransferFromOutfeedResponse)
}
TransferFromOutfeedResponse::TransferFromOutfeedResponse(const TransferFromOutfeedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    literal_ = new ::xla::Literal(*from.literal_);
  } else {
    literal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.TransferFromOutfeedResponse)
}

void TransferFromOutfeedResponse::SharedCtor() {
  literal_ = NULL;
  _cached_size_ = 0;
}

TransferFromOutfeedResponse::~TransferFromOutfeedResponse() {
  // @@protoc_insertion_point(destructor:xla.TransferFromOutfeedResponse)
  SharedDtor();
}

void TransferFromOutfeedResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete literal_;
  }
}

void TransferFromOutfeedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferFromOutfeedResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[18].descriptor;
}

const TransferFromOutfeedResponse& TransferFromOutfeedResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferFromOutfeedResponse* TransferFromOutfeedResponse::New(::google::protobuf::Arena* arena) const {
  TransferFromOutfeedResponse* n = new TransferFromOutfeedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferFromOutfeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.TransferFromOutfeedResponse)
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) {
    delete literal_;
  }
  literal_ = NULL;
}

bool TransferFromOutfeedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.TransferFromOutfeedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Literal literal = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.TransferFromOutfeedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.TransferFromOutfeedResponse)
  return false;
#undef DO_
}

void TransferFromOutfeedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.TransferFromOutfeedResponse)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->literal_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.TransferFromOutfeedResponse)
}

::google::protobuf::uint8* TransferFromOutfeedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.TransferFromOutfeedResponse)
  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->literal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.TransferFromOutfeedResponse)
  return target;
}

size_t TransferFromOutfeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.TransferFromOutfeedResponse)
  size_t total_size = 0;

  // .xla.Literal literal = 1;
  if (this->has_literal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->literal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferFromOutfeedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.TransferFromOutfeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFromOutfeedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferFromOutfeedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.TransferFromOutfeedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.TransferFromOutfeedResponse)
    MergeFrom(*source);
  }
}

void TransferFromOutfeedResponse::MergeFrom(const TransferFromOutfeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.TransferFromOutfeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_literal()) {
    mutable_literal()->::xla::Literal::MergeFrom(from.literal());
  }
}

void TransferFromOutfeedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.TransferFromOutfeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFromOutfeedResponse::CopyFrom(const TransferFromOutfeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.TransferFromOutfeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFromOutfeedResponse::IsInitialized() const {
  return true;
}

void TransferFromOutfeedResponse::Swap(TransferFromOutfeedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferFromOutfeedResponse::InternalSwap(TransferFromOutfeedResponse* other) {
  std::swap(literal_, other->literal_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferFromOutfeedResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferFromOutfeedResponse

// .xla.Literal literal = 1;
bool TransferFromOutfeedResponse::has_literal() const {
  return this != internal_default_instance() && literal_ != NULL;
}
void TransferFromOutfeedResponse::clear_literal() {
  if (GetArenaNoVirtual() == NULL && literal_ != NULL) delete literal_;
  literal_ = NULL;
}
const ::xla::Literal& TransferFromOutfeedResponse::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedResponse.literal)
  return literal_ != NULL ? *literal_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* TransferFromOutfeedResponse::mutable_literal() {
  
  if (literal_ == NULL) {
    literal_ = new ::xla::Literal;
  }
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedResponse.literal)
  return literal_;
}
::xla::Literal* TransferFromOutfeedResponse::release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedResponse.literal)
  
  ::xla::Literal* temp = literal_;
  literal_ = NULL;
  return temp;
}
void TransferFromOutfeedResponse::set_allocated_literal(::xla::Literal* literal) {
  delete literal_;
  if (literal != NULL && literal->GetArena() != NULL) {
    ::xla::Literal* new_literal = new ::xla::Literal;
    new_literal->CopyFrom(*literal);
    literal = new_literal;
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedResponse.literal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetDeviceRequest::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetDeviceRequest::ResetDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ResetDeviceRequest)
}
ResetDeviceRequest::ResetDeviceRequest(const ResetDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_handle()) {
    device_handle_ = new ::xla::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ResetDeviceRequest)
}

void ResetDeviceRequest::SharedCtor() {
  device_handle_ = NULL;
  _cached_size_ = 0;
}

ResetDeviceRequest::~ResetDeviceRequest() {
  // @@protoc_insertion_point(destructor:xla.ResetDeviceRequest)
  SharedDtor();
}

void ResetDeviceRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete device_handle_;
  }
}

void ResetDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDeviceRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[19].descriptor;
}

const ResetDeviceRequest& ResetDeviceRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetDeviceRequest* ResetDeviceRequest::New(::google::protobuf::Arena* arena) const {
  ResetDeviceRequest* n = new ResetDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ResetDeviceRequest)
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
}

bool ResetDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ResetDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.DeviceHandle device_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ResetDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ResetDeviceRequest)
  return false;
#undef DO_
}

void ResetDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ResetDeviceRequest)
  // .xla.DeviceHandle device_handle = 1;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->device_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ResetDeviceRequest)
}

::google::protobuf::uint8* ResetDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ResetDeviceRequest)
  // .xla.DeviceHandle device_handle = 1;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->device_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ResetDeviceRequest)
  return target;
}

size_t ResetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ResetDeviceRequest)
  size_t total_size = 0;

  // .xla.DeviceHandle device_handle = 1;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ResetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ResetDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ResetDeviceRequest)
    MergeFrom(*source);
  }
}

void ResetDeviceRequest::MergeFrom(const ResetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ResetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_handle()) {
    mutable_device_handle()->::xla::DeviceHandle::MergeFrom(from.device_handle());
  }
}

void ResetDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ResetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDeviceRequest::CopyFrom(const ResetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ResetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDeviceRequest::IsInitialized() const {
  return true;
}

void ResetDeviceRequest::Swap(ResetDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetDeviceRequest::InternalSwap(ResetDeviceRequest* other) {
  std::swap(device_handle_, other->device_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetDeviceRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetDeviceRequest

// .xla.DeviceHandle device_handle = 1;
bool ResetDeviceRequest::has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != NULL;
}
void ResetDeviceRequest::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) delete device_handle_;
  device_handle_ = NULL;
}
const ::xla::DeviceHandle& ResetDeviceRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.ResetDeviceRequest.device_handle)
  return device_handle_ != NULL ? *device_handle_
                         : *::xla::DeviceHandle::internal_default_instance();
}
::xla::DeviceHandle* ResetDeviceRequest::mutable_device_handle() {
  
  if (device_handle_ == NULL) {
    device_handle_ = new ::xla::DeviceHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ResetDeviceRequest.device_handle)
  return device_handle_;
}
::xla::DeviceHandle* ResetDeviceRequest::release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.ResetDeviceRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = NULL;
  return temp;
}
void ResetDeviceRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  delete device_handle_;
  if (device_handle != NULL && device_handle->GetArena() != NULL) {
    ::xla::DeviceHandle* new_device_handle = new ::xla::DeviceHandle;
    new_device_handle->CopyFrom(*device_handle);
    device_handle = new_device_handle;
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ResetDeviceRequest.device_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetDeviceResponse::ResetDeviceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ResetDeviceResponse)
}
ResetDeviceResponse::ResetDeviceResponse(const ResetDeviceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.ResetDeviceResponse)
}

void ResetDeviceResponse::SharedCtor() {
  _cached_size_ = 0;
}

ResetDeviceResponse::~ResetDeviceResponse() {
  // @@protoc_insertion_point(destructor:xla.ResetDeviceResponse)
  SharedDtor();
}

void ResetDeviceResponse::SharedDtor() {
}

void ResetDeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDeviceResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[20].descriptor;
}

const ResetDeviceResponse& ResetDeviceResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetDeviceResponse* ResetDeviceResponse::New(::google::protobuf::Arena* arena) const {
  ResetDeviceResponse* n = new ResetDeviceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ResetDeviceResponse)
}

bool ResetDeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ResetDeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ResetDeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ResetDeviceResponse)
  return false;
#undef DO_
}

void ResetDeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ResetDeviceResponse)
  // @@protoc_insertion_point(serialize_end:xla.ResetDeviceResponse)
}

::google::protobuf::uint8* ResetDeviceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ResetDeviceResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.ResetDeviceResponse)
  return target;
}

size_t ResetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ResetDeviceResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ResetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetDeviceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetDeviceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ResetDeviceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ResetDeviceResponse)
    MergeFrom(*source);
  }
}

void ResetDeviceResponse::MergeFrom(const ResetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ResetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ResetDeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ResetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDeviceResponse::CopyFrom(const ResetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ResetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDeviceResponse::IsInitialized() const {
  return true;
}

void ResetDeviceResponse::Swap(ResetDeviceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetDeviceResponse::InternalSwap(ResetDeviceResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetDeviceResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetDeviceResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationStatsRequest::kComputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationStatsRequest::ComputationStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationStatsRequest)
}
ComputationStatsRequest::ComputationStatsRequest(const ComputationStatsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputationStatsRequest)
}

void ComputationStatsRequest::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

ComputationStatsRequest::~ComputationStatsRequest() {
  // @@protoc_insertion_point(destructor:xla.ComputationStatsRequest)
  SharedDtor();
}

void ComputationStatsRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void ComputationStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationStatsRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[21].descriptor;
}

const ComputationStatsRequest& ComputationStatsRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationStatsRequest* ComputationStatsRequest::New(::google::protobuf::Arena* arena) const {
  ComputationStatsRequest* n = new ComputationStatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputationStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationStatsRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool ComputationStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationStatsRequest)
  return false;
#undef DO_
}

void ComputationStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationStatsRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationStatsRequest)
}

::google::protobuf::uint8* ComputationStatsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationStatsRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationStatsRequest)
  return target;
}

size_t ComputationStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationStatsRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationStatsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationStatsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationStatsRequest)
    MergeFrom(*source);
  }
}

void ComputationStatsRequest::MergeFrom(const ComputationStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void ComputationStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationStatsRequest::CopyFrom(const ComputationStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationStatsRequest::IsInitialized() const {
  return true;
}

void ComputationStatsRequest::Swap(ComputationStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputationStatsRequest::InternalSwap(ComputationStatsRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationStatsRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationStatsRequest

// .xla.ComputationHandle computation = 1;
bool ComputationStatsRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void ComputationStatsRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& ComputationStatsRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStatsRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ComputationStatsRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputationStatsRequest.computation)
  return computation_;
}
::xla::ComputationHandle* ComputationStatsRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.ComputationStatsRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void ComputationStatsRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationStatsRequest.computation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationStatsResponse::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationStatsResponse::ComputationStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationStatsResponse)
}
ComputationStatsResponse::ComputationStatsResponse(const ComputationStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::xla::ComputationStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputationStatsResponse)
}

void ComputationStatsResponse::SharedCtor() {
  stats_ = NULL;
  _cached_size_ = 0;
}

ComputationStatsResponse::~ComputationStatsResponse() {
  // @@protoc_insertion_point(destructor:xla.ComputationStatsResponse)
  SharedDtor();
}

void ComputationStatsResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_;
  }
}

void ComputationStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationStatsResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[22].descriptor;
}

const ComputationStatsResponse& ComputationStatsResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationStatsResponse* ComputationStatsResponse::New(::google::protobuf::Arena* arena) const {
  ComputationStatsResponse* n = new ComputationStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputationStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationStatsResponse)
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
}

bool ComputationStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationStats stats = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationStatsResponse)
  return false;
#undef DO_
}

void ComputationStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationStatsResponse)
  // .xla.ComputationStats stats = 1;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationStatsResponse)
}

::google::protobuf::uint8* ComputationStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationStatsResponse)
  // .xla.ComputationStats stats = 1;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationStatsResponse)
  return target;
}

size_t ComputationStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationStatsResponse)
  size_t total_size = 0;

  // .xla.ComputationStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationStatsResponse)
    MergeFrom(*source);
  }
}

void ComputationStatsResponse::MergeFrom(const ComputationStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    mutable_stats()->::xla::ComputationStats::MergeFrom(from.stats());
  }
}

void ComputationStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationStatsResponse::CopyFrom(const ComputationStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationStatsResponse::IsInitialized() const {
  return true;
}

void ComputationStatsResponse::Swap(ComputationStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputationStatsResponse::InternalSwap(ComputationStatsResponse* other) {
  std::swap(stats_, other->stats_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationStatsResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationStatsResponse

// .xla.ComputationStats stats = 1;
bool ComputationStatsResponse::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void ComputationStatsResponse::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::xla::ComputationStats& ComputationStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStatsResponse.stats)
  return stats_ != NULL ? *stats_
                         : *::xla::ComputationStats::internal_default_instance();
}
::xla::ComputationStats* ComputationStatsResponse::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::xla::ComputationStats;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputationStatsResponse.stats)
  return stats_;
}
::xla::ComputationStats* ComputationStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:xla.ComputationStatsResponse.stats)
  
  ::xla::ComputationStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void ComputationStatsResponse::set_allocated_stats(::xla::ComputationStats* stats) {
  delete stats_;
  if (stats != NULL && stats->GetArena() != NULL) {
    ::xla::ComputationStats* new_stats = new ::xla::ComputationStats;
    new_stats->CopyFrom(*stats);
    stats = new_stats;
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationStatsResponse.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationRequest::ComputationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationRequest)
}
ComputationRequest::ComputationRequest(const ComputationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputationRequest)
}

void ComputationRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ComputationRequest::~ComputationRequest() {
  // @@protoc_insertion_point(destructor:xla.ComputationRequest)
  SharedDtor();
}

void ComputationRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ComputationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[23].descriptor;
}

const ComputationRequest& ComputationRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationRequest* ComputationRequest::New(::google::protobuf::Arena* arena) const {
  ComputationRequest* n = new ComputationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ComputationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.ComputationRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationRequest)
  return false;
#undef DO_
}

void ComputationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ComputationRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationRequest)
}

::google::protobuf::uint8* ComputationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.ComputationRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationRequest)
  return target;
}

size_t ComputationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationRequest)
    MergeFrom(*source);
  }
}

void ComputationRequest::MergeFrom(const ComputationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ComputationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationRequest::CopyFrom(const ComputationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationRequest::IsInitialized() const {
  return true;
}

void ComputationRequest::Swap(ComputationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputationRequest::InternalSwap(ComputationRequest* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationRequest

// string name = 1;
void ComputationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ComputationRequest::name() const {
  // @@protoc_insertion_point(field_get:xla.ComputationRequest.name)
  return name_.GetNoArena();
}
void ComputationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.ComputationRequest.name)
}
#if LANG_CXX11
void ComputationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.ComputationRequest.name)
}
#endif
void ComputationRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.ComputationRequest.name)
}
void ComputationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.ComputationRequest.name)
}
::std::string* ComputationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.ComputationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ComputationRequest::release_name() {
  // @@protoc_insertion_point(field_release:xla.ComputationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComputationRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputationResponse::kComputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputationResponse::ComputationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputationResponse)
}
ComputationResponse::ComputationResponse(const ComputationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputationResponse)
}

void ComputationResponse::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

ComputationResponse::~ComputationResponse() {
  // @@protoc_insertion_point(destructor:xla.ComputationResponse)
  SharedDtor();
}

void ComputationResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void ComputationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[24].descriptor;
}

const ComputationResponse& ComputationResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputationResponse* ComputationResponse::New(::google::protobuf::Arena* arena) const {
  ComputationResponse* n = new ComputationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputationResponse)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool ComputationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputationResponse)
  return false;
#undef DO_
}

void ComputationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputationResponse)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputationResponse)
}

::google::protobuf::uint8* ComputationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputationResponse)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputationResponse)
  return target;
}

size_t ComputationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputationResponse)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputationResponse)
    MergeFrom(*source);
  }
}

void ComputationResponse::MergeFrom(const ComputationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void ComputationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationResponse::CopyFrom(const ComputationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationResponse::IsInitialized() const {
  return true;
}

void ComputationResponse::Swap(ComputationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputationResponse::InternalSwap(ComputationResponse* other) {
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputationResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputationResponse

// .xla.ComputationHandle computation = 1;
bool ComputationResponse::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void ComputationResponse::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& ComputationResponse::computation() const {
  // @@protoc_insertion_point(field_get:xla.ComputationResponse.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ComputationResponse::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputationResponse.computation)
  return computation_;
}
::xla::ComputationHandle* ComputationResponse::release_computation() {
  // @@protoc_insertion_point(field_release:xla.ComputationResponse.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void ComputationResponse::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationResponse.computation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChannelHandleRequest::CreateChannelHandleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.CreateChannelHandleRequest)
}
CreateChannelHandleRequest::CreateChannelHandleRequest(const CreateChannelHandleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.CreateChannelHandleRequest)
}

void CreateChannelHandleRequest::SharedCtor() {
  _cached_size_ = 0;
}

CreateChannelHandleRequest::~CreateChannelHandleRequest() {
  // @@protoc_insertion_point(destructor:xla.CreateChannelHandleRequest)
  SharedDtor();
}

void CreateChannelHandleRequest::SharedDtor() {
}

void CreateChannelHandleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelHandleRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[25].descriptor;
}

const CreateChannelHandleRequest& CreateChannelHandleRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChannelHandleRequest* CreateChannelHandleRequest::New(::google::protobuf::Arena* arena) const {
  CreateChannelHandleRequest* n = new CreateChannelHandleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChannelHandleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CreateChannelHandleRequest)
}

bool CreateChannelHandleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.CreateChannelHandleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.CreateChannelHandleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.CreateChannelHandleRequest)
  return false;
#undef DO_
}

void CreateChannelHandleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.CreateChannelHandleRequest)
  // @@protoc_insertion_point(serialize_end:xla.CreateChannelHandleRequest)
}

::google::protobuf::uint8* CreateChannelHandleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.CreateChannelHandleRequest)
  // @@protoc_insertion_point(serialize_to_array_end:xla.CreateChannelHandleRequest)
  return target;
}

size_t CreateChannelHandleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CreateChannelHandleRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelHandleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.CreateChannelHandleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelHandleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChannelHandleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.CreateChannelHandleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.CreateChannelHandleRequest)
    MergeFrom(*source);
  }
}

void CreateChannelHandleRequest::MergeFrom(const CreateChannelHandleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.CreateChannelHandleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CreateChannelHandleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.CreateChannelHandleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelHandleRequest::CopyFrom(const CreateChannelHandleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CreateChannelHandleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelHandleRequest::IsInitialized() const {
  return true;
}

void CreateChannelHandleRequest::Swap(CreateChannelHandleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChannelHandleRequest::InternalSwap(CreateChannelHandleRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChannelHandleRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChannelHandleRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChannelHandleResponse::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChannelHandleResponse::CreateChannelHandleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.CreateChannelHandleResponse)
}
CreateChannelHandleResponse::CreateChannelHandleResponse(const CreateChannelHandleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::xla::ChannelHandle(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.CreateChannelHandleResponse)
}

void CreateChannelHandleResponse::SharedCtor() {
  channel_ = NULL;
  _cached_size_ = 0;
}

CreateChannelHandleResponse::~CreateChannelHandleResponse() {
  // @@protoc_insertion_point(destructor:xla.CreateChannelHandleResponse)
  SharedDtor();
}

void CreateChannelHandleResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete channel_;
  }
}

void CreateChannelHandleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelHandleResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[26].descriptor;
}

const CreateChannelHandleResponse& CreateChannelHandleResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChannelHandleResponse* CreateChannelHandleResponse::New(::google::protobuf::Arena* arena) const {
  CreateChannelHandleResponse* n = new CreateChannelHandleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChannelHandleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CreateChannelHandleResponse)
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}

bool CreateChannelHandleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.CreateChannelHandleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ChannelHandle channel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.CreateChannelHandleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.CreateChannelHandleResponse)
  return false;
#undef DO_
}

void CreateChannelHandleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.CreateChannelHandleResponse)
  // .xla.ChannelHandle channel = 1;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->channel_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.CreateChannelHandleResponse)
}

::google::protobuf::uint8* CreateChannelHandleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.CreateChannelHandleResponse)
  // .xla.ChannelHandle channel = 1;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->channel_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.CreateChannelHandleResponse)
  return target;
}

size_t CreateChannelHandleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.CreateChannelHandleResponse)
  size_t total_size = 0;

  // .xla.ChannelHandle channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelHandleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.CreateChannelHandleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelHandleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChannelHandleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.CreateChannelHandleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.CreateChannelHandleResponse)
    MergeFrom(*source);
  }
}

void CreateChannelHandleResponse::MergeFrom(const CreateChannelHandleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.CreateChannelHandleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    mutable_channel()->::xla::ChannelHandle::MergeFrom(from.channel());
  }
}

void CreateChannelHandleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.CreateChannelHandleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelHandleResponse::CopyFrom(const CreateChannelHandleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CreateChannelHandleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelHandleResponse::IsInitialized() const {
  return true;
}

void CreateChannelHandleResponse::Swap(CreateChannelHandleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChannelHandleResponse::InternalSwap(CreateChannelHandleResponse* other) {
  std::swap(channel_, other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChannelHandleResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChannelHandleResponse

// .xla.ChannelHandle channel = 1;
bool CreateChannelHandleResponse::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
void CreateChannelHandleResponse::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
const ::xla::ChannelHandle& CreateChannelHandleResponse::channel() const {
  // @@protoc_insertion_point(field_get:xla.CreateChannelHandleResponse.channel)
  return channel_ != NULL ? *channel_
                         : *::xla::ChannelHandle::internal_default_instance();
}
::xla::ChannelHandle* CreateChannelHandleResponse::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::xla::ChannelHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.CreateChannelHandleResponse.channel)
  return channel_;
}
::xla::ChannelHandle* CreateChannelHandleResponse::release_channel() {
  // @@protoc_insertion_point(field_release:xla.CreateChannelHandleResponse.channel)
  
  ::xla::ChannelHandle* temp = channel_;
  channel_ = NULL;
  return temp;
}
void CreateChannelHandleResponse::set_allocated_channel(::xla::ChannelHandle* channel) {
  delete channel_;
  if (channel != NULL && channel->GetArena() != NULL) {
    ::xla::ChannelHandle* new_channel = new ::xla::ChannelHandle;
    new_channel->CopyFrom(*channel);
    channel = new_channel;
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.CreateChannelHandleResponse.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnregisterRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnregisterRequest::UnregisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.UnregisterRequest)
}
UnregisterRequest::UnregisterRequest(const UnregisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.UnregisterRequest)
}

void UnregisterRequest::SharedCtor() {
  data_ = NULL;
  _cached_size_ = 0;
}

UnregisterRequest::~UnregisterRequest() {
  // @@protoc_insertion_point(destructor:xla.UnregisterRequest)
  SharedDtor();
}

void UnregisterRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UnregisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[27].descriptor;
}

const UnregisterRequest& UnregisterRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnregisterRequest* UnregisterRequest::New(::google::protobuf::Arena* arena) const {
  UnregisterRequest* n = new UnregisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnregisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.UnregisterRequest)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool UnregisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.UnregisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.UnregisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.UnregisterRequest)
  return false;
#undef DO_
}

void UnregisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.UnregisterRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.UnregisterRequest)
}

::google::protobuf::uint8* UnregisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.UnregisterRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.UnregisterRequest)
  return target;
}

size_t UnregisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.UnregisterRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.UnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnregisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.UnregisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.UnregisterRequest)
    MergeFrom(*source);
  }
}

void UnregisterRequest::MergeFrom(const UnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.UnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
}

void UnregisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.UnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterRequest::CopyFrom(const UnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.UnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterRequest::IsInitialized() const {
  return true;
}

void UnregisterRequest::Swap(UnregisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnregisterRequest::InternalSwap(UnregisterRequest* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnregisterRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnregisterRequest

// .xla.GlobalDataHandle data = 1;
bool UnregisterRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void UnregisterRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& UnregisterRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.UnregisterRequest.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* UnregisterRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.UnregisterRequest.data)
  return data_;
}
::xla::GlobalDataHandle* UnregisterRequest::release_data() {
  // @@protoc_insertion_point(field_release:xla.UnregisterRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void UnregisterRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.UnregisterRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnregisterResponse::UnregisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.UnregisterResponse)
}
UnregisterResponse::UnregisterResponse(const UnregisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.UnregisterResponse)
}

void UnregisterResponse::SharedCtor() {
  _cached_size_ = 0;
}

UnregisterResponse::~UnregisterResponse() {
  // @@protoc_insertion_point(destructor:xla.UnregisterResponse)
  SharedDtor();
}

void UnregisterResponse::SharedDtor() {
}

void UnregisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[28].descriptor;
}

const UnregisterResponse& UnregisterResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnregisterResponse* UnregisterResponse::New(::google::protobuf::Arena* arena) const {
  UnregisterResponse* n = new UnregisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnregisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.UnregisterResponse)
}

bool UnregisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.UnregisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.UnregisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.UnregisterResponse)
  return false;
#undef DO_
}

void UnregisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.UnregisterResponse)
  // @@protoc_insertion_point(serialize_end:xla.UnregisterResponse)
}

::google::protobuf::uint8* UnregisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.UnregisterResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.UnregisterResponse)
  return target;
}

size_t UnregisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.UnregisterResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.UnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnregisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.UnregisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.UnregisterResponse)
    MergeFrom(*source);
  }
}

void UnregisterResponse::MergeFrom(const UnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.UnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void UnregisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.UnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterResponse::CopyFrom(const UnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.UnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterResponse::IsInitialized() const {
  return true;
}

void UnregisterResponse::Swap(UnregisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnregisterResponse::InternalSwap(UnregisterResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnregisterResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnregisterResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetReturnValueRequest::kComputationFieldNumber;
const int SetReturnValueRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetReturnValueRequest::SetReturnValueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SetReturnValueRequest)
}
SetReturnValueRequest::SetReturnValueRequest(const SetReturnValueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SetReturnValueRequest)
}

void SetReturnValueRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&operand_) -
    reinterpret_cast<char*>(&computation_) + sizeof(operand_));
  _cached_size_ = 0;
}

SetReturnValueRequest::~SetReturnValueRequest() {
  // @@protoc_insertion_point(destructor:xla.SetReturnValueRequest)
  SharedDtor();
}

void SetReturnValueRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void SetReturnValueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetReturnValueRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[29].descriptor;
}

const SetReturnValueRequest& SetReturnValueRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetReturnValueRequest* SetReturnValueRequest::New(::google::protobuf::Arena* arena) const {
  SetReturnValueRequest* n = new SetReturnValueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetReturnValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SetReturnValueRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool SetReturnValueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SetReturnValueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SetReturnValueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SetReturnValueRequest)
  return false;
#undef DO_
}

void SetReturnValueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SetReturnValueRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SetReturnValueRequest)
}

::google::protobuf::uint8* SetReturnValueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SetReturnValueRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SetReturnValueRequest)
  return target;
}

size_t SetReturnValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SetReturnValueRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetReturnValueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SetReturnValueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetReturnValueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetReturnValueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SetReturnValueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SetReturnValueRequest)
    MergeFrom(*source);
  }
}

void SetReturnValueRequest::MergeFrom(const SetReturnValueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SetReturnValueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void SetReturnValueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SetReturnValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReturnValueRequest::CopyFrom(const SetReturnValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SetReturnValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReturnValueRequest::IsInitialized() const {
  return true;
}

void SetReturnValueRequest::Swap(SetReturnValueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetReturnValueRequest::InternalSwap(SetReturnValueRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetReturnValueRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetReturnValueRequest

// .xla.ComputationHandle computation = 1;
bool SetReturnValueRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void SetReturnValueRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& SetReturnValueRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.SetReturnValueRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SetReturnValueRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.SetReturnValueRequest.computation)
  return computation_;
}
::xla::ComputationHandle* SetReturnValueRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.SetReturnValueRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void SetReturnValueRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SetReturnValueRequest.computation)
}

// .xla.ComputationDataHandle operand = 2;
bool SetReturnValueRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void SetReturnValueRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& SetReturnValueRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.SetReturnValueRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* SetReturnValueRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    operand_ = new ::xla::ComputationDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.SetReturnValueRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* SetReturnValueRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.SetReturnValueRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void SetReturnValueRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  delete operand_;
  if (operand != NULL && operand->GetArena() != NULL) {
    ::xla::ComputationDataHandle* new_operand = new ::xla::ComputationDataHandle;
    new_operand->CopyFrom(*operand);
    operand = new_operand;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SetReturnValueRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetReturnValueResponse::SetReturnValueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SetReturnValueResponse)
}
SetReturnValueResponse::SetReturnValueResponse(const SetReturnValueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.SetReturnValueResponse)
}

void SetReturnValueResponse::SharedCtor() {
  _cached_size_ = 0;
}

SetReturnValueResponse::~SetReturnValueResponse() {
  // @@protoc_insertion_point(destructor:xla.SetReturnValueResponse)
  SharedDtor();
}

void SetReturnValueResponse::SharedDtor() {
}

void SetReturnValueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetReturnValueResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[30].descriptor;
}

const SetReturnValueResponse& SetReturnValueResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetReturnValueResponse* SetReturnValueResponse::New(::google::protobuf::Arena* arena) const {
  SetReturnValueResponse* n = new SetReturnValueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetReturnValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SetReturnValueResponse)
}

bool SetReturnValueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SetReturnValueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SetReturnValueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SetReturnValueResponse)
  return false;
#undef DO_
}

void SetReturnValueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SetReturnValueResponse)
  // @@protoc_insertion_point(serialize_end:xla.SetReturnValueResponse)
}

::google::protobuf::uint8* SetReturnValueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SetReturnValueResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.SetReturnValueResponse)
  return target;
}

size_t SetReturnValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SetReturnValueResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetReturnValueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SetReturnValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetReturnValueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetReturnValueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SetReturnValueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SetReturnValueResponse)
    MergeFrom(*source);
  }
}

void SetReturnValueResponse::MergeFrom(const SetReturnValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SetReturnValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SetReturnValueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SetReturnValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReturnValueResponse::CopyFrom(const SetReturnValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SetReturnValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReturnValueResponse::IsInitialized() const {
  return true;
}

void SetReturnValueResponse::Swap(SetReturnValueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetReturnValueResponse::InternalSwap(SetReturnValueResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetReturnValueResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetReturnValueResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteRequest::kComputationFieldNumber;
const int ExecuteRequest::kArgumentsFieldNumber;
const int ExecuteRequest::kDeviceHandleFieldNumber;
const int ExecuteRequest::kExecutionOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteRequest::ExecuteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteRequest)
}
ExecuteRequest::ExecuteRequest(const ExecuteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_device_handle()) {
    device_handle_ = new ::xla::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  if (from.has_execution_options()) {
    execution_options_ = new ::xla::ExecutionOptions(*from.execution_options_);
  } else {
    execution_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteRequest)
}

void ExecuteRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&execution_options_) -
    reinterpret_cast<char*>(&computation_) + sizeof(execution_options_));
  _cached_size_ = 0;
}

ExecuteRequest::~ExecuteRequest() {
  // @@protoc_insertion_point(destructor:xla.ExecuteRequest)
  SharedDtor();
}

void ExecuteRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete device_handle_;
  }
  if (this != internal_default_instance()) {
    delete execution_options_;
  }
}

void ExecuteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[31].descriptor;
}

const ExecuteRequest& ExecuteRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteRequest* ExecuteRequest::New(::google::protobuf::Arena* arena) const {
  ExecuteRequest* n = new ExecuteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteRequest)
  arguments_.Clear();
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && execution_options_ != NULL) {
    delete execution_options_;
  }
  execution_options_ = NULL;
}

bool ExecuteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.GlobalDataHandle arguments = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.DeviceHandle device_handle = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ExecutionOptions execution_options = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteRequest)
  return false;
#undef DO_
}

void ExecuteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arguments(i), output);
  }

  // .xla.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->device_handle_, output);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->execution_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteRequest)
}

::google::protobuf::uint8* ExecuteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->arguments(i), false, target);
  }

  // .xla.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->device_handle_, false, target);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->execution_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteRequest)
  return target;
}

size_t ExecuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteRequest)
  size_t total_size = 0;

  // repeated .xla.GlobalDataHandle arguments = 2;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_handle_);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteRequest)
    MergeFrom(*source);
  }
}

void ExecuteRequest::MergeFrom(const ExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arguments_.MergeFrom(from.arguments_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_device_handle()) {
    mutable_device_handle()->::xla::DeviceHandle::MergeFrom(from.device_handle());
  }
  if (from.has_execution_options()) {
    mutable_execution_options()->::xla::ExecutionOptions::MergeFrom(from.execution_options());
  }
}

void ExecuteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteRequest::CopyFrom(const ExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRequest::IsInitialized() const {
  return true;
}

void ExecuteRequest::Swap(ExecuteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteRequest::InternalSwap(ExecuteRequest* other) {
  arguments_.UnsafeArenaSwap(&other->arguments_);
  std::swap(computation_, other->computation_);
  std::swap(device_handle_, other->device_handle_);
  std::swap(execution_options_, other->execution_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteRequest

// .xla.ComputationHandle computation = 1;
bool ExecuteRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void ExecuteRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& ExecuteRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ExecuteRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.computation)
  return computation_;
}
::xla::ComputationHandle* ExecuteRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.ExecuteRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void ExecuteRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteRequest.computation)
}

// repeated .xla.GlobalDataHandle arguments = 2;
int ExecuteRequest::arguments_size() const {
  return arguments_.size();
}
void ExecuteRequest::clear_arguments() {
  arguments_.Clear();
}
const ::xla::GlobalDataHandle& ExecuteRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.arguments)
  return arguments_.Get(index);
}
::xla::GlobalDataHandle* ExecuteRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.arguments)
  return arguments_.Mutable(index);
}
::xla::GlobalDataHandle* ExecuteRequest::add_arguments() {
  // @@protoc_insertion_point(field_add:xla.ExecuteRequest.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >*
ExecuteRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteRequest.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >&
ExecuteRequest::arguments() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteRequest.arguments)
  return arguments_;
}

// .xla.DeviceHandle device_handle = 5;
bool ExecuteRequest::has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != NULL;
}
void ExecuteRequest::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) delete device_handle_;
  device_handle_ = NULL;
}
const ::xla::DeviceHandle& ExecuteRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.device_handle)
  return device_handle_ != NULL ? *device_handle_
                         : *::xla::DeviceHandle::internal_default_instance();
}
::xla::DeviceHandle* ExecuteRequest::mutable_device_handle() {
  
  if (device_handle_ == NULL) {
    device_handle_ = new ::xla::DeviceHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.device_handle)
  return device_handle_;
}
::xla::DeviceHandle* ExecuteRequest::release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.ExecuteRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = NULL;
  return temp;
}
void ExecuteRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  delete device_handle_;
  if (device_handle != NULL && device_handle->GetArena() != NULL) {
    ::xla::DeviceHandle* new_device_handle = new ::xla::DeviceHandle;
    new_device_handle->CopyFrom(*device_handle);
    device_handle = new_device_handle;
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteRequest.device_handle)
}

// .xla.ExecutionOptions execution_options = 6;
bool ExecuteRequest::has_execution_options() const {
  return this != internal_default_instance() && execution_options_ != NULL;
}
void ExecuteRequest::clear_execution_options() {
  if (GetArenaNoVirtual() == NULL && execution_options_ != NULL) delete execution_options_;
  execution_options_ = NULL;
}
const ::xla::ExecutionOptions& ExecuteRequest::execution_options() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.execution_options)
  return execution_options_ != NULL ? *execution_options_
                         : *::xla::ExecutionOptions::internal_default_instance();
}
::xla::ExecutionOptions* ExecuteRequest::mutable_execution_options() {
  
  if (execution_options_ == NULL) {
    execution_options_ = new ::xla::ExecutionOptions;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.execution_options)
  return execution_options_;
}
::xla::ExecutionOptions* ExecuteRequest::release_execution_options() {
  // @@protoc_insertion_point(field_release:xla.ExecuteRequest.execution_options)
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = NULL;
  return temp;
}
void ExecuteRequest::set_allocated_execution_options(::xla::ExecutionOptions* execution_options) {
  delete execution_options_;
  execution_options_ = execution_options;
  if (execution_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteRequest.execution_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteParallelRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteParallelRequest::ExecuteParallelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteParallelRequest)
}
ExecuteParallelRequest::ExecuteParallelRequest(const ExecuteParallelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requests_(from.requests_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteParallelRequest)
}

void ExecuteParallelRequest::SharedCtor() {
  _cached_size_ = 0;
}

ExecuteParallelRequest::~ExecuteParallelRequest() {
  // @@protoc_insertion_point(destructor:xla.ExecuteParallelRequest)
  SharedDtor();
}

void ExecuteParallelRequest::SharedDtor() {
}

void ExecuteParallelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteParallelRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[32].descriptor;
}

const ExecuteParallelRequest& ExecuteParallelRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteParallelRequest* ExecuteParallelRequest::New(::google::protobuf::Arena* arena) const {
  ExecuteParallelRequest* n = new ExecuteParallelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteParallelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteParallelRequest)
  requests_.Clear();
}

bool ExecuteParallelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteParallelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.ExecuteRequest requests = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteParallelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteParallelRequest)
  return false;
#undef DO_
}

void ExecuteParallelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteParallelRequest)
  // repeated .xla.ExecuteRequest requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteParallelRequest)
}

::google::protobuf::uint8* ExecuteParallelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteParallelRequest)
  // repeated .xla.ExecuteRequest requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->requests(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteParallelRequest)
  return target;
}

size_t ExecuteParallelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteParallelRequest)
  size_t total_size = 0;

  // repeated .xla.ExecuteRequest requests = 1;
  {
    unsigned int count = this->requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requests(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteParallelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteParallelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteParallelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteParallelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteParallelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteParallelRequest)
    MergeFrom(*source);
  }
}

void ExecuteParallelRequest::MergeFrom(const ExecuteParallelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteParallelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requests_.MergeFrom(from.requests_);
}

void ExecuteParallelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteParallelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteParallelRequest::CopyFrom(const ExecuteParallelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteParallelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteParallelRequest::IsInitialized() const {
  return true;
}

void ExecuteParallelRequest::Swap(ExecuteParallelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteParallelRequest::InternalSwap(ExecuteParallelRequest* other) {
  requests_.UnsafeArenaSwap(&other->requests_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteParallelRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteParallelRequest

// repeated .xla.ExecuteRequest requests = 1;
int ExecuteParallelRequest::requests_size() const {
  return requests_.size();
}
void ExecuteParallelRequest::clear_requests() {
  requests_.Clear();
}
const ::xla::ExecuteRequest& ExecuteParallelRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteParallelRequest.requests)
  return requests_.Get(index);
}
::xla::ExecuteRequest* ExecuteParallelRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteParallelRequest.requests)
  return requests_.Mutable(index);
}
::xla::ExecuteRequest* ExecuteParallelRequest::add_requests() {
  // @@protoc_insertion_point(field_add:xla.ExecuteParallelRequest.requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ExecuteRequest >*
ExecuteParallelRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteParallelRequest.requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ExecuteRequest >&
ExecuteParallelRequest::requests() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteParallelRequest.requests)
  return requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteResponse::kOutputFieldNumber;
const int ExecuteResponse::kProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteResponse::ExecuteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteResponse)
}
ExecuteResponse::ExecuteResponse(const ExecuteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    output_ = new ::xla::GlobalDataHandle(*from.output_);
  } else {
    output_ = NULL;
  }
  if (from.has_profile()) {
    profile_ = new ::xla::ExecutionProfile(*from.profile_);
  } else {
    profile_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteResponse)
}

void ExecuteResponse::SharedCtor() {
  ::memset(&output_, 0, reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&output_) + sizeof(profile_));
  _cached_size_ = 0;
}

ExecuteResponse::~ExecuteResponse() {
  // @@protoc_insertion_point(destructor:xla.ExecuteResponse)
  SharedDtor();
}

void ExecuteResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete output_;
  }
  if (this != internal_default_instance()) {
    delete profile_;
  }
}

void ExecuteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[33].descriptor;
}

const ExecuteResponse& ExecuteResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteResponse* ExecuteResponse::New(::google::protobuf::Arena* arena) const {
  ExecuteResponse* n = new ExecuteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteResponse)
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
  if (GetArenaNoVirtual() == NULL && profile_ != NULL) {
    delete profile_;
  }
  profile_ = NULL;
}

bool ExecuteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle output = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ExecutionProfile profile = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteResponse)
  return false;
#undef DO_
}

void ExecuteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->output_, output);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->profile_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteResponse)
}

::google::protobuf::uint8* ExecuteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->output_, false, target);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->profile_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteResponse)
  return target;
}

size_t ExecuteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteResponse)
    MergeFrom(*source);
  }
}

void ExecuteResponse::MergeFrom(const ExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    mutable_output()->::xla::GlobalDataHandle::MergeFrom(from.output());
  }
  if (from.has_profile()) {
    mutable_profile()->::xla::ExecutionProfile::MergeFrom(from.profile());
  }
}

void ExecuteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteResponse::CopyFrom(const ExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteResponse::IsInitialized() const {
  return true;
}

void ExecuteResponse::Swap(ExecuteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteResponse::InternalSwap(ExecuteResponse* other) {
  std::swap(output_, other->output_);
  std::swap(profile_, other->profile_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteResponse

// .xla.GlobalDataHandle output = 1;
bool ExecuteResponse::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
void ExecuteResponse::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::xla::GlobalDataHandle& ExecuteResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteResponse.output)
  return output_ != NULL ? *output_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* ExecuteResponse::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteResponse.output)
  return output_;
}
::xla::GlobalDataHandle* ExecuteResponse::release_output() {
  // @@protoc_insertion_point(field_release:xla.ExecuteResponse.output)
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = NULL;
  return temp;
}
void ExecuteResponse::set_allocated_output(::xla::GlobalDataHandle* output) {
  delete output_;
  if (output != NULL && output->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_output = new ::xla::GlobalDataHandle;
    new_output->CopyFrom(*output);
    output = new_output;
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteResponse.output)
}

// .xla.ExecutionProfile profile = 2;
bool ExecuteResponse::has_profile() const {
  return this != internal_default_instance() && profile_ != NULL;
}
void ExecuteResponse::clear_profile() {
  if (GetArenaNoVirtual() == NULL && profile_ != NULL) delete profile_;
  profile_ = NULL;
}
const ::xla::ExecutionProfile& ExecuteResponse::profile() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteResponse.profile)
  return profile_ != NULL ? *profile_
                         : *::xla::ExecutionProfile::internal_default_instance();
}
::xla::ExecutionProfile* ExecuteResponse::mutable_profile() {
  
  if (profile_ == NULL) {
    profile_ = new ::xla::ExecutionProfile;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteResponse.profile)
  return profile_;
}
::xla::ExecutionProfile* ExecuteResponse::release_profile() {
  // @@protoc_insertion_point(field_release:xla.ExecuteResponse.profile)
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = NULL;
  return temp;
}
void ExecuteResponse::set_allocated_profile(::xla::ExecutionProfile* profile) {
  delete profile_;
  if (profile != NULL && profile->GetArena() != NULL) {
    ::xla::ExecutionProfile* new_profile = new ::xla::ExecutionProfile;
    new_profile->CopyFrom(*profile);
    profile = new_profile;
  }
  profile_ = profile;
  if (profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteResponse.profile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteParallelResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteParallelResponse::ExecuteParallelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteParallelResponse)
}
ExecuteParallelResponse::ExecuteParallelResponse(const ExecuteParallelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      responses_(from.responses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteParallelResponse)
}

void ExecuteParallelResponse::SharedCtor() {
  _cached_size_ = 0;
}

ExecuteParallelResponse::~ExecuteParallelResponse() {
  // @@protoc_insertion_point(destructor:xla.ExecuteParallelResponse)
  SharedDtor();
}

void ExecuteParallelResponse::SharedDtor() {
}

void ExecuteParallelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteParallelResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[34].descriptor;
}

const ExecuteParallelResponse& ExecuteParallelResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteParallelResponse* ExecuteParallelResponse::New(::google::protobuf::Arena* arena) const {
  ExecuteParallelResponse* n = new ExecuteParallelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteParallelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteParallelResponse)
  responses_.Clear();
}

bool ExecuteParallelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteParallelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.ExecuteResponse responses = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteParallelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteParallelResponse)
  return false;
#undef DO_
}

void ExecuteParallelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteParallelResponse)
  // repeated .xla.ExecuteResponse responses = 1;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteParallelResponse)
}

::google::protobuf::uint8* ExecuteParallelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteParallelResponse)
  // repeated .xla.ExecuteResponse responses = 1;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->responses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteParallelResponse)
  return target;
}

size_t ExecuteParallelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteParallelResponse)
  size_t total_size = 0;

  // repeated .xla.ExecuteResponse responses = 1;
  {
    unsigned int count = this->responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteParallelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteParallelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteParallelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteParallelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteParallelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteParallelResponse)
    MergeFrom(*source);
  }
}

void ExecuteParallelResponse::MergeFrom(const ExecuteParallelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteParallelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responses_.MergeFrom(from.responses_);
}

void ExecuteParallelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteParallelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteParallelResponse::CopyFrom(const ExecuteParallelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteParallelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteParallelResponse::IsInitialized() const {
  return true;
}

void ExecuteParallelResponse::Swap(ExecuteParallelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteParallelResponse::InternalSwap(ExecuteParallelResponse* other) {
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteParallelResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteParallelResponse

// repeated .xla.ExecuteResponse responses = 1;
int ExecuteParallelResponse::responses_size() const {
  return responses_.size();
}
void ExecuteParallelResponse::clear_responses() {
  responses_.Clear();
}
const ::xla::ExecuteResponse& ExecuteParallelResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteParallelResponse.responses)
  return responses_.Get(index);
}
::xla::ExecuteResponse* ExecuteParallelResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteParallelResponse.responses)
  return responses_.Mutable(index);
}
::xla::ExecuteResponse* ExecuteParallelResponse::add_responses() {
  // @@protoc_insertion_point(field_add:xla.ExecuteParallelResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::ExecuteResponse >*
ExecuteParallelResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteParallelResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::ExecuteResponse >&
ExecuteParallelResponse::responses() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteParallelResponse.responses)
  return responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteAsyncRequest::kComputationFieldNumber;
const int ExecuteAsyncRequest::kArgumentsFieldNumber;
const int ExecuteAsyncRequest::kExecutionOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteAsyncRequest::ExecuteAsyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteAsyncRequest)
}
ExecuteAsyncRequest::ExecuteAsyncRequest(const ExecuteAsyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_execution_options()) {
    execution_options_ = new ::xla::ExecutionOptions(*from.execution_options_);
  } else {
    execution_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteAsyncRequest)
}

void ExecuteAsyncRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&execution_options_) -
    reinterpret_cast<char*>(&computation_) + sizeof(execution_options_));
  _cached_size_ = 0;
}

ExecuteAsyncRequest::~ExecuteAsyncRequest() {
  // @@protoc_insertion_point(destructor:xla.ExecuteAsyncRequest)
  SharedDtor();
}

void ExecuteAsyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete execution_options_;
  }
}

void ExecuteAsyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteAsyncRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[35].descriptor;
}

const ExecuteAsyncRequest& ExecuteAsyncRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteAsyncRequest* ExecuteAsyncRequest::New(::google::protobuf::Arena* arena) const {
  ExecuteAsyncRequest* n = new ExecuteAsyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteAsyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteAsyncRequest)
  arguments_.Clear();
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && execution_options_ != NULL) {
    delete execution_options_;
  }
  execution_options_ = NULL;
}

bool ExecuteAsyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteAsyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.GlobalDataHandle arguments = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.ExecutionOptions execution_options = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteAsyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteAsyncRequest)
  return false;
#undef DO_
}

void ExecuteAsyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteAsyncRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arguments(i), output);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->execution_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteAsyncRequest)
}

::google::protobuf::uint8* ExecuteAsyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteAsyncRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->arguments(i), false, target);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->execution_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteAsyncRequest)
  return target;
}

size_t ExecuteAsyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteAsyncRequest)
  size_t total_size = 0;

  // repeated .xla.GlobalDataHandle arguments = 2;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.ExecutionOptions execution_options = 6;
  if (this->has_execution_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteAsyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteAsyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteAsyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteAsyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteAsyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteAsyncRequest)
    MergeFrom(*source);
  }
}

void ExecuteAsyncRequest::MergeFrom(const ExecuteAsyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteAsyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arguments_.MergeFrom(from.arguments_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_execution_options()) {
    mutable_execution_options()->::xla::ExecutionOptions::MergeFrom(from.execution_options());
  }
}

void ExecuteAsyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteAsyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteAsyncRequest::CopyFrom(const ExecuteAsyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteAsyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteAsyncRequest::IsInitialized() const {
  return true;
}

void ExecuteAsyncRequest::Swap(ExecuteAsyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteAsyncRequest::InternalSwap(ExecuteAsyncRequest* other) {
  arguments_.UnsafeArenaSwap(&other->arguments_);
  std::swap(computation_, other->computation_);
  std::swap(execution_options_, other->execution_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteAsyncRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteAsyncRequest

// .xla.ComputationHandle computation = 1;
bool ExecuteAsyncRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void ExecuteAsyncRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& ExecuteAsyncRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteAsyncRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ExecuteAsyncRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteAsyncRequest.computation)
  return computation_;
}
::xla::ComputationHandle* ExecuteAsyncRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.ExecuteAsyncRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void ExecuteAsyncRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteAsyncRequest.computation)
}

// repeated .xla.GlobalDataHandle arguments = 2;
int ExecuteAsyncRequest::arguments_size() const {
  return arguments_.size();
}
void ExecuteAsyncRequest::clear_arguments() {
  arguments_.Clear();
}
const ::xla::GlobalDataHandle& ExecuteAsyncRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteAsyncRequest.arguments)
  return arguments_.Get(index);
}
::xla::GlobalDataHandle* ExecuteAsyncRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteAsyncRequest.arguments)
  return arguments_.Mutable(index);
}
::xla::GlobalDataHandle* ExecuteAsyncRequest::add_arguments() {
  // @@protoc_insertion_point(field_add:xla.ExecuteAsyncRequest.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >*
ExecuteAsyncRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteAsyncRequest.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >&
ExecuteAsyncRequest::arguments() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteAsyncRequest.arguments)
  return arguments_;
}

// .xla.ExecutionOptions execution_options = 6;
bool ExecuteAsyncRequest::has_execution_options() const {
  return this != internal_default_instance() && execution_options_ != NULL;
}
void ExecuteAsyncRequest::clear_execution_options() {
  if (GetArenaNoVirtual() == NULL && execution_options_ != NULL) delete execution_options_;
  execution_options_ = NULL;
}
const ::xla::ExecutionOptions& ExecuteAsyncRequest::execution_options() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteAsyncRequest.execution_options)
  return execution_options_ != NULL ? *execution_options_
                         : *::xla::ExecutionOptions::internal_default_instance();
}
::xla::ExecutionOptions* ExecuteAsyncRequest::mutable_execution_options() {
  
  if (execution_options_ == NULL) {
    execution_options_ = new ::xla::ExecutionOptions;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteAsyncRequest.execution_options)
  return execution_options_;
}
::xla::ExecutionOptions* ExecuteAsyncRequest::release_execution_options() {
  // @@protoc_insertion_point(field_release:xla.ExecuteAsyncRequest.execution_options)
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = NULL;
  return temp;
}
void ExecuteAsyncRequest::set_allocated_execution_options(::xla::ExecutionOptions* execution_options) {
  delete execution_options_;
  execution_options_ = execution_options;
  if (execution_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteAsyncRequest.execution_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteAsyncResponse::kExecutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteAsyncResponse::ExecuteAsyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ExecuteAsyncResponse)
}
ExecuteAsyncResponse::ExecuteAsyncResponse(const ExecuteAsyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution()) {
    execution_ = new ::xla::ExecutionHandle(*from.execution_);
  } else {
    execution_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ExecuteAsyncResponse)
}

void ExecuteAsyncResponse::SharedCtor() {
  execution_ = NULL;
  _cached_size_ = 0;
}

ExecuteAsyncResponse::~ExecuteAsyncResponse() {
  // @@protoc_insertion_point(destructor:xla.ExecuteAsyncResponse)
  SharedDtor();
}

void ExecuteAsyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete execution_;
  }
}

void ExecuteAsyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteAsyncResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[36].descriptor;
}

const ExecuteAsyncResponse& ExecuteAsyncResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecuteAsyncResponse* ExecuteAsyncResponse::New(::google::protobuf::Arena* arena) const {
  ExecuteAsyncResponse* n = new ExecuteAsyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteAsyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecuteAsyncResponse)
  if (GetArenaNoVirtual() == NULL && execution_ != NULL) {
    delete execution_;
  }
  execution_ = NULL;
}

bool ExecuteAsyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ExecuteAsyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ExecutionHandle execution = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ExecuteAsyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ExecuteAsyncResponse)
  return false;
#undef DO_
}

void ExecuteAsyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ExecuteAsyncResponse)
  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->execution_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ExecuteAsyncResponse)
}

::google::protobuf::uint8* ExecuteAsyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ExecuteAsyncResponse)
  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->execution_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ExecuteAsyncResponse)
  return target;
}

size_t ExecuteAsyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ExecuteAsyncResponse)
  size_t total_size = 0;

  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteAsyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ExecuteAsyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteAsyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteAsyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ExecuteAsyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ExecuteAsyncResponse)
    MergeFrom(*source);
  }
}

void ExecuteAsyncResponse::MergeFrom(const ExecuteAsyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecuteAsyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution()) {
    mutable_execution()->::xla::ExecutionHandle::MergeFrom(from.execution());
  }
}

void ExecuteAsyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ExecuteAsyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteAsyncResponse::CopyFrom(const ExecuteAsyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecuteAsyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteAsyncResponse::IsInitialized() const {
  return true;
}

void ExecuteAsyncResponse::Swap(ExecuteAsyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteAsyncResponse::InternalSwap(ExecuteAsyncResponse* other) {
  std::swap(execution_, other->execution_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteAsyncResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecuteAsyncResponse

// .xla.ExecutionHandle execution = 1;
bool ExecuteAsyncResponse::has_execution() const {
  return this != internal_default_instance() && execution_ != NULL;
}
void ExecuteAsyncResponse::clear_execution() {
  if (GetArenaNoVirtual() == NULL && execution_ != NULL) delete execution_;
  execution_ = NULL;
}
const ::xla::ExecutionHandle& ExecuteAsyncResponse::execution() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteAsyncResponse.execution)
  return execution_ != NULL ? *execution_
                         : *::xla::ExecutionHandle::internal_default_instance();
}
::xla::ExecutionHandle* ExecuteAsyncResponse::mutable_execution() {
  
  if (execution_ == NULL) {
    execution_ = new ::xla::ExecutionHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ExecuteAsyncResponse.execution)
  return execution_;
}
::xla::ExecutionHandle* ExecuteAsyncResponse::release_execution() {
  // @@protoc_insertion_point(field_release:xla.ExecuteAsyncResponse.execution)
  
  ::xla::ExecutionHandle* temp = execution_;
  execution_ = NULL;
  return temp;
}
void ExecuteAsyncResponse::set_allocated_execution(::xla::ExecutionHandle* execution) {
  delete execution_;
  if (execution != NULL && execution->GetArena() != NULL) {
    ::xla::ExecutionHandle* new_execution = new ::xla::ExecutionHandle;
    new_execution->CopyFrom(*execution);
    execution = new_execution;
  }
  execution_ = execution;
  if (execution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteAsyncResponse.execution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitForExecutionRequest::kExecutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitForExecutionRequest::WaitForExecutionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.WaitForExecutionRequest)
}
WaitForExecutionRequest::WaitForExecutionRequest(const WaitForExecutionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution()) {
    execution_ = new ::xla::ExecutionHandle(*from.execution_);
  } else {
    execution_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.WaitForExecutionRequest)
}

void WaitForExecutionRequest::SharedCtor() {
  execution_ = NULL;
  _cached_size_ = 0;
}

WaitForExecutionRequest::~WaitForExecutionRequest() {
  // @@protoc_insertion_point(destructor:xla.WaitForExecutionRequest)
  SharedDtor();
}

void WaitForExecutionRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete execution_;
  }
}

void WaitForExecutionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitForExecutionRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[37].descriptor;
}

const WaitForExecutionRequest& WaitForExecutionRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

WaitForExecutionRequest* WaitForExecutionRequest::New(::google::protobuf::Arena* arena) const {
  WaitForExecutionRequest* n = new WaitForExecutionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaitForExecutionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WaitForExecutionRequest)
  if (GetArenaNoVirtual() == NULL && execution_ != NULL) {
    delete execution_;
  }
  execution_ = NULL;
}

bool WaitForExecutionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.WaitForExecutionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ExecutionHandle execution = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.WaitForExecutionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.WaitForExecutionRequest)
  return false;
#undef DO_
}

void WaitForExecutionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.WaitForExecutionRequest)
  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->execution_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.WaitForExecutionRequest)
}

::google::protobuf::uint8* WaitForExecutionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.WaitForExecutionRequest)
  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->execution_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.WaitForExecutionRequest)
  return target;
}

size_t WaitForExecutionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WaitForExecutionRequest)
  size_t total_size = 0;

  // .xla.ExecutionHandle execution = 1;
  if (this->has_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitForExecutionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.WaitForExecutionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitForExecutionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaitForExecutionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.WaitForExecutionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.WaitForExecutionRequest)
    MergeFrom(*source);
  }
}

void WaitForExecutionRequest::MergeFrom(const WaitForExecutionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.WaitForExecutionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution()) {
    mutable_execution()->::xla::ExecutionHandle::MergeFrom(from.execution());
  }
}

void WaitForExecutionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.WaitForExecutionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitForExecutionRequest::CopyFrom(const WaitForExecutionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WaitForExecutionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForExecutionRequest::IsInitialized() const {
  return true;
}

void WaitForExecutionRequest::Swap(WaitForExecutionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitForExecutionRequest::InternalSwap(WaitForExecutionRequest* other) {
  std::swap(execution_, other->execution_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaitForExecutionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WaitForExecutionRequest

// .xla.ExecutionHandle execution = 1;
bool WaitForExecutionRequest::has_execution() const {
  return this != internal_default_instance() && execution_ != NULL;
}
void WaitForExecutionRequest::clear_execution() {
  if (GetArenaNoVirtual() == NULL && execution_ != NULL) delete execution_;
  execution_ = NULL;
}
const ::xla::ExecutionHandle& WaitForExecutionRequest::execution() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionRequest.execution)
  return execution_ != NULL ? *execution_
                         : *::xla::ExecutionHandle::internal_default_instance();
}
::xla::ExecutionHandle* WaitForExecutionRequest::mutable_execution() {
  
  if (execution_ == NULL) {
    execution_ = new ::xla::ExecutionHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionRequest.execution)
  return execution_;
}
::xla::ExecutionHandle* WaitForExecutionRequest::release_execution() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionRequest.execution)
  
  ::xla::ExecutionHandle* temp = execution_;
  execution_ = NULL;
  return temp;
}
void WaitForExecutionRequest::set_allocated_execution(::xla::ExecutionHandle* execution) {
  delete execution_;
  if (execution != NULL && execution->GetArena() != NULL) {
    ::xla::ExecutionHandle* new_execution = new ::xla::ExecutionHandle;
    new_execution->CopyFrom(*execution);
    execution = new_execution;
  }
  execution_ = execution;
  if (execution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionRequest.execution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitForExecutionResponse::kOutputFieldNumber;
const int WaitForExecutionResponse::kProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitForExecutionResponse::WaitForExecutionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.WaitForExecutionResponse)
}
WaitForExecutionResponse::WaitForExecutionResponse(const WaitForExecutionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    output_ = new ::xla::GlobalDataHandle(*from.output_);
  } else {
    output_ = NULL;
  }
  if (from.has_profile()) {
    profile_ = new ::xla::ExecutionProfile(*from.profile_);
  } else {
    profile_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.WaitForExecutionResponse)
}

void WaitForExecutionResponse::SharedCtor() {
  ::memset(&output_, 0, reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&output_) + sizeof(profile_));
  _cached_size_ = 0;
}

WaitForExecutionResponse::~WaitForExecutionResponse() {
  // @@protoc_insertion_point(destructor:xla.WaitForExecutionResponse)
  SharedDtor();
}

void WaitForExecutionResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete output_;
  }
  if (this != internal_default_instance()) {
    delete profile_;
  }
}

void WaitForExecutionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitForExecutionResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[38].descriptor;
}

const WaitForExecutionResponse& WaitForExecutionResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

WaitForExecutionResponse* WaitForExecutionResponse::New(::google::protobuf::Arena* arena) const {
  WaitForExecutionResponse* n = new WaitForExecutionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaitForExecutionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.WaitForExecutionResponse)
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
  if (GetArenaNoVirtual() == NULL && profile_ != NULL) {
    delete profile_;
  }
  profile_ = NULL;
}

bool WaitForExecutionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.WaitForExecutionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle output = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ExecutionProfile profile = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.WaitForExecutionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.WaitForExecutionResponse)
  return false;
#undef DO_
}

void WaitForExecutionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.WaitForExecutionResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->output_, output);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->profile_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.WaitForExecutionResponse)
}

::google::protobuf::uint8* WaitForExecutionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.WaitForExecutionResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->output_, false, target);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->profile_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.WaitForExecutionResponse)
  return target;
}

size_t WaitForExecutionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.WaitForExecutionResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  // .xla.ExecutionProfile profile = 2;
  if (this->has_profile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitForExecutionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.WaitForExecutionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitForExecutionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaitForExecutionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.WaitForExecutionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.WaitForExecutionResponse)
    MergeFrom(*source);
  }
}

void WaitForExecutionResponse::MergeFrom(const WaitForExecutionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.WaitForExecutionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    mutable_output()->::xla::GlobalDataHandle::MergeFrom(from.output());
  }
  if (from.has_profile()) {
    mutable_profile()->::xla::ExecutionProfile::MergeFrom(from.profile());
  }
}

void WaitForExecutionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.WaitForExecutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitForExecutionResponse::CopyFrom(const WaitForExecutionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.WaitForExecutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForExecutionResponse::IsInitialized() const {
  return true;
}

void WaitForExecutionResponse::Swap(WaitForExecutionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitForExecutionResponse::InternalSwap(WaitForExecutionResponse* other) {
  std::swap(output_, other->output_);
  std::swap(profile_, other->profile_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaitForExecutionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WaitForExecutionResponse

// .xla.GlobalDataHandle output = 1;
bool WaitForExecutionResponse::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
void WaitForExecutionResponse::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::xla::GlobalDataHandle& WaitForExecutionResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionResponse.output)
  return output_ != NULL ? *output_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* WaitForExecutionResponse::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionResponse.output)
  return output_;
}
::xla::GlobalDataHandle* WaitForExecutionResponse::release_output() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionResponse.output)
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = NULL;
  return temp;
}
void WaitForExecutionResponse::set_allocated_output(::xla::GlobalDataHandle* output) {
  delete output_;
  if (output != NULL && output->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_output = new ::xla::GlobalDataHandle;
    new_output->CopyFrom(*output);
    output = new_output;
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionResponse.output)
}

// .xla.ExecutionProfile profile = 2;
bool WaitForExecutionResponse::has_profile() const {
  return this != internal_default_instance() && profile_ != NULL;
}
void WaitForExecutionResponse::clear_profile() {
  if (GetArenaNoVirtual() == NULL && profile_ != NULL) delete profile_;
  profile_ = NULL;
}
const ::xla::ExecutionProfile& WaitForExecutionResponse::profile() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionResponse.profile)
  return profile_ != NULL ? *profile_
                         : *::xla::ExecutionProfile::internal_default_instance();
}
::xla::ExecutionProfile* WaitForExecutionResponse::mutable_profile() {
  
  if (profile_ == NULL) {
    profile_ = new ::xla::ExecutionProfile;
  }
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionResponse.profile)
  return profile_;
}
::xla::ExecutionProfile* WaitForExecutionResponse::release_profile() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionResponse.profile)
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = NULL;
  return temp;
}
void WaitForExecutionResponse::set_allocated_profile(::xla::ExecutionProfile* profile) {
  delete profile_;
  if (profile != NULL && profile->GetArena() != NULL) {
    ::xla::ExecutionProfile* new_profile = new ::xla::ExecutionProfile;
    new_profile->CopyFrom(*profile);
    profile = new_profile;
  }
  profile_ = profile;
  if (profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionResponse.profile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsConstantRequest::kComputationFieldNumber;
const int IsConstantRequest::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsConstantRequest::IsConstantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.IsConstantRequest)
}
IsConstantRequest::IsConstantRequest(const IsConstantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.IsConstantRequest)
}

void IsConstantRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&operand_) -
    reinterpret_cast<char*>(&computation_) + sizeof(operand_));
  _cached_size_ = 0;
}

IsConstantRequest::~IsConstantRequest() {
  // @@protoc_insertion_point(destructor:xla.IsConstantRequest)
  SharedDtor();
}

void IsConstantRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete operand_;
  }
}

void IsConstantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsConstantRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[39].descriptor;
}

const IsConstantRequest& IsConstantRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsConstantRequest* IsConstantRequest::New(::google::protobuf::Arena* arena) const {
  IsConstantRequest* n = new IsConstantRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsConstantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.IsConstantRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
}

bool IsConstantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.IsConstantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.IsConstantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.IsConstantRequest)
  return false;
#undef DO_
}

void IsConstantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.IsConstantRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.IsConstantRequest)
}

::google::protobuf::uint8* IsConstantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.IsConstantRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.IsConstantRequest)
  return target;
}

size_t IsConstantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.IsConstantRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsConstantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.IsConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsConstantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsConstantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.IsConstantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.IsConstantRequest)
    MergeFrom(*source);
  }
}

void IsConstantRequest::MergeFrom(const IsConstantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.IsConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
}

void IsConstantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.IsConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsConstantRequest::CopyFrom(const IsConstantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.IsConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsConstantRequest::IsInitialized() const {
  return true;
}

void IsConstantRequest::Swap(IsConstantRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsConstantRequest::InternalSwap(IsConstantRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(operand_, other->operand_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsConstantRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsConstantRequest

// .xla.ComputationHandle computation = 1;
bool IsConstantRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void IsConstantRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& IsConstantRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.IsConstantRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* IsConstantRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.IsConstantRequest.computation)
  return computation_;
}
::xla::ComputationHandle* IsConstantRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.IsConstantRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void IsConstantRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.IsConstantRequest.computation)
}

// .xla.ComputationDataHandle operand = 2;
bool IsConstantRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void IsConstantRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& IsConstantRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.IsConstantRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* IsConstantRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    operand_ = new ::xla::ComputationDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.IsConstantRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* IsConstantRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.IsConstantRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void IsConstantRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  delete operand_;
  if (operand != NULL && operand->GetArena() != NULL) {
    ::xla::ComputationDataHandle* new_operand = new ::xla::ComputationDataHandle;
    new_operand->CopyFrom(*operand);
    operand = new_operand;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.IsConstantRequest.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsConstantResponse::kIsConstantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsConstantResponse::IsConstantResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.IsConstantResponse)
}
IsConstantResponse::IsConstantResponse(const IsConstantResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_constant_ = from.is_constant_;
  // @@protoc_insertion_point(copy_constructor:xla.IsConstantResponse)
}

void IsConstantResponse::SharedCtor() {
  is_constant_ = false;
  _cached_size_ = 0;
}

IsConstantResponse::~IsConstantResponse() {
  // @@protoc_insertion_point(destructor:xla.IsConstantResponse)
  SharedDtor();
}

void IsConstantResponse::SharedDtor() {
}

void IsConstantResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsConstantResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[40].descriptor;
}

const IsConstantResponse& IsConstantResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsConstantResponse* IsConstantResponse::New(::google::protobuf::Arena* arena) const {
  IsConstantResponse* n = new IsConstantResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsConstantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.IsConstantResponse)
  is_constant_ = false;
}

bool IsConstantResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.IsConstantResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_constant = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.IsConstantResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.IsConstantResponse)
  return false;
#undef DO_
}

void IsConstantResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.IsConstantResponse)
  // bool is_constant = 1;
  if (this->is_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_constant(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.IsConstantResponse)
}

::google::protobuf::uint8* IsConstantResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.IsConstantResponse)
  // bool is_constant = 1;
  if (this->is_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_constant(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.IsConstantResponse)
  return target;
}

size_t IsConstantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.IsConstantResponse)
  size_t total_size = 0;

  // bool is_constant = 1;
  if (this->is_constant() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsConstantResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.IsConstantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsConstantResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsConstantResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.IsConstantResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.IsConstantResponse)
    MergeFrom(*source);
  }
}

void IsConstantResponse::MergeFrom(const IsConstantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.IsConstantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.is_constant() != 0) {
    set_is_constant(from.is_constant());
  }
}

void IsConstantResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.IsConstantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsConstantResponse::CopyFrom(const IsConstantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.IsConstantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsConstantResponse::IsInitialized() const {
  return true;
}

void IsConstantResponse::Swap(IsConstantResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsConstantResponse::InternalSwap(IsConstantResponse* other) {
  std::swap(is_constant_, other->is_constant_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsConstantResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsConstantResponse

// bool is_constant = 1;
void IsConstantResponse::clear_is_constant() {
  is_constant_ = false;
}
bool IsConstantResponse::is_constant() const {
  // @@protoc_insertion_point(field_get:xla.IsConstantResponse.is_constant)
  return is_constant_;
}
void IsConstantResponse::set_is_constant(bool value) {
  
  is_constant_ = value;
  // @@protoc_insertion_point(field_set:xla.IsConstantResponse.is_constant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeConstantRequest::kComputationFieldNumber;
const int ComputeConstantRequest::kOperandFieldNumber;
const int ComputeConstantRequest::kOutputLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeConstantRequest::ComputeConstantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputeConstantRequest)
}
ComputeConstantRequest::ComputeConstantRequest(const ComputeConstantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  if (from.has_operand()) {
    operand_ = new ::xla::ComputationDataHandle(*from.operand_);
  } else {
    operand_ = NULL;
  }
  if (from.has_output_layout()) {
    output_layout_ = new ::xla::Layout(*from.output_layout_);
  } else {
    output_layout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputeConstantRequest)
}

void ComputeConstantRequest::SharedCtor() {
  ::memset(&computation_, 0, reinterpret_cast<char*>(&output_layout_) -
    reinterpret_cast<char*>(&computation_) + sizeof(output_layout_));
  _cached_size_ = 0;
}

ComputeConstantRequest::~ComputeConstantRequest() {
  // @@protoc_insertion_point(destructor:xla.ComputeConstantRequest)
  SharedDtor();
}

void ComputeConstantRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
  if (this != internal_default_instance()) {
    delete operand_;
  }
  if (this != internal_default_instance()) {
    delete output_layout_;
  }
}

void ComputeConstantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeConstantRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[41].descriptor;
}

const ComputeConstantRequest& ComputeConstantRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputeConstantRequest* ComputeConstantRequest::New(::google::protobuf::Arena* arena) const {
  ComputeConstantRequest* n = new ComputeConstantRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputeConstantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputeConstantRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) {
    delete operand_;
  }
  operand_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_layout_ != NULL) {
    delete output_layout_;
  }
  output_layout_ = NULL;
}

bool ComputeConstantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputeConstantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationDataHandle operand = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Layout output_layout = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_layout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputeConstantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputeConstantRequest)
  return false;
#undef DO_
}

void ComputeConstantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputeConstantRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->operand_, output);
  }

  // .xla.Layout output_layout = 3;
  if (this->has_output_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->output_layout_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputeConstantRequest)
}

::google::protobuf::uint8* ComputeConstantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputeConstantRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->operand_, false, target);
  }

  // .xla.Layout output_layout = 3;
  if (this->has_output_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->output_layout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputeConstantRequest)
  return target;
}

size_t ComputeConstantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputeConstantRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  // .xla.ComputationDataHandle operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operand_);
  }

  // .xla.Layout output_layout = 3;
  if (this->has_output_layout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_layout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeConstantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputeConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputeConstantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputeConstantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputeConstantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputeConstantRequest)
    MergeFrom(*source);
  }
}

void ComputeConstantRequest::MergeFrom(const ComputeConstantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputeConstantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
  if (from.has_operand()) {
    mutable_operand()->::xla::ComputationDataHandle::MergeFrom(from.operand());
  }
  if (from.has_output_layout()) {
    mutable_output_layout()->::xla::Layout::MergeFrom(from.output_layout());
  }
}

void ComputeConstantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputeConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeConstantRequest::CopyFrom(const ComputeConstantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputeConstantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeConstantRequest::IsInitialized() const {
  return true;
}

void ComputeConstantRequest::Swap(ComputeConstantRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeConstantRequest::InternalSwap(ComputeConstantRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(operand_, other->operand_);
  std::swap(output_layout_, other->output_layout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputeConstantRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeConstantRequest

// .xla.ComputationHandle computation = 1;
bool ComputeConstantRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void ComputeConstantRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& ComputeConstantRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* ComputeConstantRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantRequest.computation)
  return computation_;
}
::xla::ComputationHandle* ComputeConstantRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void ComputeConstantRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantRequest.computation)
}

// .xla.ComputationDataHandle operand = 2;
bool ComputeConstantRequest::has_operand() const {
  return this != internal_default_instance() && operand_ != NULL;
}
void ComputeConstantRequest::clear_operand() {
  if (GetArenaNoVirtual() == NULL && operand_ != NULL) delete operand_;
  operand_ = NULL;
}
const ::xla::ComputationDataHandle& ComputeConstantRequest::operand() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantRequest.operand)
  return operand_ != NULL ? *operand_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* ComputeConstantRequest::mutable_operand() {
  
  if (operand_ == NULL) {
    operand_ = new ::xla::ComputationDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantRequest.operand)
  return operand_;
}
::xla::ComputationDataHandle* ComputeConstantRequest::release_operand() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantRequest.operand)
  
  ::xla::ComputationDataHandle* temp = operand_;
  operand_ = NULL;
  return temp;
}
void ComputeConstantRequest::set_allocated_operand(::xla::ComputationDataHandle* operand) {
  delete operand_;
  if (operand != NULL && operand->GetArena() != NULL) {
    ::xla::ComputationDataHandle* new_operand = new ::xla::ComputationDataHandle;
    new_operand->CopyFrom(*operand);
    operand = new_operand;
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantRequest.operand)
}

// .xla.Layout output_layout = 3;
bool ComputeConstantRequest::has_output_layout() const {
  return this != internal_default_instance() && output_layout_ != NULL;
}
void ComputeConstantRequest::clear_output_layout() {
  if (GetArenaNoVirtual() == NULL && output_layout_ != NULL) delete output_layout_;
  output_layout_ = NULL;
}
const ::xla::Layout& ComputeConstantRequest::output_layout() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantRequest.output_layout)
  return output_layout_ != NULL ? *output_layout_
                         : *::xla::Layout::internal_default_instance();
}
::xla::Layout* ComputeConstantRequest::mutable_output_layout() {
  
  if (output_layout_ == NULL) {
    output_layout_ = new ::xla::Layout;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantRequest.output_layout)
  return output_layout_;
}
::xla::Layout* ComputeConstantRequest::release_output_layout() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantRequest.output_layout)
  
  ::xla::Layout* temp = output_layout_;
  output_layout_ = NULL;
  return temp;
}
void ComputeConstantRequest::set_allocated_output_layout(::xla::Layout* output_layout) {
  delete output_layout_;
  if (output_layout != NULL && output_layout->GetArena() != NULL) {
    ::xla::Layout* new_output_layout = new ::xla::Layout;
    new_output_layout->CopyFrom(*output_layout);
    output_layout = new_output_layout;
  }
  output_layout_ = output_layout;
  if (output_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantRequest.output_layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeConstantResponse::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeConstantResponse::ComputeConstantResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.ComputeConstantResponse)
}
ComputeConstantResponse::ComputeConstantResponse(const ComputeConstantResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    output_ = new ::xla::GlobalDataHandle(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.ComputeConstantResponse)
}

void ComputeConstantResponse::SharedCtor() {
  output_ = NULL;
  _cached_size_ = 0;
}

ComputeConstantResponse::~ComputeConstantResponse() {
  // @@protoc_insertion_point(destructor:xla.ComputeConstantResponse)
  SharedDtor();
}

void ComputeConstantResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete output_;
  }
}

void ComputeConstantResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeConstantResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[42].descriptor;
}

const ComputeConstantResponse& ComputeConstantResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputeConstantResponse* ComputeConstantResponse::New(::google::protobuf::Arena* arena) const {
  ComputeConstantResponse* n = new ComputeConstantResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputeConstantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ComputeConstantResponse)
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}

bool ComputeConstantResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.ComputeConstantResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle output = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.ComputeConstantResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.ComputeConstantResponse)
  return false;
#undef DO_
}

void ComputeConstantResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.ComputeConstantResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->output_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.ComputeConstantResponse)
}

::google::protobuf::uint8* ComputeConstantResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.ComputeConstantResponse)
  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->output_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.ComputeConstantResponse)
  return target;
}

size_t ComputeConstantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.ComputeConstantResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle output = 1;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeConstantResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.ComputeConstantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputeConstantResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputeConstantResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.ComputeConstantResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.ComputeConstantResponse)
    MergeFrom(*source);
  }
}

void ComputeConstantResponse::MergeFrom(const ComputeConstantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.ComputeConstantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    mutable_output()->::xla::GlobalDataHandle::MergeFrom(from.output());
  }
}

void ComputeConstantResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.ComputeConstantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeConstantResponse::CopyFrom(const ComputeConstantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ComputeConstantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeConstantResponse::IsInitialized() const {
  return true;
}

void ComputeConstantResponse::Swap(ComputeConstantResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeConstantResponse::InternalSwap(ComputeConstantResponse* other) {
  std::swap(output_, other->output_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputeConstantResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeConstantResponse

// .xla.GlobalDataHandle output = 1;
bool ComputeConstantResponse::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
void ComputeConstantResponse::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::xla::GlobalDataHandle& ComputeConstantResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantResponse.output)
  return output_ != NULL ? *output_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* ComputeConstantResponse::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantResponse.output)
  return output_;
}
::xla::GlobalDataHandle* ComputeConstantResponse::release_output() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantResponse.output)
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = NULL;
  return temp;
}
void ComputeConstantResponse::set_allocated_output(::xla::GlobalDataHandle* output) {
  delete output_;
  if (output != NULL && output->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_output = new ::xla::GlobalDataHandle;
    new_output->CopyFrom(*output);
    output = new_output;
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantResponse.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeconstructTupleRequest::kTupleHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeconstructTupleRequest::DeconstructTupleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.DeconstructTupleRequest)
}
DeconstructTupleRequest::DeconstructTupleRequest(const DeconstructTupleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tuple_handle()) {
    tuple_handle_ = new ::xla::GlobalDataHandle(*from.tuple_handle_);
  } else {
    tuple_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.DeconstructTupleRequest)
}

void DeconstructTupleRequest::SharedCtor() {
  tuple_handle_ = NULL;
  _cached_size_ = 0;
}

DeconstructTupleRequest::~DeconstructTupleRequest() {
  // @@protoc_insertion_point(destructor:xla.DeconstructTupleRequest)
  SharedDtor();
}

void DeconstructTupleRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tuple_handle_;
  }
}

void DeconstructTupleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeconstructTupleRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[43].descriptor;
}

const DeconstructTupleRequest& DeconstructTupleRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeconstructTupleRequest* DeconstructTupleRequest::New(::google::protobuf::Arena* arena) const {
  DeconstructTupleRequest* n = new DeconstructTupleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeconstructTupleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeconstructTupleRequest)
  if (GetArenaNoVirtual() == NULL && tuple_handle_ != NULL) {
    delete tuple_handle_;
  }
  tuple_handle_ = NULL;
}

bool DeconstructTupleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.DeconstructTupleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle tuple_handle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.DeconstructTupleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.DeconstructTupleRequest)
  return false;
#undef DO_
}

void DeconstructTupleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.DeconstructTupleRequest)
  // .xla.GlobalDataHandle tuple_handle = 2;
  if (this->has_tuple_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tuple_handle_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.DeconstructTupleRequest)
}

::google::protobuf::uint8* DeconstructTupleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeconstructTupleRequest)
  // .xla.GlobalDataHandle tuple_handle = 2;
  if (this->has_tuple_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tuple_handle_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.DeconstructTupleRequest)
  return target;
}

size_t DeconstructTupleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeconstructTupleRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle tuple_handle = 2;
  if (this->has_tuple_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tuple_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeconstructTupleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.DeconstructTupleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeconstructTupleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeconstructTupleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.DeconstructTupleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.DeconstructTupleRequest)
    MergeFrom(*source);
  }
}

void DeconstructTupleRequest::MergeFrom(const DeconstructTupleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.DeconstructTupleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tuple_handle()) {
    mutable_tuple_handle()->::xla::GlobalDataHandle::MergeFrom(from.tuple_handle());
  }
}

void DeconstructTupleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.DeconstructTupleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeconstructTupleRequest::CopyFrom(const DeconstructTupleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeconstructTupleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeconstructTupleRequest::IsInitialized() const {
  return true;
}

void DeconstructTupleRequest::Swap(DeconstructTupleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeconstructTupleRequest::InternalSwap(DeconstructTupleRequest* other) {
  std::swap(tuple_handle_, other->tuple_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeconstructTupleRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeconstructTupleRequest

// .xla.GlobalDataHandle tuple_handle = 2;
bool DeconstructTupleRequest::has_tuple_handle() const {
  return this != internal_default_instance() && tuple_handle_ != NULL;
}
void DeconstructTupleRequest::clear_tuple_handle() {
  if (GetArenaNoVirtual() == NULL && tuple_handle_ != NULL) delete tuple_handle_;
  tuple_handle_ = NULL;
}
const ::xla::GlobalDataHandle& DeconstructTupleRequest::tuple_handle() const {
  // @@protoc_insertion_point(field_get:xla.DeconstructTupleRequest.tuple_handle)
  return tuple_handle_ != NULL ? *tuple_handle_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* DeconstructTupleRequest::mutable_tuple_handle() {
  
  if (tuple_handle_ == NULL) {
    tuple_handle_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.DeconstructTupleRequest.tuple_handle)
  return tuple_handle_;
}
::xla::GlobalDataHandle* DeconstructTupleRequest::release_tuple_handle() {
  // @@protoc_insertion_point(field_release:xla.DeconstructTupleRequest.tuple_handle)
  
  ::xla::GlobalDataHandle* temp = tuple_handle_;
  tuple_handle_ = NULL;
  return temp;
}
void DeconstructTupleRequest::set_allocated_tuple_handle(::xla::GlobalDataHandle* tuple_handle) {
  delete tuple_handle_;
  if (tuple_handle != NULL && tuple_handle->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_tuple_handle = new ::xla::GlobalDataHandle;
    new_tuple_handle->CopyFrom(*tuple_handle);
    tuple_handle = new_tuple_handle;
  }
  tuple_handle_ = tuple_handle;
  if (tuple_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DeconstructTupleRequest.tuple_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeconstructTupleResponse::kElementHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeconstructTupleResponse::DeconstructTupleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.DeconstructTupleResponse)
}
DeconstructTupleResponse::DeconstructTupleResponse(const DeconstructTupleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      element_handles_(from.element_handles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.DeconstructTupleResponse)
}

void DeconstructTupleResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeconstructTupleResponse::~DeconstructTupleResponse() {
  // @@protoc_insertion_point(destructor:xla.DeconstructTupleResponse)
  SharedDtor();
}

void DeconstructTupleResponse::SharedDtor() {
}

void DeconstructTupleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeconstructTupleResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[44].descriptor;
}

const DeconstructTupleResponse& DeconstructTupleResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeconstructTupleResponse* DeconstructTupleResponse::New(::google::protobuf::Arena* arena) const {
  DeconstructTupleResponse* n = new DeconstructTupleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeconstructTupleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DeconstructTupleResponse)
  element_handles_.Clear();
}

bool DeconstructTupleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.DeconstructTupleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.GlobalDataHandle element_handles = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element_handles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.DeconstructTupleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.DeconstructTupleResponse)
  return false;
#undef DO_
}

void DeconstructTupleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.DeconstructTupleResponse)
  // repeated .xla.GlobalDataHandle element_handles = 1;
  for (unsigned int i = 0, n = this->element_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element_handles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.DeconstructTupleResponse)
}

::google::protobuf::uint8* DeconstructTupleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.DeconstructTupleResponse)
  // repeated .xla.GlobalDataHandle element_handles = 1;
  for (unsigned int i = 0, n = this->element_handles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element_handles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.DeconstructTupleResponse)
  return target;
}

size_t DeconstructTupleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.DeconstructTupleResponse)
  size_t total_size = 0;

  // repeated .xla.GlobalDataHandle element_handles = 1;
  {
    unsigned int count = this->element_handles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element_handles(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeconstructTupleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.DeconstructTupleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeconstructTupleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeconstructTupleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.DeconstructTupleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.DeconstructTupleResponse)
    MergeFrom(*source);
  }
}

void DeconstructTupleResponse::MergeFrom(const DeconstructTupleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.DeconstructTupleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_handles_.MergeFrom(from.element_handles_);
}

void DeconstructTupleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.DeconstructTupleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeconstructTupleResponse::CopyFrom(const DeconstructTupleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DeconstructTupleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeconstructTupleResponse::IsInitialized() const {
  return true;
}

void DeconstructTupleResponse::Swap(DeconstructTupleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeconstructTupleResponse::InternalSwap(DeconstructTupleResponse* other) {
  element_handles_.UnsafeArenaSwap(&other->element_handles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeconstructTupleResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeconstructTupleResponse

// repeated .xla.GlobalDataHandle element_handles = 1;
int DeconstructTupleResponse::element_handles_size() const {
  return element_handles_.size();
}
void DeconstructTupleResponse::clear_element_handles() {
  element_handles_.Clear();
}
const ::xla::GlobalDataHandle& DeconstructTupleResponse::element_handles(int index) const {
  // @@protoc_insertion_point(field_get:xla.DeconstructTupleResponse.element_handles)
  return element_handles_.Get(index);
}
::xla::GlobalDataHandle* DeconstructTupleResponse::mutable_element_handles(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DeconstructTupleResponse.element_handles)
  return element_handles_.Mutable(index);
}
::xla::GlobalDataHandle* DeconstructTupleResponse::add_element_handles() {
  // @@protoc_insertion_point(field_add:xla.DeconstructTupleResponse.element_handles)
  return element_handles_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >*
DeconstructTupleResponse::mutable_element_handles() {
  // @@protoc_insertion_point(field_mutable_list:xla.DeconstructTupleResponse.element_handles)
  return &element_handles_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >&
DeconstructTupleResponse::element_handles() const {
  // @@protoc_insertion_point(field_list:xla.DeconstructTupleResponse.element_handles)
  return element_handles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadDataRequest::kColumnioTabletPathFieldNumber;
const int LoadDataRequest::kColumnioFieldFieldNumber;
const int LoadDataRequest::kElementShapeFieldNumber;
const int LoadDataRequest::kOffsetFieldNumber;
const int LoadDataRequest::kLimitFieldNumber;
const int LoadDataRequest::kZipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadDataRequest::LoadDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.LoadDataRequest)
}
LoadDataRequest::LoadDataRequest(const LoadDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  columnio_tablet_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.columnio_tablet_path().size() > 0) {
    columnio_tablet_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columnio_tablet_path_);
  }
  columnio_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.columnio_field().size() > 0) {
    columnio_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columnio_field_);
  }
  if (from.has_element_shape()) {
    element_shape_ = new ::xla::Shape(*from.element_shape_);
  } else {
    element_shape_ = NULL;
  }
  ::memcpy(&offset_, &from.offset_,
    reinterpret_cast<char*>(&zip_) -
    reinterpret_cast<char*>(&offset_) + sizeof(zip_));
  // @@protoc_insertion_point(copy_constructor:xla.LoadDataRequest)
}

void LoadDataRequest::SharedCtor() {
  columnio_tablet_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  columnio_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&element_shape_, 0, reinterpret_cast<char*>(&zip_) -
    reinterpret_cast<char*>(&element_shape_) + sizeof(zip_));
  _cached_size_ = 0;
}

LoadDataRequest::~LoadDataRequest() {
  // @@protoc_insertion_point(destructor:xla.LoadDataRequest)
  SharedDtor();
}

void LoadDataRequest::SharedDtor() {
  columnio_tablet_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  columnio_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete element_shape_;
  }
}

void LoadDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadDataRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[45].descriptor;
}

const LoadDataRequest& LoadDataRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadDataRequest* LoadDataRequest::New(::google::protobuf::Arena* arena) const {
  LoadDataRequest* n = new LoadDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LoadDataRequest)
  columnio_tablet_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  columnio_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && element_shape_ != NULL) {
    delete element_shape_;
  }
  element_shape_ = NULL;
  ::memset(&offset_, 0, reinterpret_cast<char*>(&zip_) -
    reinterpret_cast<char*>(&offset_) + sizeof(zip_));
}

bool LoadDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.LoadDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string columnio_tablet_path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnio_tablet_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columnio_tablet_path().data(), this->columnio_tablet_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.LoadDataRequest.columnio_tablet_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string columnio_field = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnio_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columnio_field().data(), this->columnio_field().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.LoadDataRequest.columnio_field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape element_shape = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool zip = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.LoadDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.LoadDataRequest)
  return false;
#undef DO_
}

void LoadDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.LoadDataRequest)
  // string columnio_tablet_path = 1;
  if (this->columnio_tablet_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columnio_tablet_path().data(), this->columnio_tablet_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.LoadDataRequest.columnio_tablet_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->columnio_tablet_path(), output);
  }

  // string columnio_field = 2;
  if (this->columnio_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columnio_field().data(), this->columnio_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.LoadDataRequest.columnio_field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->columnio_field(), output);
  }

  // .xla.Shape element_shape = 3;
  if (this->has_element_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->element_shape_, output);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  // int64 limit = 5;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->limit(), output);
  }

  // bool zip = 6;
  if (this->zip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->zip(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.LoadDataRequest)
}

::google::protobuf::uint8* LoadDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.LoadDataRequest)
  // string columnio_tablet_path = 1;
  if (this->columnio_tablet_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columnio_tablet_path().data(), this->columnio_tablet_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.LoadDataRequest.columnio_tablet_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->columnio_tablet_path(), target);
  }

  // string columnio_field = 2;
  if (this->columnio_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columnio_field().data(), this->columnio_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.LoadDataRequest.columnio_field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->columnio_field(), target);
  }

  // .xla.Shape element_shape = 3;
  if (this->has_element_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->element_shape_, false, target);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  // int64 limit = 5;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->limit(), target);
  }

  // bool zip = 6;
  if (this->zip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->zip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.LoadDataRequest)
  return target;
}

size_t LoadDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LoadDataRequest)
  size_t total_size = 0;

  // string columnio_tablet_path = 1;
  if (this->columnio_tablet_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->columnio_tablet_path());
  }

  // string columnio_field = 2;
  if (this->columnio_field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->columnio_field());
  }

  // .xla.Shape element_shape = 3;
  if (this->has_element_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->element_shape_);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int64 limit = 5;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // bool zip = 6;
  if (this->zip() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.LoadDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.LoadDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.LoadDataRequest)
    MergeFrom(*source);
  }
}

void LoadDataRequest::MergeFrom(const LoadDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.LoadDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.columnio_tablet_path().size() > 0) {

    columnio_tablet_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columnio_tablet_path_);
  }
  if (from.columnio_field().size() > 0) {

    columnio_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columnio_field_);
  }
  if (from.has_element_shape()) {
    mutable_element_shape()->::xla::Shape::MergeFrom(from.element_shape());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.zip() != 0) {
    set_zip(from.zip());
  }
}

void LoadDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.LoadDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDataRequest::CopyFrom(const LoadDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LoadDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDataRequest::IsInitialized() const {
  return true;
}

void LoadDataRequest::Swap(LoadDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadDataRequest::InternalSwap(LoadDataRequest* other) {
  columnio_tablet_path_.Swap(&other->columnio_tablet_path_);
  columnio_field_.Swap(&other->columnio_field_);
  std::swap(element_shape_, other->element_shape_);
  std::swap(offset_, other->offset_);
  std::swap(limit_, other->limit_);
  std::swap(zip_, other->zip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadDataRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadDataRequest

// string columnio_tablet_path = 1;
void LoadDataRequest::clear_columnio_tablet_path() {
  columnio_tablet_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoadDataRequest::columnio_tablet_path() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.columnio_tablet_path)
  return columnio_tablet_path_.GetNoArena();
}
void LoadDataRequest::set_columnio_tablet_path(const ::std::string& value) {
  
  columnio_tablet_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.columnio_tablet_path)
}
#if LANG_CXX11
void LoadDataRequest::set_columnio_tablet_path(::std::string&& value) {
  
  columnio_tablet_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.LoadDataRequest.columnio_tablet_path)
}
#endif
void LoadDataRequest::set_columnio_tablet_path(const char* value) {
  
  columnio_tablet_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.LoadDataRequest.columnio_tablet_path)
}
void LoadDataRequest::set_columnio_tablet_path(const char* value, size_t size) {
  
  columnio_tablet_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.LoadDataRequest.columnio_tablet_path)
}
::std::string* LoadDataRequest::mutable_columnio_tablet_path() {
  
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.columnio_tablet_path)
  return columnio_tablet_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoadDataRequest::release_columnio_tablet_path() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.columnio_tablet_path)
  
  return columnio_tablet_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadDataRequest::set_allocated_columnio_tablet_path(::std::string* columnio_tablet_path) {
  if (columnio_tablet_path != NULL) {
    
  } else {
    
  }
  columnio_tablet_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), columnio_tablet_path);
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.columnio_tablet_path)
}

// string columnio_field = 2;
void LoadDataRequest::clear_columnio_field() {
  columnio_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoadDataRequest::columnio_field() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.columnio_field)
  return columnio_field_.GetNoArena();
}
void LoadDataRequest::set_columnio_field(const ::std::string& value) {
  
  columnio_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.columnio_field)
}
#if LANG_CXX11
void LoadDataRequest::set_columnio_field(::std::string&& value) {
  
  columnio_field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.LoadDataRequest.columnio_field)
}
#endif
void LoadDataRequest::set_columnio_field(const char* value) {
  
  columnio_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.LoadDataRequest.columnio_field)
}
void LoadDataRequest::set_columnio_field(const char* value, size_t size) {
  
  columnio_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.LoadDataRequest.columnio_field)
}
::std::string* LoadDataRequest::mutable_columnio_field() {
  
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.columnio_field)
  return columnio_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoadDataRequest::release_columnio_field() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.columnio_field)
  
  return columnio_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadDataRequest::set_allocated_columnio_field(::std::string* columnio_field) {
  if (columnio_field != NULL) {
    
  } else {
    
  }
  columnio_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), columnio_field);
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.columnio_field)
}

// .xla.Shape element_shape = 3;
bool LoadDataRequest::has_element_shape() const {
  return this != internal_default_instance() && element_shape_ != NULL;
}
void LoadDataRequest::clear_element_shape() {
  if (GetArenaNoVirtual() == NULL && element_shape_ != NULL) delete element_shape_;
  element_shape_ = NULL;
}
const ::xla::Shape& LoadDataRequest::element_shape() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.element_shape)
  return element_shape_ != NULL ? *element_shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* LoadDataRequest::mutable_element_shape() {
  
  if (element_shape_ == NULL) {
    element_shape_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.element_shape)
  return element_shape_;
}
::xla::Shape* LoadDataRequest::release_element_shape() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.element_shape)
  
  ::xla::Shape* temp = element_shape_;
  element_shape_ = NULL;
  return temp;
}
void LoadDataRequest::set_allocated_element_shape(::xla::Shape* element_shape) {
  delete element_shape_;
  if (element_shape != NULL && element_shape->GetArena() != NULL) {
    ::xla::Shape* new_element_shape = new ::xla::Shape;
    new_element_shape->CopyFrom(*element_shape);
    element_shape = new_element_shape;
  }
  element_shape_ = element_shape;
  if (element_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.element_shape)
}

// int64 offset = 4;
void LoadDataRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoadDataRequest::offset() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.offset)
  return offset_;
}
void LoadDataRequest::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.offset)
}

// int64 limit = 5;
void LoadDataRequest::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoadDataRequest::limit() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.limit)
  return limit_;
}
void LoadDataRequest::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.limit)
}

// bool zip = 6;
void LoadDataRequest::clear_zip() {
  zip_ = false;
}
bool LoadDataRequest::zip() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.zip)
  return zip_;
}
void LoadDataRequest::set_zip(bool value) {
  
  zip_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.zip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadDataResponse::kDataFieldNumber;
const int LoadDataResponse::kDataShapeFieldNumber;
const int LoadDataResponse::kAvailableRowsFieldNumber;
const int LoadDataResponse::kRowsLoadedFieldNumber;
const int LoadDataResponse::kNanosecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadDataResponse::LoadDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.LoadDataResponse)
}
LoadDataResponse::LoadDataResponse(const LoadDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_data_shape()) {
    data_shape_ = new ::xla::Shape(*from.data_shape_);
  } else {
    data_shape_ = NULL;
  }
  ::memcpy(&available_rows_, &from.available_rows_,
    reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&available_rows_) + sizeof(nanoseconds_));
  // @@protoc_insertion_point(copy_constructor:xla.LoadDataResponse)
}

void LoadDataResponse::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&data_) + sizeof(nanoseconds_));
  _cached_size_ = 0;
}

LoadDataResponse::~LoadDataResponse() {
  // @@protoc_insertion_point(destructor:xla.LoadDataResponse)
  SharedDtor();
}

void LoadDataResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
  if (this != internal_default_instance()) {
    delete data_shape_;
  }
}

void LoadDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadDataResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[46].descriptor;
}

const LoadDataResponse& LoadDataResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadDataResponse* LoadDataResponse::New(::google::protobuf::Arena* arena) const {
  LoadDataResponse* n = new LoadDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.LoadDataResponse)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_shape_ != NULL) {
    delete data_shape_;
  }
  data_shape_ = NULL;
  ::memset(&available_rows_, 0, reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&available_rows_) + sizeof(nanoseconds_));
}

bool LoadDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.LoadDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape data_shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 available_rows = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rows_loaded = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rows_loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nanoseconds = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nanoseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.LoadDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.LoadDataResponse)
  return false;
#undef DO_
}

void LoadDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.LoadDataResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // .xla.Shape data_shape = 2;
  if (this->has_data_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_shape_, output);
  }

  // int64 available_rows = 3;
  if (this->available_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->available_rows(), output);
  }

  // int64 rows_loaded = 4;
  if (this->rows_loaded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rows_loaded(), output);
  }

  // int64 nanoseconds = 5;
  if (this->nanoseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nanoseconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.LoadDataResponse)
}

::google::protobuf::uint8* LoadDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.LoadDataResponse)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // .xla.Shape data_shape = 2;
  if (this->has_data_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_shape_, false, target);
  }

  // int64 available_rows = 3;
  if (this->available_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->available_rows(), target);
  }

  // int64 rows_loaded = 4;
  if (this->rows_loaded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rows_loaded(), target);
  }

  // int64 nanoseconds = 5;
  if (this->nanoseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nanoseconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.LoadDataResponse)
  return target;
}

size_t LoadDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.LoadDataResponse)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // .xla.Shape data_shape = 2;
  if (this->has_data_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_shape_);
  }

  // int64 available_rows = 3;
  if (this->available_rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->available_rows());
  }

  // int64 rows_loaded = 4;
  if (this->rows_loaded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rows_loaded());
  }

  // int64 nanoseconds = 5;
  if (this->nanoseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nanoseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.LoadDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.LoadDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.LoadDataResponse)
    MergeFrom(*source);
  }
}

void LoadDataResponse::MergeFrom(const LoadDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.LoadDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
  if (from.has_data_shape()) {
    mutable_data_shape()->::xla::Shape::MergeFrom(from.data_shape());
  }
  if (from.available_rows() != 0) {
    set_available_rows(from.available_rows());
  }
  if (from.rows_loaded() != 0) {
    set_rows_loaded(from.rows_loaded());
  }
  if (from.nanoseconds() != 0) {
    set_nanoseconds(from.nanoseconds());
  }
}

void LoadDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.LoadDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDataResponse::CopyFrom(const LoadDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.LoadDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDataResponse::IsInitialized() const {
  return true;
}

void LoadDataResponse::Swap(LoadDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadDataResponse::InternalSwap(LoadDataResponse* other) {
  std::swap(data_, other->data_);
  std::swap(data_shape_, other->data_shape_);
  std::swap(available_rows_, other->available_rows_);
  std::swap(rows_loaded_, other->rows_loaded_);
  std::swap(nanoseconds_, other->nanoseconds_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadDataResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadDataResponse

// .xla.GlobalDataHandle data = 1;
bool LoadDataResponse::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void LoadDataResponse::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& LoadDataResponse::data() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* LoadDataResponse::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.LoadDataResponse.data)
  return data_;
}
::xla::GlobalDataHandle* LoadDataResponse::release_data() {
  // @@protoc_insertion_point(field_release:xla.LoadDataResponse.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void LoadDataResponse::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataResponse.data)
}

// .xla.Shape data_shape = 2;
bool LoadDataResponse::has_data_shape() const {
  return this != internal_default_instance() && data_shape_ != NULL;
}
void LoadDataResponse::clear_data_shape() {
  if (GetArenaNoVirtual() == NULL && data_shape_ != NULL) delete data_shape_;
  data_shape_ = NULL;
}
const ::xla::Shape& LoadDataResponse::data_shape() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.data_shape)
  return data_shape_ != NULL ? *data_shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* LoadDataResponse::mutable_data_shape() {
  
  if (data_shape_ == NULL) {
    data_shape_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.LoadDataResponse.data_shape)
  return data_shape_;
}
::xla::Shape* LoadDataResponse::release_data_shape() {
  // @@protoc_insertion_point(field_release:xla.LoadDataResponse.data_shape)
  
  ::xla::Shape* temp = data_shape_;
  data_shape_ = NULL;
  return temp;
}
void LoadDataResponse::set_allocated_data_shape(::xla::Shape* data_shape) {
  delete data_shape_;
  if (data_shape != NULL && data_shape->GetArena() != NULL) {
    ::xla::Shape* new_data_shape = new ::xla::Shape;
    new_data_shape->CopyFrom(*data_shape);
    data_shape = new_data_shape;
  }
  data_shape_ = data_shape;
  if (data_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataResponse.data_shape)
}

// int64 available_rows = 3;
void LoadDataResponse::clear_available_rows() {
  available_rows_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoadDataResponse::available_rows() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.available_rows)
  return available_rows_;
}
void LoadDataResponse::set_available_rows(::google::protobuf::int64 value) {
  
  available_rows_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.available_rows)
}

// int64 rows_loaded = 4;
void LoadDataResponse::clear_rows_loaded() {
  rows_loaded_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoadDataResponse::rows_loaded() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.rows_loaded)
  return rows_loaded_;
}
void LoadDataResponse::set_rows_loaded(::google::protobuf::int64 value) {
  
  rows_loaded_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.rows_loaded)
}

// int64 nanoseconds = 5;
void LoadDataResponse::clear_nanoseconds() {
  nanoseconds_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoadDataResponse::nanoseconds() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.nanoseconds)
  return nanoseconds_;
}
void LoadDataResponse::set_nanoseconds(::google::protobuf::int64 value) {
  
  nanoseconds_ = value;
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.nanoseconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpecializeRequest::kComputationFieldNumber;
const int SpecializeRequest::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpecializeRequest::SpecializeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SpecializeRequest)
}
SpecializeRequest::SpecializeRequest(const SpecializeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SpecializeRequest)
}

void SpecializeRequest::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

SpecializeRequest::~SpecializeRequest() {
  // @@protoc_insertion_point(destructor:xla.SpecializeRequest)
  SharedDtor();
}

void SpecializeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void SpecializeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecializeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[47].descriptor;
}

const SpecializeRequest& SpecializeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpecializeRequest* SpecializeRequest::New(::google::protobuf::Arena* arena) const {
  SpecializeRequest* n = new SpecializeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpecializeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SpecializeRequest)
  arguments_.Clear();
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool SpecializeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SpecializeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.GlobalDataHandle arguments = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SpecializeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SpecializeRequest)
  return false;
#undef DO_
}

void SpecializeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SpecializeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SpecializeRequest)
}

::google::protobuf::uint8* SpecializeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SpecializeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // repeated .xla.GlobalDataHandle arguments = 2;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->arguments(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SpecializeRequest)
  return target;
}

size_t SpecializeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SpecializeRequest)
  size_t total_size = 0;

  // repeated .xla.GlobalDataHandle arguments = 2;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecializeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SpecializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecializeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpecializeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SpecializeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SpecializeRequest)
    MergeFrom(*source);
  }
}

void SpecializeRequest::MergeFrom(const SpecializeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SpecializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arguments_.MergeFrom(from.arguments_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void SpecializeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SpecializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecializeRequest::CopyFrom(const SpecializeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SpecializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecializeRequest::IsInitialized() const {
  return true;
}

void SpecializeRequest::Swap(SpecializeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpecializeRequest::InternalSwap(SpecializeRequest* other) {
  arguments_.UnsafeArenaSwap(&other->arguments_);
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpecializeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpecializeRequest

// .xla.ComputationHandle computation = 1;
bool SpecializeRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void SpecializeRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& SpecializeRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.SpecializeRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SpecializeRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.SpecializeRequest.computation)
  return computation_;
}
::xla::ComputationHandle* SpecializeRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.SpecializeRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void SpecializeRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SpecializeRequest.computation)
}

// repeated .xla.GlobalDataHandle arguments = 2;
int SpecializeRequest::arguments_size() const {
  return arguments_.size();
}
void SpecializeRequest::clear_arguments() {
  arguments_.Clear();
}
const ::xla::GlobalDataHandle& SpecializeRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.SpecializeRequest.arguments)
  return arguments_.Get(index);
}
::xla::GlobalDataHandle* SpecializeRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.SpecializeRequest.arguments)
  return arguments_.Mutable(index);
}
::xla::GlobalDataHandle* SpecializeRequest::add_arguments() {
  // @@protoc_insertion_point(field_add:xla.SpecializeRequest.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >*
SpecializeRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.SpecializeRequest.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >&
SpecializeRequest::arguments() const {
  // @@protoc_insertion_point(field_list:xla.SpecializeRequest.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpecializeResponse::SpecializeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SpecializeResponse)
}
SpecializeResponse::SpecializeResponse(const SpecializeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.SpecializeResponse)
}

void SpecializeResponse::SharedCtor() {
  _cached_size_ = 0;
}

SpecializeResponse::~SpecializeResponse() {
  // @@protoc_insertion_point(destructor:xla.SpecializeResponse)
  SharedDtor();
}

void SpecializeResponse::SharedDtor() {
}

void SpecializeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecializeResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[48].descriptor;
}

const SpecializeResponse& SpecializeResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpecializeResponse* SpecializeResponse::New(::google::protobuf::Arena* arena) const {
  SpecializeResponse* n = new SpecializeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpecializeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SpecializeResponse)
}

bool SpecializeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SpecializeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SpecializeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SpecializeResponse)
  return false;
#undef DO_
}

void SpecializeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SpecializeResponse)
  // @@protoc_insertion_point(serialize_end:xla.SpecializeResponse)
}

::google::protobuf::uint8* SpecializeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SpecializeResponse)
  // @@protoc_insertion_point(serialize_to_array_end:xla.SpecializeResponse)
  return target;
}

size_t SpecializeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SpecializeResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecializeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SpecializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecializeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpecializeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SpecializeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SpecializeResponse)
    MergeFrom(*source);
  }
}

void SpecializeResponse::MergeFrom(const SpecializeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SpecializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SpecializeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SpecializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecializeResponse::CopyFrom(const SpecializeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SpecializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecializeResponse::IsInitialized() const {
  return true;
}

void SpecializeResponse::Swap(SpecializeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpecializeResponse::InternalSwap(SpecializeResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpecializeResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpecializeResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetShapeRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetShapeRequest::GetShapeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetShapeRequest)
}
GetShapeRequest::GetShapeRequest(const GetShapeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetShapeRequest)
}

void GetShapeRequest::SharedCtor() {
  data_ = NULL;
  _cached_size_ = 0;
}

GetShapeRequest::~GetShapeRequest() {
  // @@protoc_insertion_point(destructor:xla.GetShapeRequest)
  SharedDtor();
}

void GetShapeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void GetShapeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShapeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[49].descriptor;
}

const GetShapeRequest& GetShapeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetShapeRequest* GetShapeRequest::New(::google::protobuf::Arena* arena) const {
  GetShapeRequest* n = new GetShapeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetShapeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetShapeRequest)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool GetShapeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetShapeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetShapeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetShapeRequest)
  return false;
#undef DO_
}

void GetShapeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetShapeRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetShapeRequest)
}

::google::protobuf::uint8* GetShapeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetShapeRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetShapeRequest)
  return target;
}

size_t GetShapeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetShapeRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShapeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShapeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetShapeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetShapeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetShapeRequest)
    MergeFrom(*source);
  }
}

void GetShapeRequest::MergeFrom(const GetShapeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
}

void GetShapeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShapeRequest::CopyFrom(const GetShapeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShapeRequest::IsInitialized() const {
  return true;
}

void GetShapeRequest::Swap(GetShapeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetShapeRequest::InternalSwap(GetShapeRequest* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetShapeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetShapeRequest

// .xla.GlobalDataHandle data = 1;
bool GetShapeRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void GetShapeRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& GetShapeRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.GetShapeRequest.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* GetShapeRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.GetShapeRequest.data)
  return data_;
}
::xla::GlobalDataHandle* GetShapeRequest::release_data() {
  // @@protoc_insertion_point(field_release:xla.GetShapeRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void GetShapeRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetShapeRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetShapeResponse::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetShapeResponse::GetShapeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetShapeResponse)
}
GetShapeResponse::GetShapeResponse(const GetShapeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::xla::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetShapeResponse)
}

void GetShapeResponse::SharedCtor() {
  shape_ = NULL;
  _cached_size_ = 0;
}

GetShapeResponse::~GetShapeResponse() {
  // @@protoc_insertion_point(destructor:xla.GetShapeResponse)
  SharedDtor();
}

void GetShapeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void GetShapeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShapeResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[50].descriptor;
}

const GetShapeResponse& GetShapeResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetShapeResponse* GetShapeResponse::New(::google::protobuf::Arena* arena) const {
  GetShapeResponse* n = new GetShapeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetShapeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetShapeResponse)
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}

bool GetShapeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetShapeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.Shape shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetShapeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetShapeResponse)
  return false;
#undef DO_
}

void GetShapeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetShapeResponse)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetShapeResponse)
}

::google::protobuf::uint8* GetShapeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetShapeResponse)
  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetShapeResponse)
  return target;
}

size_t GetShapeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetShapeResponse)
  size_t total_size = 0;

  // .xla.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShapeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShapeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetShapeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetShapeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetShapeResponse)
    MergeFrom(*source);
  }
}

void GetShapeResponse::MergeFrom(const GetShapeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    mutable_shape()->::xla::Shape::MergeFrom(from.shape());
  }
}

void GetShapeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShapeResponse::CopyFrom(const GetShapeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShapeResponse::IsInitialized() const {
  return true;
}

void GetShapeResponse::Swap(GetShapeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetShapeResponse::InternalSwap(GetShapeResponse* other) {
  std::swap(shape_, other->shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetShapeResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetShapeResponse

// .xla.Shape shape = 1;
bool GetShapeResponse::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void GetShapeResponse::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::xla::Shape& GetShapeResponse::shape() const {
  // @@protoc_insertion_point(field_get:xla.GetShapeResponse.shape)
  return shape_ != NULL ? *shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* GetShapeResponse::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.GetShapeResponse.shape)
  return shape_;
}
::xla::Shape* GetShapeResponse::release_shape() {
  // @@protoc_insertion_point(field_release:xla.GetShapeResponse.shape)
  
  ::xla::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void GetShapeResponse::set_allocated_shape(::xla::Shape* shape) {
  delete shape_;
  if (shape != NULL && shape->GetArena() != NULL) {
    ::xla::Shape* new_shape = new ::xla::Shape;
    new_shape->CopyFrom(*shape);
    shape = new_shape;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetShapeResponse.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetComputationShapeRequest::kComputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetComputationShapeRequest::GetComputationShapeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetComputationShapeRequest)
}
GetComputationShapeRequest::GetComputationShapeRequest(const GetComputationShapeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    computation_ = new ::xla::ComputationHandle(*from.computation_);
  } else {
    computation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetComputationShapeRequest)
}

void GetComputationShapeRequest::SharedCtor() {
  computation_ = NULL;
  _cached_size_ = 0;
}

GetComputationShapeRequest::~GetComputationShapeRequest() {
  // @@protoc_insertion_point(destructor:xla.GetComputationShapeRequest)
  SharedDtor();
}

void GetComputationShapeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computation_;
  }
}

void GetComputationShapeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetComputationShapeRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[51].descriptor;
}

const GetComputationShapeRequest& GetComputationShapeRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetComputationShapeRequest* GetComputationShapeRequest::New(::google::protobuf::Arena* arena) const {
  GetComputationShapeRequest* n = new GetComputationShapeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetComputationShapeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetComputationShapeRequest)
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) {
    delete computation_;
  }
  computation_ = NULL;
}

bool GetComputationShapeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetComputationShapeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationHandle computation = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetComputationShapeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetComputationShapeRequest)
  return false;
#undef DO_
}

void GetComputationShapeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetComputationShapeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->computation_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetComputationShapeRequest)
}

::google::protobuf::uint8* GetComputationShapeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetComputationShapeRequest)
  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->computation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetComputationShapeRequest)
  return target;
}

size_t GetComputationShapeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetComputationShapeRequest)
  size_t total_size = 0;

  // .xla.ComputationHandle computation = 1;
  if (this->has_computation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetComputationShapeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetComputationShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetComputationShapeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetComputationShapeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetComputationShapeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetComputationShapeRequest)
    MergeFrom(*source);
  }
}

void GetComputationShapeRequest::MergeFrom(const GetComputationShapeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetComputationShapeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computation()) {
    mutable_computation()->::xla::ComputationHandle::MergeFrom(from.computation());
  }
}

void GetComputationShapeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetComputationShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetComputationShapeRequest::CopyFrom(const GetComputationShapeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetComputationShapeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetComputationShapeRequest::IsInitialized() const {
  return true;
}

void GetComputationShapeRequest::Swap(GetComputationShapeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetComputationShapeRequest::InternalSwap(GetComputationShapeRequest* other) {
  std::swap(computation_, other->computation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetComputationShapeRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetComputationShapeRequest

// .xla.ComputationHandle computation = 1;
bool GetComputationShapeRequest::has_computation() const {
  return this != internal_default_instance() && computation_ != NULL;
}
void GetComputationShapeRequest::clear_computation() {
  if (GetArenaNoVirtual() == NULL && computation_ != NULL) delete computation_;
  computation_ = NULL;
}
const ::xla::ComputationHandle& GetComputationShapeRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.GetComputationShapeRequest.computation)
  return computation_ != NULL ? *computation_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* GetComputationShapeRequest::mutable_computation() {
  
  if (computation_ == NULL) {
    computation_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.GetComputationShapeRequest.computation)
  return computation_;
}
::xla::ComputationHandle* GetComputationShapeRequest::release_computation() {
  // @@protoc_insertion_point(field_release:xla.GetComputationShapeRequest.computation)
  
  ::xla::ComputationHandle* temp = computation_;
  computation_ = NULL;
  return temp;
}
void GetComputationShapeRequest::set_allocated_computation(::xla::ComputationHandle* computation) {
  delete computation_;
  if (computation != NULL && computation->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation = new ::xla::ComputationHandle;
    new_computation->CopyFrom(*computation);
    computation = new_computation;
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetComputationShapeRequest.computation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetComputationShapeResponse::kProgramShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetComputationShapeResponse::GetComputationShapeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.GetComputationShapeResponse)
}
GetComputationShapeResponse::GetComputationShapeResponse(const GetComputationShapeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_program_shape()) {
    program_shape_ = new ::xla::ProgramShape(*from.program_shape_);
  } else {
    program_shape_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.GetComputationShapeResponse)
}

void GetComputationShapeResponse::SharedCtor() {
  program_shape_ = NULL;
  _cached_size_ = 0;
}

GetComputationShapeResponse::~GetComputationShapeResponse() {
  // @@protoc_insertion_point(destructor:xla.GetComputationShapeResponse)
  SharedDtor();
}

void GetComputationShapeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete program_shape_;
  }
}

void GetComputationShapeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetComputationShapeResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[52].descriptor;
}

const GetComputationShapeResponse& GetComputationShapeResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetComputationShapeResponse* GetComputationShapeResponse::New(::google::protobuf::Arena* arena) const {
  GetComputationShapeResponse* n = new GetComputationShapeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetComputationShapeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GetComputationShapeResponse)
  if (GetArenaNoVirtual() == NULL && program_shape_ != NULL) {
    delete program_shape_;
  }
  program_shape_ = NULL;
}

bool GetComputationShapeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.GetComputationShapeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ProgramShape program_shape = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_program_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.GetComputationShapeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.GetComputationShapeResponse)
  return false;
#undef DO_
}

void GetComputationShapeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.GetComputationShapeResponse)
  // .xla.ProgramShape program_shape = 1;
  if (this->has_program_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->program_shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.GetComputationShapeResponse)
}

::google::protobuf::uint8* GetComputationShapeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.GetComputationShapeResponse)
  // .xla.ProgramShape program_shape = 1;
  if (this->has_program_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->program_shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.GetComputationShapeResponse)
  return target;
}

size_t GetComputationShapeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.GetComputationShapeResponse)
  size_t total_size = 0;

  // .xla.ProgramShape program_shape = 1;
  if (this->has_program_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->program_shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetComputationShapeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.GetComputationShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetComputationShapeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetComputationShapeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.GetComputationShapeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.GetComputationShapeResponse)
    MergeFrom(*source);
  }
}

void GetComputationShapeResponse::MergeFrom(const GetComputationShapeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.GetComputationShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_program_shape()) {
    mutable_program_shape()->::xla::ProgramShape::MergeFrom(from.program_shape());
  }
}

void GetComputationShapeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.GetComputationShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetComputationShapeResponse::CopyFrom(const GetComputationShapeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GetComputationShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetComputationShapeResponse::IsInitialized() const {
  return true;
}

void GetComputationShapeResponse::Swap(GetComputationShapeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetComputationShapeResponse::InternalSwap(GetComputationShapeResponse* other) {
  std::swap(program_shape_, other->program_shape_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetComputationShapeResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetComputationShapeResponse

// .xla.ProgramShape program_shape = 1;
bool GetComputationShapeResponse::has_program_shape() const {
  return this != internal_default_instance() && program_shape_ != NULL;
}
void GetComputationShapeResponse::clear_program_shape() {
  if (GetArenaNoVirtual() == NULL && program_shape_ != NULL) delete program_shape_;
  program_shape_ = NULL;
}
const ::xla::ProgramShape& GetComputationShapeResponse::program_shape() const {
  // @@protoc_insertion_point(field_get:xla.GetComputationShapeResponse.program_shape)
  return program_shape_ != NULL ? *program_shape_
                         : *::xla::ProgramShape::internal_default_instance();
}
::xla::ProgramShape* GetComputationShapeResponse::mutable_program_shape() {
  
  if (program_shape_ == NULL) {
    program_shape_ = new ::xla::ProgramShape;
  }
  // @@protoc_insertion_point(field_mutable:xla.GetComputationShapeResponse.program_shape)
  return program_shape_;
}
::xla::ProgramShape* GetComputationShapeResponse::release_program_shape() {
  // @@protoc_insertion_point(field_release:xla.GetComputationShapeResponse.program_shape)
  
  ::xla::ProgramShape* temp = program_shape_;
  program_shape_ = NULL;
  return temp;
}
void GetComputationShapeResponse::set_allocated_program_shape(::xla::ProgramShape* program_shape) {
  delete program_shape_;
  if (program_shape != NULL && program_shape->GetArena() != NULL) {
    ::xla::ProgramShape* new_program_shape = new ::xla::ProgramShape;
    new_program_shape->CopyFrom(*program_shape);
    program_shape = new_program_shape;
  }
  program_shape_ = program_shape;
  if (program_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.GetComputationShapeResponse.program_shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnpackRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnpackRequest::UnpackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.UnpackRequest)
}
UnpackRequest::UnpackRequest(const UnpackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::xla::GlobalDataHandle(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.UnpackRequest)
}

void UnpackRequest::SharedCtor() {
  data_ = NULL;
  _cached_size_ = 0;
}

UnpackRequest::~UnpackRequest() {
  // @@protoc_insertion_point(destructor:xla.UnpackRequest)
  SharedDtor();
}

void UnpackRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UnpackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnpackRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[53].descriptor;
}

const UnpackRequest& UnpackRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnpackRequest* UnpackRequest::New(::google::protobuf::Arena* arena) const {
  UnpackRequest* n = new UnpackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnpackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.UnpackRequest)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool UnpackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.UnpackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.GlobalDataHandle data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.UnpackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.UnpackRequest)
  return false;
#undef DO_
}

void UnpackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.UnpackRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.UnpackRequest)
}

::google::protobuf::uint8* UnpackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.UnpackRequest)
  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.UnpackRequest)
  return target;
}

size_t UnpackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.UnpackRequest)
  size_t total_size = 0;

  // .xla.GlobalDataHandle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnpackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.UnpackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnpackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnpackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.UnpackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.UnpackRequest)
    MergeFrom(*source);
  }
}

void UnpackRequest::MergeFrom(const UnpackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.UnpackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::xla::GlobalDataHandle::MergeFrom(from.data());
  }
}

void UnpackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.UnpackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnpackRequest::CopyFrom(const UnpackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.UnpackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpackRequest::IsInitialized() const {
  return true;
}

void UnpackRequest::Swap(UnpackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnpackRequest::InternalSwap(UnpackRequest* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnpackRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnpackRequest

// .xla.GlobalDataHandle data = 1;
bool UnpackRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void UnpackRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::xla::GlobalDataHandle& UnpackRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.UnpackRequest.data)
  return data_ != NULL ? *data_
                         : *::xla::GlobalDataHandle::internal_default_instance();
}
::xla::GlobalDataHandle* UnpackRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::xla::GlobalDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.UnpackRequest.data)
  return data_;
}
::xla::GlobalDataHandle* UnpackRequest::release_data() {
  // @@protoc_insertion_point(field_release:xla.UnpackRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = NULL;
  return temp;
}
void UnpackRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::xla::GlobalDataHandle* new_data = new ::xla::GlobalDataHandle;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.UnpackRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnpackResponse::kTiedDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnpackResponse::UnpackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.UnpackResponse)
}
UnpackResponse::UnpackResponse(const UnpackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tied_data_(from.tied_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xla.UnpackResponse)
}

void UnpackResponse::SharedCtor() {
  _cached_size_ = 0;
}

UnpackResponse::~UnpackResponse() {
  // @@protoc_insertion_point(destructor:xla.UnpackResponse)
  SharedDtor();
}

void UnpackResponse::SharedDtor() {
}

void UnpackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnpackResponse::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[54].descriptor;
}

const UnpackResponse& UnpackResponse::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnpackResponse* UnpackResponse::New(::google::protobuf::Arena* arena) const {
  UnpackResponse* n = new UnpackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnpackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.UnpackResponse)
  tied_data_.Clear();
}

bool UnpackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.UnpackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xla.GlobalDataHandle tied_data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tied_data()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.UnpackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.UnpackResponse)
  return false;
#undef DO_
}

void UnpackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.UnpackResponse)
  // repeated .xla.GlobalDataHandle tied_data = 1;
  for (unsigned int i = 0, n = this->tied_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tied_data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.UnpackResponse)
}

::google::protobuf::uint8* UnpackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.UnpackResponse)
  // repeated .xla.GlobalDataHandle tied_data = 1;
  for (unsigned int i = 0, n = this->tied_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tied_data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.UnpackResponse)
  return target;
}

size_t UnpackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.UnpackResponse)
  size_t total_size = 0;

  // repeated .xla.GlobalDataHandle tied_data = 1;
  {
    unsigned int count = this->tied_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tied_data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnpackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.UnpackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnpackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnpackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.UnpackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.UnpackResponse)
    MergeFrom(*source);
  }
}

void UnpackResponse::MergeFrom(const UnpackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.UnpackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tied_data_.MergeFrom(from.tied_data_);
}

void UnpackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.UnpackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnpackResponse::CopyFrom(const UnpackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.UnpackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpackResponse::IsInitialized() const {
  return true;
}

void UnpackResponse::Swap(UnpackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnpackResponse::InternalSwap(UnpackResponse* other) {
  tied_data_.UnsafeArenaSwap(&other->tied_data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnpackResponse::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnpackResponse

// repeated .xla.GlobalDataHandle tied_data = 1;
int UnpackResponse::tied_data_size() const {
  return tied_data_.size();
}
void UnpackResponse::clear_tied_data() {
  tied_data_.Clear();
}
const ::xla::GlobalDataHandle& UnpackResponse::tied_data(int index) const {
  // @@protoc_insertion_point(field_get:xla.UnpackResponse.tied_data)
  return tied_data_.Get(index);
}
::xla::GlobalDataHandle* UnpackResponse::mutable_tied_data(int index) {
  // @@protoc_insertion_point(field_mutable:xla.UnpackResponse.tied_data)
  return tied_data_.Mutable(index);
}
::xla::GlobalDataHandle* UnpackResponse::add_tied_data() {
  // @@protoc_insertion_point(field_add:xla.UnpackResponse.tied_data)
  return tied_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >*
UnpackResponse::mutable_tied_data() {
  // @@protoc_insertion_point(field_mutable_list:xla.UnpackResponse.tied_data)
  return &tied_data_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::GlobalDataHandle >&
UnpackResponse::tied_data() const {
  // @@protoc_insertion_point(field_list:xla.UnpackResponse.tied_data)
  return tied_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)
