// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/service/session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/compiler/xla/service/session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xla {
class OperationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationRequest> {
} _OperationRequest_default_instance_;
class SessionComputationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionComputation> {
} _SessionComputation_default_instance_;
class SessionModuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionModule> {
} _SessionModule_default_instance_;

namespace protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRequest, output_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRequest, output_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRequest, embedded_computation_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRequest, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionComputation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionComputation, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionComputation, computation_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionComputation, requests_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, embedded_computations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, arguments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionModule, execution_platform_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OperationRequest)},
  { 8, -1, sizeof(SessionComputation)},
  { 15, -1, sizeof(SessionModule)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionComputation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionModule_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/compiler/xla/service/session.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
  const ::google::protobuf::Descriptor* SessionComputation_RequestsEntry_descriptor = protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[1].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SessionComputation_RequestsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::xla::OperationRequest,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SessionComputation_RequestsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _OperationRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SessionComputation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SessionModule_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::InitDefaults();
  _OperationRequest_default_instance_.DefaultConstruct();
  _SessionComputation_default_instance_.DefaultConstruct();
  _SessionModule_default_instance_.DefaultConstruct();
  _OperationRequest_default_instance_.get_mutable()->output_handle_ = const_cast< ::xla::ComputationDataHandle*>(
      ::xla::ComputationDataHandle::internal_default_instance());
  _OperationRequest_default_instance_.get_mutable()->output_shape_ = const_cast< ::xla::Shape*>(
      ::xla::Shape::internal_default_instance());
  _OperationRequest_default_instance_.get_mutable()->request_ = const_cast< ::xla::OpRequest*>(
      ::xla::OpRequest::internal_default_instance());
  _SessionComputation_default_instance_.get_mutable()->computation_handle_ = const_cast< ::xla::ComputationHandle*>(
      ::xla::ComputationHandle::internal_default_instance());
  _SessionModule_default_instance_.get_mutable()->entry_ = const_cast< ::xla::SessionComputation*>(
      ::xla::SessionComputation::internal_default_instance());
  _SessionModule_default_instance_.get_mutable()->result_ = const_cast< ::xla::Literal*>(
      ::xla::Literal::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-tensorflow/compiler/xla/service/sessio"
      "n.proto\022\003xla\032&tensorflow/compiler/xla/xl"
      "a_data.proto\"\257\001\n\020OperationRequest\0221\n\rout"
      "put_handle\030\001 \001(\0132\032.xla.ComputationDataHa"
      "ndle\022 \n\014output_shape\030\002 \001(\0132\n.xla.Shape\022%"
      "\n\035embedded_computation_versions\030\003 \003(\003\022\037\n"
      "\007request\030\004 \001(\0132\016.xla.OpRequest\"\327\001\n\022Sessi"
      "onComputation\022\014\n\004name\030\001 \001(\t\0222\n\022computati"
      "on_handle\030\002 \001(\0132\026.xla.ComputationHandle\022"
      "7\n\010requests\030\003 \003(\0132%.xla.SessionComputati"
      "on.RequestsEntry\032F\n\rRequestsEntry\022\013\n\003key"
      "\030\001 \001(\003\022$\n\005value\030\002 \001(\0132\025.xla.OperationReq"
      "uest:\0028\001\"\312\001\n\rSessionModule\022&\n\005entry\030\001 \001("
      "\0132\027.xla.SessionComputation\0226\n\025embedded_c"
      "omputations\030\002 \003(\0132\027.xla.SessionComputati"
      "on\022\037\n\targuments\030\003 \003(\0132\014.xla.Literal\022\034\n\006r"
      "esult\030\004 \001(\0132\014.xla.Literal\022\032\n\022execution_p"
      "latform\030\005 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/compiler/xla/service/session.proto", &protobuf_RegisterTypes);
  ::xla::protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationRequest::kOutputHandleFieldNumber;
const int OperationRequest::kOutputShapeFieldNumber;
const int OperationRequest::kEmbeddedComputationVersionsFieldNumber;
const int OperationRequest::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationRequest::OperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.OperationRequest)
}
OperationRequest::OperationRequest(const OperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      embedded_computation_versions_(from.embedded_computation_versions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_handle()) {
    output_handle_ = new ::xla::ComputationDataHandle(*from.output_handle_);
  } else {
    output_handle_ = NULL;
  }
  if (from.has_output_shape()) {
    output_shape_ = new ::xla::Shape(*from.output_shape_);
  } else {
    output_shape_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::xla::OpRequest(*from.request_);
  } else {
    request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.OperationRequest)
}

void OperationRequest::SharedCtor() {
  ::memset(&output_handle_, 0, reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&output_handle_) + sizeof(request_));
  _cached_size_ = 0;
}

OperationRequest::~OperationRequest() {
  // @@protoc_insertion_point(destructor:xla.OperationRequest)
  SharedDtor();
}

void OperationRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete output_handle_;
  }
  if (this != internal_default_instance()) {
    delete output_shape_;
  }
  if (this != internal_default_instance()) {
    delete request_;
  }
}

void OperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationRequest::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[0].descriptor;
}

const OperationRequest& OperationRequest::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationRequest* OperationRequest::New(::google::protobuf::Arena* arena) const {
  OperationRequest* n = new OperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.OperationRequest)
  embedded_computation_versions_.Clear();
  if (GetArenaNoVirtual() == NULL && output_handle_ != NULL) {
    delete output_handle_;
  }
  output_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_shape_ != NULL) {
    delete output_shape_;
  }
  output_shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}

bool OperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.OperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.ComputationDataHandle output_handle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.Shape output_shape = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 embedded_computation_versions = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_embedded_computation_versions())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_embedded_computation_versions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.OpRequest request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.OperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.OperationRequest)
  return false;
#undef DO_
}

void OperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.OperationRequest)
  // .xla.ComputationDataHandle output_handle = 1;
  if (this->has_output_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->output_handle_, output);
  }

  // .xla.Shape output_shape = 2;
  if (this->has_output_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->output_shape_, output);
  }

  // repeated int64 embedded_computation_versions = 3;
  if (this->embedded_computation_versions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_embedded_computation_versions_cached_byte_size_);
  }
  for (int i = 0; i < this->embedded_computation_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->embedded_computation_versions(i), output);
  }

  // .xla.OpRequest request = 4;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:xla.OperationRequest)
}

::google::protobuf::uint8* OperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.OperationRequest)
  // .xla.ComputationDataHandle output_handle = 1;
  if (this->has_output_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->output_handle_, false, target);
  }

  // .xla.Shape output_shape = 2;
  if (this->has_output_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->output_shape_, false, target);
  }

  // repeated int64 embedded_computation_versions = 3;
  if (this->embedded_computation_versions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _embedded_computation_versions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->embedded_computation_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->embedded_computation_versions(i), target);
  }

  // .xla.OpRequest request = 4;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.OperationRequest)
  return target;
}

size_t OperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.OperationRequest)
  size_t total_size = 0;

  // repeated int64 embedded_computation_versions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->embedded_computation_versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _embedded_computation_versions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xla.ComputationDataHandle output_handle = 1;
  if (this->has_output_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_handle_);
  }

  // .xla.Shape output_shape = 2;
  if (this->has_output_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_shape_);
  }

  // .xla.OpRequest request = 4;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.OperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.OperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.OperationRequest)
    MergeFrom(*source);
  }
}

void OperationRequest::MergeFrom(const OperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.OperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  embedded_computation_versions_.MergeFrom(from.embedded_computation_versions_);
  if (from.has_output_handle()) {
    mutable_output_handle()->::xla::ComputationDataHandle::MergeFrom(from.output_handle());
  }
  if (from.has_output_shape()) {
    mutable_output_shape()->::xla::Shape::MergeFrom(from.output_shape());
  }
  if (from.has_request()) {
    mutable_request()->::xla::OpRequest::MergeFrom(from.request());
  }
}

void OperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.OperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationRequest::CopyFrom(const OperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.OperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationRequest::IsInitialized() const {
  return true;
}

void OperationRequest::Swap(OperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationRequest::InternalSwap(OperationRequest* other) {
  embedded_computation_versions_.UnsafeArenaSwap(&other->embedded_computation_versions_);
  std::swap(output_handle_, other->output_handle_);
  std::swap(output_shape_, other->output_shape_);
  std::swap(request_, other->request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationRequest::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationRequest

// .xla.ComputationDataHandle output_handle = 1;
bool OperationRequest::has_output_handle() const {
  return this != internal_default_instance() && output_handle_ != NULL;
}
void OperationRequest::clear_output_handle() {
  if (GetArenaNoVirtual() == NULL && output_handle_ != NULL) delete output_handle_;
  output_handle_ = NULL;
}
const ::xla::ComputationDataHandle& OperationRequest::output_handle() const {
  // @@protoc_insertion_point(field_get:xla.OperationRequest.output_handle)
  return output_handle_ != NULL ? *output_handle_
                         : *::xla::ComputationDataHandle::internal_default_instance();
}
::xla::ComputationDataHandle* OperationRequest::mutable_output_handle() {
  
  if (output_handle_ == NULL) {
    output_handle_ = new ::xla::ComputationDataHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.OperationRequest.output_handle)
  return output_handle_;
}
::xla::ComputationDataHandle* OperationRequest::release_output_handle() {
  // @@protoc_insertion_point(field_release:xla.OperationRequest.output_handle)
  
  ::xla::ComputationDataHandle* temp = output_handle_;
  output_handle_ = NULL;
  return temp;
}
void OperationRequest::set_allocated_output_handle(::xla::ComputationDataHandle* output_handle) {
  delete output_handle_;
  if (output_handle != NULL && output_handle->GetArena() != NULL) {
    ::xla::ComputationDataHandle* new_output_handle = new ::xla::ComputationDataHandle;
    new_output_handle->CopyFrom(*output_handle);
    output_handle = new_output_handle;
  }
  output_handle_ = output_handle;
  if (output_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OperationRequest.output_handle)
}

// .xla.Shape output_shape = 2;
bool OperationRequest::has_output_shape() const {
  return this != internal_default_instance() && output_shape_ != NULL;
}
void OperationRequest::clear_output_shape() {
  if (GetArenaNoVirtual() == NULL && output_shape_ != NULL) delete output_shape_;
  output_shape_ = NULL;
}
const ::xla::Shape& OperationRequest::output_shape() const {
  // @@protoc_insertion_point(field_get:xla.OperationRequest.output_shape)
  return output_shape_ != NULL ? *output_shape_
                         : *::xla::Shape::internal_default_instance();
}
::xla::Shape* OperationRequest::mutable_output_shape() {
  
  if (output_shape_ == NULL) {
    output_shape_ = new ::xla::Shape;
  }
  // @@protoc_insertion_point(field_mutable:xla.OperationRequest.output_shape)
  return output_shape_;
}
::xla::Shape* OperationRequest::release_output_shape() {
  // @@protoc_insertion_point(field_release:xla.OperationRequest.output_shape)
  
  ::xla::Shape* temp = output_shape_;
  output_shape_ = NULL;
  return temp;
}
void OperationRequest::set_allocated_output_shape(::xla::Shape* output_shape) {
  delete output_shape_;
  if (output_shape != NULL && output_shape->GetArena() != NULL) {
    ::xla::Shape* new_output_shape = new ::xla::Shape;
    new_output_shape->CopyFrom(*output_shape);
    output_shape = new_output_shape;
  }
  output_shape_ = output_shape;
  if (output_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OperationRequest.output_shape)
}

// repeated int64 embedded_computation_versions = 3;
int OperationRequest::embedded_computation_versions_size() const {
  return embedded_computation_versions_.size();
}
void OperationRequest::clear_embedded_computation_versions() {
  embedded_computation_versions_.Clear();
}
::google::protobuf::int64 OperationRequest::embedded_computation_versions(int index) const {
  // @@protoc_insertion_point(field_get:xla.OperationRequest.embedded_computation_versions)
  return embedded_computation_versions_.Get(index);
}
void OperationRequest::set_embedded_computation_versions(int index, ::google::protobuf::int64 value) {
  embedded_computation_versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.OperationRequest.embedded_computation_versions)
}
void OperationRequest::add_embedded_computation_versions(::google::protobuf::int64 value) {
  embedded_computation_versions_.Add(value);
  // @@protoc_insertion_point(field_add:xla.OperationRequest.embedded_computation_versions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OperationRequest::embedded_computation_versions() const {
  // @@protoc_insertion_point(field_list:xla.OperationRequest.embedded_computation_versions)
  return embedded_computation_versions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OperationRequest::mutable_embedded_computation_versions() {
  // @@protoc_insertion_point(field_mutable_list:xla.OperationRequest.embedded_computation_versions)
  return &embedded_computation_versions_;
}

// .xla.OpRequest request = 4;
bool OperationRequest::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void OperationRequest::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::xla::OpRequest& OperationRequest::request() const {
  // @@protoc_insertion_point(field_get:xla.OperationRequest.request)
  return request_ != NULL ? *request_
                         : *::xla::OpRequest::internal_default_instance();
}
::xla::OpRequest* OperationRequest::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::xla::OpRequest;
  }
  // @@protoc_insertion_point(field_mutable:xla.OperationRequest.request)
  return request_;
}
::xla::OpRequest* OperationRequest::release_request() {
  // @@protoc_insertion_point(field_release:xla.OperationRequest.request)
  
  ::xla::OpRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void OperationRequest::set_allocated_request(::xla::OpRequest* request) {
  delete request_;
  if (request != NULL && request->GetArena() != NULL) {
    ::xla::OpRequest* new_request = new ::xla::OpRequest;
    new_request->CopyFrom(*request);
    request = new_request;
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.OperationRequest.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionComputation::kNameFieldNumber;
const int SessionComputation::kComputationHandleFieldNumber;
const int SessionComputation::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionComputation::SessionComputation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SessionComputation)
}
SessionComputation::SessionComputation(const SessionComputation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& SessionComputation_RequestsEntry_descriptor = protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[1].descriptor;
  requests_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce);
  requests_.SetEntryDescriptor(
      &SessionComputation_RequestsEntry_descriptor);
  requests_.MergeFrom(from.requests_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_computation_handle()) {
    computation_handle_ = new ::xla::ComputationHandle(*from.computation_handle_);
  } else {
    computation_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SessionComputation)
}

void SessionComputation::SharedCtor() {
  const ::google::protobuf::Descriptor*& SessionComputation_RequestsEntry_descriptor = protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[1].descriptor;
  requests_.SetAssignDescriptorCallback(
      protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce);
  requests_.SetEntryDescriptor(
      &SessionComputation_RequestsEntry_descriptor);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computation_handle_ = NULL;
  _cached_size_ = 0;
}

SessionComputation::~SessionComputation() {
  // @@protoc_insertion_point(destructor:xla.SessionComputation)
  SharedDtor();
}

void SessionComputation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete computation_handle_;
  }
}

void SessionComputation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionComputation::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[2].descriptor;
}

const SessionComputation& SessionComputation::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionComputation* SessionComputation::New(::google::protobuf::Arena* arena) const {
  SessionComputation* n = new SessionComputation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionComputation::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SessionComputation)
  requests_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && computation_handle_ != NULL) {
    delete computation_handle_;
  }
  computation_handle_ = NULL;
}

bool SessionComputation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SessionComputation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.SessionComputation.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.ComputationHandle computation_handle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computation_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, .xla.OperationRequest> requests = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          SessionComputation_RequestsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::xla::OperationRequest,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest > > parser(&requests_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SessionComputation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SessionComputation)
  return false;
#undef DO_
}

void SessionComputation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SessionComputation)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.SessionComputation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .xla.ComputationHandle computation_handle = 2;
  if (this->has_computation_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->computation_handle_, output);
  }

  // map<int64, .xla.OperationRequest> requests = 3;
  if (!this->requests().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->requests().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->requests().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_iterator
          it = this->requests().begin();
          it != this->requests().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SessionComputation_RequestsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(requests_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SessionComputation_RequestsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_iterator
          it = this->requests().begin();
          it != this->requests().end(); ++it) {
        entry.reset(requests_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:xla.SessionComputation)
}

::google::protobuf::uint8* SessionComputation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SessionComputation)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.SessionComputation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .xla.ComputationHandle computation_handle = 2;
  if (this->has_computation_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->computation_handle_, false, target);
  }

  // map<int64, .xla.OperationRequest> requests = 3;
  if (!this->requests().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->requests().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->requests().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_iterator
          it = this->requests().begin();
          it != this->requests().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SessionComputation_RequestsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(requests_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SessionComputation_RequestsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_iterator
          it = this->requests().begin();
          it != this->requests().end(); ++it) {
        entry.reset(requests_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SessionComputation)
  return target;
}

size_t SessionComputation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SessionComputation)
  size_t total_size = 0;

  // map<int64, .xla.OperationRequest> requests = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requests_size());
  {
    ::google::protobuf::scoped_ptr<SessionComputation_RequestsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >::const_iterator
        it = this->requests().begin();
        it != this->requests().end(); ++it) {
      entry.reset(requests_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .xla.ComputationHandle computation_handle = 2;
  if (this->has_computation_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computation_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionComputation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SessionComputation)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionComputation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionComputation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SessionComputation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SessionComputation)
    MergeFrom(*source);
  }
}

void SessionComputation::MergeFrom(const SessionComputation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SessionComputation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requests_.MergeFrom(from.requests_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_computation_handle()) {
    mutable_computation_handle()->::xla::ComputationHandle::MergeFrom(from.computation_handle());
  }
}

void SessionComputation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SessionComputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionComputation::CopyFrom(const SessionComputation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SessionComputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionComputation::IsInitialized() const {
  return true;
}

void SessionComputation::Swap(SessionComputation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionComputation::InternalSwap(SessionComputation* other) {
  requests_.Swap(&other->requests_);
  name_.Swap(&other->name_);
  std::swap(computation_handle_, other->computation_handle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionComputation::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionComputation

// string name = 1;
void SessionComputation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionComputation::name() const {
  // @@protoc_insertion_point(field_get:xla.SessionComputation.name)
  return name_.GetNoArena();
}
void SessionComputation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.SessionComputation.name)
}
#if LANG_CXX11
void SessionComputation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.SessionComputation.name)
}
#endif
void SessionComputation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.SessionComputation.name)
}
void SessionComputation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.SessionComputation.name)
}
::std::string* SessionComputation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xla.SessionComputation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionComputation::release_name() {
  // @@protoc_insertion_point(field_release:xla.SessionComputation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionComputation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xla.SessionComputation.name)
}

// .xla.ComputationHandle computation_handle = 2;
bool SessionComputation::has_computation_handle() const {
  return this != internal_default_instance() && computation_handle_ != NULL;
}
void SessionComputation::clear_computation_handle() {
  if (GetArenaNoVirtual() == NULL && computation_handle_ != NULL) delete computation_handle_;
  computation_handle_ = NULL;
}
const ::xla::ComputationHandle& SessionComputation::computation_handle() const {
  // @@protoc_insertion_point(field_get:xla.SessionComputation.computation_handle)
  return computation_handle_ != NULL ? *computation_handle_
                         : *::xla::ComputationHandle::internal_default_instance();
}
::xla::ComputationHandle* SessionComputation::mutable_computation_handle() {
  
  if (computation_handle_ == NULL) {
    computation_handle_ = new ::xla::ComputationHandle;
  }
  // @@protoc_insertion_point(field_mutable:xla.SessionComputation.computation_handle)
  return computation_handle_;
}
::xla::ComputationHandle* SessionComputation::release_computation_handle() {
  // @@protoc_insertion_point(field_release:xla.SessionComputation.computation_handle)
  
  ::xla::ComputationHandle* temp = computation_handle_;
  computation_handle_ = NULL;
  return temp;
}
void SessionComputation::set_allocated_computation_handle(::xla::ComputationHandle* computation_handle) {
  delete computation_handle_;
  if (computation_handle != NULL && computation_handle->GetArena() != NULL) {
    ::xla::ComputationHandle* new_computation_handle = new ::xla::ComputationHandle;
    new_computation_handle->CopyFrom(*computation_handle);
    computation_handle = new_computation_handle;
  }
  computation_handle_ = computation_handle;
  if (computation_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SessionComputation.computation_handle)
}

// map<int64, .xla.OperationRequest> requests = 3;
int SessionComputation::requests_size() const {
  return requests_.size();
}
void SessionComputation::clear_requests() {
  requests_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >&
SessionComputation::requests() const {
  // @@protoc_insertion_point(field_map:xla.SessionComputation.requests)
  return requests_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::xla::OperationRequest >*
SessionComputation::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_map:xla.SessionComputation.requests)
  return requests_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionModule::kEntryFieldNumber;
const int SessionModule::kEmbeddedComputationsFieldNumber;
const int SessionModule::kArgumentsFieldNumber;
const int SessionModule::kResultFieldNumber;
const int SessionModule::kExecutionPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionModule::SessionModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xla.SessionModule)
}
SessionModule::SessionModule(const SessionModule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      embedded_computations_(from.embedded_computations_),
      arguments_(from.arguments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  execution_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.execution_platform().size() > 0) {
    execution_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.execution_platform_);
  }
  if (from.has_entry()) {
    entry_ = new ::xla::SessionComputation(*from.entry_);
  } else {
    entry_ = NULL;
  }
  if (from.has_result()) {
    result_ = new ::xla::Literal(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xla.SessionModule)
}

void SessionModule::SharedCtor() {
  execution_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&entry_) + sizeof(result_));
  _cached_size_ = 0;
}

SessionModule::~SessionModule() {
  // @@protoc_insertion_point(destructor:xla.SessionModule)
  SharedDtor();
}

void SessionModule::SharedDtor() {
  execution_platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete entry_;
  }
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void SessionModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionModule::descriptor() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[3].descriptor;
}

const SessionModule& SessionModule::default_instance() {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionModule* SessionModule::New(::google::protobuf::Arena* arena) const {
  SessionModule* n = new SessionModule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionModule::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.SessionModule)
  embedded_computations_.Clear();
  arguments_.Clear();
  execution_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) {
    delete entry_;
  }
  entry_ = NULL;
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}

bool SessionModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xla.SessionModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.SessionComputation entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xla.SessionComputation embedded_computations = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_embedded_computations()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xla.Literal arguments = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .xla.Literal result = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string execution_platform = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_platform()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->execution_platform().data(), this->execution_platform().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xla.SessionModule.execution_platform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xla.SessionModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xla.SessionModule)
  return false;
#undef DO_
}

void SessionModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xla.SessionModule)
  // .xla.SessionComputation entry = 1;
  if (this->has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entry_, output);
  }

  // repeated .xla.SessionComputation embedded_computations = 2;
  for (unsigned int i = 0, n = this->embedded_computations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->embedded_computations(i), output);
  }

  // repeated .xla.Literal arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  // .xla.Literal result = 4;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->result_, output);
  }

  // string execution_platform = 5;
  if (this->execution_platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->execution_platform().data(), this->execution_platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.SessionModule.execution_platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->execution_platform(), output);
  }

  // @@protoc_insertion_point(serialize_end:xla.SessionModule)
}

::google::protobuf::uint8* SessionModule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xla.SessionModule)
  // .xla.SessionComputation entry = 1;
  if (this->has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->entry_, false, target);
  }

  // repeated .xla.SessionComputation embedded_computations = 2;
  for (unsigned int i = 0, n = this->embedded_computations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->embedded_computations(i), false, target);
  }

  // repeated .xla.Literal arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->arguments(i), false, target);
  }

  // .xla.Literal result = 4;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->result_, false, target);
  }

  // string execution_platform = 5;
  if (this->execution_platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->execution_platform().data(), this->execution_platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xla.SessionModule.execution_platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->execution_platform(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xla.SessionModule)
  return target;
}

size_t SessionModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xla.SessionModule)
  size_t total_size = 0;

  // repeated .xla.SessionComputation embedded_computations = 2;
  {
    unsigned int count = this->embedded_computations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->embedded_computations(i));
    }
  }

  // repeated .xla.Literal arguments = 3;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  // string execution_platform = 5;
  if (this->execution_platform().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->execution_platform());
  }

  // .xla.SessionComputation entry = 1;
  if (this->has_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_);
  }

  // .xla.Literal result = 4;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionModule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xla.SessionModule)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionModule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionModule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xla.SessionModule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xla.SessionModule)
    MergeFrom(*source);
  }
}

void SessionModule::MergeFrom(const SessionModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xla.SessionModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  embedded_computations_.MergeFrom(from.embedded_computations_);
  arguments_.MergeFrom(from.arguments_);
  if (from.execution_platform().size() > 0) {

    execution_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.execution_platform_);
  }
  if (from.has_entry()) {
    mutable_entry()->::xla::SessionComputation::MergeFrom(from.entry());
  }
  if (from.has_result()) {
    mutable_result()->::xla::Literal::MergeFrom(from.result());
  }
}

void SessionModule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xla.SessionModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionModule::CopyFrom(const SessionModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.SessionModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionModule::IsInitialized() const {
  return true;
}

void SessionModule::Swap(SessionModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionModule::InternalSwap(SessionModule* other) {
  embedded_computations_.UnsafeArenaSwap(&other->embedded_computations_);
  arguments_.UnsafeArenaSwap(&other->arguments_);
  execution_platform_.Swap(&other->execution_platform_);
  std::swap(entry_, other->entry_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionModule::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fsession_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionModule

// .xla.SessionComputation entry = 1;
bool SessionModule::has_entry() const {
  return this != internal_default_instance() && entry_ != NULL;
}
void SessionModule::clear_entry() {
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) delete entry_;
  entry_ = NULL;
}
const ::xla::SessionComputation& SessionModule::entry() const {
  // @@protoc_insertion_point(field_get:xla.SessionModule.entry)
  return entry_ != NULL ? *entry_
                         : *::xla::SessionComputation::internal_default_instance();
}
::xla::SessionComputation* SessionModule::mutable_entry() {
  
  if (entry_ == NULL) {
    entry_ = new ::xla::SessionComputation;
  }
  // @@protoc_insertion_point(field_mutable:xla.SessionModule.entry)
  return entry_;
}
::xla::SessionComputation* SessionModule::release_entry() {
  // @@protoc_insertion_point(field_release:xla.SessionModule.entry)
  
  ::xla::SessionComputation* temp = entry_;
  entry_ = NULL;
  return temp;
}
void SessionModule::set_allocated_entry(::xla::SessionComputation* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SessionModule.entry)
}

// repeated .xla.SessionComputation embedded_computations = 2;
int SessionModule::embedded_computations_size() const {
  return embedded_computations_.size();
}
void SessionModule::clear_embedded_computations() {
  embedded_computations_.Clear();
}
const ::xla::SessionComputation& SessionModule::embedded_computations(int index) const {
  // @@protoc_insertion_point(field_get:xla.SessionModule.embedded_computations)
  return embedded_computations_.Get(index);
}
::xla::SessionComputation* SessionModule::mutable_embedded_computations(int index) {
  // @@protoc_insertion_point(field_mutable:xla.SessionModule.embedded_computations)
  return embedded_computations_.Mutable(index);
}
::xla::SessionComputation* SessionModule::add_embedded_computations() {
  // @@protoc_insertion_point(field_add:xla.SessionModule.embedded_computations)
  return embedded_computations_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::SessionComputation >*
SessionModule::mutable_embedded_computations() {
  // @@protoc_insertion_point(field_mutable_list:xla.SessionModule.embedded_computations)
  return &embedded_computations_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::SessionComputation >&
SessionModule::embedded_computations() const {
  // @@protoc_insertion_point(field_list:xla.SessionModule.embedded_computations)
  return embedded_computations_;
}

// repeated .xla.Literal arguments = 3;
int SessionModule::arguments_size() const {
  return arguments_.size();
}
void SessionModule::clear_arguments() {
  arguments_.Clear();
}
const ::xla::Literal& SessionModule::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.SessionModule.arguments)
  return arguments_.Get(index);
}
::xla::Literal* SessionModule::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.SessionModule.arguments)
  return arguments_.Mutable(index);
}
::xla::Literal* SessionModule::add_arguments() {
  // @@protoc_insertion_point(field_add:xla.SessionModule.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::xla::Literal >*
SessionModule::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.SessionModule.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::xla::Literal >&
SessionModule::arguments() const {
  // @@protoc_insertion_point(field_list:xla.SessionModule.arguments)
  return arguments_;
}

// .xla.Literal result = 4;
bool SessionModule::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void SessionModule::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::xla::Literal& SessionModule::result() const {
  // @@protoc_insertion_point(field_get:xla.SessionModule.result)
  return result_ != NULL ? *result_
                         : *::xla::Literal::internal_default_instance();
}
::xla::Literal* SessionModule::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::xla::Literal;
  }
  // @@protoc_insertion_point(field_mutable:xla.SessionModule.result)
  return result_;
}
::xla::Literal* SessionModule::release_result() {
  // @@protoc_insertion_point(field_release:xla.SessionModule.result)
  
  ::xla::Literal* temp = result_;
  result_ = NULL;
  return temp;
}
void SessionModule::set_allocated_result(::xla::Literal* result) {
  delete result_;
  if (result != NULL && result->GetArena() != NULL) {
    ::xla::Literal* new_result = new ::xla::Literal;
    new_result->CopyFrom(*result);
    result = new_result;
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xla.SessionModule.result)
}

// string execution_platform = 5;
void SessionModule::clear_execution_platform() {
  execution_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionModule::execution_platform() const {
  // @@protoc_insertion_point(field_get:xla.SessionModule.execution_platform)
  return execution_platform_.GetNoArena();
}
void SessionModule::set_execution_platform(const ::std::string& value) {
  
  execution_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.SessionModule.execution_platform)
}
#if LANG_CXX11
void SessionModule::set_execution_platform(::std::string&& value) {
  
  execution_platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.SessionModule.execution_platform)
}
#endif
void SessionModule::set_execution_platform(const char* value) {
  
  execution_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.SessionModule.execution_platform)
}
void SessionModule::set_execution_platform(const char* value, size_t size) {
  
  execution_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.SessionModule.execution_platform)
}
::std::string* SessionModule::mutable_execution_platform() {
  
  // @@protoc_insertion_point(field_mutable:xla.SessionModule.execution_platform)
  return execution_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionModule::release_execution_platform() {
  // @@protoc_insertion_point(field_release:xla.SessionModule.execution_platform)
  
  return execution_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionModule::set_allocated_execution_platform(::std::string* execution_platform) {
  if (execution_platform != NULL) {
    
  } else {
    
  }
  execution_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execution_platform);
  // @@protoc_insertion_point(field_set_allocated:xla.SessionModule.execution_platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)
