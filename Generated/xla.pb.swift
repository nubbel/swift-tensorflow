/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/compiler/xla/xla.proto
 *
 */

// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// These settings control how XLA compiles and/or runs code.  Not all settings
/// will have an effect on every platform.
///
/// When adding new fields, keep in mind that boolean fields default to false.
struct Xla_ExecutionOptions: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecutionOptions"

  /// When false, "unsafe" mathematical optimizations are enabled.  These
  /// transformations include but are not limited to:
  ///
  ///  - Reducing the precision of operations (e.g. using an approximate sin
  ///    function, or transforming x/y into x * (1/y)).
  ///  - Assuming that operations never produce or consume NaN or +/- Inf.
  ///  - Assuming that +0 and -0 are indistinguishable.
  var disableFastMath: Bool {
    get {return _storage._disableFastMath}
    set {_uniqueStorage()._disableFastMath = newValue}
  }

  /// This optional field's layout is used as a hint when storing the output of
  /// this computation.  Subsequent transfers of this output array to the client
  /// may be faster when using this layout.
  ///
  /// We use a Shape here to accommodate computations that return a tuple.
  var shapeWithOutputLayout: Xla_Shape {
    get {return _storage._shapeWithOutputLayout ?? Xla_Shape()}
    set {_uniqueStorage()._shapeWithOutputLayout = newValue}
  }
  var hasShapeWithOutputLayout: Bool {
    return _storage._shapeWithOutputLayout != nil
  }
  mutating func clearShapeWithOutputLayout() {
    _storage._shapeWithOutputLayout = nil
  }

  /// Used to seed random-number generators used in this computation.  If this is
  /// 0, we generate a seed ourselves.
  ///
  /// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
  var seed: UInt64 {
    get {return _storage._seed}
    set {_uniqueStorage()._seed = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._disableFastMath)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shapeWithOutputLayout)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._seed)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._disableFastMath != false {
        try visitor.visitSingularBoolField(value: _storage._disableFastMath, fieldNumber: 1)
      }
      if let v = _storage._shapeWithOutputLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._seed != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._seed, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_SnapshotComputationRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SnapshotComputationRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_SnapshotComputationResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SnapshotComputationResponse"

  var module: Xla_SessionModule {
    get {return _storage._module ?? Xla_SessionModule()}
    set {_uniqueStorage()._module = newValue}
  }
  var hasModule: Bool {
    return _storage._module != nil
  }
  mutating func clearModule() {
    _storage._module = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._module)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._module {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_LoadComputationSnapshotRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoadComputationSnapshotRequest"

  var module: Xla_SessionModule {
    get {return _storage._module ?? Xla_SessionModule()}
    set {_uniqueStorage()._module = newValue}
  }
  var hasModule: Bool {
    return _storage._module != nil
  }
  mutating func clearModule() {
    _storage._module = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._module)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._module {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_LoadComputationSnapshotResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoadComputationSnapshotResponse"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_GetDeviceHandlesRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetDeviceHandlesRequest"

  var deviceCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.deviceCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceCount != 0 {
      try visitor.visitSingularInt64Field(value: self.deviceCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_GetDeviceHandlesResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetDeviceHandlesResponse"

  var deviceHandles: [Xla_DeviceHandle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.deviceHandles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceHandles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deviceHandles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_TransferToClientRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToClientRequest"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  /// This optional field directs the service to return the literal in this
  /// layout. A shape is used to hold the layout to accommodate tuples.
  var shapeWithLayout: Xla_Shape {
    get {return _storage._shapeWithLayout ?? Xla_Shape()}
    set {_uniqueStorage()._shapeWithLayout = newValue}
  }
  var hasShapeWithLayout: Bool {
    return _storage._shapeWithLayout != nil
  }
  mutating func clearShapeWithLayout() {
    _storage._shapeWithLayout = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shapeWithLayout)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._shapeWithLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToClientResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToClientResponse"

  var literal: Xla_Literal {
    get {return _storage._literal ?? Xla_Literal()}
    set {_uniqueStorage()._literal = newValue}
  }
  var hasLiteral: Bool {
    return _storage._literal != nil
  }
  mutating func clearLiteral() {
    _storage._literal = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToServerRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToServerRequest"

  var literal: Xla_Literal {
    get {return _storage._literal ?? Xla_Literal()}
    set {_uniqueStorage()._literal = newValue}
  }
  var hasLiteral: Bool {
    return _storage._literal != nil
  }
  mutating func clearLiteral() {
    _storage._literal = nil
  }

  var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  var hasDeviceHandle: Bool {
    return _storage._deviceHandle != nil
  }
  mutating func clearDeviceHandle() {
    _storage._deviceHandle = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToServerResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToServerResponse"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToServerInProcessRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToServerInProcessRequest"

  var buffer: UInt64 {
    get {return _storage._buffer}
    set {_uniqueStorage()._buffer = newValue}
  }

  var shape: Xla_Shape {
    get {return _storage._shape ?? Xla_Shape()}
    set {_uniqueStorage()._shape = newValue}
  }
  var hasShape: Bool {
    return _storage._shape != nil
  }
  mutating func clearShape() {
    _storage._shape = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._buffer)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shape)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._buffer != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._buffer, fieldNumber: 1)
      }
      if let v = _storage._shape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToServerInProcessResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToServerInProcessResponse"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToClientInProcessRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToClientInProcessRequest"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var buffer: UInt64 {
    get {return _storage._buffer}
    set {_uniqueStorage()._buffer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._buffer)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._buffer != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._buffer, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToClientInProcessResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToClientInProcessResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_TransferToInfeedRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToInfeedRequest"

  var literal: Xla_Literal {
    get {return _storage._literal ?? Xla_Literal()}
    set {_uniqueStorage()._literal = newValue}
  }
  var hasLiteral: Bool {
    return _storage._literal != nil
  }
  mutating func clearLiteral() {
    _storage._literal = nil
  }

  var replicaId: Int64 {
    get {return _storage._replicaId}
    set {_uniqueStorage()._replicaId = newValue}
  }

  var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  var hasDeviceHandle: Bool {
    return _storage._deviceHandle != nil
  }
  mutating func clearDeviceHandle() {
    _storage._deviceHandle = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._replicaId)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._replicaId != 0 {
        try visitor.visitSingularInt64Field(value: _storage._replicaId, fieldNumber: 2)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferToInfeedResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferToInfeedResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_TransferFromOutfeedRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferFromOutfeedRequest"

  /// This optional field directs the service to return the literal in this
  /// layout. A shape is used to hold the layout to accommodate tuples.
  var shapeWithLayout: Xla_Shape {
    get {return _storage._shapeWithLayout ?? Xla_Shape()}
    set {_uniqueStorage()._shapeWithLayout = newValue}
  }
  var hasShapeWithLayout: Bool {
    return _storage._shapeWithLayout != nil
  }
  mutating func clearShapeWithLayout() {
    _storage._shapeWithLayout = nil
  }

  var replicaId: Int64 {
    get {return _storage._replicaId}
    set {_uniqueStorage()._replicaId = newValue}
  }

  var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  var hasDeviceHandle: Bool {
    return _storage._deviceHandle != nil
  }
  mutating func clearDeviceHandle() {
    _storage._deviceHandle = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._shapeWithLayout)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._replicaId)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._shapeWithLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._replicaId != 0 {
        try visitor.visitSingularInt64Field(value: _storage._replicaId, fieldNumber: 2)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_TransferFromOutfeedResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransferFromOutfeedResponse"

  var literal: Xla_Literal {
    get {return _storage._literal ?? Xla_Literal()}
    set {_uniqueStorage()._literal = newValue}
  }
  var hasLiteral: Bool {
    return _storage._literal != nil
  }
  mutating func clearLiteral() {
    _storage._literal = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ResetDeviceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResetDeviceRequest"

  var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  var hasDeviceHandle: Bool {
    return _storage._deviceHandle != nil
  }
  mutating func clearDeviceHandle() {
    _storage._deviceHandle = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ResetDeviceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResetDeviceResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ComputationStatsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputationStatsRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ComputationStatsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputationStatsResponse"

  var stats: Xla_ComputationStats {
    get {return _storage._stats ?? Xla_ComputationStats()}
    set {_uniqueStorage()._stats = newValue}
  }
  var hasStats: Bool {
    return _storage._stats != nil
  }
  mutating func clearStats() {
    _storage._stats = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._stats)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._stats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ComputationRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputationRequest"

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ComputationResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputationResponse"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_CreateChannelHandleRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateChannelHandleRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_CreateChannelHandleResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateChannelHandleResponse"

  var channel: Xla_ChannelHandle {
    get {return _storage._channel ?? Xla_ChannelHandle()}
    set {_uniqueStorage()._channel = newValue}
  }
  var hasChannel: Bool {
    return _storage._channel != nil
  }
  mutating func clearChannel() {
    _storage._channel = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channel)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_UnregisterRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnregisterRequest"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_UnregisterResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnregisterResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_SetReturnValueRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SetReturnValueRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var operand: Xla_ComputationDataHandle {
    get {return _storage._operand ?? Xla_ComputationDataHandle()}
    set {_uniqueStorage()._operand = newValue}
  }
  var hasOperand: Bool {
    return _storage._operand != nil
  }
  mutating func clearOperand() {
    _storage._operand = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._operand)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_SetReturnValueResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SetReturnValueResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ExecuteRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var arguments: [Xla_GlobalDataHandle] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  /// This optional field specifies a particular device to run the computation.
  /// If not provided, the default device will be chosen.
  var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  var hasDeviceHandle: Bool {
    return _storage._deviceHandle != nil
  }
  mutating func clearDeviceHandle() {
    _storage._deviceHandle = nil
  }

  /// Options that affect how XLA compiles and runs code to service this request.
  var executionOptions: Xla_ExecutionOptions {
    get {return _storage._executionOptions ?? Xla_ExecutionOptions()}
    set {_uniqueStorage()._executionOptions = newValue}
  }
  var hasExecutionOptions: Bool {
    return _storage._executionOptions != nil
  }
  mutating func clearExecutionOptions() {
    _storage._executionOptions = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._executionOptions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._executionOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ExecuteParallelRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteParallelRequest"

  var requests: [Xla_ExecuteRequest] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.requests)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ExecuteResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteResponse"

  var output: Xla_GlobalDataHandle {
    get {return _storage._output ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._output = newValue}
  }
  var hasOutput: Bool {
    return _storage._output != nil
  }
  mutating func clearOutput() {
    _storage._output = nil
  }

  var profile: Xla_ExecutionProfile {
    get {return _storage._profile ?? Xla_ExecutionProfile()}
    set {_uniqueStorage()._profile = newValue}
  }
  var hasProfile: Bool {
    return _storage._profile != nil
  }
  mutating func clearProfile() {
    _storage._profile = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._output)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._profile)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ExecuteParallelResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteParallelResponse"

  var responses: [Xla_ExecuteResponse] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.responses)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ExecuteAsyncRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteAsyncRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var arguments: [Xla_GlobalDataHandle] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  /// Options that affect how XLA compiles and runs code to service this request.
  var executionOptions: Xla_ExecutionOptions {
    get {return _storage._executionOptions ?? Xla_ExecutionOptions()}
    set {_uniqueStorage()._executionOptions = newValue}
  }
  var hasExecutionOptions: Bool {
    return _storage._executionOptions != nil
  }
  mutating func clearExecutionOptions() {
    _storage._executionOptions = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._executionOptions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
      if let v = _storage._executionOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ExecuteAsyncResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExecuteAsyncResponse"

  /// A handle to the execution launched asynchronously.
  var execution: Xla_ExecutionHandle {
    get {return _storage._execution ?? Xla_ExecutionHandle()}
    set {_uniqueStorage()._execution = newValue}
  }
  var hasExecution: Bool {
    return _storage._execution != nil
  }
  mutating func clearExecution() {
    _storage._execution = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._execution)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._execution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_WaitForExecutionRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WaitForExecutionRequest"

  var execution: Xla_ExecutionHandle {
    get {return _storage._execution ?? Xla_ExecutionHandle()}
    set {_uniqueStorage()._execution = newValue}
  }
  var hasExecution: Bool {
    return _storage._execution != nil
  }
  mutating func clearExecution() {
    _storage._execution = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._execution)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._execution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_WaitForExecutionResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WaitForExecutionResponse"

  var output: Xla_GlobalDataHandle {
    get {return _storage._output ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._output = newValue}
  }
  var hasOutput: Bool {
    return _storage._output != nil
  }
  mutating func clearOutput() {
    _storage._output = nil
  }

  var profile: Xla_ExecutionProfile {
    get {return _storage._profile ?? Xla_ExecutionProfile()}
    set {_uniqueStorage()._profile = newValue}
  }
  var hasProfile: Bool {
    return _storage._profile != nil
  }
  mutating func clearProfile() {
    _storage._profile = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._output)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._profile)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_IsConstantRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IsConstantRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var operand: Xla_ComputationDataHandle {
    get {return _storage._operand ?? Xla_ComputationDataHandle()}
    set {_uniqueStorage()._operand = newValue}
  }
  var hasOperand: Bool {
    return _storage._operand != nil
  }
  mutating func clearOperand() {
    _storage._operand = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._operand)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_IsConstantResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IsConstantResponse"

  var isConstant: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isConstant)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isConstant != false {
      try visitor.visitSingularBoolField(value: self.isConstant, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_ComputeConstantRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputeConstantRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var operand: Xla_ComputationDataHandle {
    get {return _storage._operand ?? Xla_ComputationDataHandle()}
    set {_uniqueStorage()._operand = newValue}
  }
  var hasOperand: Bool {
    return _storage._operand != nil
  }
  mutating func clearOperand() {
    _storage._operand = nil
  }

  var outputLayout: Xla_Layout {
    get {return _storage._outputLayout ?? Xla_Layout()}
    set {_uniqueStorage()._outputLayout = newValue}
  }
  var hasOutputLayout: Bool {
    return _storage._outputLayout != nil
  }
  mutating func clearOutputLayout() {
    _storage._outputLayout = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._operand)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._outputLayout)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._outputLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_ComputeConstantResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ComputeConstantResponse"

  var output: Xla_GlobalDataHandle {
    get {return _storage._output ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._output = newValue}
  }
  var hasOutput: Bool {
    return _storage._output != nil
  }
  mutating func clearOutput() {
    _storage._output = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._output)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_DeconstructTupleRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeconstructTupleRequest"

  var tupleHandle: Xla_GlobalDataHandle {
    get {return _storage._tupleHandle ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._tupleHandle = newValue}
  }
  var hasTupleHandle: Bool {
    return _storage._tupleHandle != nil
  }
  mutating func clearTupleHandle() {
    _storage._tupleHandle = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tupleHandle)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tupleHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_DeconstructTupleResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeconstructTupleResponse"

  var elementHandles: [Xla_GlobalDataHandle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.elementHandles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elementHandles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elementHandles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_LoadDataRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoadDataRequest"

  /// Describes the path of the ColumnIO tablet to load.
  var columnioTabletPath: String {
    get {return _storage._columnioTabletPath}
    set {_uniqueStorage()._columnioTabletPath = newValue}
  }

  /// Describes the field to load within the ColumnIO tablet.
  var columnioField: String {
    get {return _storage._columnioField}
    set {_uniqueStorage()._columnioField = newValue}
  }

  /// Individual element shape, excluding rows.
  var elementShape: Xla_Shape {
    get {return _storage._elementShape ?? Xla_Shape()}
    set {_uniqueStorage()._elementShape = newValue}
  }
  var hasElementShape: Bool {
    return _storage._elementShape != nil
  }
  mutating func clearElementShape() {
    _storage._elementShape = nil
  }

  /// Warning: ColumnIO does not support random-access, so use offset with
  /// caution in performance-critical scenarios.
  var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// Maximum number of elements (with shape element_shape) to load.
  var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  /// If more than one item is requested (via limit > 1), then this request
  /// attribute zips together the produced vectors.
  var zip: Bool {
    get {return _storage._zip}
    set {_uniqueStorage()._zip = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._columnioTabletPath)
        case 2: try decoder.decodeSingularStringField(value: &_storage._columnioField)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._elementShape)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._offset)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._limit)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._zip)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._columnioTabletPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._columnioTabletPath, fieldNumber: 1)
      }
      if !_storage._columnioField.isEmpty {
        try visitor.visitSingularStringField(value: _storage._columnioField, fieldNumber: 2)
      }
      if let v = _storage._elementShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 4)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 5)
      }
      if _storage._zip != false {
        try visitor.visitSingularBoolField(value: _storage._zip, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_LoadDataResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoadDataResponse"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var dataShape: Xla_Shape {
    get {return _storage._dataShape ?? Xla_Shape()}
    set {_uniqueStorage()._dataShape = newValue}
  }
  var hasDataShape: Bool {
    return _storage._dataShape != nil
  }
  mutating func clearDataShape() {
    _storage._dataShape = nil
  }

  var availableRows: Int64 {
    get {return _storage._availableRows}
    set {_uniqueStorage()._availableRows = newValue}
  }

  var rowsLoaded: Int64 {
    get {return _storage._rowsLoaded}
    set {_uniqueStorage()._rowsLoaded = newValue}
  }

  var nanoseconds: Int64 {
    get {return _storage._nanoseconds}
    set {_uniqueStorage()._nanoseconds = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._dataShape)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._availableRows)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._rowsLoaded)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._nanoseconds)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._dataShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._availableRows != 0 {
        try visitor.visitSingularInt64Field(value: _storage._availableRows, fieldNumber: 3)
      }
      if _storage._rowsLoaded != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rowsLoaded, fieldNumber: 4)
      }
      if _storage._nanoseconds != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nanoseconds, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_SpecializeRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SpecializeRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var arguments: [Xla_GlobalDataHandle] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_SpecializeResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SpecializeResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Xla_GetShapeRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetShapeRequest"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_GetShapeResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetShapeResponse"

  var shape: Xla_Shape {
    get {return _storage._shape ?? Xla_Shape()}
    set {_uniqueStorage()._shape = newValue}
  }
  var hasShape: Bool {
    return _storage._shape != nil
  }
  mutating func clearShape() {
    _storage._shape = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._shape)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._shape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_GetComputationShapeRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetComputationShapeRequest"

  var computation: Xla_ComputationHandle {
    get {return _storage._computation ?? Xla_ComputationHandle()}
    set {_uniqueStorage()._computation = newValue}
  }
  var hasComputation: Bool {
    return _storage._computation != nil
  }
  mutating func clearComputation() {
    _storage._computation = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_GetComputationShapeResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetComputationShapeResponse"

  var programShape: Xla_ProgramShape {
    get {return _storage._programShape ?? Xla_ProgramShape()}
    set {_uniqueStorage()._programShape = newValue}
  }
  var hasProgramShape: Bool {
    return _storage._programShape != nil
  }
  mutating func clearProgramShape() {
    _storage._programShape = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._programShape)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._programShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_UnpackRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnpackRequest"

  var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Xla_UnpackResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnpackResponse"

  var tiedData: [Xla_GlobalDataHandle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tiedData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tiedData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiedData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xla"

extension Xla_ExecutionOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "disable_fast_math"),
    2: .standard(proto: "shape_with_output_layout"),
    3: .same(proto: "seed"),
  ]

  fileprivate class _StorageClass {
    var _disableFastMath: Bool = false
    var _shapeWithOutputLayout: Xla_Shape? = nil
    var _seed: UInt64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _disableFastMath = source._disableFastMath
      _shapeWithOutputLayout = source._shapeWithOutputLayout
      _seed = source._seed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ExecutionOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._disableFastMath != other_storage._disableFastMath {return false}
        if _storage._shapeWithOutputLayout != other_storage._shapeWithOutputLayout {return false}
        if _storage._seed != other_storage._seed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SnapshotComputationRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_SnapshotComputationRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SnapshotComputationResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
  ]

  fileprivate class _StorageClass {
    var _module: Xla_SessionModule? = nil

    init() {}

    init(copying source: _StorageClass) {
      _module = source._module
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_SnapshotComputationResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._module != other_storage._module {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_LoadComputationSnapshotRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
  ]

  fileprivate class _StorageClass {
    var _module: Xla_SessionModule? = nil

    init() {}

    init(copying source: _StorageClass) {
      _module = source._module
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_LoadComputationSnapshotRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._module != other_storage._module {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_LoadComputationSnapshotResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_LoadComputationSnapshotResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetDeviceHandlesRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_count"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_GetDeviceHandlesRequest) -> Bool {
    if self.deviceCount != other.deviceCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetDeviceHandlesResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_handles"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_GetDeviceHandlesResponse) -> Bool {
    if self.deviceHandles != other.deviceHandles {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "shape_with_layout"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil
    var _shapeWithLayout: Xla_Shape? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _shapeWithLayout = source._shapeWithLayout
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToClientRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        if _storage._shapeWithLayout != other_storage._shapeWithLayout {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_Literal? = nil

    init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToClientResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._literal != other_storage._literal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
    2: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_Literal? = nil
    var _deviceHandle: Xla_DeviceHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToServerRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._literal != other_storage._literal {return false}
        if _storage._deviceHandle != other_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToServerResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerInProcessRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buffer"),
    2: .same(proto: "shape"),
  ]

  fileprivate class _StorageClass {
    var _buffer: UInt64 = 0
    var _shape: Xla_Shape? = nil

    init() {}

    init(copying source: _StorageClass) {
      _buffer = source._buffer
      _shape = source._shape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToServerInProcessRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._buffer != other_storage._buffer {return false}
        if _storage._shape != other_storage._shape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerInProcessResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToServerInProcessResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientInProcessRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "buffer"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil
    var _buffer: UInt64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _buffer = source._buffer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToClientInProcessRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        if _storage._buffer != other_storage._buffer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientInProcessResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_TransferToClientInProcessResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToInfeedRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
    2: .standard(proto: "replica_id"),
    3: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_Literal? = nil
    var _replicaId: Int64 = 0
    var _deviceHandle: Xla_DeviceHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
      _replicaId = source._replicaId
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferToInfeedRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._literal != other_storage._literal {return false}
        if _storage._replicaId != other_storage._replicaId {return false}
        if _storage._deviceHandle != other_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToInfeedResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_TransferToInfeedResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferFromOutfeedRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shape_with_layout"),
    2: .standard(proto: "replica_id"),
    3: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _shapeWithLayout: Xla_Shape? = nil
    var _replicaId: Int64 = 0
    var _deviceHandle: Xla_DeviceHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _shapeWithLayout = source._shapeWithLayout
      _replicaId = source._replicaId
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferFromOutfeedRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._shapeWithLayout != other_storage._shapeWithLayout {return false}
        if _storage._replicaId != other_storage._replicaId {return false}
        if _storage._deviceHandle != other_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_TransferFromOutfeedResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_Literal? = nil

    init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_TransferFromOutfeedResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._literal != other_storage._literal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ResetDeviceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _deviceHandle: Xla_DeviceHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ResetDeviceRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._deviceHandle != other_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ResetDeviceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_ResetDeviceResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationStatsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ComputationStatsRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationStatsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stats"),
  ]

  fileprivate class _StorageClass {
    var _stats: Xla_ComputationStats? = nil

    init() {}

    init(copying source: _StorageClass) {
      _stats = source._stats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ComputationStatsResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._stats != other_storage._stats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_ComputationRequest) -> Bool {
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ComputationResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_CreateChannelHandleRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_CreateChannelHandleRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_CreateChannelHandleResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
  ]

  fileprivate class _StorageClass {
    var _channel: Xla_ChannelHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _channel = source._channel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_CreateChannelHandleResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._channel != other_storage._channel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_UnregisterRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_UnregisterRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_UnregisterResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_UnregisterResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SetReturnValueRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "operand"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _operand: Xla_ComputationDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _operand = source._operand
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_SetReturnValueRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._operand != other_storage._operand {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SetReturnValueResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_SetReturnValueResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "arguments"),
    5: .standard(proto: "device_handle"),
    6: .standard(proto: "execution_options"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _arguments: [Xla_GlobalDataHandle] = []
    var _deviceHandle: Xla_DeviceHandle? = nil
    var _executionOptions: Xla_ExecutionOptions? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _arguments = source._arguments
      _deviceHandle = source._deviceHandle
      _executionOptions = source._executionOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._arguments != other_storage._arguments {return false}
        if _storage._deviceHandle != other_storage._deviceHandle {return false}
        if _storage._executionOptions != other_storage._executionOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteParallelRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteParallelRequest) -> Bool {
    if self.requests != other.requests {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
    2: .same(proto: "profile"),
  ]

  fileprivate class _StorageClass {
    var _output: Xla_GlobalDataHandle? = nil
    var _profile: Xla_ExecutionProfile? = nil

    init() {}

    init(copying source: _StorageClass) {
      _output = source._output
      _profile = source._profile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._output != other_storage._output {return false}
        if _storage._profile != other_storage._profile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteParallelResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteParallelResponse) -> Bool {
    if self.responses != other.responses {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteAsyncRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "arguments"),
    6: .standard(proto: "execution_options"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _arguments: [Xla_GlobalDataHandle] = []
    var _executionOptions: Xla_ExecutionOptions? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _arguments = source._arguments
      _executionOptions = source._executionOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteAsyncRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._arguments != other_storage._arguments {return false}
        if _storage._executionOptions != other_storage._executionOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteAsyncResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "execution"),
  ]

  fileprivate class _StorageClass {
    var _execution: Xla_ExecutionHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _execution = source._execution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ExecuteAsyncResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._execution != other_storage._execution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_WaitForExecutionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "execution"),
  ]

  fileprivate class _StorageClass {
    var _execution: Xla_ExecutionHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _execution = source._execution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_WaitForExecutionRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._execution != other_storage._execution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_WaitForExecutionResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
    2: .same(proto: "profile"),
  ]

  fileprivate class _StorageClass {
    var _output: Xla_GlobalDataHandle? = nil
    var _profile: Xla_ExecutionProfile? = nil

    init() {}

    init(copying source: _StorageClass) {
      _output = source._output
      _profile = source._profile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_WaitForExecutionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._output != other_storage._output {return false}
        if _storage._profile != other_storage._profile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_IsConstantRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "operand"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _operand: Xla_ComputationDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _operand = source._operand
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_IsConstantRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._operand != other_storage._operand {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_IsConstantResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_constant"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_IsConstantResponse) -> Bool {
    if self.isConstant != other.isConstant {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputeConstantRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "operand"),
    3: .standard(proto: "output_layout"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _operand: Xla_ComputationDataHandle? = nil
    var _outputLayout: Xla_Layout? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _operand = source._operand
      _outputLayout = source._outputLayout
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ComputeConstantRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._operand != other_storage._operand {return false}
        if _storage._outputLayout != other_storage._outputLayout {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_ComputeConstantResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
  ]

  fileprivate class _StorageClass {
    var _output: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _output = source._output
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_ComputeConstantResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._output != other_storage._output {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_DeconstructTupleRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "tuple_handle"),
  ]

  fileprivate class _StorageClass {
    var _tupleHandle: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _tupleHandle = source._tupleHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_DeconstructTupleRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._tupleHandle != other_storage._tupleHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_DeconstructTupleResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "element_handles"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_DeconstructTupleResponse) -> Bool {
    if self.elementHandles != other.elementHandles {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_LoadDataRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "columnio_tablet_path"),
    2: .standard(proto: "columnio_field"),
    3: .standard(proto: "element_shape"),
    4: .same(proto: "offset"),
    5: .same(proto: "limit"),
    6: .same(proto: "zip"),
  ]

  fileprivate class _StorageClass {
    var _columnioTabletPath: String = String()
    var _columnioField: String = String()
    var _elementShape: Xla_Shape? = nil
    var _offset: Int64 = 0
    var _limit: Int64 = 0
    var _zip: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _columnioTabletPath = source._columnioTabletPath
      _columnioField = source._columnioField
      _elementShape = source._elementShape
      _offset = source._offset
      _limit = source._limit
      _zip = source._zip
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_LoadDataRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._columnioTabletPath != other_storage._columnioTabletPath {return false}
        if _storage._columnioField != other_storage._columnioField {return false}
        if _storage._elementShape != other_storage._elementShape {return false}
        if _storage._offset != other_storage._offset {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._zip != other_storage._zip {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_LoadDataResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "data_shape"),
    3: .standard(proto: "available_rows"),
    4: .standard(proto: "rows_loaded"),
    5: .same(proto: "nanoseconds"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil
    var _dataShape: Xla_Shape? = nil
    var _availableRows: Int64 = 0
    var _rowsLoaded: Int64 = 0
    var _nanoseconds: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _dataShape = source._dataShape
      _availableRows = source._availableRows
      _rowsLoaded = source._rowsLoaded
      _nanoseconds = source._nanoseconds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_LoadDataResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        if _storage._dataShape != other_storage._dataShape {return false}
        if _storage._availableRows != other_storage._availableRows {return false}
        if _storage._rowsLoaded != other_storage._rowsLoaded {return false}
        if _storage._nanoseconds != other_storage._nanoseconds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SpecializeRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "arguments"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil
    var _arguments: [Xla_GlobalDataHandle] = []

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _arguments = source._arguments
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_SpecializeRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        if _storage._arguments != other_storage._arguments {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_SpecializeResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Xla_SpecializeResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetShapeRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_GetShapeRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetShapeResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
  ]

  fileprivate class _StorageClass {
    var _shape: Xla_Shape? = nil

    init() {}

    init(copying source: _StorageClass) {
      _shape = source._shape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_GetShapeResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._shape != other_storage._shape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetComputationShapeRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_ComputationHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_GetComputationShapeRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._computation != other_storage._computation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_GetComputationShapeResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "program_shape"),
  ]

  fileprivate class _StorageClass {
    var _programShape: Xla_ProgramShape? = nil

    init() {}

    init(copying source: _StorageClass) {
      _programShape = source._programShape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_GetComputationShapeResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._programShape != other_storage._programShape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_UnpackRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Xla_UnpackRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Xla_UnpackResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tied_data"),
  ]

  func _protobuf_generated_isEqualTo(other: Xla_UnpackResponse) -> Bool {
    if self.tiedData != other.tiedData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
