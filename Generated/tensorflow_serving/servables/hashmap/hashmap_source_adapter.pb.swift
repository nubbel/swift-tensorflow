/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/servables/hashmap/hashmap_source_adapter.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// Config proto for HashmapSourceAdapter.
public struct Tensorflow_Serving_HashmapSourceAdapterConfig: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".HashmapSourceAdapterConfig"

  public var format: Tensorflow_Serving_HashmapSourceAdapterConfig.Format = Tensorflow_Serving_HashmapSourceAdapterConfig.Format.simpleCsv

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The format used by the file containing a serialized hashmap.
  public enum Format: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// A simple kind of CSV text file of the form:
    ///  key0,value0\n
    ///  key1,value1\n
    ///  ...
    case simpleCsv // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .simpleCsv
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .simpleCsv
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .simpleCsv: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.format != Tensorflow_Serving_HashmapSourceAdapterConfig.Format.simpleCsv {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_HashmapSourceAdapterConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "format"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_HashmapSourceAdapterConfig) -> Bool {
    if self.format != other.format {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_HashmapSourceAdapterConfig.Format: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIMPLE_CSV"),
  ]
}
