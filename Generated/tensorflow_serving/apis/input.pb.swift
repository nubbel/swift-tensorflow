/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/apis/input.proto
 *
 */

// Input used in serving APIs.  Based on the tensorflow.Example family of
// feature representations.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// Specifies one or more fully independent input Examples.
/// See examples at:
///     https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/example/example.proto
public struct Tensorflow_Serving_ExampleList: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ExampleList"

  public var examples: [Tensorflow_Example] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.examples)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.examples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.examples, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies one or more independent input Examples, with a common context
/// Example.
///
/// The common use case for context is to cleanly and optimally specify some
/// features that are common across multiple examples.
///
/// See example below with a search query as the context and multiple restaurants
/// to perform some inference on.
///
/// context: {
///   feature: {
///     key  : "query"
///     value: {
///       bytes_list: {
///         value: [ "pizza" ]
///       }
///     }
///   }
/// }
/// examples: {
///   feature: {
///     key  : "cuisine"
///     value: {
///       bytes_list: {
///         value: [ "Pizzeria" ]
///       }
///     }
///   }
/// }
/// examples: {
///   feature: {
///     key  : "cuisine"
///     value: {
///       bytes_list: {
///         value: [ "Taqueria" ]
///       }
///     }
///   }
/// }
///
/// Implementations of ExampleListWithContext merge the context Example into each
/// of the Examples. Note that feature keys must not be duplicated between the
/// Examples and context Example, or the behavior is undefined.
///
/// See also:
///     tensorflow/core/example/example.proto
///     https://developers.google.com/protocol-buffers/docs/proto3#maps
public struct Tensorflow_Serving_ExampleListWithContext: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ExampleListWithContext"

  public var examples: [Tensorflow_Example] {
    get {return _storage._examples}
    set {_uniqueStorage()._examples = newValue}
  }

  public var context: Tensorflow_Example {
    get {return _storage._context ?? Tensorflow_Example()}
    set {_uniqueStorage()._context = newValue}
  }
  public var hasContext: Bool {
    return _storage._context != nil
  }
  public mutating func clearContext() {
    _storage._context = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._examples)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._examples.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._examples, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

public struct Tensorflow_Serving_Input: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Input"

  public var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  public var exampleList: Tensorflow_Serving_ExampleList {
    get {
      if case .exampleList(let v)? = _storage._kind {return v}
      return Tensorflow_Serving_ExampleList()
    }
    set {_uniqueStorage()._kind = .exampleList(newValue)}
  }

  public var exampleListWithContext: Tensorflow_Serving_ExampleListWithContext {
    get {
      if case .exampleListWithContext(let v)? = _storage._kind {return v}
      return Tensorflow_Serving_ExampleListWithContext()
    }
    set {_uniqueStorage()._kind = .exampleListWithContext(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case exampleList(Tensorflow_Serving_ExampleList)
    case exampleListWithContext(Tensorflow_Serving_ExampleListWithContext)

    public static func ==(lhs: Tensorflow_Serving_Input.OneOf_Kind, rhs: Tensorflow_Serving_Input.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.exampleList(let l), .exampleList(let r)): return l == r
      case (.exampleListWithContext(let l), .exampleListWithContext(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1, 2:
          if _storage._kind != nil {
            try decoder.handleConflictingOneOf()
          }
          _storage._kind = try Tensorflow_Serving_Input.OneOf_Kind(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._kind?.traverse(visitor: &visitor)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_ExampleList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "examples"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_ExampleList) -> Bool {
    if self.examples != other.examples {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_ExampleListWithContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "examples"),
    2: .same(proto: "context"),
  ]

  fileprivate class _StorageClass {
    var _examples: [Tensorflow_Example] = []
    var _context: Tensorflow_Example? = nil

    init() {}

    init(copying source: _StorageClass) {
      _examples = source._examples
      _context = source._context
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_ExampleListWithContext) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._examples != other_storage._examples {return false}
        if _storage._context != other_storage._context {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_Input: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "example_list"),
    2: .standard(proto: "example_list_with_context"),
  ]

  fileprivate class _StorageClass {
    var _kind: Tensorflow_Serving_Input.OneOf_Kind?

    init() {}

    init(copying source: _StorageClass) {
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_Input) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._kind != other_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_Input.OneOf_Kind {
  fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1:
      var value: Tensorflow_Serving_ExampleList?
      try decoder.decodeSingularMessageField(value: &value)
      if let value = value {
        self = .exampleList(value)
        return
      }
    case 2:
      var value: Tensorflow_Serving_ExampleListWithContext?
      try decoder.decodeSingularMessageField(value: &value)
      if let value = value {
        self = .exampleListWithContext(value)
        return
      }
    default:
      break
    }
    return nil
  }

  fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self {
    case .exampleList(let v):
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .exampleListWithContext(let v):
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
  }
}
