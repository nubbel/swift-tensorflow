/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/apis/predict.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// PredictRequest specifies which TensorFlow model to run, as well as
/// how inputs are mapped to tensors and how outputs are filtered before
/// returning to user.
public struct Tensorflow_Serving_PredictRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PredictRequest"

  /// Model Specification.
  public var modelSpec: Tensorflow_Serving_ModelSpec {
    get {return _storage._modelSpec ?? Tensorflow_Serving_ModelSpec()}
    set {_uniqueStorage()._modelSpec = newValue}
  }
  public var hasModelSpec: Bool {
    return _storage._modelSpec != nil
  }
  public mutating func clearModelSpec() {
    _storage._modelSpec = nil
  }

  /// Input tensors.
  /// Names of input tensor are alias names. The mapping from aliases to real
  /// input tensor names is expected to be stored as named generic signature
  /// under the key "inputs" in the model export.
  /// Each alias listed in a generic signature named "inputs" should be provided
  /// exactly once in order to run the prediction.
  public var inputs: Dictionary<String,Tensorflow_TensorProto> {
    get {return _storage._inputs}
    set {_uniqueStorage()._inputs = newValue}
  }

  /// Output filter.
  /// Names specified are alias names. The mapping from aliases to real output
  /// tensor names is expected to be stored as named generic signature under
  /// the key "outputs" in the model export.
  /// Only tensors specified here will be run/fetched and returned, with the
  /// exception that when none is specified, all tensors specified in the
  /// named signature will be run/fetched and returned.
  public var outputFilter: [String] {
    get {return _storage._outputFilter}
    set {_uniqueStorage()._outputFilter = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._modelSpec)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_TensorProto>.self, value: &_storage._inputs)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._outputFilter)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._modelSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._inputs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_TensorProto>.self, value: _storage._inputs, fieldNumber: 2)
      }
      if !_storage._outputFilter.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._outputFilter, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// Response for PredictRequest on successful run.
public struct Tensorflow_Serving_PredictResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PredictResponse"

  /// Output tensors.
  public var outputs: Dictionary<String,Tensorflow_TensorProto> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_TensorProto>.self, value: &self.outputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_TensorProto>.self, value: self.outputs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_PredictRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "model_spec"),
    2: .same(proto: "inputs"),
    3: .standard(proto: "output_filter"),
  ]

  fileprivate class _StorageClass {
    var _modelSpec: Tensorflow_Serving_ModelSpec? = nil
    var _inputs: Dictionary<String,Tensorflow_TensorProto> = [:]
    var _outputFilter: [String] = []

    init() {}

    init(copying source: _StorageClass) {
      _modelSpec = source._modelSpec
      _inputs = source._inputs
      _outputFilter = source._outputFilter
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_PredictRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._modelSpec != other_storage._modelSpec {return false}
        if _storage._inputs != other_storage._inputs {return false}
        if _storage._outputFilter != other_storage._outputFilter {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_PredictResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_PredictResponse) -> Bool {
    if self.outputs != other.outputs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
