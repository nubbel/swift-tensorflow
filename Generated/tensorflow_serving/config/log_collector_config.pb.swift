/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/config/log_collector_config.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

public struct Tensorflow_Serving_LogCollectorConfig: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LogCollectorConfig"

  /// Identifies the type of the LogCollector we will use to collect these logs.
  public var type: String = String()

  /// The prefix to use for the filenames of the logs.
  public var filenamePrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.filenamePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.filenamePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.filenamePrefix, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_LogCollectorConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "filename_prefix"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_LogCollectorConfig) -> Bool {
    if self.type != other.type {return false}
    if self.filenamePrefix != other.filenamePrefix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
