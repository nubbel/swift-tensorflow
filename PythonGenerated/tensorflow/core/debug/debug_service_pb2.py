# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tensorflow/core/debug/debug_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from tensorflow.core.util import event_pb2 as tensorflow_dot_core_dot_util_dot_event__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='tensorflow/core/debug/debug_service.proto',
  package='tensorflow',
  syntax='proto3',
  serialized_pb=_b('\n)tensorflow/core/debug/debug_service.proto\x12\ntensorflow\x1a tensorflow/core/util/event.proto\"\x8d\x02\n\nEventReply\x12I\n\x16\x64\x65\x62ug_op_state_changes\x18\x01 \x03(\x0b\x32).tensorflow.EventReply.DebugOpStateChange\x1a\xb3\x01\n\x12\x44\x65\x62ugOpStateChange\x12@\n\x06\x63hange\x18\x01 \x01(\x0e\x32\x30.tensorflow.EventReply.DebugOpStateChange.Change\x12\x11\n\tnode_name\x18\x02 \x01(\t\x12\x13\n\x0boutput_slot\x18\x03 \x01(\x05\x12\x10\n\x08\x64\x65\x62ug_op\x18\x04 \x01(\t\"!\n\x06\x43hange\x12\x0b\n\x07\x44ISABLE\x10\x00\x12\n\n\x06\x45NABLE\x10\x01\x32L\n\rEventListener\x12;\n\nSendEvents\x12\x11.tensorflow.Event\x1a\x16.tensorflow.EventReply(\x01\x30\x01\x62\x06proto3')
  ,
  dependencies=[tensorflow_dot_core_dot_util_dot_event__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_EVENTREPLY_DEBUGOPSTATECHANGE_CHANGE = _descriptor.EnumDescriptor(
  name='Change',
  full_name='tensorflow.EventReply.DebugOpStateChange.Change',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DISABLE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENABLE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=328,
  serialized_end=361,
)
_sym_db.RegisterEnumDescriptor(_EVENTREPLY_DEBUGOPSTATECHANGE_CHANGE)


_EVENTREPLY_DEBUGOPSTATECHANGE = _descriptor.Descriptor(
  name='DebugOpStateChange',
  full_name='tensorflow.EventReply.DebugOpStateChange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='change', full_name='tensorflow.EventReply.DebugOpStateChange.change', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='node_name', full_name='tensorflow.EventReply.DebugOpStateChange.node_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output_slot', full_name='tensorflow.EventReply.DebugOpStateChange.output_slot', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='debug_op', full_name='tensorflow.EventReply.DebugOpStateChange.debug_op', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _EVENTREPLY_DEBUGOPSTATECHANGE_CHANGE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=182,
  serialized_end=361,
)

_EVENTREPLY = _descriptor.Descriptor(
  name='EventReply',
  full_name='tensorflow.EventReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='debug_op_state_changes', full_name='tensorflow.EventReply.debug_op_state_changes', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_EVENTREPLY_DEBUGOPSTATECHANGE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=92,
  serialized_end=361,
)

_EVENTREPLY_DEBUGOPSTATECHANGE.fields_by_name['change'].enum_type = _EVENTREPLY_DEBUGOPSTATECHANGE_CHANGE
_EVENTREPLY_DEBUGOPSTATECHANGE.containing_type = _EVENTREPLY
_EVENTREPLY_DEBUGOPSTATECHANGE_CHANGE.containing_type = _EVENTREPLY_DEBUGOPSTATECHANGE
_EVENTREPLY.fields_by_name['debug_op_state_changes'].message_type = _EVENTREPLY_DEBUGOPSTATECHANGE
DESCRIPTOR.message_types_by_name['EventReply'] = _EVENTREPLY

EventReply = _reflection.GeneratedProtocolMessageType('EventReply', (_message.Message,), dict(

  DebugOpStateChange = _reflection.GeneratedProtocolMessageType('DebugOpStateChange', (_message.Message,), dict(
    DESCRIPTOR = _EVENTREPLY_DEBUGOPSTATECHANGE,
    __module__ = 'tensorflow.core.debug.debug_service_pb2'
    # @@protoc_insertion_point(class_scope:tensorflow.EventReply.DebugOpStateChange)
    ))
  ,
  DESCRIPTOR = _EVENTREPLY,
  __module__ = 'tensorflow.core.debug.debug_service_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.EventReply)
  ))
_sym_db.RegisterMessage(EventReply)
_sym_db.RegisterMessage(EventReply.DebugOpStateChange)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class EventListenerStub(object):
    """EventListener: Receives Event protos, e.g., from debugged TensorFlow
    runtime(s).
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.SendEvents = channel.stream_stream(
          '/tensorflow.EventListener/SendEvents',
          request_serializer=tensorflow_dot_core_dot_util_dot_event__pb2.Event.SerializeToString,
          response_deserializer=EventReply.FromString,
          )


  class EventListenerServicer(object):
    """EventListener: Receives Event protos, e.g., from debugged TensorFlow
    runtime(s).
    """

    def SendEvents(self, request_iterator, context):
      """Client(s) can use this RPC method to send the EventListener Event protos.
      The Event protos can hold information such as:
      1) intermediate tensors from a debugged graph being executed, which can
      be sent from DebugIdentity ops configured with grpc URLs.
      2) GraphDefs of partition graphs, which can be sent from special debug
      ops that get executed immediately after the beginning of the graph
      execution.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_EventListenerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SendEvents': grpc.stream_stream_rpc_method_handler(
            servicer.SendEvents,
            request_deserializer=tensorflow_dot_core_dot_util_dot_event__pb2.Event.FromString,
            response_serializer=EventReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'tensorflow.EventListener', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaEventListenerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """EventListener: Receives Event protos, e.g., from debugged TensorFlow
    runtime(s).
    """
    def SendEvents(self, request_iterator, context):
      """Client(s) can use this RPC method to send the EventListener Event protos.
      The Event protos can hold information such as:
      1) intermediate tensors from a debugged graph being executed, which can
      be sent from DebugIdentity ops configured with grpc URLs.
      2) GraphDefs of partition graphs, which can be sent from special debug
      ops that get executed immediately after the beginning of the graph
      execution.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaEventListenerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """EventListener: Receives Event protos, e.g., from debugged TensorFlow
    runtime(s).
    """
    def SendEvents(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Client(s) can use this RPC method to send the EventListener Event protos.
      The Event protos can hold information such as:
      1) intermediate tensors from a debugged graph being executed, which can
      be sent from DebugIdentity ops configured with grpc URLs.
      2) GraphDefs of partition graphs, which can be sent from special debug
      ops that get executed immediately after the beginning of the graph
      execution.
      """
      raise NotImplementedError()


  def beta_create_EventListener_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('tensorflow.EventListener', 'SendEvents'): tensorflow_dot_core_dot_util_dot_event__pb2.Event.FromString,
    }
    response_serializers = {
      ('tensorflow.EventListener', 'SendEvents'): EventReply.SerializeToString,
    }
    method_implementations = {
      ('tensorflow.EventListener', 'SendEvents'): face_utilities.stream_stream_inline(servicer.SendEvents),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_EventListener_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('tensorflow.EventListener', 'SendEvents'): tensorflow_dot_core_dot_util_dot_event__pb2.Event.SerializeToString,
    }
    response_deserializers = {
      ('tensorflow.EventListener', 'SendEvents'): EventReply.FromString,
    }
    cardinalities = {
      'SendEvents': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'tensorflow.EventListener', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
