# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tensorflow/contrib/verbs/verbs_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tensorflow/contrib/verbs/verbs_service.proto',
  package='tensorflow',
  syntax='proto3',
  serialized_pb=_b('\n,tensorflow/contrib/verbs/verbs_service.proto\x12\ntensorflow\"0\n\x07\x43hannel\x12\x0b\n\x03lid\x18\x01 \x01(\x05\x12\x0b\n\x03qpn\x18\x02 \x01(\x05\x12\x0b\n\x03psn\x18\x03 \x01(\x05\"1\n\x0cMemoryRegion\x12\x13\n\x0bremote_addr\x18\x01 \x01(\x04\x12\x0c\n\x04rkey\x18\x02 \x01(\r\"x\n\x17GetRemoteAddressRequest\x12\x11\n\thost_name\x18\x01 \x01(\t\x12$\n\x07\x63hannel\x18\x02 \x01(\x0b\x32\x13.tensorflow.Channel\x12$\n\x02mr\x18\x03 \x03(\x0b\x32\x18.tensorflow.MemoryRegion\"y\n\x18GetRemoteAddressResponse\x12\x11\n\thost_name\x18\x01 \x01(\t\x12$\n\x07\x63hannel\x18\x02 \x01(\x0b\x32\x13.tensorflow.Channel\x12$\n\x02mr\x18\x03 \x03(\x0b\x32\x18.tensorflow.MemoryRegion2m\n\x0cVerbsService\x12]\n\x10GetRemoteAddress\x12#.tensorflow.GetRemoteAddressRequest\x1a$.tensorflow.GetRemoteAddressResponseB4\n\x1corg.tensorflow.contrib.verbsB\x12VerbsServiceProtosP\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CHANNEL = _descriptor.Descriptor(
  name='Channel',
  full_name='tensorflow.Channel',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='lid', full_name='tensorflow.Channel.lid', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='qpn', full_name='tensorflow.Channel.qpn', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='psn', full_name='tensorflow.Channel.psn', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=60,
  serialized_end=108,
)


_MEMORYREGION = _descriptor.Descriptor(
  name='MemoryRegion',
  full_name='tensorflow.MemoryRegion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='remote_addr', full_name='tensorflow.MemoryRegion.remote_addr', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rkey', full_name='tensorflow.MemoryRegion.rkey', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=110,
  serialized_end=159,
)


_GETREMOTEADDRESSREQUEST = _descriptor.Descriptor(
  name='GetRemoteAddressRequest',
  full_name='tensorflow.GetRemoteAddressRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='host_name', full_name='tensorflow.GetRemoteAddressRequest.host_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='tensorflow.GetRemoteAddressRequest.channel', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mr', full_name='tensorflow.GetRemoteAddressRequest.mr', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=161,
  serialized_end=281,
)


_GETREMOTEADDRESSRESPONSE = _descriptor.Descriptor(
  name='GetRemoteAddressResponse',
  full_name='tensorflow.GetRemoteAddressResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='host_name', full_name='tensorflow.GetRemoteAddressResponse.host_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channel', full_name='tensorflow.GetRemoteAddressResponse.channel', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mr', full_name='tensorflow.GetRemoteAddressResponse.mr', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=283,
  serialized_end=404,
)

_GETREMOTEADDRESSREQUEST.fields_by_name['channel'].message_type = _CHANNEL
_GETREMOTEADDRESSREQUEST.fields_by_name['mr'].message_type = _MEMORYREGION
_GETREMOTEADDRESSRESPONSE.fields_by_name['channel'].message_type = _CHANNEL
_GETREMOTEADDRESSRESPONSE.fields_by_name['mr'].message_type = _MEMORYREGION
DESCRIPTOR.message_types_by_name['Channel'] = _CHANNEL
DESCRIPTOR.message_types_by_name['MemoryRegion'] = _MEMORYREGION
DESCRIPTOR.message_types_by_name['GetRemoteAddressRequest'] = _GETREMOTEADDRESSREQUEST
DESCRIPTOR.message_types_by_name['GetRemoteAddressResponse'] = _GETREMOTEADDRESSRESPONSE

Channel = _reflection.GeneratedProtocolMessageType('Channel', (_message.Message,), dict(
  DESCRIPTOR = _CHANNEL,
  __module__ = 'tensorflow.contrib.verbs.verbs_service_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.Channel)
  ))
_sym_db.RegisterMessage(Channel)

MemoryRegion = _reflection.GeneratedProtocolMessageType('MemoryRegion', (_message.Message,), dict(
  DESCRIPTOR = _MEMORYREGION,
  __module__ = 'tensorflow.contrib.verbs.verbs_service_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.MemoryRegion)
  ))
_sym_db.RegisterMessage(MemoryRegion)

GetRemoteAddressRequest = _reflection.GeneratedProtocolMessageType('GetRemoteAddressRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETREMOTEADDRESSREQUEST,
  __module__ = 'tensorflow.contrib.verbs.verbs_service_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.GetRemoteAddressRequest)
  ))
_sym_db.RegisterMessage(GetRemoteAddressRequest)

GetRemoteAddressResponse = _reflection.GeneratedProtocolMessageType('GetRemoteAddressResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETREMOTEADDRESSRESPONSE,
  __module__ = 'tensorflow.contrib.verbs.verbs_service_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.GetRemoteAddressResponse)
  ))
_sym_db.RegisterMessage(GetRemoteAddressResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034org.tensorflow.contrib.verbsB\022VerbsServiceProtosP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class VerbsServiceStub(object):
    """//////////////////////////////////////////////////////////////////////////////

    VerbsService

    //////////////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetRemoteAddress = channel.unary_unary(
          '/tensorflow.VerbsService/GetRemoteAddress',
          request_serializer=GetRemoteAddressRequest.SerializeToString,
          response_deserializer=GetRemoteAddressResponse.FromString,
          )


  class VerbsServiceServicer(object):
    """//////////////////////////////////////////////////////////////////////////////

    VerbsService

    //////////////////////////////////////////////////////////////////////////////

    """

    def GetRemoteAddress(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_VerbsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetRemoteAddress': grpc.unary_unary_rpc_method_handler(
            servicer.GetRemoteAddress,
            request_deserializer=GetRemoteAddressRequest.FromString,
            response_serializer=GetRemoteAddressResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'tensorflow.VerbsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaVerbsServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """//////////////////////////////////////////////////////////////////////////////

    VerbsService

    //////////////////////////////////////////////////////////////////////////////

    """
    def GetRemoteAddress(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaVerbsServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """//////////////////////////////////////////////////////////////////////////////

    VerbsService

    //////////////////////////////////////////////////////////////////////////////

    """
    def GetRemoteAddress(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetRemoteAddress.future = None


  def beta_create_VerbsService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('tensorflow.VerbsService', 'GetRemoteAddress'): GetRemoteAddressRequest.FromString,
    }
    response_serializers = {
      ('tensorflow.VerbsService', 'GetRemoteAddress'): GetRemoteAddressResponse.SerializeToString,
    }
    method_implementations = {
      ('tensorflow.VerbsService', 'GetRemoteAddress'): face_utilities.unary_unary_inline(servicer.GetRemoteAddress),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_VerbsService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('tensorflow.VerbsService', 'GetRemoteAddress'): GetRemoteAddressRequest.SerializeToString,
    }
    response_deserializers = {
      ('tensorflow.VerbsService', 'GetRemoteAddress'): GetRemoteAddressResponse.FromString,
    }
    cardinalities = {
      'GetRemoteAddress': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'tensorflow.VerbsService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
