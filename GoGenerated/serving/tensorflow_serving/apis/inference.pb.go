// Code generated by protoc-gen-go.
// source: serving/tensorflow_serving/apis/inference.proto
// DO NOT EDIT!

/*
Package tensorflow_serving is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow_serving/apis/inference.proto

It has these top-level messages:
	InferenceTask
	InferenceResult
	MultiInferenceRequest
	MultiInferenceResponse
*/
package tensorflow_serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow_serving3 "tensorflow_serving/apis"
import tensorflow_serving1 "tensorflow_serving/apis"
import tensorflow_serving2 "tensorflow_serving/apis"
import tensorflow_serving4 "tensorflow_serving/apis"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Inference request such as classification, regression, etc...
type InferenceTask struct {
	ModelSpec *tensorflow_serving2.ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Signature's method_name. Should be one of the method names defined in
	// third_party/tensorflow/python/saved_model/signature_constants.py.
	// e.g. "tensorflow/serving/classify".
	MethodName string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
}

func (m *InferenceTask) Reset()                    { *m = InferenceTask{} }
func (m *InferenceTask) String() string            { return proto.CompactTextString(m) }
func (*InferenceTask) ProtoMessage()               {}
func (*InferenceTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InferenceTask) GetModelSpec() *tensorflow_serving2.ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *InferenceTask) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

// Inference result, matches the type of request or is an error.
type InferenceResult struct {
	ModelSpec *tensorflow_serving2.ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*InferenceResult_ClassificationResult
	//	*InferenceResult_RegressionResult
	Result isInferenceResult_Result `protobuf_oneof:"result"`
}

func (m *InferenceResult) Reset()                    { *m = InferenceResult{} }
func (m *InferenceResult) String() string            { return proto.CompactTextString(m) }
func (*InferenceResult) ProtoMessage()               {}
func (*InferenceResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isInferenceResult_Result interface {
	isInferenceResult_Result()
}

type InferenceResult_ClassificationResult struct {
	ClassificationResult *tensorflow_serving3.ClassificationResult `protobuf:"bytes,2,opt,name=classification_result,json=classificationResult,oneof"`
}
type InferenceResult_RegressionResult struct {
	RegressionResult *tensorflow_serving4.RegressionResult `protobuf:"bytes,3,opt,name=regression_result,json=regressionResult,oneof"`
}

func (*InferenceResult_ClassificationResult) isInferenceResult_Result() {}
func (*InferenceResult_RegressionResult) isInferenceResult_Result()     {}

func (m *InferenceResult) GetResult() isInferenceResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *InferenceResult) GetModelSpec() *tensorflow_serving2.ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *InferenceResult) GetClassificationResult() *tensorflow_serving3.ClassificationResult {
	if x, ok := m.GetResult().(*InferenceResult_ClassificationResult); ok {
		return x.ClassificationResult
	}
	return nil
}

func (m *InferenceResult) GetRegressionResult() *tensorflow_serving4.RegressionResult {
	if x, ok := m.GetResult().(*InferenceResult_RegressionResult); ok {
		return x.RegressionResult
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InferenceResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InferenceResult_OneofMarshaler, _InferenceResult_OneofUnmarshaler, _InferenceResult_OneofSizer, []interface{}{
		(*InferenceResult_ClassificationResult)(nil),
		(*InferenceResult_RegressionResult)(nil),
	}
}

func _InferenceResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InferenceResult)
	// result
	switch x := m.Result.(type) {
	case *InferenceResult_ClassificationResult:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassificationResult); err != nil {
			return err
		}
	case *InferenceResult_RegressionResult:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegressionResult); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InferenceResult.Result has unexpected type %T", x)
	}
	return nil
}

func _InferenceResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InferenceResult)
	switch tag {
	case 2: // result.classification_result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(tensorflow_serving3.ClassificationResult)
		err := b.DecodeMessage(msg)
		m.Result = &InferenceResult_ClassificationResult{msg}
		return true, err
	case 3: // result.regression_result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(tensorflow_serving4.RegressionResult)
		err := b.DecodeMessage(msg)
		m.Result = &InferenceResult_RegressionResult{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InferenceResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InferenceResult)
	// result
	switch x := m.Result.(type) {
	case *InferenceResult_ClassificationResult:
		s := proto.Size(x.ClassificationResult)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InferenceResult_RegressionResult:
		s := proto.Size(x.RegressionResult)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Inference request containing one or more requests.
type MultiInferenceRequest struct {
	// Inference tasks.
	Tasks []*InferenceTask `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	// Input data.
	Input *tensorflow_serving1.Input `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
}

func (m *MultiInferenceRequest) Reset()                    { *m = MultiInferenceRequest{} }
func (m *MultiInferenceRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiInferenceRequest) ProtoMessage()               {}
func (*MultiInferenceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiInferenceRequest) GetTasks() []*InferenceTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *MultiInferenceRequest) GetInput() *tensorflow_serving1.Input {
	if m != nil {
		return m.Input
	}
	return nil
}

// Inference request containing one or more responses.
type MultiInferenceResponse struct {
	// List of results; one for each InferenceTask in the request, returned in the
	// same order as the request.
	Results []*InferenceResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *MultiInferenceResponse) Reset()                    { *m = MultiInferenceResponse{} }
func (m *MultiInferenceResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiInferenceResponse) ProtoMessage()               {}
func (*MultiInferenceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultiInferenceResponse) GetResults() []*InferenceResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*InferenceTask)(nil), "tensorflow.serving.InferenceTask")
	proto.RegisterType((*InferenceResult)(nil), "tensorflow.serving.InferenceResult")
	proto.RegisterType((*MultiInferenceRequest)(nil), "tensorflow.serving.MultiInferenceRequest")
	proto.RegisterType((*MultiInferenceResponse)(nil), "tensorflow.serving.MultiInferenceResponse")
}

func init() { proto.RegisterFile("serving/tensorflow_serving/apis/inference.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xb1, 0x4e, 0xe3, 0x40,
	0x10, 0x86, 0xcf, 0x89, 0x92, 0xbb, 0x8c, 0x75, 0xba, 0xbb, 0xd5, 0xe5, 0x94, 0x8b, 0x74, 0xba,
	0xe0, 0x50, 0xb8, 0x40, 0xb6, 0x14, 0x0a, 0x1a, 0x68, 0x42, 0x03, 0x45, 0x28, 0x36, 0x48, 0x94,
	0x96, 0x71, 0x26, 0xc1, 0x8a, 0xbd, 0x6b, 0x76, 0xd6, 0x50, 0xf3, 0x04, 0xbc, 0x2e, 0x25, 0xc2,
	0x1b, 0x3b, 0x24, 0x38, 0x50, 0xd0, 0x59, 0xa3, 0x6f, 0xbe, 0x7f, 0x66, 0xbc, 0xe0, 0x13, 0xaa,
	0xbb, 0x58, 0x2c, 0x7c, 0x8d, 0x82, 0xa4, 0x9a, 0x27, 0xf2, 0x3e, 0x28, 0x4b, 0x61, 0x16, 0x93,
	0x1f, 0x8b, 0x39, 0x2a, 0x14, 0x11, 0x7a, 0x99, 0x92, 0x5a, 0x32, 0xb6, 0x06, 0xbd, 0x15, 0xd8,
	0x3f, 0xd8, 0xd5, 0x1c, 0x25, 0x21, 0x51, 0x3c, 0x8f, 0xa3, 0x50, 0xc7, 0x52, 0x18, 0x43, 0x7f,
	0xb8, 0x3b, 0x2a, 0xcb, 0xf5, 0x47, 0x50, 0x2a, 0x67, 0x98, 0xac, 0x20, 0x77, 0x17, 0xa4, 0x70,
	0xa1, 0x90, 0xa8, 0xca, 0x74, 0x04, 0x7c, 0x3f, 0x2f, 0x17, 0xb9, 0x0c, 0x69, 0xc9, 0x8e, 0x01,
	0x0a, 0x53, 0x40, 0x19, 0x46, 0x3d, 0x6b, 0x60, 0xb9, 0xf6, 0xe8, 0x9f, 0xf7, 0x76, 0x37, 0x6f,
	0xf2, 0x42, 0x4d, 0x33, 0x8c, 0x78, 0x27, 0x2d, 0x3f, 0xd9, 0x7f, 0xb0, 0x53, 0xd4, 0x37, 0x72,
	0x16, 0x88, 0x30, 0xc5, 0x5e, 0x63, 0x60, 0xb9, 0x1d, 0x0e, 0xa6, 0x74, 0x11, 0xa6, 0xe8, 0x3c,
	0x36, 0xe0, 0x47, 0x15, 0xc8, 0x91, 0xf2, 0x44, 0x7f, 0x32, 0x32, 0x80, 0xee, 0xe6, 0x35, 0x03,
	0x55, 0x68, 0x8b, 0x70, 0x7b, 0xe4, 0xd6, 0x89, 0x4e, 0x37, 0x1a, 0xcc, 0x18, 0x67, 0x5f, 0xf8,
	0xef, 0xa8, 0xa6, 0xce, 0xa6, 0xf0, 0x6b, 0x7d, 0xb6, 0x52, 0xde, 0x2c, 0xe4, 0xfb, 0x75, 0x72,
	0x5e, 0xc1, 0x95, 0xf8, 0xa7, 0xda, 0xaa, 0x8d, 0xbf, 0x41, 0xdb, 0x98, 0x9c, 0x07, 0x0b, 0xba,
	0x93, 0x3c, 0xd1, 0xf1, 0xab, 0xb3, 0xdc, 0xe6, 0x48, 0x9a, 0x1d, 0x41, 0x4b, 0x87, 0xb4, 0xa4,
	0x9e, 0x35, 0x68, 0xba, 0xf6, 0x68, 0xaf, 0x2e, 0x6c, 0xe3, 0xe7, 0x71, 0xc3, 0x33, 0x1f, 0x5a,
	0xc5, 0x93, 0x59, 0x9d, 0xe0, 0x6f, 0x7d, 0x63, 0x96, 0x6b, 0x6e, 0x38, 0xe7, 0x0a, 0xfe, 0x6c,
	0x8f, 0x40, 0x99, 0x14, 0x84, 0xec, 0x04, 0xbe, 0x9a, 0x39, 0xcb, 0x29, 0x86, 0xef, 0x4e, 0x61,
	0xb6, 0xe3, 0x65, 0xcf, 0xb8, 0xf9, 0x64, 0x59, 0xd7, 0xed, 0xe2, 0xa9, 0x1d, 0x3e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0xdb, 0x43, 0xac, 0x53, 0x03, 0x00, 0x00,
}
