// Code generated by protoc-gen-go.
// source: serving/tensorflow_serving/config/model_server_config.proto
// DO NOT EDIT!

/*
Package tensorflow_serving is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow_serving/config/model_server_config.proto

It has these top-level messages:
	ModelConfig
	ModelConfigList
	ModelServerConfig
*/
package tensorflow_serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import tensorflow_serving2 "tensorflow_serving/config"
import tensorflow_serving3 "tensorflow_serving/sources/storage_path"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The type of model.
// TODO(b/31336131): DEPRECATED.
type ModelType int32

const (
	ModelType_MODEL_TYPE_UNSPECIFIED ModelType = 0
	ModelType_TENSORFLOW             ModelType = 1
	ModelType_OTHER                  ModelType = 2
)

var ModelType_name = map[int32]string{
	0: "MODEL_TYPE_UNSPECIFIED",
	1: "TENSORFLOW",
	2: "OTHER",
}
var ModelType_value = map[string]int32{
	"MODEL_TYPE_UNSPECIFIED": 0,
	"TENSORFLOW":             1,
	"OTHER":                  2,
}

func (x ModelType) String() string {
	return proto.EnumName(ModelType_name, int32(x))
}
func (ModelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Common configuration for loading a model being served.
type ModelConfig struct {
	// Name of the model.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Base path to the model, excluding the version directory.
	// E.g> for a model at /foo/bar/my_model/123, where 123 is the version, the
	// base path is /foo/bar/my_model.
	//
	// (This can be changed once a model is in serving, *if* the underlying data
	// remains the same. Otherwise there are no guarantees about whether the old
	// or new data will be used for model versions currently loaded.)
	BasePath string `protobuf:"bytes,2,opt,name=base_path,json=basePath" json:"base_path,omitempty"`
	// Type of model.
	// TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
	ModelType ModelType `protobuf:"varint,3,opt,name=model_type,json=modelType,enum=tensorflow.serving.ModelType" json:"model_type,omitempty"`
	// Type of model (e.g. "tensorflow").
	//
	// (This cannot be changed once a model is in serving.)
	ModelPlatform string `protobuf:"bytes,4,opt,name=model_platform,json=modelPlatform" json:"model_platform,omitempty"`
	// Version policy for the model indicating how many versions of the model to
	// be served at the same time.
	// The default option is to serve only the latest version of the model.
	//
	// (This can be changed once a model is in serving.)
	VersionPolicy tensorflow_serving3.FileSystemStoragePathSourceConfig_VersionPolicy `protobuf:"varint,5,opt,name=version_policy,json=versionPolicy,enum=tensorflow.serving.FileSystemStoragePathSourceConfig_VersionPolicy" json:"version_policy,omitempty"`
	// Configures logging requests and responses, to the model.
	//
	// (This can be changed once a model is in serving.)
	LoggingConfig *tensorflow_serving2.LoggingConfig `protobuf:"bytes,6,opt,name=logging_config,json=loggingConfig" json:"logging_config,omitempty"`
}

func (m *ModelConfig) Reset()                    { *m = ModelConfig{} }
func (m *ModelConfig) String() string            { return proto.CompactTextString(m) }
func (*ModelConfig) ProtoMessage()               {}
func (*ModelConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ModelConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelConfig) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *ModelConfig) GetModelType() ModelType {
	if m != nil {
		return m.ModelType
	}
	return ModelType_MODEL_TYPE_UNSPECIFIED
}

func (m *ModelConfig) GetModelPlatform() string {
	if m != nil {
		return m.ModelPlatform
	}
	return ""
}

func (m *ModelConfig) GetVersionPolicy() tensorflow_serving3.FileSystemStoragePathSourceConfig_VersionPolicy {
	if m != nil {
		return m.VersionPolicy
	}
	return tensorflow_serving3.FileSystemStoragePathSourceConfig_LATEST_VERSION
}

func (m *ModelConfig) GetLoggingConfig() *tensorflow_serving2.LoggingConfig {
	if m != nil {
		return m.LoggingConfig
	}
	return nil
}

// Static list of models to be loaded for serving.
type ModelConfigList struct {
	Config []*ModelConfig `protobuf:"bytes,1,rep,name=config" json:"config,omitempty"`
}

func (m *ModelConfigList) Reset()                    { *m = ModelConfigList{} }
func (m *ModelConfigList) String() string            { return proto.CompactTextString(m) }
func (*ModelConfigList) ProtoMessage()               {}
func (*ModelConfigList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ModelConfigList) GetConfig() []*ModelConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// ModelServer config.
type ModelServerConfig struct {
	// ModelServer takes either a static file-based model config list or an Any
	// proto representing custom model config that is fetched dynamically at
	// runtime (through network RPC, custom service, etc.).
	//
	// Types that are valid to be assigned to Config:
	//	*ModelServerConfig_ModelConfigList
	//	*ModelServerConfig_CustomModelConfig
	Config isModelServerConfig_Config `protobuf_oneof:"config"`
}

func (m *ModelServerConfig) Reset()                    { *m = ModelServerConfig{} }
func (m *ModelServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ModelServerConfig) ProtoMessage()               {}
func (*ModelServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isModelServerConfig_Config interface {
	isModelServerConfig_Config()
}

type ModelServerConfig_ModelConfigList struct {
	ModelConfigList *ModelConfigList `protobuf:"bytes,1,opt,name=model_config_list,json=modelConfigList,oneof"`
}
type ModelServerConfig_CustomModelConfig struct {
	CustomModelConfig *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom_model_config,json=customModelConfig,oneof"`
}

func (*ModelServerConfig_ModelConfigList) isModelServerConfig_Config()   {}
func (*ModelServerConfig_CustomModelConfig) isModelServerConfig_Config() {}

func (m *ModelServerConfig) GetConfig() isModelServerConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ModelServerConfig) GetModelConfigList() *ModelConfigList {
	if x, ok := m.GetConfig().(*ModelServerConfig_ModelConfigList); ok {
		return x.ModelConfigList
	}
	return nil
}

func (m *ModelServerConfig) GetCustomModelConfig() *google_protobuf.Any {
	if x, ok := m.GetConfig().(*ModelServerConfig_CustomModelConfig); ok {
		return x.CustomModelConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ModelServerConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ModelServerConfig_OneofMarshaler, _ModelServerConfig_OneofUnmarshaler, _ModelServerConfig_OneofSizer, []interface{}{
		(*ModelServerConfig_ModelConfigList)(nil),
		(*ModelServerConfig_CustomModelConfig)(nil),
	}
}

func _ModelServerConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ModelServerConfig)
	// config
	switch x := m.Config.(type) {
	case *ModelServerConfig_ModelConfigList:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ModelConfigList); err != nil {
			return err
		}
	case *ModelServerConfig_CustomModelConfig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomModelConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ModelServerConfig.Config has unexpected type %T", x)
	}
	return nil
}

func _ModelServerConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ModelServerConfig)
	switch tag {
	case 1: // config.model_config_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ModelConfigList)
		err := b.DecodeMessage(msg)
		m.Config = &ModelServerConfig_ModelConfigList{msg}
		return true, err
	case 2: // config.custom_model_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Config = &ModelServerConfig_CustomModelConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ModelServerConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ModelServerConfig)
	// config
	switch x := m.Config.(type) {
	case *ModelServerConfig_ModelConfigList:
		s := proto.Size(x.ModelConfigList)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModelServerConfig_CustomModelConfig:
		s := proto.Size(x.CustomModelConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ModelConfig)(nil), "tensorflow.serving.ModelConfig")
	proto.RegisterType((*ModelConfigList)(nil), "tensorflow.serving.ModelConfigList")
	proto.RegisterType((*ModelServerConfig)(nil), "tensorflow.serving.ModelServerConfig")
	proto.RegisterEnum("tensorflow.serving.ModelType", ModelType_name, ModelType_value)
}

func init() {
	proto.RegisterFile("serving/tensorflow_serving/config/model_server_config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0x65, 0x60, 0x97, 0xc0, 0x34, 0xb0, 0x30, 0x1a, 0x53, 0x31, 0x2a, 0x62, 0x4c, 0x88, 0x0f,
	0x6d, 0x52, 0x1f, 0x7c, 0xf0, 0x45, 0x61, 0x4b, 0x58, 0xc3, 0x47, 0x6d, 0x51, 0xe3, 0xd3, 0xa4,
	0xe0, 0xb4, 0x5b, 0x33, 0xed, 0x34, 0x9d, 0x01, 0xd3, 0x7f, 0xe6, 0x9f, 0xf1, 0x7f, 0xf8, 0x68,
	0x3a, 0x53, 0xb4, 0xab, 0x6c, 0xf6, 0xad, 0xf7, 0xf4, 0xdc, 0x73, 0xee, 0x3d, 0x77, 0xe0, 0x1b,
	0x4e, 0xb2, 0x43, 0x94, 0x84, 0xa6, 0x20, 0x09, 0x67, 0x59, 0x40, 0xd9, 0x77, 0x7c, 0x84, 0x76,
	0x2c, 0x09, 0xa2, 0xd0, 0x8c, 0xd9, 0x57, 0x42, 0x25, 0x48, 0x32, 0xac, 0x30, 0x23, 0xcd, 0x98,
	0x60, 0x08, 0xfd, 0x6d, 0x32, 0xca, 0xa6, 0xc1, 0xc3, 0x90, 0xb1, 0x90, 0x12, 0x53, 0x32, 0xb6,
	0xfb, 0xc0, 0xf4, 0x93, 0x5c, 0xd1, 0x07, 0xc6, 0xed, 0x1e, 0x94, 0x85, 0x61, 0x94, 0x84, 0x37,
	0xe4, 0x07, 0xcb, 0x13, 0x7c, 0xce, 0xf6, 0xd9, 0x8e, 0x70, 0x93, 0x0b, 0x96, 0xf9, 0x21, 0xc1,
	0xa9, 0x2f, 0xae, 0xcd, 0x20, 0xa2, 0x04, 0xf3, 0x9c, 0x0b, 0x12, 0xe3, 0xea, 0x0f, 0xac, 0xd8,
	0x4a, 0x6e, 0xf4, 0xb3, 0x0e, 0xb5, 0x65, 0xb1, 0xcb, 0x54, 0x9a, 0x20, 0x04, 0xcf, 0x12, 0x3f,
	0x26, 0x3a, 0x18, 0x82, 0x71, 0xdb, 0x95, 0xdf, 0xe8, 0x11, 0x6c, 0x6f, 0x7d, 0xae, 0xba, 0xf5,
	0xba, 0xfc, 0xd1, 0x2a, 0x00, 0xc7, 0x17, 0xd7, 0xe8, 0x2d, 0x84, 0x2a, 0x0b, 0x91, 0xa7, 0x44,
	0x6f, 0x0c, 0xc1, 0xb8, 0x6b, 0x3d, 0x36, 0xfe, 0xcf, 0xc0, 0x90, 0x2e, 0x9b, 0x3c, 0x25, 0x93,
	0xba, 0x0e, 0xdc, 0x76, 0x7c, 0x2c, 0xd1, 0x0b, 0xd8, 0x55, 0x0a, 0x29, 0xf5, 0x45, 0xc0, 0xb2,
	0x58, 0x3f, 0x93, 0x1e, 0x1d, 0x89, 0x3a, 0x25, 0x88, 0xbe, 0xc1, 0xee, 0x81, 0x64, 0x3c, 0x62,
	0x09, 0x4e, 0x19, 0x8d, 0x76, 0xb9, 0x7e, 0x2e, 0xcd, 0xa6, 0xa7, 0xcc, 0x66, 0x11, 0x25, 0x9e,
	0xdc, 0xdd, 0x53, 0xab, 0x17, 0xb3, 0x7a, 0x72, 0x71, 0xb5, 0xa8, 0xf1, 0x49, 0x69, 0x39, 0x52,
	0xca, 0xed, 0x1c, 0xaa, 0x25, 0x9a, 0xc3, 0xee, 0xcd, 0xf0, 0xf5, 0xe6, 0x10, 0x8c, 0x35, 0xeb,
	0xd9, 0x29, 0xaf, 0x85, 0x62, 0x2a, 0x5d, 0xb7, 0x43, 0xab, 0xe5, 0xe8, 0x3d, 0xbc, 0xa8, 0xc4,
	0xbb, 0x88, 0xb8, 0x40, 0xaf, 0x61, 0xb3, 0x14, 0x05, 0xc3, 0xc6, 0x58, 0xb3, 0x9e, 0xde, 0x9a,
	0x56, 0x29, 0x59, 0xd2, 0x47, 0x3f, 0x00, 0xec, 0x4b, 0xdc, 0x93, 0xcf, 0xae, 0xbc, 0xd8, 0x07,
	0xd8, 0x57, 0xf1, 0x29, 0x16, 0xa6, 0x11, 0x17, 0xf2, 0x7c, 0x9a, 0xf5, 0xfc, 0x0e, 0xe5, 0x62,
	0x9c, 0x79, 0xcd, 0xbd, 0x88, 0xff, 0x99, 0x70, 0x06, 0xef, 0xed, 0xf6, 0x5c, 0xb0, 0x18, 0x57,
	0x95, 0xe5, 0xe9, 0x35, 0xeb, 0xbe, 0xa1, 0x1e, 0xb3, 0x71, 0x7c, 0xcc, 0xc6, 0xbb, 0x24, 0x9f,
	0xd7, 0xdc, 0xbe, 0x6a, 0xa9, 0xc8, 0x4f, 0x5a, 0xc7, 0x4d, 0x5f, 0xae, 0x60, 0xfb, 0xcf, 0xfd,
	0xd1, 0x13, 0xf8, 0x60, 0xb9, 0xbe, 0xb4, 0x17, 0x78, 0xf3, 0xc5, 0xb1, 0xf1, 0xc7, 0x95, 0xe7,
	0xd8, 0xd3, 0xab, 0xd9, 0x95, 0x7d, 0xd9, 0xab, 0x0d, 0xea, 0x2d, 0x80, 0x10, 0x84, 0x1b, 0x7b,
	0xe5, 0xad, 0xdd, 0xd9, 0x62, 0xfd, 0xb9, 0x07, 0x24, 0xd6, 0x81, 0xe7, 0xeb, 0xcd, 0xdc, 0x76,
	0x7b, 0xf5, 0xa2, 0x9c, 0x34, 0x7e, 0x01, 0xb0, 0x6d, 0xca, 0x09, 0x5e, 0xfd, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0xf6, 0xc1, 0x3c, 0xaf, 0x03, 0x00, 0x00,
}
