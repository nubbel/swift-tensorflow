// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/util/test_log.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/util/test_log.proto

It has these top-level messages:
	EntryValue
	BenchmarkEntry
	BenchmarkEntries
	BuildConfiguration
	CommitId
	CPUInfo
	MemoryInfo
	GPUInfo
	PlatformInfo
	AvailableDeviceInfo
	MachineConfiguration
	RunConfiguration
	TestResults
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The type of benchmark.
type TestResults_BenchmarkType int32

const (
	TestResults_UNKNOWN            TestResults_BenchmarkType = 0
	TestResults_CPP_MICROBENCHMARK TestResults_BenchmarkType = 1
	TestResults_PYTHON_BENCHMARK   TestResults_BenchmarkType = 2
	TestResults_ANDROID_BENCHMARK  TestResults_BenchmarkType = 3
)

var TestResults_BenchmarkType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CPP_MICROBENCHMARK",
	2: "PYTHON_BENCHMARK",
	3: "ANDROID_BENCHMARK",
}
var TestResults_BenchmarkType_value = map[string]int32{
	"UNKNOWN":            0,
	"CPP_MICROBENCHMARK": 1,
	"PYTHON_BENCHMARK":   2,
	"ANDROID_BENCHMARK":  3,
}

func (x TestResults_BenchmarkType) String() string {
	return proto.EnumName(TestResults_BenchmarkType_name, int32(x))
}
func (TestResults_BenchmarkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

type EntryValue struct {
	// Types that are valid to be assigned to Kind:
	//	*EntryValue_DoubleValue
	//	*EntryValue_StringValue
	Kind isEntryValue_Kind `protobuf_oneof:"kind"`
}

func (m *EntryValue) Reset()                    { *m = EntryValue{} }
func (m *EntryValue) String() string            { return proto.CompactTextString(m) }
func (*EntryValue) ProtoMessage()               {}
func (*EntryValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isEntryValue_Kind interface {
	isEntryValue_Kind()
}

type EntryValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,oneof"`
}
type EntryValue_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}

func (*EntryValue_DoubleValue) isEntryValue_Kind() {}
func (*EntryValue_StringValue) isEntryValue_Kind() {}

func (m *EntryValue) GetKind() isEntryValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *EntryValue) GetDoubleValue() float64 {
	if x, ok := m.GetKind().(*EntryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *EntryValue) GetStringValue() string {
	if x, ok := m.GetKind().(*EntryValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EntryValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EntryValue_OneofMarshaler, _EntryValue_OneofUnmarshaler, _EntryValue_OneofSizer, []interface{}{
		(*EntryValue_DoubleValue)(nil),
		(*EntryValue_StringValue)(nil),
	}
}

func _EntryValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EntryValue)
	// kind
	switch x := m.Kind.(type) {
	case *EntryValue_DoubleValue:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *EntryValue_StringValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("EntryValue.Kind has unexpected type %T", x)
	}
	return nil
}

func _EntryValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EntryValue)
	switch tag {
	case 1: // kind.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &EntryValue_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 2: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &EntryValue_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _EntryValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EntryValue)
	// kind
	switch x := m.Kind.(type) {
	case *EntryValue_DoubleValue:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *EntryValue_StringValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Each unit test or benchmark in a test or benchmark run provides
// some set of information.  Here we provide some reasonable keys
// one would expect to see, with optional key/value pairs for things
// we haven't considered.
//
// This BenchmarkEntry should be emitted by each unit test or benchmark
// reporter.
type BenchmarkEntry struct {
	// The name of the specific benchmark or test
	// (e.g. BM_AdjustContrast_gpu_B_W_H)
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If a benchmark, how many iterations it was run for
	Iters int64 `protobuf:"varint,2,opt,name=iters" json:"iters,omitempty"`
	// Total cpu time used for all iterations (in seconds)
	CpuTime float64 `protobuf:"fixed64,3,opt,name=cpu_time,json=cpuTime" json:"cpu_time,omitempty"`
	// Total wall time used for all iterations (in seconds)
	WallTime float64 `protobuf:"fixed64,4,opt,name=wall_time,json=wallTime" json:"wall_time,omitempty"`
	// Throughput (in MB/s)
	Throughput float64 `protobuf:"fixed64,5,opt,name=throughput" json:"throughput,omitempty"`
	// Generic map from result key to value.
	Extras map[string]*EntryValue `protobuf:"bytes,6,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BenchmarkEntry) Reset()                    { *m = BenchmarkEntry{} }
func (m *BenchmarkEntry) String() string            { return proto.CompactTextString(m) }
func (*BenchmarkEntry) ProtoMessage()               {}
func (*BenchmarkEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BenchmarkEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BenchmarkEntry) GetIters() int64 {
	if m != nil {
		return m.Iters
	}
	return 0
}

func (m *BenchmarkEntry) GetCpuTime() float64 {
	if m != nil {
		return m.CpuTime
	}
	return 0
}

func (m *BenchmarkEntry) GetWallTime() float64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *BenchmarkEntry) GetThroughput() float64 {
	if m != nil {
		return m.Throughput
	}
	return 0
}

func (m *BenchmarkEntry) GetExtras() map[string]*EntryValue {
	if m != nil {
		return m.Extras
	}
	return nil
}

type BenchmarkEntries struct {
	Entry []*BenchmarkEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *BenchmarkEntries) Reset()                    { *m = BenchmarkEntries{} }
func (m *BenchmarkEntries) String() string            { return proto.CompactTextString(m) }
func (*BenchmarkEntries) ProtoMessage()               {}
func (*BenchmarkEntries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BenchmarkEntries) GetEntry() []*BenchmarkEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type BuildConfiguration struct {
	Mode    string   `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	CcFlags []string `protobuf:"bytes,2,rep,name=cc_flags,json=ccFlags" json:"cc_flags,omitempty"`
	Opts    []string `protobuf:"bytes,3,rep,name=opts" json:"opts,omitempty"`
}

func (m *BuildConfiguration) Reset()                    { *m = BuildConfiguration{} }
func (m *BuildConfiguration) String() string            { return proto.CompactTextString(m) }
func (*BuildConfiguration) ProtoMessage()               {}
func (*BuildConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BuildConfiguration) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *BuildConfiguration) GetCcFlags() []string {
	if m != nil {
		return m.CcFlags
	}
	return nil
}

func (m *BuildConfiguration) GetOpts() []string {
	if m != nil {
		return m.Opts
	}
	return nil
}

type CommitId struct {
	// Types that are valid to be assigned to Kind:
	//	*CommitId_Changelist
	//	*CommitId_Hash
	Kind isCommitId_Kind `protobuf_oneof:"kind"`
	// Hash of intermediate change between hash/changelist and what was tested.
	// Not used if the build is from a commit without modifications.
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot" json:"snapshot,omitempty"`
}

func (m *CommitId) Reset()                    { *m = CommitId{} }
func (m *CommitId) String() string            { return proto.CompactTextString(m) }
func (*CommitId) ProtoMessage()               {}
func (*CommitId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isCommitId_Kind interface {
	isCommitId_Kind()
}

type CommitId_Changelist struct {
	Changelist int64 `protobuf:"varint,1,opt,name=changelist,oneof"`
}
type CommitId_Hash struct {
	Hash string `protobuf:"bytes,2,opt,name=hash,oneof"`
}

func (*CommitId_Changelist) isCommitId_Kind() {}
func (*CommitId_Hash) isCommitId_Kind()       {}

func (m *CommitId) GetKind() isCommitId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *CommitId) GetChangelist() int64 {
	if x, ok := m.GetKind().(*CommitId_Changelist); ok {
		return x.Changelist
	}
	return 0
}

func (m *CommitId) GetHash() string {
	if x, ok := m.GetKind().(*CommitId_Hash); ok {
		return x.Hash
	}
	return ""
}

func (m *CommitId) GetSnapshot() string {
	if m != nil {
		return m.Snapshot
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CommitId) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CommitId_OneofMarshaler, _CommitId_OneofUnmarshaler, _CommitId_OneofSizer, []interface{}{
		(*CommitId_Changelist)(nil),
		(*CommitId_Hash)(nil),
	}
}

func _CommitId_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CommitId)
	// kind
	switch x := m.Kind.(type) {
	case *CommitId_Changelist:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Changelist))
	case *CommitId_Hash:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Hash)
	case nil:
	default:
		return fmt.Errorf("CommitId.Kind has unexpected type %T", x)
	}
	return nil
}

func _CommitId_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CommitId)
	switch tag {
	case 1: // kind.changelist
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &CommitId_Changelist{int64(x)}
		return true, err
	case 2: // kind.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &CommitId_Hash{x}
		return true, err
	default:
		return false, nil
	}
}

func _CommitId_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CommitId)
	// kind
	switch x := m.Kind.(type) {
	case *CommitId_Changelist:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Changelist))
	case *CommitId_Hash:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Hash)))
		n += len(x.Hash)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CPUInfo struct {
	NumCores        int64 `protobuf:"varint,1,opt,name=num_cores,json=numCores" json:"num_cores,omitempty"`
	NumCoresAllowed int64 `protobuf:"varint,2,opt,name=num_cores_allowed,json=numCoresAllowed" json:"num_cores_allowed,omitempty"`
	// How fast are these cpus?
	MhzPerCpu float64 `protobuf:"fixed64,3,opt,name=mhz_per_cpu,json=mhzPerCpu" json:"mhz_per_cpu,omitempty"`
	// Additional cpu information. For example,
	// Intel Ivybridge with HyperThreading (24 cores) dL1:32KB dL2:256KB dL3:30MB
	CpuInfo string `protobuf:"bytes,4,opt,name=cpu_info,json=cpuInfo" json:"cpu_info,omitempty"`
	// What kind of cpu scaling is enabled on the host.
	// Examples include "performance", "ondemand", "conservative", "mixed".
	CpuGovernor string `protobuf:"bytes,5,opt,name=cpu_governor,json=cpuGovernor" json:"cpu_governor,omitempty"`
	// Cache sizes (in bytes), e.g. "L2": 262144 (for 256KB)
	CacheSize map[string]int64 `protobuf:"bytes,6,rep,name=cache_size,json=cacheSize" json:"cache_size,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *CPUInfo) Reset()                    { *m = CPUInfo{} }
func (m *CPUInfo) String() string            { return proto.CompactTextString(m) }
func (*CPUInfo) ProtoMessage()               {}
func (*CPUInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CPUInfo) GetNumCores() int64 {
	if m != nil {
		return m.NumCores
	}
	return 0
}

func (m *CPUInfo) GetNumCoresAllowed() int64 {
	if m != nil {
		return m.NumCoresAllowed
	}
	return 0
}

func (m *CPUInfo) GetMhzPerCpu() float64 {
	if m != nil {
		return m.MhzPerCpu
	}
	return 0
}

func (m *CPUInfo) GetCpuInfo() string {
	if m != nil {
		return m.CpuInfo
	}
	return ""
}

func (m *CPUInfo) GetCpuGovernor() string {
	if m != nil {
		return m.CpuGovernor
	}
	return ""
}

func (m *CPUInfo) GetCacheSize() map[string]int64 {
	if m != nil {
		return m.CacheSize
	}
	return nil
}

type MemoryInfo struct {
	Total     int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
}

func (m *MemoryInfo) Reset()                    { *m = MemoryInfo{} }
func (m *MemoryInfo) String() string            { return proto.CompactTextString(m) }
func (*MemoryInfo) ProtoMessage()               {}
func (*MemoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MemoryInfo) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MemoryInfo) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

type GPUInfo struct {
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	Uuid  string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	BusId string `protobuf:"bytes,3,opt,name=bus_id,json=busId" json:"bus_id,omitempty"`
}

func (m *GPUInfo) Reset()                    { *m = GPUInfo{} }
func (m *GPUInfo) String() string            { return proto.CompactTextString(m) }
func (*GPUInfo) ProtoMessage()               {}
func (*GPUInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GPUInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GPUInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GPUInfo) GetBusId() string {
	if m != nil {
		return m.BusId
	}
	return ""
}

type PlatformInfo struct {
	Bits    string `protobuf:"bytes,1,opt,name=bits" json:"bits,omitempty"`
	Linkage string `protobuf:"bytes,2,opt,name=linkage" json:"linkage,omitempty"`
	Machine string `protobuf:"bytes,3,opt,name=machine" json:"machine,omitempty"`
	Release string `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
	System  string `protobuf:"bytes,5,opt,name=system" json:"system,omitempty"`
	Version string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
}

func (m *PlatformInfo) Reset()                    { *m = PlatformInfo{} }
func (m *PlatformInfo) String() string            { return proto.CompactTextString(m) }
func (*PlatformInfo) ProtoMessage()               {}
func (*PlatformInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlatformInfo) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *PlatformInfo) GetLinkage() string {
	if m != nil {
		return m.Linkage
	}
	return ""
}

func (m *PlatformInfo) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PlatformInfo) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *PlatformInfo) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *PlatformInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AvailableDeviceInfo struct {
	Name                string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	MemoryLimit         int64  `protobuf:"varint,3,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	PhysicalDescription string `protobuf:"bytes,4,opt,name=physical_description,json=physicalDescription" json:"physical_description,omitempty"`
}

func (m *AvailableDeviceInfo) Reset()                    { *m = AvailableDeviceInfo{} }
func (m *AvailableDeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*AvailableDeviceInfo) ProtoMessage()               {}
func (*AvailableDeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AvailableDeviceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AvailableDeviceInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AvailableDeviceInfo) GetMemoryLimit() int64 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *AvailableDeviceInfo) GetPhysicalDescription() string {
	if m != nil {
		return m.PhysicalDescription
	}
	return ""
}

type MachineConfiguration struct {
	// Host name of machine that ran the benchmark.
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	// Unique serial number of the machine.
	SerialIdentifier string `protobuf:"bytes,7,opt,name=serial_identifier,json=serialIdentifier" json:"serial_identifier,omitempty"`
	// Additional platform information.
	PlatformInfo *PlatformInfo `protobuf:"bytes,2,opt,name=platform_info,json=platformInfo" json:"platform_info,omitempty"`
	// CPU Information.
	CpuInfo *CPUInfo `protobuf:"bytes,3,opt,name=cpu_info,json=cpuInfo" json:"cpu_info,omitempty"`
	// Other devices that are attached and relevant (e.g. GPUInfo).
	DeviceInfo []*google_protobuf.Any `protobuf:"bytes,4,rep,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	// Devices accessible to the test (e.g. as given by list_local_devices).
	AvailableDeviceInfo []*AvailableDeviceInfo `protobuf:"bytes,5,rep,name=available_device_info,json=availableDeviceInfo" json:"available_device_info,omitempty"`
	MemoryInfo          *MemoryInfo            `protobuf:"bytes,6,opt,name=memory_info,json=memoryInfo" json:"memory_info,omitempty"`
}

func (m *MachineConfiguration) Reset()                    { *m = MachineConfiguration{} }
func (m *MachineConfiguration) String() string            { return proto.CompactTextString(m) }
func (*MachineConfiguration) ProtoMessage()               {}
func (*MachineConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MachineConfiguration) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *MachineConfiguration) GetSerialIdentifier() string {
	if m != nil {
		return m.SerialIdentifier
	}
	return ""
}

func (m *MachineConfiguration) GetPlatformInfo() *PlatformInfo {
	if m != nil {
		return m.PlatformInfo
	}
	return nil
}

func (m *MachineConfiguration) GetCpuInfo() *CPUInfo {
	if m != nil {
		return m.CpuInfo
	}
	return nil
}

func (m *MachineConfiguration) GetDeviceInfo() []*google_protobuf.Any {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *MachineConfiguration) GetAvailableDeviceInfo() []*AvailableDeviceInfo {
	if m != nil {
		return m.AvailableDeviceInfo
	}
	return nil
}

func (m *MachineConfiguration) GetMemoryInfo() *MemoryInfo {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

// Run-specific items such as arguments to the test / benchmark.
type RunConfiguration struct {
	Argument []string `protobuf:"bytes,1,rep,name=argument" json:"argument,omitempty"`
}

func (m *RunConfiguration) Reset()                    { *m = RunConfiguration{} }
func (m *RunConfiguration) String() string            { return proto.CompactTextString(m) }
func (*RunConfiguration) ProtoMessage()               {}
func (*RunConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RunConfiguration) GetArgument() []string {
	if m != nil {
		return m.Argument
	}
	return nil
}

// The output of one benchmark / test run.  Each run contains a list of
// tests or benchmarks, stored as BenchmarkEntry messages.
//
// This message should be emitted by the reporter (which runs the
// test / BM in a subprocess and then reads the emitted BenchmarkEntry messages;
// usually from a serialized json file, finally collecting them along
// with additional information about the test run.
type TestResults struct {
	// The target of the run, e.g.:
	//  //tensorflow/core:kernels_adjust_contrast_op_benchmark_test
	Target string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	// The list of tests or benchmarks in this run.
	Entries *BenchmarkEntries `protobuf:"bytes,2,opt,name=entries" json:"entries,omitempty"`
	// The configuration of the build (compiled opt? with cuda? any copts?)
	BuildConfiguration *BuildConfiguration `protobuf:"bytes,3,opt,name=build_configuration,json=buildConfiguration" json:"build_configuration,omitempty"`
	// The commit id (git hash or changelist)
	CommitId *CommitId `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	// The time the run started (in seconds of UTC time since Unix epoch)
	StartTime int64 `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The amount of time the total run took (wall time in seconds)
	RunTime float64 `protobuf:"fixed64,6,opt,name=run_time,json=runTime" json:"run_time,omitempty"`
	// Machine-specific parameters (Platform and CPU info)
	MachineConfiguration *MachineConfiguration `protobuf:"bytes,7,opt,name=machine_configuration,json=machineConfiguration" json:"machine_configuration,omitempty"`
	// Run-specific parameters (arguments, etc)
	RunConfiguration *RunConfiguration `protobuf:"bytes,8,opt,name=run_configuration,json=runConfiguration" json:"run_configuration,omitempty"`
	// Benchmark target identifier.
	Name          string                    `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	BenchmarkType TestResults_BenchmarkType `protobuf:"varint,10,opt,name=benchmark_type,json=benchmarkType,enum=tensorflow.TestResults_BenchmarkType" json:"benchmark_type,omitempty"`
	// Used for differentiating between continuous and debug builds.
	RunMode string `protobuf:"bytes,11,opt,name=run_mode,json=runMode" json:"run_mode,omitempty"`
}

func (m *TestResults) Reset()                    { *m = TestResults{} }
func (m *TestResults) String() string            { return proto.CompactTextString(m) }
func (*TestResults) ProtoMessage()               {}
func (*TestResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TestResults) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TestResults) GetEntries() *BenchmarkEntries {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *TestResults) GetBuildConfiguration() *BuildConfiguration {
	if m != nil {
		return m.BuildConfiguration
	}
	return nil
}

func (m *TestResults) GetCommitId() *CommitId {
	if m != nil {
		return m.CommitId
	}
	return nil
}

func (m *TestResults) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TestResults) GetRunTime() float64 {
	if m != nil {
		return m.RunTime
	}
	return 0
}

func (m *TestResults) GetMachineConfiguration() *MachineConfiguration {
	if m != nil {
		return m.MachineConfiguration
	}
	return nil
}

func (m *TestResults) GetRunConfiguration() *RunConfiguration {
	if m != nil {
		return m.RunConfiguration
	}
	return nil
}

func (m *TestResults) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestResults) GetBenchmarkType() TestResults_BenchmarkType {
	if m != nil {
		return m.BenchmarkType
	}
	return TestResults_UNKNOWN
}

func (m *TestResults) GetRunMode() string {
	if m != nil {
		return m.RunMode
	}
	return ""
}

func init() {
	proto.RegisterType((*EntryValue)(nil), "tensorflow.EntryValue")
	proto.RegisterType((*BenchmarkEntry)(nil), "tensorflow.BenchmarkEntry")
	proto.RegisterType((*BenchmarkEntries)(nil), "tensorflow.BenchmarkEntries")
	proto.RegisterType((*BuildConfiguration)(nil), "tensorflow.BuildConfiguration")
	proto.RegisterType((*CommitId)(nil), "tensorflow.CommitId")
	proto.RegisterType((*CPUInfo)(nil), "tensorflow.CPUInfo")
	proto.RegisterType((*MemoryInfo)(nil), "tensorflow.MemoryInfo")
	proto.RegisterType((*GPUInfo)(nil), "tensorflow.GPUInfo")
	proto.RegisterType((*PlatformInfo)(nil), "tensorflow.PlatformInfo")
	proto.RegisterType((*AvailableDeviceInfo)(nil), "tensorflow.AvailableDeviceInfo")
	proto.RegisterType((*MachineConfiguration)(nil), "tensorflow.MachineConfiguration")
	proto.RegisterType((*RunConfiguration)(nil), "tensorflow.RunConfiguration")
	proto.RegisterType((*TestResults)(nil), "tensorflow.TestResults")
	proto.RegisterEnum("tensorflow.TestResults_BenchmarkType", TestResults_BenchmarkType_name, TestResults_BenchmarkType_value)
}

func init() { proto.RegisterFile("serving/tensorflow/core/util/test_log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xdb, 0x6e, 0x1b, 0x37,
	0x13, 0x8e, 0x2c, 0xeb, 0xb0, 0x23, 0xdb, 0xbf, 0x4c, 0xcb, 0x81, 0xe2, 0xe4, 0x4f, 0x5d, 0x15,
	0x2d, 0x8c, 0xa6, 0x90, 0x9b, 0x14, 0x3d, 0xa0, 0x68, 0x8b, 0xda, 0x72, 0x1a, 0xbb, 0x89, 0x6d,
	0x95, 0x71, 0x1a, 0xf4, 0xa6, 0x0b, 0x6a, 0x45, 0xad, 0x08, 0xef, 0x92, 0x0b, 0x92, 0xeb, 0x54,
	0x7e, 0x8d, 0x5c, 0xf7, 0xa6, 0x40, 0x1f, 0xa0, 0x6f, 0xd7, 0xcb, 0x82, 0x87, 0x95, 0x56, 0xb1,
	0x73, 0xc7, 0x39, 0xec, 0x70, 0x38, 0xdf, 0x37, 0x33, 0x0b, 0x8f, 0x14, 0x95, 0x57, 0x8c, 0xc7,
	0xfb, 0x9a, 0x72, 0x25, 0xe4, 0x24, 0x11, 0x6f, 0xf6, 0x23, 0x21, 0xe9, 0x7e, 0xae, 0x59, 0xb2,
	0xaf, 0xa9, 0xd2, 0x61, 0x22, 0xe2, 0x7e, 0x26, 0x85, 0x16, 0x08, 0x16, 0x4e, 0x3b, 0xf7, 0x62,
	0x21, 0xe2, 0x84, 0xee, 0x5b, 0xcb, 0x28, 0x9f, 0xec, 0x13, 0x3e, 0x73, 0x6e, 0xbd, 0xdf, 0x01,
	0x9e, 0x72, 0x2d, 0x67, 0xbf, 0x92, 0x24, 0xa7, 0xe8, 0x23, 0x58, 0x1b, 0x8b, 0x7c, 0x94, 0xd0,
	0xf0, 0xca, 0xc8, 0xdd, 0xca, 0x6e, 0x65, 0xaf, 0x72, 0x7c, 0x07, 0xb7, 0x9c, 0x76, 0xee, 0xa4,
	0xb4, 0x64, 0x3c, 0xf6, 0x4e, 0x2b, 0xbb, 0x95, 0xbd, 0xc0, 0x38, 0x39, 0xad, 0x75, 0x3a, 0xac,
	0xc3, 0xea, 0x25, 0xe3, 0xe3, 0xde, 0xdf, 0x2b, 0xb0, 0x71, 0x48, 0x79, 0x34, 0x4d, 0x89, 0xbc,
	0xb4, 0x37, 0x21, 0x04, 0xab, 0x9c, 0xa4, 0x2e, 0x78, 0x80, 0xed, 0x19, 0x75, 0xa0, 0xc6, 0x34,
	0x95, 0xca, 0x06, 0xab, 0x62, 0x27, 0xa0, 0x7b, 0xd0, 0x8c, 0xb2, 0x3c, 0xd4, 0x2c, 0xa5, 0xdd,
	0xaa, 0x49, 0x05, 0x37, 0xa2, 0x2c, 0xbf, 0x60, 0x29, 0x45, 0xf7, 0x21, 0x78, 0x43, 0x92, 0xc4,
	0xd9, 0x56, 0xad, 0xad, 0x69, 0x14, 0xd6, 0xf8, 0x10, 0x40, 0x4f, 0xa5, 0xc8, 0xe3, 0x69, 0x96,
	0xeb, 0x6e, 0xcd, 0x5a, 0x4b, 0x1a, 0xf4, 0x03, 0xd4, 0xe9, 0x1f, 0x5a, 0x12, 0xd5, 0xad, 0xef,
	0x56, 0xf7, 0x5a, 0x4f, 0x3e, 0xe9, 0x2f, 0x8a, 0xd5, 0x5f, 0xce, 0xb6, 0xff, 0xd4, 0x3a, 0xda,
	0x33, 0xf6, 0x5f, 0xed, 0xfc, 0x02, 0xad, 0x92, 0x1a, 0xb5, 0xa1, 0x7a, 0x49, 0x67, 0xfe, 0x3d,
	0xe6, 0x88, 0x3e, 0x83, 0xda, 0xa2, 0x36, 0xad, 0x27, 0x77, 0xcb, 0xf1, 0x17, 0xe5, 0xc6, 0xce,
	0xe9, 0xdb, 0x95, 0x6f, 0x2a, 0xbd, 0x23, 0x68, 0x2f, 0x5d, 0xcc, 0xa8, 0x42, 0x9f, 0x43, 0x8d,
	0x1a, 0xe7, 0x6e, 0xc5, 0x66, 0xb9, 0xf3, 0xfe, 0x2c, 0xb1, 0x73, 0xec, 0xbd, 0x06, 0x74, 0x98,
	0xb3, 0x64, 0x3c, 0x10, 0x7c, 0xc2, 0xe2, 0x5c, 0x12, 0xcd, 0x04, 0x37, 0x05, 0x4f, 0xc5, 0x78,
	0x5e, 0x70, 0x73, 0xb6, 0xa5, 0x8d, 0xc2, 0x49, 0x42, 0x62, 0x53, 0xf3, 0xea, 0x5e, 0x80, 0x1b,
	0x51, 0xf4, 0x93, 0x11, 0x8d, 0xbb, 0xc8, 0xb4, 0xea, 0x56, 0xad, 0xda, 0x9e, 0x7b, 0x13, 0x68,
	0x0e, 0x44, 0x9a, 0x32, 0x7d, 0x32, 0x46, 0xbb, 0x00, 0xd1, 0x94, 0xf0, 0x98, 0x26, 0x4c, 0x69,
	0x1b, 0xb4, 0x7a, 0x7c, 0x07, 0x97, 0x74, 0xa8, 0x03, 0xab, 0x53, 0xa2, 0xa6, 0x73, 0x66, 0x58,
	0x09, 0xed, 0x40, 0x53, 0x71, 0x92, 0xa9, 0xa9, 0xd0, 0x16, 0xcd, 0x00, 0xcf, 0xe5, 0x39, 0x5d,
	0xfe, 0x59, 0x81, 0xc6, 0x60, 0xf8, 0xea, 0x84, 0x4f, 0x84, 0x81, 0x98, 0xe7, 0x69, 0x68, 0x18,
	0xae, 0xdc, 0x35, 0xb8, 0xc9, 0xf3, 0x74, 0x60, 0x64, 0xf4, 0x29, 0x6c, 0xce, 0x8d, 0x21, 0x49,
	0x12, 0xf1, 0x86, 0x8e, 0x3d, 0x79, 0xfe, 0x57, 0x38, 0x1d, 0x38, 0x35, 0x7a, 0x08, 0xad, 0x74,
	0x7a, 0x1d, 0x66, 0x54, 0x86, 0x51, 0x96, 0x7b, 0x26, 0x05, 0xe9, 0xf4, 0x7a, 0x48, 0xe5, 0x20,
	0xcb, 0x0b, 0x9a, 0x31, 0x3e, 0x11, 0x96, 0x4a, 0x81, 0xa5, 0x99, 0xcd, 0xe1, 0x43, 0x58, 0x33,
	0xa6, 0x58, 0x5c, 0x51, 0xc9, 0x85, 0xb4, 0x5c, 0x0a, 0x70, 0x2b, 0xca, 0xf2, 0x67, 0x5e, 0x85,
	0x0e, 0x00, 0x22, 0x12, 0x4d, 0x69, 0xa8, 0xd8, 0x35, 0xf5, 0x84, 0xea, 0x95, 0xa1, 0xf2, 0xef,
	0xe9, 0x0f, 0x8c, 0xd7, 0x4b, 0x76, 0x4d, 0x1d, 0x64, 0x41, 0x54, 0xc8, 0x3b, 0xdf, 0xc1, 0xc6,
	0xb2, 0xf1, 0x16, 0x4a, 0x75, 0xca, 0x94, 0xaa, 0x96, 0xa9, 0xf3, 0x23, 0xc0, 0x29, 0x4d, 0x85,
	0x9c, 0xd9, 0x8c, 0x3b, 0x50, 0xd3, 0x42, 0x93, 0xc4, 0x57, 0xcc, 0x09, 0xe8, 0x01, 0x04, 0xe4,
	0x8a, 0xb0, 0x84, 0x8c, 0x92, 0x22, 0xc2, 0x42, 0xd1, 0xfb, 0x19, 0x1a, 0xcf, 0x7c, 0xd1, 0x3b,
	0x50, 0x33, 0xfc, 0x48, 0xfc, 0xd5, 0x4e, 0x30, 0x94, 0xc8, 0x73, 0xe6, 0x0a, 0x1c, 0x60, 0x7b,
	0x46, 0xdb, 0x50, 0x1f, 0xe5, 0x2a, 0x64, 0x63, 0x0f, 0x66, 0x6d, 0x94, 0xab, 0x93, 0x71, 0xef,
	0xaf, 0x0a, 0xac, 0x0d, 0x13, 0xa2, 0x27, 0x42, 0xa6, 0x36, 0x22, 0x82, 0xd5, 0x11, 0xd3, 0xaa,
	0x60, 0x9f, 0x39, 0xa3, 0x2e, 0x34, 0x12, 0xc6, 0x2f, 0x49, 0xec, 0xa7, 0x07, 0x2e, 0x44, 0x63,
	0x49, 0x49, 0x34, 0x65, 0x9c, 0xfa, 0xb0, 0x85, 0x68, 0x2c, 0x92, 0x26, 0x94, 0x28, 0x5a, 0x80,
	0xe4, 0x45, 0x74, 0x17, 0xea, 0x6a, 0xa6, 0x34, 0x4d, 0x3d, 0x3c, 0x5e, 0x32, 0x5f, 0x5c, 0x51,
	0xa9, 0x98, 0xe0, 0xdd, 0xba, 0xfb, 0xc2, 0x8b, 0xbd, 0xb7, 0x15, 0xd8, 0x3a, 0x28, 0x9e, 0x7f,
	0x44, 0xaf, 0x58, 0x44, 0x8b, 0x5c, 0x6f, 0x8c, 0x26, 0x04, 0xab, 0x7a, 0x96, 0x15, 0x89, 0xda,
	0xb3, 0xa1, 0x45, 0x6a, 0x4b, 0x1e, 0x26, 0x2c, 0x65, 0x8e, 0xce, 0x55, 0xdc, 0x72, 0xba, 0x17,
	0x46, 0x85, 0x1e, 0x43, 0x27, 0x9b, 0xce, 0x14, 0x8b, 0x48, 0x12, 0x8e, 0xa9, 0x8a, 0x24, 0xcb,
	0x4c, 0x33, 0xfa, 0xdc, 0xb7, 0x0a, 0xdb, 0xd1, 0xc2, 0xd4, 0x7b, 0x5b, 0x85, 0xce, 0xa9, 0x7b,
	0xed, 0x72, 0x03, 0xef, 0x40, 0x73, 0x2a, 0x94, 0x2e, 0xa5, 0x36, 0x97, 0xd1, 0x23, 0xd8, 0x54,
	0x54, 0x32, 0x92, 0x84, 0x6c, 0x4c, 0xb9, 0x66, 0x13, 0x46, 0x65, 0xb7, 0x61, 0x9d, 0xda, 0xce,
	0x70, 0x32, 0xd7, 0xa3, 0xef, 0x61, 0x3d, 0xf3, 0xd8, 0x38, 0xba, 0xbb, 0xf9, 0xd4, 0x2d, 0xd3,
	0xb5, 0x0c, 0x1e, 0x5e, 0xcb, 0xca, 0x50, 0xf6, 0x4b, 0x8d, 0x52, 0xb5, 0x5f, 0x6e, 0xdd, 0x42,
	0xf4, 0x45, 0xf7, 0x7c, 0x09, 0xad, 0xb1, 0x2d, 0x6e, 0xd1, 0x5b, 0xa6, 0x37, 0x3a, 0x7d, 0xb7,
	0x8d, 0xfa, 0xc5, 0x36, 0xea, 0x1f, 0xf0, 0x19, 0x86, 0xf1, 0x02, 0x85, 0x97, 0xb0, 0x3d, 0xe7,
	0x66, 0x58, 0x0e, 0x50, 0xb3, 0x01, 0x3e, 0x28, 0xdf, 0x79, 0x0b, 0x8a, 0x78, 0x8b, 0xdc, 0x02,
	0xed, 0xd7, 0xe0, 0xe1, 0x71, 0xa1, 0xea, 0x37, 0x07, 0xf3, 0xa2, 0x89, 0x30, 0xa4, 0xf3, 0x73,
	0xaf, 0x0f, 0x6d, 0x9c, 0xf3, 0x1b, 0x80, 0x10, 0x19, 0xe7, 0x29, 0xe5, 0xda, 0x0e, 0xe7, 0x00,
	0xcf, 0xe5, 0xde, 0x9f, 0x35, 0x68, 0x5d, 0x50, 0xa5, 0x31, 0x55, 0x79, 0xa2, 0x95, 0x61, 0xa7,
	0x26, 0x32, 0xa6, 0xda, 0x43, 0xe7, 0x25, 0xf4, 0x15, 0x34, 0xa8, 0x1b, 0xf4, 0x1e, 0x85, 0x07,
	0xef, 0x9d, 0xef, 0x8c, 0x2a, 0x5c, 0x38, 0xa3, 0x73, 0xd8, 0x1a, 0x99, 0x19, 0x1f, 0x46, 0xe5,
	0x94, 0x3c, 0x1e, 0x0f, 0x97, 0x62, 0xdc, 0x58, 0x05, 0x18, 0x8d, 0x6e, 0xae, 0x87, 0xc7, 0x10,
	0x44, 0x76, 0xb6, 0x9b, 0x5e, 0x5e, 0xb5, 0x61, 0x3a, 0x4b, 0xb0, 0xfa, 0xc1, 0x8f, 0x9b, 0x51,
	0xb1, 0x02, 0xfe, 0x0f, 0xa0, 0x34, 0x91, 0xda, 0xad, 0xdf, 0x9a, 0x9b, 0x27, 0x56, 0x63, 0xf7,
	0xef, 0x3d, 0x68, 0xca, 0x9c, 0x3b, 0x63, 0xdd, 0xed, 0x6d, 0x99, 0x73, 0x6b, 0x7a, 0x05, 0xdb,
	0xbe, 0xa1, 0xdf, 0xc9, 0xbf, 0x61, 0x2f, 0xde, 0x5d, 0x02, 0xe4, 0x96, 0x5e, 0xc0, 0x9d, 0xf4,
	0xb6, 0x0e, 0x39, 0x81, 0x4d, 0x73, 0xe3, 0x72, 0xc8, 0xe6, 0xcd, 0xb2, 0xbe, 0x8b, 0x24, 0x6e,
	0xcb, 0x77, 0xb1, 0x2d, 0x66, 0x40, 0x50, 0x9a, 0x01, 0x2f, 0x60, 0x63, 0x54, 0x00, 0x12, 0xda,
	0x69, 0x00, 0xbb, 0x95, 0xbd, 0x8d, 0x27, 0x1f, 0x97, 0x63, 0x97, 0x40, 0x5f, 0xc0, 0x77, 0x31,
	0xcb, 0x28, 0x5e, 0x1f, 0x95, 0xc5, 0xa2, 0x3c, 0x76, 0x27, 0xb7, 0xfc, 0x28, 0xcb, 0xf9, 0xa9,
	0x18, 0xd3, 0x1e, 0x81, 0xf5, 0xa5, 0x4f, 0x51, 0x0b, 0x1a, 0xaf, 0xce, 0x9e, 0x9f, 0x9d, 0xbf,
	0x3e, 0x6b, 0xdf, 0x41, 0x77, 0x01, 0x0d, 0x86, 0xc3, 0xf0, 0xf4, 0x64, 0x80, 0xcf, 0x0f, 0x9f,
	0x9e, 0x0d, 0x8e, 0x4f, 0x0f, 0xf0, 0xf3, 0x76, 0x05, 0x75, 0xa0, 0x3d, 0xfc, 0xed, 0xe2, 0xf8,
	0xfc, 0x2c, 0x5c, 0x68, 0x57, 0xd0, 0x36, 0x6c, 0x1e, 0x9c, 0x1d, 0xe1, 0xf3, 0x93, 0xa3, 0x92,
	0xba, 0x7a, 0xf8, 0x18, 0xee, 0x0b, 0x19, 0x97, 0x13, 0x37, 0xbf, 0x8f, 0x7d, 0xf3, 0xfb, 0x98,
	0x88, 0xf8, 0x70, 0xdd, 0x3c, 0xe3, 0x85, 0x88, 0x87, 0xa6, 0x3b, 0xd5, 0xb0, 0xf2, 0x6f, 0xa5,
	0x32, 0xaa, 0xdb, 0x56, 0xfd, 0xe2, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x0c, 0x3f, 0xf3,
	0x81, 0x0a, 0x00, 0x00,
}
