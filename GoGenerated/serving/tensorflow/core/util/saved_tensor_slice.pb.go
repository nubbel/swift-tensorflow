// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/util/saved_tensor_slice.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/util/saved_tensor_slice.proto

It has these top-level messages:
	SavedSliceMeta
	SavedTensorSliceMeta
	SavedSlice
	SavedTensorSlices
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "tensorflow/core/framework"
import tensorflow2 "tensorflow/core/framework"
import tensorflow5 "tensorflow/core/framework"
import tensorflow4 "tensorflow/core/framework"
import tensorflow6 "tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metadata describing the set of slices of the same tensor saved in a
// checkpoint file.
type SavedSliceMeta struct {
	// Name of the tensor.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Shape of the tensor
	Shape *tensorflow1.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	// Type of the tensor
	Type tensorflow4.DataType `protobuf:"varint,3,opt,name=type,enum=tensorflow.DataType" json:"type,omitempty"`
	// Explicit list of slices saved in the checkpoint file.
	Slice []*tensorflow2.TensorSliceProto `protobuf:"bytes,4,rep,name=slice" json:"slice,omitempty"`
}

func (m *SavedSliceMeta) Reset()                    { *m = SavedSliceMeta{} }
func (m *SavedSliceMeta) String() string            { return proto.CompactTextString(m) }
func (*SavedSliceMeta) ProtoMessage()               {}
func (*SavedSliceMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SavedSliceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSliceMeta) GetShape() *tensorflow1.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *SavedSliceMeta) GetType() tensorflow4.DataType {
	if m != nil {
		return m.Type
	}
	return tensorflow4.DataType_DT_INVALID
}

func (m *SavedSliceMeta) GetSlice() []*tensorflow2.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

// Metadata describing the set of tensor slices saved in a checkpoint file.
// It is always stored at the beginning of each checkpoint file.
type SavedTensorSliceMeta struct {
	// Each SavedSliceMeta describes the slices for one tensor.
	Tensor []*SavedSliceMeta `protobuf:"bytes,1,rep,name=tensor" json:"tensor,omitempty"`
	// Compatibility version of this checkpoint.  See core/public/version.h
	// for version history.
	Versions *tensorflow6.VersionDef `protobuf:"bytes,2,opt,name=versions" json:"versions,omitempty"`
}

func (m *SavedTensorSliceMeta) Reset()                    { *m = SavedTensorSliceMeta{} }
func (m *SavedTensorSliceMeta) String() string            { return proto.CompactTextString(m) }
func (*SavedTensorSliceMeta) ProtoMessage()               {}
func (*SavedTensorSliceMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SavedTensorSliceMeta) GetTensor() []*SavedSliceMeta {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SavedTensorSliceMeta) GetVersions() *tensorflow6.VersionDef {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Saved tensor slice: it stores the name of the tensors, the slice, and the
// raw data.
type SavedSlice struct {
	// Name of the tensor that this slice belongs to. This must be identical to
	// the name used to encode the key for this record.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Extent of the slice.  Must have one entry for each of the dimension of the
	// tensor that this slice belongs to.
	Slice *tensorflow2.TensorSliceProto `protobuf:"bytes,2,opt,name=slice" json:"slice,omitempty"`
	// The raw data of the slice is stored as a TensorProto. Only raw data are
	// stored (we don't fill in fields such as dtype or tensor_shape).
	Data *tensorflow5.TensorProto `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *SavedSlice) Reset()                    { *m = SavedSlice{} }
func (m *SavedSlice) String() string            { return proto.CompactTextString(m) }
func (*SavedSlice) ProtoMessage()               {}
func (*SavedSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SavedSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSlice) GetSlice() *tensorflow2.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *SavedSlice) GetData() *tensorflow5.TensorProto {
	if m != nil {
		return m.Data
	}
	return nil
}

// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
// message.
type SavedTensorSlices struct {
	// This is only present at the first item of each checkpoint file and serves
	// as a table of contents, listing all the tensor slices saved in this file.
	Meta *SavedTensorSliceMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// This exists in all but the first item of each checkpoint file.
	Data *SavedSlice `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SavedTensorSlices) Reset()                    { *m = SavedTensorSlices{} }
func (m *SavedTensorSlices) String() string            { return proto.CompactTextString(m) }
func (*SavedTensorSlices) ProtoMessage()               {}
func (*SavedTensorSlices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SavedTensorSlices) GetMeta() *SavedTensorSliceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SavedTensorSlices) GetData() *SavedSlice {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SavedSliceMeta)(nil), "tensorflow.SavedSliceMeta")
	proto.RegisterType((*SavedTensorSliceMeta)(nil), "tensorflow.SavedTensorSliceMeta")
	proto.RegisterType((*SavedSlice)(nil), "tensorflow.SavedSlice")
	proto.RegisterType((*SavedTensorSlices)(nil), "tensorflow.SavedTensorSlices")
}

func init() {
	proto.RegisterFile("serving/tensorflow/core/util/saved_tensor_slice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x59, 0x1b, 0x8b, 0x4e, 0xa1, 0xe0, 0x5a, 0x6a, 0x28, 0x1e, 0x42, 0x40, 0x09, 0x2a,
	0x0d, 0xac, 0xfa, 0x07, 0x4a, 0xaf, 0x42, 0x49, 0x8b, 0xd7, 0xb2, 0xb6, 0xdb, 0x1a, 0x6c, 0xb3,
	0x61, 0x37, 0x6d, 0xe9, 0x45, 0xf0, 0x4f, 0xf9, 0xdb, 0x3c, 0xca, 0x4e, 0x52, 0x13, 0x53, 0xa3,
	0xde, 0x16, 0xe6, 0x7b, 0x6f, 0xe6, 0x3d, 0x12, 0xb8, 0xd7, 0x42, 0xad, 0xc3, 0x68, 0xee, 0x27,
	0x22, 0xd2, 0x52, 0xcd, 0x16, 0x72, 0xe3, 0x4f, 0xa4, 0x12, 0xfe, 0x2a, 0x09, 0x17, 0xbe, 0xe6,
	0x6b, 0x31, 0x1d, 0xa7, 0xa3, 0xb1, 0x5e, 0x84, 0x13, 0xd1, 0x8d, 0x95, 0x4c, 0x24, 0x85, 0x1c,
	0xef, 0xdc, 0x94, 0xa5, 0x33, 0xc5, 0x97, 0x62, 0x23, 0xd5, 0x8b, 0xbf, 0x53, 0x3e, 0xf3, 0x38,
	0x53, 0xfe, 0x87, 0xce, 0xf7, 0x74, 0x2e, 0xff, 0xa2, 0x33, 0xee, 0xe2, 0x17, 0x6e, 0x1b, 0x0b,
	0x9d, 0x61, 0x5e, 0x35, 0xb6, 0x16, 0x4a, 0x87, 0x32, 0xca, 0x48, 0xf7, 0x9d, 0x40, 0x73, 0x68,
	0xd2, 0x0f, 0xcd, 0x35, 0x0f, 0x22, 0xe1, 0x94, 0x82, 0x15, 0xf1, 0xa5, 0xb0, 0x89, 0x43, 0xbc,
	0xe3, 0x00, 0xdf, 0x94, 0xc1, 0x21, 0x86, 0xb3, 0x0f, 0x1c, 0xe2, 0x35, 0xd8, 0x79, 0x37, 0x5f,
	0xd0, 0x1d, 0xe1, 0x73, 0x68, 0xc6, 0x03, 0xe3, 0x19, 0xa4, 0x28, 0xf5, 0xc0, 0x32, 0x37, 0xd9,
	0x35, 0x87, 0x78, 0x4d, 0xd6, 0x2a, 0x4a, 0xfa, 0x3c, 0xe1, 0xa3, 0x6d, 0x2c, 0x02, 0x24, 0xd0,
	0xdd, 0xac, 0xb7, 0x2d, 0xa7, 0x56, 0xe1, 0x6e, 0xc6, 0x3b, 0x77, 0xf3, 0x76, 0x5f, 0xa1, 0x85,
	0x77, 0x17, 0xe6, 0x78, 0x3d, 0x83, 0x7a, 0xaa, 0xb6, 0x09, 0x9a, 0x75, 0x8a, 0x66, 0xdf, 0x93,
	0x06, 0x19, 0x49, 0x19, 0x1c, 0xed, 0x6a, 0xc9, 0x02, 0xb6, 0x8b, 0xaa, 0xc7, 0x74, 0xd6, 0x17,
	0xb3, 0xe0, 0x8b, 0x73, 0xdf, 0x08, 0x40, 0x6e, 0x57, 0x59, 0x1a, 0xc6, 0xaa, 0x2e, 0xad, 0x1c,
	0x8b, 0x5e, 0x83, 0x35, 0xe5, 0x09, 0xc7, 0xd2, 0x1a, 0xec, 0x6c, 0x5f, 0x92, 0xd2, 0x08, 0xb9,
	0x2b, 0x38, 0x29, 0x77, 0xa0, 0xe9, 0x1d, 0x58, 0x4b, 0x91, 0x70, 0xbc, 0xa4, 0xc1, 0x9c, 0xbd,
	0xf8, 0xa5, 0xc2, 0x02, 0xa4, 0xe9, 0x55, 0xb6, 0xf7, 0x87, 0xf8, 0x79, 0xca, 0x74, 0x6d, 0x8f,
	0xc1, 0xa9, 0x54, 0xf3, 0x22, 0x62, 0x7e, 0xa2, 0x5e, 0xbb, 0x6c, 0x8f, 0xa7, 0xea, 0x01, 0xf9,
	0x20, 0xe4, 0xa9, 0x8e, 0x9f, 0xdb, 0xed, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x5b, 0xc2,
	0x61, 0x88, 0x03, 0x00, 0x00,
}
