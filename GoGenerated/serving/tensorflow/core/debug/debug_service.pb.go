// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/debug/debug_service.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/debug/debug_service.proto

It has these top-level messages:
	EventReply
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow6 "tensorflow/core/util"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventReply_DebugOpStateChange_Change int32

const (
	EventReply_DebugOpStateChange_DISABLE EventReply_DebugOpStateChange_Change = 0
	EventReply_DebugOpStateChange_ENABLE  EventReply_DebugOpStateChange_Change = 1
)

var EventReply_DebugOpStateChange_Change_name = map[int32]string{
	0: "DISABLE",
	1: "ENABLE",
}
var EventReply_DebugOpStateChange_Change_value = map[string]int32{
	"DISABLE": 0,
	"ENABLE":  1,
}

func (x EventReply_DebugOpStateChange_Change) String() string {
	return proto.EnumName(EventReply_DebugOpStateChange_Change_name, int32(x))
}
func (EventReply_DebugOpStateChange_Change) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

// Reply message from EventListener to the client, i.e., to the source of the
// Event protocol buffers, e.g., debug ops inserted by a debugged runtime to a
// TensorFlow graph being executed.
type EventReply struct {
	DebugOpStateChanges []*EventReply_DebugOpStateChange `protobuf:"bytes,1,rep,name=debug_op_state_changes,json=debugOpStateChanges" json:"debug_op_state_changes,omitempty"`
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (m *EventReply) String() string            { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventReply) GetDebugOpStateChanges() []*EventReply_DebugOpStateChange {
	if m != nil {
		return m.DebugOpStateChanges
	}
	return nil
}

type EventReply_DebugOpStateChange struct {
	Change     EventReply_DebugOpStateChange_Change `protobuf:"varint,1,opt,name=change,enum=tensorflow.EventReply_DebugOpStateChange_Change" json:"change,omitempty"`
	NodeName   string                               `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	OutputSlot int32                                `protobuf:"varint,3,opt,name=output_slot,json=outputSlot" json:"output_slot,omitempty"`
	DebugOp    string                               `protobuf:"bytes,4,opt,name=debug_op,json=debugOp" json:"debug_op,omitempty"`
}

func (m *EventReply_DebugOpStateChange) Reset()         { *m = EventReply_DebugOpStateChange{} }
func (m *EventReply_DebugOpStateChange) String() string { return proto.CompactTextString(m) }
func (*EventReply_DebugOpStateChange) ProtoMessage()    {}
func (*EventReply_DebugOpStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *EventReply_DebugOpStateChange) GetChange() EventReply_DebugOpStateChange_Change {
	if m != nil {
		return m.Change
	}
	return EventReply_DebugOpStateChange_DISABLE
}

func (m *EventReply_DebugOpStateChange) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *EventReply_DebugOpStateChange) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *EventReply_DebugOpStateChange) GetDebugOp() string {
	if m != nil {
		return m.DebugOp
	}
	return ""
}

func init() {
	proto.RegisterType((*EventReply)(nil), "tensorflow.EventReply")
	proto.RegisterType((*EventReply_DebugOpStateChange)(nil), "tensorflow.EventReply.DebugOpStateChange")
	proto.RegisterEnum("tensorflow.EventReply_DebugOpStateChange_Change", EventReply_DebugOpStateChange_Change_name, EventReply_DebugOpStateChange_Change_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventListener service

type EventListenerClient interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error)
}

type eventListenerClient struct {
	cc *grpc.ClientConn
}

func NewEventListenerClient(cc *grpc.ClientConn) EventListenerClient {
	return &eventListenerClient{cc}
}

func (c *eventListenerClient) SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventListener_serviceDesc.Streams[0], c.cc, "/tensorflow.EventListener/SendEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventListenerSendEventsClient{stream}
	return x, nil
}

type EventListener_SendEventsClient interface {
	Send(*tensorflow6.Event) error
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type eventListenerSendEventsClient struct {
	grpc.ClientStream
}

func (x *eventListenerSendEventsClient) Send(m *tensorflow6.Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventListenerSendEventsClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventListener service

type EventListenerServer interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(EventListener_SendEventsServer) error
}

func RegisterEventListenerServer(s *grpc.Server, srv EventListenerServer) {
	s.RegisterService(&_EventListener_serviceDesc, srv)
}

func _EventListener_SendEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventListenerServer).SendEvents(&eventListenerSendEventsServer{stream})
}

type EventListener_SendEventsServer interface {
	Send(*EventReply) error
	Recv() (*tensorflow6.Event, error)
	grpc.ServerStream
}

type eventListenerSendEventsServer struct {
	grpc.ServerStream
}

func (x *eventListenerSendEventsServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventListenerSendEventsServer) Recv() (*tensorflow6.Event, error) {
	m := new(tensorflow6.Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.EventListener",
	HandlerType: (*EventListenerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvents",
			Handler:       _EventListener_SendEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "serving/tensorflow/core/debug/debug_service.proto",
}

func init() { proto.RegisterFile("serving/tensorflow/core/debug/debug_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0xdd, 0x56, 0x69, 0x3b, 0x8d, 0x46, 0xd7, 0xa4, 0xc1, 0x7a, 0x10, 0x7b, 0xc2, 0x0b,
	0x54, 0x3c, 0x7a, 0x52, 0x4b, 0xa2, 0x09, 0xa9, 0x09, 0xdc, 0x25, 0x14, 0x46, 0x24, 0xa1, 0xbb,
	0x84, 0x5d, 0x6a, 0xfc, 0x89, 0xfe, 0x05, 0x7f, 0x8d, 0x61, 0xc1, 0x90, 0x88, 0x07, 0x2f, 0x9b,
	0xdd, 0x97, 0xf7, 0xcd, 0x9b, 0x97, 0x85, 0x6b, 0x81, 0xe5, 0x2e, 0x63, 0xa9, 0x2d, 0x91, 0x09,
	0x5e, 0xbe, 0xe6, 0xfc, 0xdd, 0x8e, 0x79, 0x89, 0x76, 0x82, 0x9b, 0x2a, 0x6d, 0xce, 0x50, 0x79,
	0x62, 0xb4, 0x8a, 0x92, 0x4b, 0x4e, 0xa1, 0xb3, 0xce, 0x8d, 0xdf, 0x58, 0x25, 0xb3, 0xdc, 0xc6,
	0x1d, 0x32, 0xd9, 0xb8, 0x17, 0x9f, 0x03, 0x00, 0xb7, 0x7e, 0xfb, 0x58, 0xe4, 0x1f, 0xf4, 0x05,
	0x66, 0xcd, 0x4c, 0x5e, 0x84, 0x42, 0x46, 0x12, 0xc3, 0xf8, 0x2d, 0x62, 0x29, 0x0a, 0x9d, 0x18,
	0x43, 0x73, 0xea, 0x5c, 0x59, 0xdd, 0x44, 0xab, 0xe3, 0xac, 0x55, 0x0d, 0x3d, 0x17, 0x41, 0x8d,
	0x3c, 0x28, 0xc2, 0x3f, 0x4d, 0x7a, 0x9a, 0x98, 0x7f, 0x11, 0xa0, 0x7d, 0x2f, 0x7d, 0x04, 0xad,
	0xc9, 0xd1, 0x89, 0x41, 0xcc, 0x23, 0x67, 0xf9, 0xef, 0x18, 0xab, 0x4d, 0x6b, 0x79, 0x7a, 0x0e,
	0x13, 0xc6, 0x13, 0x0c, 0x59, 0xb4, 0x45, 0x7d, 0x60, 0x10, 0x73, 0xe2, 0x8f, 0x6b, 0x61, 0x1d,
	0x6d, 0x91, 0x5e, 0xc0, 0x94, 0x57, 0xb2, 0xa8, 0x64, 0x28, 0x72, 0x2e, 0xf5, 0xa1, 0x41, 0xcc,
	0x03, 0x1f, 0x1a, 0x29, 0xc8, 0xb9, 0xa4, 0x67, 0x30, 0xfe, 0xa9, 0xaf, 0xef, 0x2b, 0x78, 0xd4,
	0xb6, 0x58, 0x5c, 0x82, 0xd6, 0x2e, 0x3b, 0x85, 0xd1, 0xea, 0x29, 0xb8, 0xbb, 0xf7, 0xdc, 0xe3,
	0x3d, 0x0a, 0xa0, 0xb9, 0x6b, 0x75, 0x27, 0x8e, 0x07, 0x87, 0x6a, 0x57, 0x2f, 0x13, 0x12, 0x19,
	0x96, 0xf4, 0x16, 0x20, 0x40, 0x96, 0x28, 0x51, 0xd0, 0x93, 0x5e, 0xa9, 0xf9, 0xec, 0xef, 0x9e,
	0x26, 0x59, 0x92, 0x8d, 0xa6, 0x3e, 0xe8, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x32, 0xec,
	0x24, 0x03, 0x02, 0x00, 0x00,
}
