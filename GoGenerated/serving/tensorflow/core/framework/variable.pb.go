// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/framework/variable.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/framework/variable.proto

It has these top-level messages:
	VariableDef
	SaveSliceInfoDef
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing a Variable.
type VariableDef struct {
	// Name of the variable tensor.
	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName" json:"variable_name,omitempty"`
	// Name of the initializer op.
	InitializerName string `protobuf:"bytes,2,opt,name=initializer_name,json=initializerName" json:"initializer_name,omitempty"`
	// Name of the snapshot tensor.
	SnapshotName string `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName" json:"snapshot_name,omitempty"`
	// Support for saving variables as slices of a larger variable.
	SaveSliceInfoDef *SaveSliceInfoDef `protobuf:"bytes,4,opt,name=save_slice_info_def,json=saveSliceInfoDef" json:"save_slice_info_def,omitempty"`
	// Whether to represent this as a ResourceVariable.
	IsResource bool `protobuf:"varint,5,opt,name=is_resource,json=isResource" json:"is_resource,omitempty"`
}

func (m *VariableDef) Reset()                    { *m = VariableDef{} }
func (m *VariableDef) String() string            { return proto.CompactTextString(m) }
func (*VariableDef) ProtoMessage()               {}
func (*VariableDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VariableDef) GetVariableName() string {
	if m != nil {
		return m.VariableName
	}
	return ""
}

func (m *VariableDef) GetInitializerName() string {
	if m != nil {
		return m.InitializerName
	}
	return ""
}

func (m *VariableDef) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *VariableDef) GetSaveSliceInfoDef() *SaveSliceInfoDef {
	if m != nil {
		return m.SaveSliceInfoDef
	}
	return nil
}

func (m *VariableDef) GetIsResource() bool {
	if m != nil {
		return m.IsResource
	}
	return false
}

type SaveSliceInfoDef struct {
	// Name of the full variable of which this is a slice.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	// Shape of the full variable.
	FullShape []int64 `protobuf:"varint,2,rep,packed,name=full_shape,json=fullShape" json:"full_shape,omitempty"`
	// Offset of this variable into the full variable.
	VarOffset []int64 `protobuf:"varint,3,rep,packed,name=var_offset,json=varOffset" json:"var_offset,omitempty"`
	// Shape of this variable.
	VarShape []int64 `protobuf:"varint,4,rep,packed,name=var_shape,json=varShape" json:"var_shape,omitempty"`
}

func (m *SaveSliceInfoDef) Reset()                    { *m = SaveSliceInfoDef{} }
func (m *SaveSliceInfoDef) String() string            { return proto.CompactTextString(m) }
func (*SaveSliceInfoDef) ProtoMessage()               {}
func (*SaveSliceInfoDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SaveSliceInfoDef) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *SaveSliceInfoDef) GetFullShape() []int64 {
	if m != nil {
		return m.FullShape
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarOffset() []int64 {
	if m != nil {
		return m.VarOffset
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarShape() []int64 {
	if m != nil {
		return m.VarShape
	}
	return nil
}

func init() {
	proto.RegisterType((*VariableDef)(nil), "tensorflow.VariableDef")
	proto.RegisterType((*SaveSliceInfoDef)(nil), "tensorflow.SaveSliceInfoDef")
}

func init() { proto.RegisterFile("serving/tensorflow/core/framework/variable.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xb3, 0x16, 0x0d, 0x0c, 0xa2, 0xa4, 0x5e, 0x9a, 0xa8, 0x91, 0xc0, 0xa5, 0x5e, 0xa8,
	0xd1, 0x37, 0x20, 0x5c, 0x8c, 0x89, 0x92, 0x92, 0x78, 0x6d, 0x16, 0x9c, 0x85, 0x8d, 0xa5, 0x4b,
	0x66, 0xca, 0x92, 0xf8, 0x08, 0x3e, 0xad, 0x47, 0x8f, 0x66, 0xb7, 0x54, 0x08, 0xd7, 0xef, 0xff,
	0x66, 0x32, 0x93, 0x1f, 0x1e, 0x18, 0xc9, 0xea, 0x62, 0x91, 0x94, 0x58, 0xb0, 0x21, 0x95, 0x9b,
	0x6d, 0x32, 0x37, 0x84, 0x89, 0x22, 0xb9, 0xc2, 0xad, 0xa1, 0xcf, 0xc4, 0x4a, 0xd2, 0x72, 0x96,
	0xe3, 0x70, 0x4d, 0xa6, 0x34, 0x21, 0xec, 0xcd, 0xfe, 0x8f, 0x80, 0xf6, 0xfb, 0x2e, 0x1e, 0xa3,
	0x0a, 0x07, 0xd0, 0xa9, 0xed, 0xac, 0x90, 0x2b, 0x8c, 0x44, 0x4f, 0xc4, 0xad, 0xf4, 0xbc, 0x86,
	0xaf, 0x72, 0x85, 0xe1, 0x3d, 0x74, 0x75, 0xa1, 0x4b, 0x2d, 0x73, 0xfd, 0x85, 0x54, 0x79, 0x27,
	0xde, 0xbb, 0x3c, 0xe0, 0x5e, 0x1d, 0x40, 0x87, 0x0b, 0xb9, 0xe6, 0xa5, 0x29, 0x2b, 0x2f, 0xa8,
	0xf6, 0xd5, 0xd0, 0x4b, 0x2f, 0x70, 0xc5, 0xd2, 0x62, 0xc6, 0xb9, 0x9e, 0x63, 0xa6, 0x0b, 0x65,
	0xb2, 0x0f, 0x54, 0x51, 0xa3, 0x27, 0xe2, 0xf6, 0xe3, 0xcd, 0x70, 0x7f, 0xee, 0x70, 0x2a, 0x2d,
	0x4e, 0x9d, 0xf5, 0x5c, 0x28, 0x33, 0x46, 0x95, 0x76, 0xf9, 0x88, 0x84, 0x77, 0xd0, 0xd6, 0x9c,
	0x11, 0xb2, 0xd9, 0xd0, 0x1c, 0xa3, 0xd3, 0x9e, 0x88, 0x9b, 0x29, 0x68, 0x4e, 0x77, 0xa4, 0xff,
	0x2d, 0xa0, 0x7b, 0xbc, 0x27, 0xbc, 0x86, 0x96, 0xda, 0xe4, 0xf9, 0xe1, 0xcf, 0x4d, 0x07, 0xfc,
	0x7d, 0xb7, 0x00, 0x3e, 0xe4, 0xa5, 0x5c, 0xbb, 0x4f, 0x83, 0x38, 0x48, 0xbd, 0x3e, 0x75, 0xc0,
	0xc5, 0x56, 0x52, 0x66, 0x94, 0x62, 0x2c, 0xa3, 0xa0, 0x8a, 0xad, 0xa4, 0x37, 0x0f, 0xdc, 0x6a,
	0x17, 0x57, 0xc3, 0x0d, 0x9f, 0x36, 0xad, 0x24, 0x3f, 0x3b, 0x4a, 0x20, 0x32, 0xb4, 0x38, 0x7c,
	0xf1, 0xbf, 0xb6, 0xd1, 0x45, 0x5d, 0xcc, 0xc4, 0xd5, 0xc6, 0x13, 0xf1, 0x2b, 0xc4, 0xec, 0xcc,
	0x77, 0xf8, 0xf4, 0x17, 0x00, 0x00, 0xff, 0xff, 0x38, 0xae, 0x88, 0x86, 0xf7, 0x01, 0x00, 0x00,
}
