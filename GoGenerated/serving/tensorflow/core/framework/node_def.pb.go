// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/framework/node_def.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/framework/node_def.proto

It has these top-level messages:
	NodeDef
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow5 "tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeDef struct {
	// The name given to this operator. Used for naming inputs,
	// logging, visualization, etc.  Unique within a single GraphDef.
	// Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The operation name.  There may be custom parameters in attrs.
	// Op names starting with an underscore are reserved for internal use.
	Op string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	// Each input is "node:src_output" with "node" being a string name and
	// "src_output" indicating which output tensor to use from "node". If
	// "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
	// may optionally be followed by control inputs that have the format
	// "^node".
	Input []string `protobuf:"bytes,3,rep,name=input" json:"input,omitempty"`
	// A (possibly partial) specification for the device on which this
	// node should be placed.
	// The expected syntax for this string is as follows:
	//
	// DEVICE_SPEC ::= PARTIAL_SPEC
	//
	// PARTIAL_SPEC ::= ("/" CONSTRAINT) *
	// CONSTRAINT ::= ("job:" JOB_NAME)
	//              | ("replica:" [1-9][0-9]*)
	//              | ("task:" [1-9][0-9]*)
	//              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
	//
	// Valid values for this string include:
	// * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
	// * "/job:worker/gpu:3"                   (partial specification)
	// * ""                                    (no specification)
	//
	// If the constraints do not resolve to a single device (or if this
	// field is empty or not present), the runtime will attempt to
	// choose a device automatically.
	Device string `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
	// Operation-specific graph-construction-time configuration.
	// Note that this should include all attrs defined in the
	// corresponding OpDef, including those with a value matching
	// the default -- this allows the default to change and makes
	// NodeDefs easier to interpret on their own.  However, if
	// an attr with a default is not specified in this list, the
	// default will be used.
	// The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
	// one of the names from the corresponding OpDef's attr field).
	// The values must have a type matching the corresponding OpDef
	// attr's type field.
	// TODO(josh11b): Add some examples here showing best practices.
	Attr map[string]*tensorflow5.AttrValue `protobuf:"bytes,5,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeDef) Reset()                    { *m = NodeDef{} }
func (m *NodeDef) String() string            { return proto.CompactTextString(m) }
func (*NodeDef) ProtoMessage()               {}
func (*NodeDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeDef) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *NodeDef) GetInput() []string {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *NodeDef) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *NodeDef) GetAttr() map[string]*tensorflow5.AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeDef)(nil), "tensorflow.NodeDef")
}

func init() { proto.RegisterFile("serving/tensorflow/core/framework/node_def.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0x87, 0xd9, 0xfc, 0xe9, 0x4b, 0xa6, 0xf0, 0x22, 0x8b, 0xca, 0x52, 0x10, 0x82, 0xa7, 0x50,
	0x21, 0xd1, 0x7a, 0x11, 0x6f, 0x16, 0xbd, 0x96, 0x92, 0x83, 0xd7, 0x12, 0x9b, 0x49, 0x09, 0x6d,
	0x77, 0xc2, 0x74, 0x9b, 0xd2, 0x2f, 0xeb, 0xe7, 0xf0, 0x28, 0xbb, 0x09, 0x6d, 0x2f, 0xde, 0x66,
	0x66, 0x9f, 0xd9, 0x79, 0xf8, 0xc1, 0xe3, 0x0e, 0xb9, 0xad, 0xf5, 0x2a, 0x33, 0xa8, 0x77, 0xc4,
	0xd5, 0x86, 0x0e, 0xd9, 0x92, 0x18, 0xb3, 0x8a, 0x8b, 0x2d, 0x1e, 0x88, 0xd7, 0x99, 0xa6, 0x12,
	0x17, 0x25, 0x56, 0x69, 0xc3, 0x64, 0x48, 0xc2, 0x99, 0x1c, 0x8d, 0xff, 0xde, 0x2a, 0x8c, 0xe1,
	0x45, 0x5b, 0x6c, 0xf6, 0xd8, 0xed, 0xdd, 0x7f, 0x0b, 0xf8, 0x37, 0xa3, 0x12, 0xdf, 0xb1, 0x92,
	0x12, 0x02, 0x5d, 0x6c, 0x51, 0x89, 0x58, 0x24, 0x51, 0xee, 0x6a, 0xf9, 0x1f, 0x3c, 0x6a, 0x94,
	0xe7, 0x26, 0x1e, 0x35, 0xf2, 0x1a, 0xc2, 0x5a, 0x37, 0x7b, 0xa3, 0xfc, 0xd8, 0x4f, 0xa2, 0xbc,
	0x6b, 0xe4, 0x2d, 0x0c, 0x4a, 0x6c, 0xeb, 0x25, 0xaa, 0xc0, 0x91, 0x7d, 0x27, 0x9f, 0x20, 0xb0,
	0x17, 0x55, 0x18, 0xfb, 0xc9, 0x70, 0x72, 0x97, 0x9e, 0xc5, 0xd2, 0xfe, 0x68, 0xfa, 0x66, 0x0c,
	0x7f, 0x68, 0xc3, 0xc7, 0xdc, 0xa1, 0xa3, 0x19, 0x44, 0xa7, 0x91, 0xbc, 0x02, 0x7f, 0x8d, 0xc7,
	0x5e, 0xc8, 0x96, 0xf2, 0x01, 0x42, 0xa7, 0xef, 0x94, 0x86, 0x93, 0x9b, 0xcb, 0x2f, 0xed, 0xde,
	0xa7, 0x7d, 0xcc, 0x3b, 0xe6, 0xd5, 0x7b, 0x11, 0xd3, 0x31, 0x28, 0xe2, 0xd5, 0x25, 0x76, 0x4a,
	0x63, 0x1a, 0x59, 0x89, 0xb9, 0xcd, 0x61, 0x2e, 0x7e, 0x84, 0xf8, 0x1a, 0xb8, 0x4c, 0x9e, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xe6, 0xbd, 0xbc, 0x7f, 0x01, 0x00, 0x00,
}
