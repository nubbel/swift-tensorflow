// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/framework/tensor.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/framework/tensor.proto

It has these top-level messages:
	TensorProto
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "tensorflow/core/framework"
import tensorflow2 "tensorflow/core/framework"
import tensorflow3 "tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing a tensor.
type TensorProto struct {
	Dtype tensorflow3.DataType `protobuf:"varint,1,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	// Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
	TensorShape *tensorflow2.TensorShapeProto `protobuf:"bytes,2,opt,name=tensor_shape,json=tensorShape" json:"tensor_shape,omitempty"`
	// Version number.
	//
	// In version 0, if the "repeated xxx" representations contain only one
	// element, that element is repeated to fill the shape.  This makes it easy
	// to represent a constant Tensor with a single value.
	VersionNumber int32 `protobuf:"varint,3,opt,name=version_number,json=versionNumber" json:"version_number,omitempty"`
	// Serialized raw tensor content from either Tensor::AsProtoTensorContent or
	// memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
	// can be used for all tensor types. The purpose of this representation is to
	// reduce serialization overhead during RPC call by avoiding serialization of
	// many repeated small items.
	TensorContent []byte `protobuf:"bytes,4,opt,name=tensor_content,json=tensorContent,proto3" json:"tensor_content,omitempty"`
	// DT_HALF. Note that since protobuf has no int16 type, we'll have some
	// pointless zero padding for each value here.
	HalfVal []int32 `protobuf:"varint,13,rep,packed,name=half_val,json=halfVal" json:"half_val,omitempty"`
	// DT_FLOAT.
	FloatVal []float32 `protobuf:"fixed32,5,rep,packed,name=float_val,json=floatVal" json:"float_val,omitempty"`
	// DT_DOUBLE.
	DoubleVal []float64 `protobuf:"fixed64,6,rep,packed,name=double_val,json=doubleVal" json:"double_val,omitempty"`
	// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
	IntVal []int32 `protobuf:"varint,7,rep,packed,name=int_val,json=intVal" json:"int_val,omitempty"`
	// DT_STRING
	StringVal [][]byte `protobuf:"bytes,8,rep,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
	// and imaginary parts of i-th single precision complex.
	ScomplexVal []float32 `protobuf:"fixed32,9,rep,packed,name=scomplex_val,json=scomplexVal" json:"scomplex_val,omitempty"`
	// DT_INT64
	Int64Val []int64 `protobuf:"varint,10,rep,packed,name=int64_val,json=int64Val" json:"int64_val,omitempty"`
	// DT_BOOL
	BoolVal []bool `protobuf:"varint,11,rep,packed,name=bool_val,json=boolVal" json:"bool_val,omitempty"`
	// DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
	// and imaginary parts of i-th double precision complex.
	DcomplexVal []float64 `protobuf:"fixed64,12,rep,packed,name=dcomplex_val,json=dcomplexVal" json:"dcomplex_val,omitempty"`
	// DT_RESOURCE
	ResourceHandleVal []*tensorflow1.ResourceHandle `protobuf:"bytes,14,rep,name=resource_handle_val,json=resourceHandleVal" json:"resource_handle_val,omitempty"`
}

func (m *TensorProto) Reset()                    { *m = TensorProto{} }
func (m *TensorProto) String() string            { return proto.CompactTextString(m) }
func (*TensorProto) ProtoMessage()               {}
func (*TensorProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TensorProto) GetDtype() tensorflow3.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow3.DataType_DT_INVALID
}

func (m *TensorProto) GetTensorShape() *tensorflow2.TensorShapeProto {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func (m *TensorProto) GetVersionNumber() int32 {
	if m != nil {
		return m.VersionNumber
	}
	return 0
}

func (m *TensorProto) GetTensorContent() []byte {
	if m != nil {
		return m.TensorContent
	}
	return nil
}

func (m *TensorProto) GetHalfVal() []int32 {
	if m != nil {
		return m.HalfVal
	}
	return nil
}

func (m *TensorProto) GetFloatVal() []float32 {
	if m != nil {
		return m.FloatVal
	}
	return nil
}

func (m *TensorProto) GetDoubleVal() []float64 {
	if m != nil {
		return m.DoubleVal
	}
	return nil
}

func (m *TensorProto) GetIntVal() []int32 {
	if m != nil {
		return m.IntVal
	}
	return nil
}

func (m *TensorProto) GetStringVal() [][]byte {
	if m != nil {
		return m.StringVal
	}
	return nil
}

func (m *TensorProto) GetScomplexVal() []float32 {
	if m != nil {
		return m.ScomplexVal
	}
	return nil
}

func (m *TensorProto) GetInt64Val() []int64 {
	if m != nil {
		return m.Int64Val
	}
	return nil
}

func (m *TensorProto) GetBoolVal() []bool {
	if m != nil {
		return m.BoolVal
	}
	return nil
}

func (m *TensorProto) GetDcomplexVal() []float64 {
	if m != nil {
		return m.DcomplexVal
	}
	return nil
}

func (m *TensorProto) GetResourceHandleVal() []*tensorflow1.ResourceHandle {
	if m != nil {
		return m.ResourceHandleVal
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorProto)(nil), "tensorflow.TensorProto")
}

func init() { proto.RegisterFile("serving/tensorflow/core/framework/tensor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8f, 0xd3, 0x30,
	0x10, 0x85, 0xe5, 0x7a, 0xdb, 0xa6, 0x93, 0xb4, 0x82, 0xc0, 0x21, 0x2a, 0xac, 0x30, 0x48, 0x95,
	0x2c, 0x04, 0xad, 0x54, 0x10, 0x57, 0xa4, 0xc2, 0x01, 0x71, 0x40, 0xab, 0xb0, 0xda, 0x6b, 0xe5,
	0x36, 0x6e, 0x1b, 0xe1, 0xda, 0x91, 0xed, 0x76, 0xd9, 0x9f, 0xc7, 0xbf, 0xe2, 0x88, 0x32, 0xce,
	0xb6, 0x81, 0xc3, 0x72, 0xcc, 0x7b, 0xdf, 0x9b, 0x37, 0x56, 0x06, 0xa6, 0x4e, 0xda, 0x63, 0xa9,
	0xb7, 0x33, 0x2f, 0xb5, 0x33, 0x76, 0xa3, 0xcc, 0xed, 0x6c, 0x6d, 0xac, 0x9c, 0x6d, 0xac, 0xd8,
	0xcb, 0x5b, 0x63, 0x7f, 0x34, 0xce, 0xb4, 0xb2, 0xc6, 0x9b, 0x14, 0xce, 0xdc, 0xf8, 0x81, 0x8c,
	0x95, 0xce, 0x1c, 0xec, 0x5a, 0x2e, 0x77, 0x42, 0x17, 0x4a, 0x86, 0xf0, 0xf8, 0xcd, 0xff, 0x4a,
	0x96, 0x6e, 0x27, 0xaa, 0x7b, 0x7a, 0xf2, 0x00, 0x7d, 0x57, 0x49, 0x17, 0xb0, 0x57, 0xbf, 0x2e,
	0x20, 0xbe, 0x46, 0xf2, 0x0a, 0x37, 0x7c, 0x0d, 0xdd, 0xa2, 0xf6, 0x33, 0xc2, 0x08, 0x1f, 0xcd,
	0x9f, 0x4e, 0xcf, 0x63, 0xa6, 0x9f, 0x85, 0x17, 0xd7, 0x77, 0x95, 0xcc, 0x03, 0x92, 0x7e, 0x84,
	0xa4, 0x5d, 0x9c, 0x75, 0x18, 0xe1, 0xf1, 0xfc, 0x79, 0x3b, 0x12, 0x46, 0x7f, 0xaf, 0x6d, 0x9c,
	0x9f, 0xc7, 0xfe, 0xac, 0xa4, 0x13, 0x18, 0x1d, 0xa5, 0x75, 0xa5, 0xd1, 0x4b, 0x7d, 0xd8, 0xaf,
	0xa4, 0xcd, 0x28, 0x23, 0xbc, 0x9b, 0x0f, 0x1b, 0xf5, 0x1b, 0x8a, 0x35, 0xd6, 0xf4, 0xac, 0x8d,
	0xf6, 0x52, 0xfb, 0xec, 0x82, 0x11, 0x9e, 0xe4, 0xc3, 0xa0, 0x7e, 0x0a, 0x62, 0x7a, 0x09, 0xd1,
	0x4e, 0xa8, 0xcd, 0xf2, 0x28, 0x54, 0x36, 0x64, 0x94, 0x77, 0x17, 0x9d, 0x47, 0x24, 0xef, 0xd7,
	0xda, 0x8d, 0x50, 0xe9, 0x0b, 0x18, 0x6c, 0x94, 0x11, 0x1e, 0xfd, 0x2e, 0xa3, 0xbc, 0x83, 0x7e,
	0x84, 0x62, 0x0d, 0xbc, 0x04, 0x28, 0xcc, 0x61, 0xa5, 0x24, 0x12, 0x3d, 0x46, 0x39, 0x41, 0x62,
	0x10, 0xd4, 0x1a, 0x79, 0x06, 0xfd, 0x52, 0x87, 0x09, 0xfd, 0x53, 0x43, 0xaf, 0xd4, 0x98, 0xbf,
	0x04, 0x70, 0xde, 0x96, 0x7a, 0x8b, 0x7e, 0xc4, 0x28, 0x4f, 0xf2, 0x41, 0x50, 0x6a, 0x7b, 0x02,
	0x89, 0x5b, 0x9b, 0x7d, 0xa5, 0xe4, 0x4f, 0x04, 0x06, 0xa7, 0x15, 0xe2, 0x7b, 0xbd, 0x59, 0xb3,
	0xd4, 0xfe, 0xc3, 0x7b, 0x64, 0x80, 0x51, 0x4e, 0xc3, 0x9a, 0x28, 0x86, 0x9a, 0x68, 0x65, 0x8c,
	0x42, 0x3f, 0x66, 0x94, 0x47, 0xe1, 0x99, 0xb5, 0xd6, 0xd4, 0x14, 0xed, 0x9a, 0xe4, 0xf4, 0x8e,
	0xb8, 0x68, 0xd5, 0x7c, 0x85, 0x27, 0xff, 0x5c, 0x19, 0xd2, 0x23, 0x46, 0x79, 0x3c, 0x1f, 0xb7,
	0x7f, 0x61, 0xde, 0x60, 0x5f, 0x90, 0xca, 0x1f, 0xdb, 0xbf, 0xbe, 0x6f, 0x84, 0x5a, 0xbc, 0x85,
	0xcc, 0xd8, 0x6d, 0x3b, 0x73, 0xba, 0xb5, 0x45, 0xd2, 0x3a, 0x2e, 0x77, 0x45, 0x7e, 0x13, 0xb2,
	0xea, 0xe1, 0xe5, 0xbd, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x97, 0x2c, 0xf5, 0x3d, 0x03,
	0x00, 0x00,
}
