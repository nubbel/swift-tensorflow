// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/grappler/costs/op_performance_data.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/grappler/costs/op_performance_data.proto

It has these top-level messages:
	OpInfo
	OpPerformance
	OpPerformanceList
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow4 "tensorflow/core/framework"
import tensorflow2 "tensorflow/core/framework"
import tensorflow3 "tensorflow/core/framework"
import tensorflow5 "tensorflow/core/framework"
import tensorflow6 "tensorflow/core/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Description of an operation as well as the parameters expected to impact its
// performance.
type OpInfo struct {
	// The operation name.  There may be custom parameters in attrs.
	Op string `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	// Custom parameters impacting the behavior of the op.
	Attr   map[string]*tensorflow5.AttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Inputs []*OpInfo_TensorProperties        `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
	// Device on which the operation is run.
	Device *tensorflow6.DeviceProperties `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
}

func (m *OpInfo) Reset()                    { *m = OpInfo{} }
func (m *OpInfo) String() string            { return proto.CompactTextString(m) }
func (*OpInfo) ProtoMessage()               {}
func (*OpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpInfo) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *OpInfo) GetAttr() map[string]*tensorflow5.AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *OpInfo) GetInputs() []*OpInfo_TensorProperties {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *OpInfo) GetDevice() *tensorflow6.DeviceProperties {
	if m != nil {
		return m.Device
	}
	return nil
}

// Input types, shapes and values if known.
type OpInfo_TensorProperties struct {
	Dtype tensorflow3.DataType          `protobuf:"varint,1,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape *tensorflow2.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Value *tensorflow4.TensorProto      `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *OpInfo_TensorProperties) Reset()                    { *m = OpInfo_TensorProperties{} }
func (m *OpInfo_TensorProperties) String() string            { return proto.CompactTextString(m) }
func (*OpInfo_TensorProperties) ProtoMessage()               {}
func (*OpInfo_TensorProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *OpInfo_TensorProperties) GetDtype() tensorflow3.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow3.DataType_DT_INVALID
}

func (m *OpInfo_TensorProperties) GetShape() *tensorflow2.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *OpInfo_TensorProperties) GetValue() *tensorflow4.TensorProto {
	if m != nil {
		return m.Value
	}
	return nil
}

// Performance data for tensorflow operations
type OpPerformance struct {
	// The op
	Op *OpInfo `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	// The node name (optional). Makes it easier to associate the performance data
	// with a specific graph node.
	Node string `protobuf:"bytes,5,opt,name=node" json:"node,omitempty"`
	// Temporary memory used by this node (in bytes).
	TemporaryMemorySize int64 `protobuf:"varint,2,opt,name=temporary_memory_size,json=temporaryMemorySize" json:"temporary_memory_size,omitempty"`
	// Time it takes to run the op (in nanoseconds).
	ComputeCost int64 `protobuf:"varint,3,opt,name=compute_cost,json=computeCost" json:"compute_cost,omitempty"`
	// Analytical compute cost (in nanoseconds).
	ComputeTime int64 `protobuf:"varint,6,opt,name=compute_time,json=computeTime" json:"compute_time,omitempty"`
	// Analytical memory access cost (in nanoseconds).
	MemoryTime int64 `protobuf:"varint,7,opt,name=memory_time,json=memoryTime" json:"memory_time,omitempty"`
	// Percentage of theoretical compute performance.
	ComputeEfficiency float64 `protobuf:"fixed64,4,opt,name=compute_efficiency,json=computeEfficiency" json:"compute_efficiency,omitempty"`
	// Percentage of theoretical memory performance.
	MemoryEfficiency float64                 `protobuf:"fixed64,8,opt,name=memory_efficiency,json=memoryEfficiency" json:"memory_efficiency,omitempty"`
	OpMemory         *OpPerformance_OpMemory `protobuf:"bytes,9,opt,name=op_memory,json=opMemory" json:"op_memory,omitempty"`
}

func (m *OpPerformance) Reset()                    { *m = OpPerformance{} }
func (m *OpPerformance) String() string            { return proto.CompactTextString(m) }
func (*OpPerformance) ProtoMessage()               {}
func (*OpPerformance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpPerformance) GetOp() *OpInfo {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *OpPerformance) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *OpPerformance) GetTemporaryMemorySize() int64 {
	if m != nil {
		return m.TemporaryMemorySize
	}
	return 0
}

func (m *OpPerformance) GetComputeCost() int64 {
	if m != nil {
		return m.ComputeCost
	}
	return 0
}

func (m *OpPerformance) GetComputeTime() int64 {
	if m != nil {
		return m.ComputeTime
	}
	return 0
}

func (m *OpPerformance) GetMemoryTime() int64 {
	if m != nil {
		return m.MemoryTime
	}
	return 0
}

func (m *OpPerformance) GetComputeEfficiency() float64 {
	if m != nil {
		return m.ComputeEfficiency
	}
	return 0
}

func (m *OpPerformance) GetMemoryEfficiency() float64 {
	if m != nil {
		return m.MemoryEfficiency
	}
	return 0
}

func (m *OpPerformance) GetOpMemory() *OpPerformance_OpMemory {
	if m != nil {
		return m.OpMemory
	}
	return nil
}

// Memory usage data for a tensorflow operation.
type OpPerformance_OpMemory struct {
	// The output information may have memory usage and output shapes.
	OutputMemory []int64 `protobuf:"varint,1,rep,packed,name=output_memory,json=outputMemory" json:"output_memory,omitempty"`
	// Temporary memory allocated by this node.
	HostTempMemory   int64 `protobuf:"varint,2,opt,name=host_temp_memory,json=hostTempMemory" json:"host_temp_memory,omitempty"`
	DeviceTempMemory int64 `protobuf:"varint,3,opt,name=device_temp_memory,json=deviceTempMemory" json:"device_temp_memory,omitempty"`
	// The persisted_memory doesn't include outputs.
	HostPersistentMemory   int64 `protobuf:"varint,4,opt,name=host_persistent_memory,json=hostPersistentMemory" json:"host_persistent_memory,omitempty"`
	DevicePersistentMemory int64 `protobuf:"varint,5,opt,name=device_persistent_memory,json=devicePersistentMemory" json:"device_persistent_memory,omitempty"`
}

func (m *OpPerformance_OpMemory) Reset()                    { *m = OpPerformance_OpMemory{} }
func (m *OpPerformance_OpMemory) String() string            { return proto.CompactTextString(m) }
func (*OpPerformance_OpMemory) ProtoMessage()               {}
func (*OpPerformance_OpMemory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *OpPerformance_OpMemory) GetOutputMemory() []int64 {
	if m != nil {
		return m.OutputMemory
	}
	return nil
}

func (m *OpPerformance_OpMemory) GetHostTempMemory() int64 {
	if m != nil {
		return m.HostTempMemory
	}
	return 0
}

func (m *OpPerformance_OpMemory) GetDeviceTempMemory() int64 {
	if m != nil {
		return m.DeviceTempMemory
	}
	return 0
}

func (m *OpPerformance_OpMemory) GetHostPersistentMemory() int64 {
	if m != nil {
		return m.HostPersistentMemory
	}
	return 0
}

func (m *OpPerformance_OpMemory) GetDevicePersistentMemory() int64 {
	if m != nil {
		return m.DevicePersistentMemory
	}
	return 0
}

// A collection of OpPerformance data points.
type OpPerformanceList struct {
	OpPerformance []*OpPerformance `protobuf:"bytes,1,rep,name=op_performance,json=opPerformance" json:"op_performance,omitempty"`
}

func (m *OpPerformanceList) Reset()                    { *m = OpPerformanceList{} }
func (m *OpPerformanceList) String() string            { return proto.CompactTextString(m) }
func (*OpPerformanceList) ProtoMessage()               {}
func (*OpPerformanceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OpPerformanceList) GetOpPerformance() []*OpPerformance {
	if m != nil {
		return m.OpPerformance
	}
	return nil
}

func init() {
	proto.RegisterType((*OpInfo)(nil), "tensorflow.OpInfo")
	proto.RegisterType((*OpInfo_TensorProperties)(nil), "tensorflow.OpInfo.TensorProperties")
	proto.RegisterType((*OpPerformance)(nil), "tensorflow.OpPerformance")
	proto.RegisterType((*OpPerformance_OpMemory)(nil), "tensorflow.OpPerformance.OpMemory")
	proto.RegisterType((*OpPerformanceList)(nil), "tensorflow.OpPerformanceList")
}

func init() {
	proto.RegisterFile("serving/tensorflow/core/grappler/costs/op_performance_data.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xa6, 0x2d, 0xeb, 0xe9, 0x56, 0x75, 0x66, 0x1b, 0xa1, 0x42, 0xa2, 0x74, 0x02,
	0x55, 0xfb, 0xd3, 0x4e, 0x65, 0x17, 0x13, 0x5c, 0x30, 0xfe, 0xec, 0x02, 0x09, 0x58, 0x95, 0x15,
	0x6e, 0xa3, 0x2c, 0x75, 0xb6, 0x68, 0x4b, 0x6c, 0xd9, 0xee, 0xa6, 0xec, 0x6d, 0x78, 0x04, 0x9e,
	0x0e, 0xb8, 0x43, 0x39, 0x76, 0xb2, 0xb4, 0x63, 0x70, 0xe7, 0x9e, 0xf3, 0xfb, 0x3e, 0x1f, 0x7f,
	0x6e, 0x0c, 0x87, 0x92, 0x8a, 0xab, 0x28, 0x39, 0x1b, 0x2a, 0x9a, 0x48, 0x26, 0xc2, 0x4b, 0x76,
	0x3d, 0x0c, 0x98, 0xa0, 0xc3, 0x33, 0xe1, 0x73, 0x7e, 0x49, 0xc5, 0x30, 0x60, 0x52, 0xc9, 0x21,
	0xe3, 0x1e, 0xa7, 0x22, 0x64, 0x22, 0xf6, 0x93, 0x80, 0x7a, 0x53, 0x5f, 0xf9, 0x03, 0x2e, 0x98,
	0x62, 0x04, 0x6e, 0x95, 0x9d, 0x17, 0x8b, 0x2e, 0xa1, 0xf0, 0x63, 0x7a, 0xcd, 0xc4, 0x85, 0xf1,
	0xd7, 0x9a, 0xce, 0xce, 0xff, 0x38, 0x4f, 0x9e, 0xfb, 0x9c, 0x1a, 0xfa, 0xf9, 0x3f, 0xe8, 0x94,
	0x53, 0x69, 0xb0, 0xad, 0xfb, 0x31, 0x5f, 0x29, 0xe1, 0x5d, 0xf9, 0x97, 0xb3, 0xdc, 0x72, 0x6f,
	0x91, 0xc5, 0xf2, 0xe9, 0x2c, 0x1c, 0x4e, 0xe9, 0x55, 0x14, 0x50, 0x8f, 0x0b, 0xc6, 0xa9, 0x50,
	0x51, 0xee, 0xde, 0xfb, 0x61, 0x43, 0xfd, 0x98, 0x7f, 0x4c, 0x42, 0x46, 0x5a, 0x50, 0x61, 0xdc,
	0xb1, 0xba, 0x56, 0xbf, 0xe1, 0x56, 0x18, 0x27, 0x7b, 0x50, 0xcd, 0x36, 0x70, 0x2a, 0x5d, 0xbb,
	0xdf, 0x1c, 0x3d, 0x19, 0xdc, 0x7a, 0x0f, 0xb4, 0x62, 0xf0, 0x56, 0x29, 0x71, 0x94, 0x28, 0x91,
	0xba, 0x48, 0x92, 0xd7, 0x50, 0x8f, 0x12, 0x3e, 0x53, 0xd2, 0xb1, 0x51, 0xb3, 0xf9, 0x17, 0xcd,
	0x04, 0x2b, 0xe3, 0x62, 0x0e, 0xd7, 0x48, 0xc8, 0x3e, 0xd4, 0xf5, 0x90, 0x4e, 0xb5, 0x6b, 0x2d,
	0x6e, 0xf8, 0x01, 0x3b, 0x65, 0x95, 0x66, 0x3b, 0x5f, 0xa0, 0x51, 0x4c, 0x41, 0xda, 0x60, 0x5f,
	0xd0, 0xd4, 0x1c, 0x21, 0x5b, 0x92, 0x6d, 0xa8, 0x61, 0x3e, 0x4e, 0x05, 0x3d, 0xd7, 0xcb, 0x9e,
	0x99, 0xee, 0x5b, 0xd6, 0x74, 0x35, 0xf3, 0xaa, 0x72, 0x60, 0x75, 0xbe, 0x5b, 0xd0, 0x5e, 0x1c,
	0x91, 0x6c, 0x41, 0x6d, 0x9a, 0x5d, 0x09, 0x3a, 0xb7, 0x46, 0x6b, 0x73, 0x93, 0xf9, 0xca, 0x9f,
	0xa4, 0x9c, 0xba, 0x1a, 0x21, 0x23, 0xa8, 0xe1, 0x25, 0x9b, 0x1d, 0xe7, 0x4e, 0xa1, 0x8d, 0x4f,
	0xb2, 0xf6, 0x38, 0x4b, 0xdf, 0xd5, 0x28, 0xd9, 0xcd, 0xa7, 0xb4, 0x51, 0xf3, 0xe8, 0xae, 0xc6,
	0xe0, 0x48, 0xf5, 0x7e, 0x57, 0x61, 0xe5, 0x98, 0x8f, 0x6f, 0xff, 0xb7, 0xa4, 0x57, 0x5c, 0x5d,
	0x73, 0x44, 0xee, 0x86, 0x8e, 0xd7, 0x49, 0xa0, 0x9a, 0xb0, 0x29, 0x75, 0x6a, 0x98, 0x0e, 0xae,
	0xc9, 0x08, 0xd6, 0x15, 0x8d, 0x39, 0x13, 0xbe, 0x48, 0xbd, 0x98, 0xc6, 0x4c, 0xa4, 0x9e, 0x8c,
	0x6e, 0xf4, 0xf0, 0xb6, 0xfb, 0xb0, 0x68, 0x7e, 0xc6, 0xde, 0x49, 0x74, 0x43, 0xc9, 0x33, 0x58,
	0x0e, 0x58, 0xcc, 0x67, 0x8a, 0x7a, 0xd9, 0x37, 0x84, 0x33, 0xdb, 0x6e, 0xd3, 0xd4, 0xde, 0x33,
	0xa9, 0xca, 0x88, 0x8a, 0x62, 0xea, 0xd4, 0xe7, 0x90, 0x49, 0x14, 0x53, 0xf2, 0x14, 0x9a, 0x66,
	0x3f, 0x24, 0x1e, 0x20, 0x01, 0xba, 0x84, 0xc0, 0x2e, 0x90, 0xdc, 0x83, 0x86, 0x61, 0x14, 0x44,
	0x34, 0x09, 0x52, 0xfc, 0x6b, 0x58, 0xee, 0xaa, 0xe9, 0x1c, 0x15, 0x0d, 0xb2, 0x0d, 0xab, 0xc6,
	0xaf, 0x44, 0x2f, 0x21, 0xdd, 0xd6, 0x8d, 0x12, 0xfc, 0x06, 0x1a, 0x8c, 0x9b, 0xf3, 0x3a, 0x0d,
	0x4c, 0xad, 0x37, 0x9f, 0x5a, 0x29, 0xdc, 0xc1, 0x31, 0xd7, 0xa7, 0x77, 0x97, 0x98, 0x59, 0x75,
	0x7e, 0x5a, 0xb0, 0x94, 0x97, 0xc9, 0x26, 0xac, 0xb0, 0x99, 0xe2, 0x33, 0x95, 0x3b, 0x5a, 0x5d,
	0xbb, 0x6f, 0xbb, 0xcb, 0xba, 0x68, 0xa0, 0x3e, 0xb4, 0xcf, 0x99, 0x54, 0x5e, 0x96, 0x68, 0xce,
	0xe9, 0x90, 0x5b, 0x59, 0x7d, 0x42, 0xe3, 0xdc, 0x6e, 0x07, 0x88, 0xf9, 0x58, 0xcb, 0xac, 0x4e,
	0xb9, 0xad, 0x3b, 0x25, 0x7a, 0x1f, 0x36, 0xd0, 0x97, 0x53, 0x21, 0x23, 0xa9, 0x68, 0x52, 0x4c,
	0x51, 0x45, 0xc5, 0x5a, 0xd6, 0x1d, 0x17, 0x4d, 0xa3, 0x3a, 0x00, 0x27, 0x7f, 0x10, 0xee, 0xe8,
	0x6a, 0xa8, 0xdb, 0xd0, 0xfd, 0x45, 0x65, 0xef, 0x2b, 0xac, 0xce, 0xa5, 0xf3, 0x29, 0x92, 0x8a,
	0x1c, 0x42, 0x6b, 0xfe, 0x21, 0xc5, 0x08, 0x9a, 0xa3, 0xc7, 0xf7, 0x86, 0xea, 0xae, 0xb0, 0xf2,
	0xcf, 0x77, 0xf6, 0x2f, 0xcb, 0x3a, 0xad, 0xe3, 0x93, 0xf4, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0xb4, 0x86, 0xaa, 0xbd, 0x05, 0x00, 0x00,
}
