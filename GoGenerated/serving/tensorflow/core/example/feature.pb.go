// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/example/feature.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/example/feature.proto

It has these top-level messages:
	BytesList
	FloatList
	Int64List
	Feature
	Features
	FeatureList
	FeatureLists
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Containers to hold repeated fundamental values.
type BytesList struct {
	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *BytesList) Reset()                    { *m = BytesList{} }
func (m *BytesList) String() string            { return proto.CompactTextString(m) }
func (*BytesList) ProtoMessage()               {}
func (*BytesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BytesList) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type FloatList struct {
	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *FloatList) Reset()                    { *m = FloatList{} }
func (m *FloatList) String() string            { return proto.CompactTextString(m) }
func (*FloatList) ProtoMessage()               {}
func (*FloatList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FloatList) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Int64List struct {
	Value []int64 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *Int64List) Reset()                    { *m = Int64List{} }
func (m *Int64List) String() string            { return proto.CompactTextString(m) }
func (*Int64List) ProtoMessage()               {}
func (*Int64List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Int64List) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Containers for non-sequential data.
type Feature struct {
	// Each feature can be exactly one kind.
	//
	// Types that are valid to be assigned to Kind:
	//	*Feature_BytesList
	//	*Feature_FloatList
	//	*Feature_Int64List
	Kind isFeature_Kind `protobuf_oneof:"kind"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isFeature_Kind interface {
	isFeature_Kind()
}

type Feature_BytesList struct {
	BytesList *BytesList `protobuf:"bytes,1,opt,name=bytes_list,json=bytesList,oneof"`
}
type Feature_FloatList struct {
	FloatList *FloatList `protobuf:"bytes,2,opt,name=float_list,json=floatList,oneof"`
}
type Feature_Int64List struct {
	Int64List *Int64List `protobuf:"bytes,3,opt,name=int64_list,json=int64List,oneof"`
}

func (*Feature_BytesList) isFeature_Kind() {}
func (*Feature_FloatList) isFeature_Kind() {}
func (*Feature_Int64List) isFeature_Kind() {}

func (m *Feature) GetKind() isFeature_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Feature) GetBytesList() *BytesList {
	if x, ok := m.GetKind().(*Feature_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (m *Feature) GetFloatList() *FloatList {
	if x, ok := m.GetKind().(*Feature_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (m *Feature) GetInt64List() *Int64List {
	if x, ok := m.GetKind().(*Feature_Int64List); ok {
		return x.Int64List
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Feature) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Feature_OneofMarshaler, _Feature_OneofUnmarshaler, _Feature_OneofSizer, []interface{}{
		(*Feature_BytesList)(nil),
		(*Feature_FloatList)(nil),
		(*Feature_Int64List)(nil),
	}
}

func _Feature_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Feature)
	// kind
	switch x := m.Kind.(type) {
	case *Feature_BytesList:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BytesList); err != nil {
			return err
		}
	case *Feature_FloatList:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FloatList); err != nil {
			return err
		}
	case *Feature_Int64List:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64List); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Feature.Kind has unexpected type %T", x)
	}
	return nil
}

func _Feature_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Feature)
	switch tag {
	case 1: // kind.bytes_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BytesList)
		err := b.DecodeMessage(msg)
		m.Kind = &Feature_BytesList{msg}
		return true, err
	case 2: // kind.float_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FloatList)
		err := b.DecodeMessage(msg)
		m.Kind = &Feature_FloatList{msg}
		return true, err
	case 3: // kind.int64_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64List)
		err := b.DecodeMessage(msg)
		m.Kind = &Feature_Int64List{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Feature_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Feature)
	// kind
	switch x := m.Kind.(type) {
	case *Feature_BytesList:
		s := proto.Size(x.BytesList)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_FloatList:
		s := proto.Size(x.FloatList)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Feature_Int64List:
		s := proto.Size(x.Int64List)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Features struct {
	// Map from feature name to feature.
	Feature map[string]*Feature `protobuf:"bytes,1,rep,name=feature" json:"feature,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Features) Reset()                    { *m = Features{} }
func (m *Features) String() string            { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()               {}
func (*Features) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Features) GetFeature() map[string]*Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

// Containers for sequential data.
//
// A FeatureList contains lists of Features.  These may hold zero or more
// Feature values.
//
// FeatureLists are organized into categories by name.  The FeatureLists message
// contains the mapping from name to FeatureList.
//
type FeatureList struct {
	Feature []*Feature `protobuf:"bytes,1,rep,name=feature" json:"feature,omitempty"`
}

func (m *FeatureList) Reset()                    { *m = FeatureList{} }
func (m *FeatureList) String() string            { return proto.CompactTextString(m) }
func (*FeatureList) ProtoMessage()               {}
func (*FeatureList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FeatureList) GetFeature() []*Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type FeatureLists struct {
	// Map from feature name to feature list.
	FeatureList map[string]*FeatureList `protobuf:"bytes,1,rep,name=feature_list,json=featureList" json:"feature_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FeatureLists) Reset()                    { *m = FeatureLists{} }
func (m *FeatureLists) String() string            { return proto.CompactTextString(m) }
func (*FeatureLists) ProtoMessage()               {}
func (*FeatureLists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FeatureLists) GetFeatureList() map[string]*FeatureList {
	if m != nil {
		return m.FeatureList
	}
	return nil
}

func init() {
	proto.RegisterType((*BytesList)(nil), "tensorflow.BytesList")
	proto.RegisterType((*FloatList)(nil), "tensorflow.FloatList")
	proto.RegisterType((*Int64List)(nil), "tensorflow.Int64List")
	proto.RegisterType((*Feature)(nil), "tensorflow.Feature")
	proto.RegisterType((*Features)(nil), "tensorflow.Features")
	proto.RegisterType((*FeatureList)(nil), "tensorflow.FeatureList")
	proto.RegisterType((*FeatureLists)(nil), "tensorflow.FeatureLists")
}

func init() { proto.RegisterFile("serving/tensorflow/core/example/feature.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0x49, 0x3e, 0x5b, 0x73, 0x53, 0xa1, 0xc4, 0x7f, 0xa5, 0xab, 0x36, 0x20, 0xb4,
	0x60, 0x1b, 0xa8, 0x12, 0x44, 0x5d, 0x05, 0x2c, 0x0a, 0x05, 0x4b, 0x36, 0x2e, 0x25, 0xd5, 0x49,
	0x09, 0x8d, 0x99, 0x32, 0x33, 0xad, 0xf6, 0x4d, 0x7c, 0x11, 0x17, 0xbe, 0x99, 0x4b, 0x99, 0x64,
	0x92, 0x4e, 0xdb, 0xb8, 0xcb, 0x9d, 0x39, 0xe7, 0xce, 0xef, 0xdc, 0x5c, 0xe8, 0x31, 0x4c, 0x97,
	0x51, 0x32, 0x75, 0x38, 0x4e, 0x18, 0xa1, 0x61, 0x4c, 0xde, 0x9d, 0x17, 0x42, 0xb1, 0x83, 0x3f,
	0x82, 0xb7, 0x79, 0x8c, 0x9d, 0x10, 0x07, 0x7c, 0x41, 0x71, 0x7f, 0x4e, 0x09, 0x27, 0x16, 0xac,
	0x65, 0x76, 0x1b, 0x0c, 0x6f, 0xc5, 0x31, 0x1b, 0x45, 0x8c, 0x5b, 0x47, 0xb0, 0xb7, 0x0c, 0xe2,
	0x05, 0x6e, 0xa0, 0x96, 0xde, 0xa9, 0xf9, 0x59, 0x61, 0x9f, 0x81, 0x31, 0x8c, 0x49, 0xc0, 0x53,
	0x49, 0x43, 0x95, 0x68, 0x9e, 0x56, 0x47, 0x8a, 0xec, 0x21, 0xe1, 0xee, 0xe5, 0xae, 0x4c, 0x57,
	0x65, 0xdf, 0x08, 0xaa, 0xc3, 0x0c, 0xc7, 0x72, 0x01, 0x26, 0xe2, 0xf1, 0xe7, 0x38, 0x62, 0xbc,
	0x81, 0x5a, 0xa8, 0x63, 0x0e, 0x8e, 0xfb, 0x6b, 0xba, 0x7e, 0x81, 0x76, 0xff, 0xcf, 0x37, 0x26,
	0x05, 0xa7, 0x0b, 0x10, 0x0a, 0xa2, 0xcc, 0xa7, 0xed, 0xfa, 0x0a, 0x5e, 0xe1, 0x0b, 0x0b, 0x78,
	0x17, 0x20, 0x12, 0x88, 0x99, 0x4f, 0xdf, 0xf5, 0x15, 0x01, 0x84, 0x2f, 0xca, 0x0b, 0xaf, 0x02,
	0xff, 0x67, 0x51, 0xf2, 0x6a, 0x7f, 0x22, 0xd8, 0x97, 0xec, 0xcc, 0xba, 0x81, 0xaa, 0x1c, 0x6b,
	0x1a, 0xd2, 0x1c, 0xb4, 0x37, 0x08, 0xa4, 0x2c, 0xff, 0xb8, 0x4b, 0x38, 0x5d, 0xf9, 0xb9, 0xa3,
	0xf9, 0x08, 0x35, 0xf5, 0xc2, 0xaa, 0x83, 0x3e, 0xc3, 0xab, 0x74, 0x04, 0x86, 0x2f, 0x3e, 0xad,
	0x6e, 0x3e, 0xc1, 0x2c, 0xde, 0x61, 0x49, 0x73, 0x39, 0xd2, 0x6b, 0xed, 0x0a, 0xd9, 0xb7, 0x60,
	0xca, 0xd3, 0x34, 0x69, 0x6f, 0x1b, 0xae, 0xd4, 0x9f, 0x6b, 0xec, 0x2f, 0x54, 0xf0, 0x08, 0x3b,
	0xb3, 0x46, 0x50, 0x93, 0x77, 0xf9, 0xbf, 0x11, 0x4d, 0xba, 0x25, 0x4d, 0x52, 0xbd, 0x5a, 0x64,
	0x49, 0xcd, 0x70, 0x7d, 0xd2, 0x7c, 0x82, 0xfa, 0xb6, 0xa0, 0x24, 0x71, 0x6f, 0x33, 0xf1, 0xe9,
	0x1f, 0x8f, 0x29, 0xa9, 0xbd, 0x73, 0x38, 0x21, 0x74, 0xaa, 0x0a, 0xe5, 0xc6, 0x7b, 0x07, 0xd2,
	0x31, 0x16, 0x1b, 0xcf, 0xc6, 0xe8, 0x07, 0xa1, 0x49, 0x25, 0x5d, 0xff, 0x8b, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0x7d, 0x62, 0x14, 0x2f, 0x03, 0x00, 0x00,
}
