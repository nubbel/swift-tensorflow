// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/protobuf/worker.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/protobuf/worker.proto

It has these top-level messages:
	GetStatusRequest
	GetStatusResponse
	CreateWorkerSessionRequest
	CreateWorkerSessionResponse
	RegisterGraphRequest
	RegisterGraphResponse
	DeregisterGraphRequest
	DeregisterGraphResponse
	CleanupAllRequest
	CleanupAllResponse
	ExecutorOpts
	RunGraphRequest
	RunGraphResponse
	CleanupGraphRequest
	CleanupGraphResponse
	RecvTensorRequest
	RecvTensorResponse
	LoggingRequest
	LabeledStepStats
	LoggingResponse
	TraceOpts
	TracingRequest
	TracingResponse
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import tensorflow3 "tensorflow/core/framework"
import tensorflow6 "tensorflow/core/framework"
import tensorflow7 "tensorflow/core/framework"
import tensorflow15 "tensorflow/core/framework"
import tensorflow9 "tensorflow/core/framework"
import tensorflow19 "tensorflow/core/protobuf"
import tensorflow16 "tensorflow/core/protobuf"
import tensorflow20 "tensorflow/core/protobuf"
import tensorflow21 "tensorflow/core/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetStatusRequest struct {
}

func (m *GetStatusRequest) Reset()                    { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()               {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetStatusResponse struct {
	DeviceAttributes []*tensorflow7.DeviceAttributes `protobuf:"bytes,1,rep,name=device_attributes,json=deviceAttributes" json:"device_attributes,omitempty"`
}

func (m *GetStatusResponse) Reset()                    { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()               {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetStatusResponse) GetDeviceAttributes() []*tensorflow7.DeviceAttributes {
	if m != nil {
		return m.DeviceAttributes
	}
	return nil
}

type CreateWorkerSessionRequest struct {
	// Sessions are identified by a given handle.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
	// Defines the configuration of a TensorFlow worker.
	ServerDef *tensorflow21.ServerDef `protobuf:"bytes,2,opt,name=server_def,json=serverDef" json:"server_def,omitempty"`
}

func (m *CreateWorkerSessionRequest) Reset()                    { *m = CreateWorkerSessionRequest{} }
func (m *CreateWorkerSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWorkerSessionRequest) ProtoMessage()               {}
func (*CreateWorkerSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateWorkerSessionRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *CreateWorkerSessionRequest) GetServerDef() *tensorflow21.ServerDef {
	if m != nil {
		return m.ServerDef
	}
	return nil
}

type CreateWorkerSessionResponse struct {
}

func (m *CreateWorkerSessionResponse) Reset()                    { *m = CreateWorkerSessionResponse{} }
func (m *CreateWorkerSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateWorkerSessionResponse) ProtoMessage()               {}
func (*CreateWorkerSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RegisterGraphRequest struct {
	// Subgraphs are scoped within one session.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
	// "graph_def" has the subgraph of nodes for this worker, with each node
	// having its device_name filled in.
	GraphDef *tensorflow15.GraphDef `protobuf:"bytes,2,opt,name=graph_def,json=graphDef" json:"graph_def,omitempty"`
	// True iff the graph (before partitioning) contains control flow nodes.
	//
	// As of 01/11/2015, this is no longer set by clients.
	HasControlFlow bool `protobuf:"varint,3,opt,name=has_control_flow,json=hasControlFlow" json:"has_control_flow,omitempty"`
	// Configuration options for the session in which this graph was created.
	GraphOptions *tensorflow19.GraphOptions `protobuf:"bytes,4,opt,name=graph_options,json=graphOptions" json:"graph_options,omitempty"`
	// Field(s) used by TensorFlow Debugger (tfdbg).
	DebugOptions *tensorflow16.DebugOptions `protobuf:"bytes,5,opt,name=debug_options,json=debugOptions" json:"debug_options,omitempty"`
}

func (m *RegisterGraphRequest) Reset()                    { *m = RegisterGraphRequest{} }
func (m *RegisterGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterGraphRequest) ProtoMessage()               {}
func (*RegisterGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterGraphRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *RegisterGraphRequest) GetGraphDef() *tensorflow15.GraphDef {
	if m != nil {
		return m.GraphDef
	}
	return nil
}

func (m *RegisterGraphRequest) GetHasControlFlow() bool {
	if m != nil {
		return m.HasControlFlow
	}
	return false
}

func (m *RegisterGraphRequest) GetGraphOptions() *tensorflow19.GraphOptions {
	if m != nil {
		return m.GraphOptions
	}
	return nil
}

func (m *RegisterGraphRequest) GetDebugOptions() *tensorflow16.DebugOptions {
	if m != nil {
		return m.DebugOptions
	}
	return nil
}

type RegisterGraphResponse struct {
	// If the registration succeeds, returns an opaque graph_handle to
	// the master. The master calls RunGraph with graph_handle to
	// compute different steps.
	GraphHandle string `protobuf:"bytes,1,opt,name=graph_handle,json=graphHandle" json:"graph_handle,omitempty"`
}

func (m *RegisterGraphResponse) Reset()                    { *m = RegisterGraphResponse{} }
func (m *RegisterGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterGraphResponse) ProtoMessage()               {}
func (*RegisterGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegisterGraphResponse) GetGraphHandle() string {
	if m != nil {
		return m.GraphHandle
	}
	return ""
}

type DeregisterGraphRequest struct {
	// The session_handle used when registering the graph. If session_handle is
	// empty, a single global namespace is used.
	SessionHandle string `protobuf:"bytes,2,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
	// REQUIRED: graph_handle must be returned by a RegisterGraph call
	// to the same WorkerService.
	GraphHandle string `protobuf:"bytes,1,opt,name=graph_handle,json=graphHandle" json:"graph_handle,omitempty"`
}

func (m *DeregisterGraphRequest) Reset()                    { *m = DeregisterGraphRequest{} }
func (m *DeregisterGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*DeregisterGraphRequest) ProtoMessage()               {}
func (*DeregisterGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeregisterGraphRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *DeregisterGraphRequest) GetGraphHandle() string {
	if m != nil {
		return m.GraphHandle
	}
	return ""
}

type DeregisterGraphResponse struct {
}

func (m *DeregisterGraphResponse) Reset()                    { *m = DeregisterGraphResponse{} }
func (m *DeregisterGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*DeregisterGraphResponse) ProtoMessage()               {}
func (*DeregisterGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type CleanupAllRequest struct {
	// A list of container names.
	//
	// If 'container' is not empty, releases resoures in the given
	// containers in all devices.
	//
	// If 'container' is empty, releases resources in the default
	// container in all devices.
	Container []string `protobuf:"bytes,1,rep,name=container" json:"container,omitempty"`
}

func (m *CleanupAllRequest) Reset()                    { *m = CleanupAllRequest{} }
func (m *CleanupAllRequest) String() string            { return proto.CompactTextString(m) }
func (*CleanupAllRequest) ProtoMessage()               {}
func (*CleanupAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CleanupAllRequest) GetContainer() []string {
	if m != nil {
		return m.Container
	}
	return nil
}

type CleanupAllResponse struct {
}

func (m *CleanupAllResponse) Reset()                    { *m = CleanupAllResponse{} }
func (m *CleanupAllResponse) String() string            { return proto.CompactTextString(m) }
func (*CleanupAllResponse) ProtoMessage()               {}
func (*CleanupAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Options specific to the execution of a single step.
type ExecutorOpts struct {
	RecordCosts    bool `protobuf:"varint,1,opt,name=record_costs,json=recordCosts" json:"record_costs,omitempty"`
	RecordTimeline bool `protobuf:"varint,3,opt,name=record_timeline,json=recordTimeline" json:"record_timeline,omitempty"`
}

func (m *ExecutorOpts) Reset()                    { *m = ExecutorOpts{} }
func (m *ExecutorOpts) String() string            { return proto.CompactTextString(m) }
func (*ExecutorOpts) ProtoMessage()               {}
func (*ExecutorOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExecutorOpts) GetRecordCosts() bool {
	if m != nil {
		return m.RecordCosts
	}
	return false
}

func (m *ExecutorOpts) GetRecordTimeline() bool {
	if m != nil {
		return m.RecordTimeline
	}
	return false
}

type RunGraphRequest struct {
	// session_handle is the the master-generated unique id for this session.
	// If session_handle is non-empty, it must be the same as used when
	// registering the graph. If it is empty, a single global namespace is used to
	// search for the graph_handle.
	SessionHandle string `protobuf:"bytes,8,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
	// REQUIRED: graph_handle must be returned by a RegisterGraph call
	// to the same WorkerService.
	GraphHandle string `protobuf:"bytes,1,opt,name=graph_handle,json=graphHandle" json:"graph_handle,omitempty"`
	// A unique ID to distinguish different runs of the same graph.
	//
	// The master generates a global unique `step_id` to distinguish
	// different runs of the graph computation. Subgraphs communicate
	// (e.g., send/recv ops) with each other using `step_id` to
	// distinguish tensors generated by different runs.
	StepId int64 `protobuf:"varint,2,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Options for this step.
	ExecOpts *ExecutorOpts `protobuf:"bytes,5,opt,name=exec_opts,json=execOpts" json:"exec_opts,omitempty"`
	// Runs the graph.
	//
	// Sends the tensors in "send" into the graph before the run and
	// fetches the keys into `RunGraphResponse.recv` after the run.
	Send    []*tensorflow20.NamedTensorProto `protobuf:"bytes,3,rep,name=send" json:"send,omitempty"`
	RecvKey []string                         `protobuf:"bytes,4,rep,name=recv_key,json=recvKey" json:"recv_key,omitempty"`
	// True if the RunGraphRequest is a partial run request.
	IsPartial bool `protobuf:"varint,6,opt,name=is_partial,json=isPartial" json:"is_partial,omitempty"`
	// True if this is the last partial run request in a sequence of requests.
	IsLastPartialRun bool `protobuf:"varint,7,opt,name=is_last_partial_run,json=isLastPartialRun" json:"is_last_partial_run,omitempty"`
}

func (m *RunGraphRequest) Reset()                    { *m = RunGraphRequest{} }
func (m *RunGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*RunGraphRequest) ProtoMessage()               {}
func (*RunGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RunGraphRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *RunGraphRequest) GetGraphHandle() string {
	if m != nil {
		return m.GraphHandle
	}
	return ""
}

func (m *RunGraphRequest) GetStepId() int64 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *RunGraphRequest) GetExecOpts() *ExecutorOpts {
	if m != nil {
		return m.ExecOpts
	}
	return nil
}

func (m *RunGraphRequest) GetSend() []*tensorflow20.NamedTensorProto {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *RunGraphRequest) GetRecvKey() []string {
	if m != nil {
		return m.RecvKey
	}
	return nil
}

func (m *RunGraphRequest) GetIsPartial() bool {
	if m != nil {
		return m.IsPartial
	}
	return false
}

func (m *RunGraphRequest) GetIsLastPartialRun() bool {
	if m != nil {
		return m.IsLastPartialRun
	}
	return false
}

type RunGraphResponse struct {
	// A list of tensors corresponding to those requested by
	// `RunGraphRequest.recv_key`.
	Recv []*tensorflow20.NamedTensorProto `protobuf:"bytes,1,rep,name=recv" json:"recv,omitempty"`
	// If the request asked for execution stats or cost graph, these are returned
	// here.
	StepStats *tensorflow6.StepStats    `protobuf:"bytes,2,opt,name=step_stats,json=stepStats" json:"step_stats,omitempty"`
	CostGraph *tensorflow3.CostGraphDef `protobuf:"bytes,3,opt,name=cost_graph,json=costGraph" json:"cost_graph,omitempty"`
}

func (m *RunGraphResponse) Reset()                    { *m = RunGraphResponse{} }
func (m *RunGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*RunGraphResponse) ProtoMessage()               {}
func (*RunGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RunGraphResponse) GetRecv() []*tensorflow20.NamedTensorProto {
	if m != nil {
		return m.Recv
	}
	return nil
}

func (m *RunGraphResponse) GetStepStats() *tensorflow6.StepStats {
	if m != nil {
		return m.StepStats
	}
	return nil
}

func (m *RunGraphResponse) GetCostGraph() *tensorflow3.CostGraphDef {
	if m != nil {
		return m.CostGraph
	}
	return nil
}

type CleanupGraphRequest struct {
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
}

func (m *CleanupGraphRequest) Reset()                    { *m = CleanupGraphRequest{} }
func (m *CleanupGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*CleanupGraphRequest) ProtoMessage()               {}
func (*CleanupGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CleanupGraphRequest) GetStepId() int64 {
	if m != nil {
		return m.StepId
	}
	return 0
}

type CleanupGraphResponse struct {
}

func (m *CleanupGraphResponse) Reset()                    { *m = CleanupGraphResponse{} }
func (m *CleanupGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*CleanupGraphResponse) ProtoMessage()               {}
func (*CleanupGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type RecvTensorRequest struct {
	// The step in which the tensor will be produced.
	//
	// REQUIRED: This must eventually correspond to the `step_id` passed
	// into a RunGraph call on the same WorkerService.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// A key that identifies the tensor to be received.
	RendezvousKey string `protobuf:"bytes,2,opt,name=rendezvous_key,json=rendezvousKey" json:"rendezvous_key,omitempty"`
	// If true, use an out-of-band DMA mechanism to transfer the
	// received tensor.
	DmaOk bool `protobuf:"varint,3,opt,name=dma_ok,json=dmaOk" json:"dma_ok,omitempty"`
	// Optional information on client-side device locality.
	ClientLocality *tensorflow7.DeviceLocality `protobuf:"bytes,4,opt,name=client_locality,json=clientLocality" json:"client_locality,omitempty"`
	// Optional information on server-side device locality.
	ServerLocality *tensorflow7.DeviceLocality `protobuf:"bytes,5,opt,name=server_locality,json=serverLocality" json:"server_locality,omitempty"`
	// Optional information needed by the RPC subsystem.
	TransportOptions *google_protobuf.Any `protobuf:"bytes,6,opt,name=transport_options,json=transportOptions" json:"transport_options,omitempty"`
}

func (m *RecvTensorRequest) Reset()                    { *m = RecvTensorRequest{} }
func (m *RecvTensorRequest) String() string            { return proto.CompactTextString(m) }
func (*RecvTensorRequest) ProtoMessage()               {}
func (*RecvTensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RecvTensorRequest) GetStepId() int64 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *RecvTensorRequest) GetRendezvousKey() string {
	if m != nil {
		return m.RendezvousKey
	}
	return ""
}

func (m *RecvTensorRequest) GetDmaOk() bool {
	if m != nil {
		return m.DmaOk
	}
	return false
}

func (m *RecvTensorRequest) GetClientLocality() *tensorflow7.DeviceLocality {
	if m != nil {
		return m.ClientLocality
	}
	return nil
}

func (m *RecvTensorRequest) GetServerLocality() *tensorflow7.DeviceLocality {
	if m != nil {
		return m.ServerLocality
	}
	return nil
}

func (m *RecvTensorRequest) GetTransportOptions() *google_protobuf.Any {
	if m != nil {
		return m.TransportOptions
	}
	return nil
}

type RecvTensorResponse struct {
	// The tensor as a proto.
	Tensor *tensorflow9.TensorProto `protobuf:"bytes,1,opt,name=tensor" json:"tensor,omitempty"`
	// If true, this tensor was the output of a dead node, and the
	// content is invalid.
	IsDead bool `protobuf:"varint,2,opt,name=is_dead,json=isDead" json:"is_dead,omitempty"`
	// The time at which tensor was available and started to be returned.
	SendStartMicros int64 `protobuf:"varint,3,opt,name=send_start_micros,json=sendStartMicros" json:"send_start_micros,omitempty"`
	// Optional additional information about how to receive the tensor,
	// e.g. in the event that `RecvTensorRequest.dma_ok` was true.
	TransportOptions *google_protobuf.Any `protobuf:"bytes,4,opt,name=transport_options,json=transportOptions" json:"transport_options,omitempty"`
}

func (m *RecvTensorResponse) Reset()                    { *m = RecvTensorResponse{} }
func (m *RecvTensorResponse) String() string            { return proto.CompactTextString(m) }
func (*RecvTensorResponse) ProtoMessage()               {}
func (*RecvTensorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RecvTensorResponse) GetTensor() *tensorflow9.TensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *RecvTensorResponse) GetIsDead() bool {
	if m != nil {
		return m.IsDead
	}
	return false
}

func (m *RecvTensorResponse) GetSendStartMicros() int64 {
	if m != nil {
		return m.SendStartMicros
	}
	return 0
}

func (m *RecvTensorResponse) GetTransportOptions() *google_protobuf.Any {
	if m != nil {
		return m.TransportOptions
	}
	return nil
}

// Out-of-band request to begin or end logging, or
// to retrieve logs for particular steps.
type LoggingRequest struct {
	// If true, RPC logging will be activated.
	RpcLogging bool `protobuf:"varint,1,opt,name=rpc_logging,json=rpcLogging" json:"rpc_logging,omitempty"`
	// If true, discard any saved logging data (for all steps).
	Clear bool `protobuf:"varint,2,opt,name=clear" json:"clear,omitempty"`
	// When set, requests all saved log data pertaining to the step.
	// Any log data retrieved is eliminated from the store and cannot be
	// retrieved again.
	FetchStepId []int64 `protobuf:"varint,3,rep,packed,name=fetch_step_id,json=fetchStepId" json:"fetch_step_id,omitempty"`
}

func (m *LoggingRequest) Reset()                    { *m = LoggingRequest{} }
func (m *LoggingRequest) String() string            { return proto.CompactTextString(m) }
func (*LoggingRequest) ProtoMessage()               {}
func (*LoggingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LoggingRequest) GetRpcLogging() bool {
	if m != nil {
		return m.RpcLogging
	}
	return false
}

func (m *LoggingRequest) GetClear() bool {
	if m != nil {
		return m.Clear
	}
	return false
}

func (m *LoggingRequest) GetFetchStepId() []int64 {
	if m != nil {
		return m.FetchStepId
	}
	return nil
}

type LabeledStepStats struct {
	StepId    int64                  `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	StepStats *tensorflow6.StepStats `protobuf:"bytes,2,opt,name=step_stats,json=stepStats" json:"step_stats,omitempty"`
}

func (m *LabeledStepStats) Reset()                    { *m = LabeledStepStats{} }
func (m *LabeledStepStats) String() string            { return proto.CompactTextString(m) }
func (*LabeledStepStats) ProtoMessage()               {}
func (*LabeledStepStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LabeledStepStats) GetStepId() int64 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *LabeledStepStats) GetStepStats() *tensorflow6.StepStats {
	if m != nil {
		return m.StepStats
	}
	return nil
}

type LoggingResponse struct {
	Step []*LabeledStepStats `protobuf:"bytes,1,rep,name=step" json:"step,omitempty"`
}

func (m *LoggingResponse) Reset()                    { *m = LoggingResponse{} }
func (m *LoggingResponse) String() string            { return proto.CompactTextString(m) }
func (*LoggingResponse) ProtoMessage()               {}
func (*LoggingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LoggingResponse) GetStep() []*LabeledStepStats {
	if m != nil {
		return m.Step
	}
	return nil
}

type TraceOpts struct {
	// Length of the trace to be taken, in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration" json:"duration,omitempty"`
	// If true, capture step profile locally in each worker. Currently
	// unimplemented.
	UseStepProfiler bool `protobuf:"varint,2,opt,name=use_step_profiler,json=useStepProfiler" json:"use_step_profiler,omitempty"`
	// If true, capture kernel events from each worker.
	UseKernelProfiler bool `protobuf:"varint,3,opt,name=use_kernel_profiler,json=useKernelProfiler" json:"use_kernel_profiler,omitempty"`
	// If true, capture extended profiling events from TensorFlow process.
	UseExtendedProfiler bool `protobuf:"varint,4,opt,name=use_extended_profiler,json=useExtendedProfiler" json:"use_extended_profiler,omitempty"`
	// If true, capture GPU profiling events locally on each
	// machine. Currently unimplemented.
	UseGpuProfiler bool `protobuf:"varint,5,opt,name=use_gpu_profiler,json=useGpuProfiler" json:"use_gpu_profiler,omitempty"`
	// If true, collect sampled profile events. Currently unimplemented.
	UseSampleProfiler bool `protobuf:"varint,6,opt,name=use_sample_profiler,json=useSampleProfiler" json:"use_sample_profiler,omitempty"`
}

func (m *TraceOpts) Reset()                    { *m = TraceOpts{} }
func (m *TraceOpts) String() string            { return proto.CompactTextString(m) }
func (*TraceOpts) ProtoMessage()               {}
func (*TraceOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TraceOpts) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TraceOpts) GetUseStepProfiler() bool {
	if m != nil {
		return m.UseStepProfiler
	}
	return false
}

func (m *TraceOpts) GetUseKernelProfiler() bool {
	if m != nil {
		return m.UseKernelProfiler
	}
	return false
}

func (m *TraceOpts) GetUseExtendedProfiler() bool {
	if m != nil {
		return m.UseExtendedProfiler
	}
	return false
}

func (m *TraceOpts) GetUseGpuProfiler() bool {
	if m != nil {
		return m.UseGpuProfiler
	}
	return false
}

func (m *TraceOpts) GetUseSampleProfiler() bool {
	if m != nil {
		return m.UseSampleProfiler
	}
	return false
}

// Out-of-band request to configure distributed tracing.
type TracingRequest struct {
	Options *TraceOpts `protobuf:"bytes,1,opt,name=options" json:"options,omitempty"`
}

func (m *TracingRequest) Reset()                    { *m = TracingRequest{} }
func (m *TracingRequest) String() string            { return proto.CompactTextString(m) }
func (*TracingRequest) ProtoMessage()               {}
func (*TracingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *TracingRequest) GetOptions() *TraceOpts {
	if m != nil {
		return m.Options
	}
	return nil
}

type TracingResponse struct {
}

func (m *TracingResponse) Reset()                    { *m = TracingResponse{} }
func (m *TracingResponse) String() string            { return proto.CompactTextString(m) }
func (*TracingResponse) ProtoMessage()               {}
func (*TracingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*GetStatusRequest)(nil), "tensorflow.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "tensorflow.GetStatusResponse")
	proto.RegisterType((*CreateWorkerSessionRequest)(nil), "tensorflow.CreateWorkerSessionRequest")
	proto.RegisterType((*CreateWorkerSessionResponse)(nil), "tensorflow.CreateWorkerSessionResponse")
	proto.RegisterType((*RegisterGraphRequest)(nil), "tensorflow.RegisterGraphRequest")
	proto.RegisterType((*RegisterGraphResponse)(nil), "tensorflow.RegisterGraphResponse")
	proto.RegisterType((*DeregisterGraphRequest)(nil), "tensorflow.DeregisterGraphRequest")
	proto.RegisterType((*DeregisterGraphResponse)(nil), "tensorflow.DeregisterGraphResponse")
	proto.RegisterType((*CleanupAllRequest)(nil), "tensorflow.CleanupAllRequest")
	proto.RegisterType((*CleanupAllResponse)(nil), "tensorflow.CleanupAllResponse")
	proto.RegisterType((*ExecutorOpts)(nil), "tensorflow.ExecutorOpts")
	proto.RegisterType((*RunGraphRequest)(nil), "tensorflow.RunGraphRequest")
	proto.RegisterType((*RunGraphResponse)(nil), "tensorflow.RunGraphResponse")
	proto.RegisterType((*CleanupGraphRequest)(nil), "tensorflow.CleanupGraphRequest")
	proto.RegisterType((*CleanupGraphResponse)(nil), "tensorflow.CleanupGraphResponse")
	proto.RegisterType((*RecvTensorRequest)(nil), "tensorflow.RecvTensorRequest")
	proto.RegisterType((*RecvTensorResponse)(nil), "tensorflow.RecvTensorResponse")
	proto.RegisterType((*LoggingRequest)(nil), "tensorflow.LoggingRequest")
	proto.RegisterType((*LabeledStepStats)(nil), "tensorflow.LabeledStepStats")
	proto.RegisterType((*LoggingResponse)(nil), "tensorflow.LoggingResponse")
	proto.RegisterType((*TraceOpts)(nil), "tensorflow.TraceOpts")
	proto.RegisterType((*TracingRequest)(nil), "tensorflow.TracingRequest")
	proto.RegisterType((*TracingResponse)(nil), "tensorflow.TracingResponse")
}

func init() { proto.RegisterFile("serving/tensorflow/core/protobuf/worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xd6, 0x3a, 0x89, 0x63, 0x1f, 0xb7, 0xb1, 0xbd, 0x4d, 0x5a, 0x37, 0x6f, 0xab, 0x37, 0xac,
	0x28, 0x44, 0x85, 0xda, 0x6d, 0x00, 0x21, 0x21, 0x71, 0x91, 0x26, 0xa5, 0x54, 0x0d, 0x34, 0x9a,
	0x54, 0x42, 0xe2, 0x82, 0xd5, 0x64, 0xf7, 0x78, 0xb3, 0xca, 0x7a, 0x66, 0x99, 0x99, 0x4d, 0x1b,
	0xfe, 0x05, 0xf7, 0xfc, 0x0b, 0x2e, 0xf8, 0x07, 0xdc, 0xf1, 0x7f, 0xb8, 0x44, 0xf3, 0xb1, 0xeb,
	0x8d, 0x3f, 0x94, 0xb6, 0x77, 0x9e, 0x33, 0xcf, 0xf9, 0x98, 0xe7, 0x3c, 0xe7, 0xac, 0xe1, 0x91,
	0x44, 0x71, 0x91, 0xb2, 0x64, 0xa4, 0x90, 0x49, 0x2e, 0xc6, 0x19, 0x7f, 0x33, 0x8a, 0xb8, 0xc0,
	0x51, 0x2e, 0xb8, 0xe2, 0xa7, 0xc5, 0x78, 0xf4, 0x86, 0x8b, 0x73, 0x14, 0x43, 0x73, 0xf6, 0x61,
	0x0a, 0xdb, 0xbe, 0x9b, 0x70, 0x9e, 0x64, 0x35, 0x24, 0x65, 0x97, 0x16, 0xb6, 0xfd, 0x70, 0x36,
	0xda, 0x58, 0xd0, 0x09, 0xea, 0x48, 0xa3, 0x88, 0x4b, 0x15, 0x26, 0x82, 0xe6, 0x67, 0xd7, 0x63,
	0xa5, 0xc2, 0x3c, 0x94, 0x8a, 0x2a, 0xe9, 0xb0, 0x4f, 0x96, 0x63, 0x63, 0xbc, 0x48, 0x23, 0x0c,
	0xa9, 0x52, 0x22, 0x3d, 0x2d, 0x14, 0x96, 0x2e, 0x0f, 0x96, 0xbb, 0xd4, 0xab, 0xf8, 0x64, 0x39,
	0xcc, 0xde, 0x2c, 0x0b, 0x57, 0xbd, 0x3e, 0xe2, 0x6c, 0x9c, 0x26, 0x0e, 0xf6, 0xf1, 0x52, 0x58,
	0x8c, 0xa7, 0x45, 0x89, 0xfa, 0x6c, 0x29, 0x8a, 0xd1, 0x09, 0xc6, 0xe1, 0x95, 0xcc, 0x8f, 0x97,
	0x82, 0xa7, 0x17, 0xa1, 0xee, 0x66, 0xd9, 0xac, 0xc0, 0x87, 0xde, 0x73, 0x54, 0x27, 0x8a, 0xaa,
	0x42, 0x12, 0xfc, 0xb5, 0x40, 0xa9, 0x82, 0x5f, 0xa0, 0x5f, 0xb3, 0xc9, 0x9c, 0x33, 0x89, 0xfe,
	0x0b, 0xe8, 0xcf, 0xd1, 0x37, 0xf0, 0x76, 0x56, 0x76, 0x3b, 0x7b, 0xf7, 0x86, 0xd3, 0xe8, 0xc3,
	0x43, 0x03, 0xda, 0xaf, 0x30, 0xa4, 0x17, 0xcf, 0x58, 0x82, 0x4b, 0xd8, 0x3e, 0x10, 0x48, 0x15,
	0xfe, 0x64, 0x64, 0x73, 0x82, 0x52, 0xa6, 0x9c, 0xb9, 0xec, 0xfe, 0x03, 0xd8, 0x90, 0xd6, 0x12,
	0x9e, 0x51, 0x16, 0x67, 0x38, 0xf0, 0x76, 0xbc, 0xdd, 0x36, 0xb9, 0xe9, 0xac, 0xdf, 0x1b, 0xa3,
	0xff, 0x25, 0x80, 0x7d, 0x48, 0x18, 0xe3, 0x78, 0xd0, 0xd8, 0xf1, 0x76, 0x3b, 0x7b, 0x5b, 0xf5,
	0x42, 0x4e, 0xcc, 0xed, 0x21, 0x8e, 0x49, 0x5b, 0x96, 0x3f, 0x83, 0xfb, 0xf0, 0xbf, 0x85, 0xa9,
	0xed, 0x23, 0x83, 0x3f, 0x1a, 0xb0, 0x49, 0x30, 0x49, 0xa5, 0x42, 0xf1, 0x5c, 0x77, 0xfe, 0x3d,
	0x8b, 0x7a, 0x02, 0x6d, 0x23, 0x98, 0x5a, 0x4d, 0x9b, 0xf5, 0x9a, 0x4c, 0x4c, 0x5d, 0x52, 0x2b,
	0x71, 0xbf, 0xfc, 0xcf, 0xa1, 0x77, 0x46, 0x65, 0x18, 0x71, 0xa6, 0x04, 0xcf, 0x42, 0x0d, 0x1b,
	0xac, 0xec, 0x78, 0xbb, 0xad, 0xa7, 0x8d, 0x81, 0x47, 0x36, 0xce, 0xa8, 0x3c, 0xb0, 0x57, 0xdf,
	0x65, 0xfc, 0x8d, 0xff, 0x2d, 0xdc, 0xb4, 0x09, 0x78, 0xae, 0x52, 0xce, 0xe4, 0x60, 0xd5, 0x24,
	0x19, 0xcc, 0x25, 0x79, 0x65, 0xef, 0xc9, 0x8d, 0xa4, 0x76, 0xd2, 0xee, 0x46, 0x5b, 0x95, 0xfb,
	0xda, 0xbc, 0xfb, 0xa1, 0x06, 0x54, 0xee, 0x71, 0xed, 0x14, 0x7c, 0x03, 0x5b, 0x33, 0xec, 0x38,
	0x71, 0x7c, 0x04, 0x36, 0xcf, 0x55, 0x72, 0x3a, 0xc6, 0x66, 0xa9, 0x09, 0x4e, 0xe1, 0xf6, 0x21,
	0x8a, 0x77, 0xe3, 0xb6, 0xb1, 0x88, 0xdb, 0x77, 0xc8, 0x71, 0x17, 0xee, 0xcc, 0xe5, 0x70, 0x9d,
	0x7d, 0x02, 0xfd, 0x83, 0x0c, 0x29, 0x2b, 0xf2, 0xfd, 0x2c, 0x2b, 0x33, 0xdf, 0x83, 0xb6, 0xe6,
	0x9d, 0xa6, 0x0c, 0x85, 0xd1, 0x72, 0x9b, 0x4c, 0x0d, 0xc1, 0x26, 0xf8, 0x75, 0x17, 0x17, 0xe8,
	0x67, 0xb8, 0xf1, 0xec, 0x2d, 0x46, 0x85, 0xe2, 0xe2, 0x55, 0xae, 0xa4, 0x2e, 0x4b, 0x60, 0xc4,
	0x45, 0x1c, 0xea, 0xad, 0x25, 0x4d, 0x59, 0x2d, 0xd2, 0xb1, 0xb6, 0x03, 0x6d, 0xf2, 0x3f, 0x85,
	0xae, 0x83, 0xa8, 0x74, 0x82, 0x59, 0xca, 0xd0, 0x76, 0x98, 0x6c, 0x58, 0xf3, 0x6b, 0x67, 0x0d,
	0xfe, 0x6e, 0x40, 0x97, 0x14, 0xec, 0x1a, 0x76, 0x5a, 0x1f, 0xc6, 0x8e, 0x7f, 0x07, 0xd6, 0xcd,
	0xb2, 0x4c, 0x63, 0x43, 0xf0, 0x0a, 0x69, 0xea, 0xe3, 0x8b, 0xd8, 0xff, 0x0a, 0xda, 0xf8, 0x16,
	0x23, 0x2d, 0x8a, 0x85, 0x8a, 0xa8, 0xbf, 0x97, 0xb4, 0x34, 0xd4, 0xbc, 0xfc, 0x31, 0xac, 0x4a,
	0x64, 0xf1, 0x60, 0x65, 0x7e, 0x09, 0xfc, 0xa8, 0x57, 0xd3, 0x6b, 0x73, 0x3e, 0xd6, 0x6b, 0x86,
	0x18, 0xa4, 0x7f, 0x17, 0x5a, 0x02, 0xa3, 0x8b, 0xf0, 0x1c, 0x2f, 0x07, 0xab, 0x86, 0xee, 0x75,
	0x7d, 0x7e, 0x89, 0x97, 0xfe, 0x7d, 0x80, 0x54, 0x86, 0x39, 0x15, 0x2a, 0xa5, 0xd9, 0xa0, 0x69,
	0xe8, 0x69, 0xa7, 0xf2, 0xd8, 0x1a, 0xfc, 0x47, 0x70, 0x2b, 0x95, 0x61, 0x46, 0xa5, 0x2a, 0x31,
	0xa1, 0x28, 0xd8, 0x60, 0xdd, 0xe0, 0x7a, 0xa9, 0x3c, 0xa2, 0x52, 0x39, 0x2c, 0x29, 0x58, 0xf0,
	0xa7, 0x07, 0xbd, 0x29, 0x91, 0x4e, 0xa4, 0x8f, 0x61, 0x55, 0x67, 0x5b, 0xb4, 0xb4, 0xe6, 0xeb,
	0xd5, 0x48, 0xb3, 0x63, 0xaa, 0xcf, 0xcb, 0xc2, 0x1d, 0xa3, 0x30, 0xd7, 0x7b, 0x52, 0x92, 0xb6,
	0x2c, 0x7f, 0xfa, 0x5f, 0x03, 0x4c, 0x3f, 0x60, 0xa6, 0xd3, 0x33, 0x7c, 0x6a, 0x55, 0x54, 0x9b,
	0xa0, 0x1d, 0x95, 0xa7, 0x60, 0x08, 0xb7, 0x9c, 0xe0, 0xae, 0x28, 0xa0, 0xd6, 0x37, 0xaf, 0xde,
	0xb7, 0xe0, 0x36, 0x6c, 0x5e, 0xc5, 0x3b, 0x89, 0xfe, 0xd5, 0x80, 0x3e, 0xc1, 0xe8, 0xc2, 0x3e,
	0xe8, 0xba, 0x30, 0x5a, 0x61, 0x02, 0x59, 0x8c, 0xbf, 0x5d, 0xf0, 0x42, 0x9a, 0xde, 0xb8, 0xf9,
	0x9b, 0x5a, 0x75, 0x87, 0xb6, 0xa0, 0x19, 0x4f, 0x68, 0xc8, 0xcf, 0x9d, 0x78, 0xd7, 0xe2, 0x09,
	0x7d, 0x75, 0xee, 0x1f, 0x40, 0x37, 0xca, 0x52, 0x64, 0x2a, 0xcc, 0x78, 0x44, 0xb3, 0x54, 0x5d,
	0xba, 0x9d, 0xb4, 0x3d, 0xff, 0x55, 0x38, 0x72, 0x08, 0xb2, 0x61, 0x5d, 0xca, 0xb3, 0x0e, 0xe2,
	0x96, 0x79, 0x15, 0x64, 0xed, 0xfa, 0x20, 0xd6, 0xa5, 0x0a, 0xb2, 0x0f, 0x7d, 0x25, 0x28, 0x93,
	0x39, 0x17, 0xaa, 0x5a, 0x70, 0x4d, 0xb7, 0x84, 0xed, 0xff, 0x90, 0x61, 0xf9, 0x3d, 0x1c, 0xee,
	0xb3, 0x4b, 0xd2, 0xab, 0xe0, 0xe5, 0x82, 0xfb, 0xc7, 0x03, 0xbf, 0xce, 0x9c, 0x53, 0xce, 0x08,
	0x9a, 0xb6, 0x0c, 0xc3, 0x5c, 0x67, 0xef, 0x4e, 0xbd, 0xaa, 0xba, 0x6c, 0x1c, 0x4c, 0x73, 0x9d,
	0xca, 0x30, 0x46, 0x6a, 0x47, 0xad, 0x45, 0x9a, 0xa9, 0x3c, 0x44, 0x1a, 0xfb, 0x0f, 0xa1, 0xaf,
	0x27, 0x41, 0x2b, 0x4a, 0xa8, 0x70, 0x92, 0x46, 0x82, 0x4b, 0xc3, 0xe7, 0x0a, 0xe9, 0xea, 0x8b,
	0x13, 0x6d, 0xff, 0xc1, 0x98, 0x17, 0xbf, 0x67, 0xf5, 0xbd, 0xde, 0x73, 0x0e, 0x1b, 0x47, 0x3c,
	0x49, 0x52, 0x96, 0x94, 0x2a, 0xf8, 0x3f, 0x74, 0x44, 0x1e, 0x85, 0x99, 0xb5, 0xba, 0x6d, 0x05,
	0x22, 0x8f, 0x1c, 0xce, 0xdf, 0x84, 0xb5, 0x28, 0x43, 0x2a, 0x5c, 0xe1, 0xf6, 0xe0, 0x07, 0x70,
	0x73, 0x8c, 0x2a, 0x3a, 0x0b, 0x4b, 0x09, 0xe9, 0xa1, 0x5f, 0x21, 0x1d, 0x63, 0x3c, 0xb1, 0x72,
	0xa4, 0xd0, 0x3b, 0xa2, 0xa7, 0x98, 0x61, 0x5c, 0x8d, 0xc5, 0x72, 0xd1, 0x7d, 0xd0, 0x68, 0x05,
	0x07, 0xd0, 0xad, 0xde, 0x33, 0x9d, 0x6a, 0x7d, 0xbf, 0x68, 0xaa, 0x67, 0xab, 0x21, 0x06, 0x19,
	0xfc, 0xde, 0x80, 0xf6, 0x6b, 0x41, 0x23, 0x34, 0x5b, 0x6c, 0x1b, 0x5a, 0x71, 0x21, 0xa8, 0xe6,
	0xcb, 0x94, 0xe8, 0x91, 0xea, 0xac, 0xbb, 0x55, 0x48, 0xb4, 0x6f, 0xce, 0x05, 0x1f, 0xa7, 0x19,
	0x96, 0xbc, 0x74, 0x0b, 0x89, 0x3a, 0xf0, 0xb1, 0x33, 0xfb, 0x43, 0xb8, 0xa5, 0xb1, 0xe7, 0x28,
	0x18, 0x66, 0x53, 0xb4, 0x9d, 0x15, 0x1d, 0xe6, 0xa5, 0xb9, 0xa9, 0xf0, 0x7b, 0xb0, 0xa5, 0xf1,
	0xf8, 0x56, 0xe9, 0x29, 0x8b, 0xa7, 0x1e, 0xab, 0xc6, 0x43, 0x07, 0x7b, 0xe6, 0xee, 0x2a, 0x9f,
	0x5d, 0xe8, 0x69, 0x9f, 0x24, 0x2f, 0xa6, 0xf0, 0x35, 0xfb, 0x25, 0x29, 0x24, 0x3e, 0xcf, 0x8b,
	0xd9, 0x6a, 0x24, 0x9d, 0xe4, 0x19, 0x4e, 0xc1, 0xcd, 0xaa, 0x9a, 0x13, 0x73, 0x53, 0xe2, 0x83,
	0x7d, 0xd8, 0xd0, 0x94, 0xd4, 0x84, 0x32, 0x82, 0xf5, 0x52, 0x73, 0xde, 0x7c, 0x77, 0x2a, 0xfe,
	0x48, 0x89, 0x0a, 0xfa, 0xd0, 0xad, 0x42, 0xd8, 0xde, 0x3c, 0x1d, 0xc1, 0x36, 0x17, 0x49, 0xdd,
	0x2f, 0x4e, 0xa5, 0x12, 0x05, 0xd3, 0xdf, 0xc1, 0xa7, 0x37, 0xec, 0x7f, 0x30, 0x33, 0x39, 0xf2,
	0xd8, 0xfb, 0xd7, 0xf3, 0x4e, 0x9b, 0x46, 0xcf, 0x5f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0xcb, 0xc2, 0x38, 0x72, 0x0c, 0x00, 0x00,
}
