// Code generated by protoc-gen-go.
// source: serving/tensorflow/core/protobuf/rewriter_config.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/core/protobuf/rewriter_config.proto

It has these top-level messages:
	AutoParallelOptions
	RewriterConfig
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RewriterConfig_MemOptType int32

const (
	// Fully disabled
	RewriterConfig_NO_MEM_OPT RewriterConfig_MemOptType = 0
	// Driven by manual annotations
	RewriterConfig_MANUAL RewriterConfig_MemOptType = 1
)

var RewriterConfig_MemOptType_name = map[int32]string{
	0: "NO_MEM_OPT",
	1: "MANUAL",
}
var RewriterConfig_MemOptType_value = map[string]int32{
	"NO_MEM_OPT": 0,
	"MANUAL":     1,
}

func (x RewriterConfig_MemOptType) String() string {
	return proto.EnumName(RewriterConfig_MemOptType_name, int32(x))
}
func (RewriterConfig_MemOptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type AutoParallelOptions struct {
	Enable      bool  `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	NumReplicas int32 `protobuf:"varint,2,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
}

func (m *AutoParallelOptions) Reset()                    { *m = AutoParallelOptions{} }
func (m *AutoParallelOptions) String() string            { return proto.CompactTextString(m) }
func (*AutoParallelOptions) ProtoMessage()               {}
func (*AutoParallelOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AutoParallelOptions) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AutoParallelOptions) GetNumReplicas() int32 {
	if m != nil {
		return m.NumReplicas
	}
	return 0
}

type RewriterConfig struct {
	OptimizeTensorLayout bool                      `protobuf:"varint,1,opt,name=optimize_tensor_layout,json=optimizeTensorLayout" json:"optimize_tensor_layout,omitempty"`
	DisableModelPruning  bool                      `protobuf:"varint,2,opt,name=disable_model_pruning,json=disableModelPruning" json:"disable_model_pruning,omitempty"`
	ConstantFolding      bool                      `protobuf:"varint,3,opt,name=constant_folding,json=constantFolding" json:"constant_folding,omitempty"`
	MemoryOptimization   RewriterConfig_MemOptType `protobuf:"varint,4,opt,name=memory_optimization,json=memoryOptimization,enum=tensorflow.RewriterConfig_MemOptType" json:"memory_optimization,omitempty"`
	AutoParallel         *AutoParallelOptions      `protobuf:"bytes,5,opt,name=auto_parallel,json=autoParallel" json:"auto_parallel,omitempty"`
	// If non-empty, will use this as an alternative way to specify a list of
	// optimizations to turn on and the order of the optimizations.
	Optimizers []string `protobuf:"bytes,100,rep,name=optimizers" json:"optimizers,omitempty"`
}

func (m *RewriterConfig) Reset()                    { *m = RewriterConfig{} }
func (m *RewriterConfig) String() string            { return proto.CompactTextString(m) }
func (*RewriterConfig) ProtoMessage()               {}
func (*RewriterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RewriterConfig) GetOptimizeTensorLayout() bool {
	if m != nil {
		return m.OptimizeTensorLayout
	}
	return false
}

func (m *RewriterConfig) GetDisableModelPruning() bool {
	if m != nil {
		return m.DisableModelPruning
	}
	return false
}

func (m *RewriterConfig) GetConstantFolding() bool {
	if m != nil {
		return m.ConstantFolding
	}
	return false
}

func (m *RewriterConfig) GetMemoryOptimization() RewriterConfig_MemOptType {
	if m != nil {
		return m.MemoryOptimization
	}
	return RewriterConfig_NO_MEM_OPT
}

func (m *RewriterConfig) GetAutoParallel() *AutoParallelOptions {
	if m != nil {
		return m.AutoParallel
	}
	return nil
}

func (m *RewriterConfig) GetOptimizers() []string {
	if m != nil {
		return m.Optimizers
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoParallelOptions)(nil), "tensorflow.AutoParallelOptions")
	proto.RegisterType((*RewriterConfig)(nil), "tensorflow.RewriterConfig")
	proto.RegisterEnum("tensorflow.RewriterConfig_MemOptType", RewriterConfig_MemOptType_name, RewriterConfig_MemOptType_value)
}

func init() {
	proto.RegisterFile("serving/tensorflow/core/protobuf/rewriter_config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4b, 0x8f, 0xd3, 0x30,
	0x14, 0x85, 0x31, 0x65, 0xaa, 0xe1, 0xce, 0x50, 0x2a, 0x77, 0x18, 0x65, 0x05, 0xa1, 0x12, 0x52,
	0xd8, 0xb4, 0x52, 0x79, 0xec, 0x3b, 0x3c, 0x56, 0x93, 0x49, 0x14, 0x15, 0xb6, 0x96, 0xdb, 0x3a,
	0x95, 0x85, 0xed, 0x6b, 0xd9, 0x0e, 0x55, 0xf9, 0x0f, 0xfc, 0x5f, 0x96, 0x28, 0x8f, 0xaa, 0xa9,
	0x34, 0x4b, 0x9f, 0x73, 0x75, 0x3e, 0xdf, 0xa3, 0x0b, 0x9f, 0xbd, 0x70, 0xbf, 0xa5, 0xd9, 0xcd,
	0x83, 0x30, 0x1e, 0x5d, 0xa9, 0x70, 0x3f, 0xdf, 0xa0, 0x13, 0x73, 0xeb, 0x30, 0xe0, 0xba, 0x2a,
	0xe7, 0x4e, 0xec, 0x9d, 0x0c, 0xc2, 0xb1, 0x0d, 0x9a, 0x52, 0xee, 0x66, 0x8d, 0x41, 0xe1, 0x34,
	0x3f, 0xcd, 0x61, 0xb2, 0xac, 0x02, 0xe6, 0xdc, 0x71, 0xa5, 0x84, 0xca, 0x6c, 0x90, 0x68, 0x3c,
	0xbd, 0x85, 0xa1, 0x30, 0x7c, 0xad, 0x44, 0x44, 0x62, 0x92, 0x5c, 0x16, 0xdd, 0x8b, 0xbe, 0x85,
	0x6b, 0x53, 0x69, 0xe6, 0x84, 0x55, 0x72, 0xc3, 0x7d, 0xf4, 0x34, 0x26, 0xc9, 0x45, 0x71, 0x65,
	0x2a, 0x5d, 0x74, 0xd2, 0xf4, 0xef, 0x00, 0x46, 0x45, 0xc7, 0xfd, 0xd2, 0x60, 0xe9, 0x47, 0xb8,
	0x45, 0x1b, 0xa4, 0x96, 0x7f, 0x04, 0x6b, 0xd9, 0x4c, 0xf1, 0x03, 0x56, 0xa1, 0x4b, 0xbf, 0x39,
	0xba, 0xab, 0xc6, 0xbc, 0x6f, 0x3c, 0xba, 0x80, 0x57, 0x5b, 0xe9, 0x6b, 0x2c, 0xd3, 0xb8, 0x15,
	0x8a, 0x59, 0x57, 0x19, 0x69, 0x76, 0x0d, 0xf4, 0xb2, 0x98, 0x74, 0x66, 0x5a, 0x7b, 0x79, 0x6b,
	0xd1, 0xf7, 0x30, 0xde, 0xa0, 0xf1, 0x81, 0x9b, 0xc0, 0x4a, 0x54, 0xdb, 0x7a, 0x7c, 0xd0, 0x8c,
	0xbf, 0x3c, 0xea, 0xdf, 0x5b, 0x99, 0xfe, 0x84, 0x89, 0x16, 0x1a, 0xdd, 0x81, 0x75, 0x74, 0x5e,
	0xaf, 0x1e, 0x3d, 0x8b, 0x49, 0x32, 0x5a, 0xbc, 0x9b, 0x9d, 0x3a, 0x9a, 0x9d, 0x6f, 0x33, 0x4b,
	0x85, 0xce, 0x6c, 0x58, 0x1d, 0xac, 0x28, 0x68, 0x9b, 0x90, 0xf5, 0x02, 0xe8, 0x57, 0x78, 0xc1,
	0xab, 0x80, 0xcc, 0x76, 0x95, 0x46, 0x17, 0x31, 0x49, 0xae, 0x16, 0x6f, 0xfa, 0x89, 0x8f, 0x54,
	0x5e, 0x5c, 0xf3, 0x9e, 0x48, 0x5f, 0x03, 0x1c, 0x4b, 0x71, 0x3e, 0xda, 0xc6, 0x83, 0xe4, 0x79,
	0xd1, 0x53, 0xa6, 0x09, 0xc0, 0xe9, 0x1f, 0x74, 0x04, 0xf0, 0x90, 0xb1, 0xf4, 0x5b, 0xca, 0xb2,
	0x7c, 0x35, 0x7e, 0x42, 0x01, 0x86, 0xe9, 0xf2, 0xe1, 0xc7, 0xf2, 0x7e, 0x4c, 0xee, 0x3e, 0x41,
	0x84, 0x6e, 0xd7, 0xa7, 0x97, 0x8e, 0x6b, 0xb1, 0x47, 0xf7, 0xeb, 0xee, 0xe6, 0x7c, 0xb5, 0xbc,
	0x3e, 0x0f, 0x9f, 0x93, 0x7f, 0x84, 0xac, 0x87, 0xcd, 0xad, 0x7c, 0xf8, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0x30, 0x3d, 0x11, 0x65, 0x02, 0x00, 0x00,
}
