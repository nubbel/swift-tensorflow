// Code generated by protoc-gen-go.
// source: serving/tensorflow/contrib/boosted_trees/proto/quantiles.proto
// DO NOT EDIT!

/*
Package boosted_trees is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/contrib/boosted_trees/proto/quantiles.proto

It has these top-level messages:
	QuantileConfig
	QuantileEntry
	QuantileSummaryState
	QuantileStreamState
*/
package boosted_trees

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QuantileConfig struct {
	// Maximum eps error when computing quantile summaries.
	Eps float64 `protobuf:"fixed64,1,opt,name=eps" json:"eps,omitempty"`
	// Number of quantiles to generate.
	NumQuantiles int64 `protobuf:"varint,2,opt,name=num_quantiles,json=numQuantiles" json:"num_quantiles,omitempty"`
}

func (m *QuantileConfig) Reset()                    { *m = QuantileConfig{} }
func (m *QuantileConfig) String() string            { return proto.CompactTextString(m) }
func (*QuantileConfig) ProtoMessage()               {}
func (*QuantileConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QuantileConfig) GetEps() float64 {
	if m != nil {
		return m.Eps
	}
	return 0
}

func (m *QuantileConfig) GetNumQuantiles() int64 {
	if m != nil {
		return m.NumQuantiles
	}
	return 0
}

type QuantileEntry struct {
	// Value for the entry.
	Value float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
	// Weight for the entry.
	Weight float32 `protobuf:"fixed32,2,opt,name=weight" json:"weight,omitempty"`
	// We need the minimum and maximum rank possible for this entry.
	// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
	// value in the input.
	MinRank float32 `protobuf:"fixed32,3,opt,name=min_rank,json=minRank" json:"min_rank,omitempty"`
	MaxRank float32 `protobuf:"fixed32,4,opt,name=max_rank,json=maxRank" json:"max_rank,omitempty"`
}

func (m *QuantileEntry) Reset()                    { *m = QuantileEntry{} }
func (m *QuantileEntry) String() string            { return proto.CompactTextString(m) }
func (*QuantileEntry) ProtoMessage()               {}
func (*QuantileEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QuantileEntry) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QuantileEntry) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *QuantileEntry) GetMinRank() float32 {
	if m != nil {
		return m.MinRank
	}
	return 0
}

func (m *QuantileEntry) GetMaxRank() float32 {
	if m != nil {
		return m.MaxRank
	}
	return 0
}

type QuantileSummaryState struct {
	Entries []*QuantileEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *QuantileSummaryState) Reset()                    { *m = QuantileSummaryState{} }
func (m *QuantileSummaryState) String() string            { return proto.CompactTextString(m) }
func (*QuantileSummaryState) ProtoMessage()               {}
func (*QuantileSummaryState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QuantileSummaryState) GetEntries() []*QuantileEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type QuantileStreamState struct {
	Summaries []*QuantileSummaryState `protobuf:"bytes,1,rep,name=summaries" json:"summaries,omitempty"`
}

func (m *QuantileStreamState) Reset()                    { *m = QuantileStreamState{} }
func (m *QuantileStreamState) String() string            { return proto.CompactTextString(m) }
func (*QuantileStreamState) ProtoMessage()               {}
func (*QuantileStreamState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QuantileStreamState) GetSummaries() []*QuantileSummaryState {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func init() {
	proto.RegisterType((*QuantileConfig)(nil), "boosted_trees.QuantileConfig")
	proto.RegisterType((*QuantileEntry)(nil), "boosted_trees.QuantileEntry")
	proto.RegisterType((*QuantileSummaryState)(nil), "boosted_trees.QuantileSummaryState")
	proto.RegisterType((*QuantileStreamState)(nil), "boosted_trees.QuantileStreamState")
}

func init() {
	proto.RegisterFile("serving/tensorflow/contrib/boosted_trees/proto/quantiles.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0x47, 0x49, 0x57, 0x5b, 0x1d, 0xad, 0x48, 0x2c, 0x52, 0xc1, 0x43, 0xd9, 0x5e, 0x7a, 0xea,
	0x82, 0x82, 0x47, 0x41, 0x45, 0xbc, 0x09, 0xa6, 0x17, 0x6f, 0x25, 0xd5, 0xe9, 0x1a, 0xba, 0x99,
	0xd4, 0x24, 0xdb, 0x3f, 0xdf, 0xdc, 0xa3, 0x6c, 0x76, 0xb7, 0x75, 0x0f, 0xde, 0xf2, 0xe3, 0xcd,
	0xbc, 0xcc, 0x24, 0x70, 0xef, 0xd0, 0xae, 0x14, 0xa5, 0x89, 0x47, 0x72, 0xc6, 0xce, 0x33, 0xb3,
	0x4e, 0x3e, 0x0c, 0x79, 0xab, 0x66, 0xc9, 0xcc, 0x18, 0xe7, 0xf1, 0x73, 0xea, 0x2d, 0xa2, 0x4b,
	0x96, 0xd6, 0x78, 0x93, 0x7c, 0xe7, 0x92, 0xbc, 0xca, 0xd0, 0x8d, 0x43, 0xe6, 0xdd, 0x46, 0x51,
	0xfc, 0x02, 0x67, 0x6f, 0x55, 0xc5, 0x93, 0xa1, 0xb9, 0x4a, 0xf9, 0x39, 0x44, 0xb8, 0x74, 0x7d,
	0x36, 0x60, 0x23, 0x26, 0x8a, 0x23, 0x1f, 0x42, 0x97, 0x72, 0x3d, 0xdd, 0x99, 0xfa, 0xad, 0x01,
	0x1b, 0x45, 0xe2, 0x94, 0x72, 0x5d, 0xf7, 0xba, 0xd8, 0x41, 0xb7, 0x0e, 0xcf, 0xe4, 0xed, 0x96,
	0xf7, 0xe0, 0x70, 0x25, 0xb3, 0x1c, 0x83, 0xa9, 0x25, 0xca, 0xc0, 0x2f, 0xa1, 0xbd, 0x46, 0x95,
	0x7e, 0xf9, 0x20, 0x69, 0x89, 0x2a, 0xf1, 0x2b, 0x38, 0xd2, 0x8a, 0xa6, 0x56, 0xd2, 0xa2, 0x1f,
	0x05, 0xd2, 0xd1, 0x8a, 0x84, 0xa4, 0x45, 0x40, 0x72, 0x53, 0xa2, 0x83, 0x0a, 0xc9, 0x4d, 0x81,
	0xe2, 0x57, 0xe8, 0xd5, 0x97, 0x4e, 0x72, 0xad, 0xa5, 0xdd, 0x4e, 0xbc, 0xf4, 0xc8, 0xef, 0xa0,
	0x83, 0xc5, 0x93, 0x60, 0xb1, 0x47, 0x34, 0x3a, 0xb9, 0xb9, 0x1e, 0x37, 0xd6, 0x1e, 0x37, 0x46,
	0x15, 0x75, 0x71, 0xfc, 0x0e, 0x17, 0x3b, 0x9f, 0xb7, 0x28, 0x75, 0xa9, 0x7b, 0x80, 0x63, 0x17,
	0xf4, 0x7b, 0xe1, 0xf0, 0x1f, 0xe1, 0xdf, 0x31, 0xc4, 0xbe, 0xeb, 0x31, 0xfa, 0x61, 0x6c, 0xd6,
	0x0e, 0x5f, 0x70, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x36, 0xb5, 0xec, 0xde, 0xc4, 0x01, 0x00,
	0x00,
}
