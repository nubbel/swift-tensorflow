// Code generated by protoc-gen-go.
// source: serving/tensorflow/contrib/verbs/verbs_service.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/contrib/verbs/verbs_service.proto

It has these top-level messages:
	Channel
	MemoryRegion
	GetRemoteAddressRequest
	GetRemoteAddressResponse
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Lid int32  `protobuf:"varint,1,opt,name=lid" json:"lid,omitempty"`
	Qpn int32  `protobuf:"varint,2,opt,name=qpn" json:"qpn,omitempty"`
	Psn int32  `protobuf:"varint,3,opt,name=psn" json:"psn,omitempty"`
	Snp uint64 `protobuf:"varint,4,opt,name=snp" json:"snp,omitempty"`
	Iid uint64 `protobuf:"varint,5,opt,name=iid" json:"iid,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetLid() int32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *Channel) GetQpn() int32 {
	if m != nil {
		return m.Qpn
	}
	return 0
}

func (m *Channel) GetPsn() int32 {
	if m != nil {
		return m.Psn
	}
	return 0
}

func (m *Channel) GetSnp() uint64 {
	if m != nil {
		return m.Snp
	}
	return 0
}

func (m *Channel) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

type MemoryRegion struct {
	RemoteAddr uint64 `protobuf:"varint,1,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	Rkey       uint32 `protobuf:"varint,2,opt,name=rkey" json:"rkey,omitempty"`
}

func (m *MemoryRegion) Reset()                    { *m = MemoryRegion{} }
func (m *MemoryRegion) String() string            { return proto.CompactTextString(m) }
func (*MemoryRegion) ProtoMessage()               {}
func (*MemoryRegion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MemoryRegion) GetRemoteAddr() uint64 {
	if m != nil {
		return m.RemoteAddr
	}
	return 0
}

func (m *MemoryRegion) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

type GetRemoteAddressRequest struct {
	HostName string          `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Channel  *Channel        `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Mr       []*MemoryRegion `protobuf:"bytes,3,rep,name=mr" json:"mr,omitempty"`
}

func (m *GetRemoteAddressRequest) Reset()                    { *m = GetRemoteAddressRequest{} }
func (m *GetRemoteAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteAddressRequest) ProtoMessage()               {}
func (*GetRemoteAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRemoteAddressRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetRemoteAddressRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetRemoteAddressRequest) GetMr() []*MemoryRegion {
	if m != nil {
		return m.Mr
	}
	return nil
}

type GetRemoteAddressResponse struct {
	HostName string          `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Channel  *Channel        `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Mr       []*MemoryRegion `protobuf:"bytes,3,rep,name=mr" json:"mr,omitempty"`
}

func (m *GetRemoteAddressResponse) Reset()                    { *m = GetRemoteAddressResponse{} }
func (m *GetRemoteAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteAddressResponse) ProtoMessage()               {}
func (*GetRemoteAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRemoteAddressResponse) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetRemoteAddressResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetRemoteAddressResponse) GetMr() []*MemoryRegion {
	if m != nil {
		return m.Mr
	}
	return nil
}

func init() {
	proto.RegisterType((*Channel)(nil), "tensorflow.Channel")
	proto.RegisterType((*MemoryRegion)(nil), "tensorflow.MemoryRegion")
	proto.RegisterType((*GetRemoteAddressRequest)(nil), "tensorflow.GetRemoteAddressRequest")
	proto.RegisterType((*GetRemoteAddressResponse)(nil), "tensorflow.GetRemoteAddressResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VerbsService service

type VerbsServiceClient interface {
	GetRemoteAddress(ctx context.Context, in *GetRemoteAddressRequest, opts ...grpc.CallOption) (*GetRemoteAddressResponse, error)
}

type verbsServiceClient struct {
	cc *grpc.ClientConn
}

func NewVerbsServiceClient(cc *grpc.ClientConn) VerbsServiceClient {
	return &verbsServiceClient{cc}
}

func (c *verbsServiceClient) GetRemoteAddress(ctx context.Context, in *GetRemoteAddressRequest, opts ...grpc.CallOption) (*GetRemoteAddressResponse, error) {
	out := new(GetRemoteAddressResponse)
	err := grpc.Invoke(ctx, "/tensorflow.VerbsService/GetRemoteAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerbsService service

type VerbsServiceServer interface {
	GetRemoteAddress(context.Context, *GetRemoteAddressRequest) (*GetRemoteAddressResponse, error)
}

func RegisterVerbsServiceServer(s *grpc.Server, srv VerbsServiceServer) {
	s.RegisterService(&_VerbsService_serviceDesc, srv)
}

func _VerbsService_GetRemoteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbsServiceServer).GetRemoteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.VerbsService/GetRemoteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbsServiceServer).GetRemoteAddress(ctx, req.(*GetRemoteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VerbsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.VerbsService",
	HandlerType: (*VerbsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemoteAddress",
			Handler:    _VerbsService_GetRemoteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serving/tensorflow/contrib/verbs/verbs_service.proto",
}

func init() {
	proto.RegisterFile("serving/tensorflow/contrib/verbs/verbs_service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x41, 0x4b, 0x2b, 0x31,
	0x14, 0x85, 0x99, 0xce, 0xf4, 0xf5, 0xf5, 0xb6, 0x0f, 0x4a, 0xde, 0xc2, 0xa0, 0x82, 0x65, 0x74,
	0x31, 0x1b, 0xa7, 0x50, 0xfb, 0x07, 0x6c, 0x17, 0xae, 0x94, 0x12, 0xc1, 0x9d, 0x94, 0xe9, 0xcc,
	0xb5, 0x0d, 0x76, 0x92, 0x69, 0x12, 0x2b, 0xfd, 0x15, 0xfa, 0x93, 0x25, 0x49, 0xb5, 0x83, 0xa2,
	0x5b, 0x37, 0xe1, 0xf2, 0x71, 0xb8, 0x39, 0x27, 0x39, 0x30, 0xd2, 0xa8, 0x36, 0x5c, 0x2c, 0x06,
	0x06, 0x85, 0x96, 0xea, 0x61, 0x25, 0x9f, 0x07, 0xb9, 0x14, 0x46, 0xf1, 0xf9, 0x60, 0x83, 0x6a,
	0xae, 0xfd, 0x39, 0x73, 0xb2, 0x1c, 0xd3, 0x4a, 0x49, 0x23, 0x09, 0xec, 0xd5, 0x71, 0x0e, 0xad,
	0xc9, 0x32, 0x13, 0x02, 0x57, 0xa4, 0x07, 0xe1, 0x8a, 0x17, 0x34, 0xe8, 0x07, 0x49, 0x93, 0xd9,
	0xd1, 0x92, 0x75, 0x25, 0x68, 0xc3, 0x93, 0x75, 0x25, 0x2c, 0xa9, 0xb4, 0xa0, 0xa1, 0x27, 0x95,
	0x76, 0x44, 0x8b, 0x8a, 0x46, 0xfd, 0x20, 0x89, 0x98, 0x1d, 0x2d, 0xe1, 0xbc, 0xa0, 0x4d, 0x4f,
	0x38, 0x2f, 0xe2, 0x09, 0x74, 0xaf, 0xb1, 0x94, 0x6a, 0xcb, 0x70, 0xc1, 0xa5, 0x20, 0x27, 0xd0,
	0x51, 0x58, 0x4a, 0x83, 0xb3, 0xac, 0x28, 0x94, 0xbb, 0x31, 0x62, 0xe0, 0xd1, 0x65, 0x51, 0x28,
	0x42, 0x20, 0x52, 0x8f, 0xb8, 0x75, 0x37, 0xff, 0x63, 0x6e, 0x8e, 0x5f, 0x02, 0x38, 0xb8, 0x42,
	0xc3, 0x3e, 0x54, 0xa8, 0x35, 0xc3, 0xf5, 0x13, 0x6a, 0x43, 0x8e, 0xa0, 0xbd, 0x94, 0xda, 0xcc,
	0x44, 0x56, 0xa2, 0x5b, 0xd7, 0x66, 0x7f, 0x2d, 0xb8, 0xc9, 0x4a, 0x24, 0xe7, 0xd0, 0xca, 0x7d,
	0x44, 0xb7, 0xaf, 0x33, 0xfc, 0x9f, 0xee, 0x1f, 0x20, 0xdd, 0xa5, 0x67, 0xef, 0x1a, 0x92, 0x40,
	0xa3, 0x54, 0x34, 0xec, 0x87, 0x49, 0x67, 0x48, 0xeb, 0xca, 0x7a, 0x04, 0xd6, 0x28, 0x55, 0xfc,
	0x1a, 0x00, 0xfd, 0xea, 0x48, 0x57, 0x52, 0x68, 0xfc, 0x1d, 0x4b, 0xc3, 0x12, 0xba, 0x77, 0xf6,
	0xc7, 0x6f, 0xfd, 0x87, 0x93, 0x7b, 0xe8, 0x7d, 0x76, 0x48, 0x4e, 0xeb, 0x1b, 0xbe, 0x79, 0xd1,
	0xc3, 0xb3, 0x9f, 0x45, 0x3e, 0xe4, 0x78, 0x04, 0xc7, 0x52, 0x2d, 0xea, 0xd2, 0x5d, 0xfb, 0x52,
	0xd7, 0xbb, 0x31, 0xa9, 0x9b, 0x99, 0xda, 0xf2, 0xe9, 0x69, 0x30, 0xff, 0xe3, 0x6a, 0x78, 0xf1,
	0x16, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xd2, 0x10, 0xa3, 0xbe, 0x02, 0x00, 0x00,
}
