// Code generated by protoc-gen-go.
// source: serving/tensorflow/contrib/training/python/training/hparam.proto
// DO NOT EDIT!

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	serving/tensorflow/contrib/training/python/training/hparam.proto

It has these top-level messages:
	HParamDef
*/
package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer holding hyper parameters.
// Examples of hyper parameters:
//   learning_rate = 0.1,
//   num_hidden_units = 100,
//   activations = ['relu', 'tanh']
type HParamDef struct {
	Hparam map[string]*HParamDef_HParamType `protobuf:"bytes,1,rep,name=hparam" json:"hparam,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HParamDef) Reset()                    { *m = HParamDef{} }
func (m *HParamDef) String() string            { return proto.CompactTextString(m) }
func (*HParamDef) ProtoMessage()               {}
func (*HParamDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HParamDef) GetHparam() map[string]*HParamDef_HParamType {
	if m != nil {
		return m.Hparam
	}
	return nil
}

type HParamDef_BytesList struct {
	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *HParamDef_BytesList) Reset()                    { *m = HParamDef_BytesList{} }
func (m *HParamDef_BytesList) String() string            { return proto.CompactTextString(m) }
func (*HParamDef_BytesList) ProtoMessage()               {}
func (*HParamDef_BytesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *HParamDef_BytesList) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_FloatList struct {
	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_FloatList) Reset()                    { *m = HParamDef_FloatList{} }
func (m *HParamDef_FloatList) String() string            { return proto.CompactTextString(m) }
func (*HParamDef_FloatList) ProtoMessage()               {}
func (*HParamDef_FloatList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *HParamDef_FloatList) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_Int64List struct {
	Value []int64 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_Int64List) Reset()                    { *m = HParamDef_Int64List{} }
func (m *HParamDef_Int64List) String() string            { return proto.CompactTextString(m) }
func (*HParamDef_Int64List) ProtoMessage()               {}
func (*HParamDef_Int64List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *HParamDef_Int64List) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_BoolList struct {
	Value []bool `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_BoolList) Reset()                    { *m = HParamDef_BoolList{} }
func (m *HParamDef_BoolList) String() string            { return proto.CompactTextString(m) }
func (*HParamDef_BoolList) ProtoMessage()               {}
func (*HParamDef_BoolList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *HParamDef_BoolList) GetValue() []bool {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_HParamType struct {
	// Types that are valid to be assigned to Kind:
	//	*HParamDef_HParamType_Int64Value
	//	*HParamDef_HParamType_FloatValue
	//	*HParamDef_HParamType_BytesValue
	//	*HParamDef_HParamType_BoolValue
	//	*HParamDef_HParamType_Int64List
	//	*HParamDef_HParamType_FloatList
	//	*HParamDef_HParamType_BytesList
	//	*HParamDef_HParamType_BoolList
	Kind isHParamDef_HParamType_Kind `protobuf_oneof:"kind"`
}

func (m *HParamDef_HParamType) Reset()                    { *m = HParamDef_HParamType{} }
func (m *HParamDef_HParamType) String() string            { return proto.CompactTextString(m) }
func (*HParamDef_HParamType) ProtoMessage()               {}
func (*HParamDef_HParamType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

type isHParamDef_HParamType_Kind interface {
	isHParamDef_HParamType_Kind()
}

type HParamDef_HParamType_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,oneof"`
}
type HParamDef_HParamType_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,oneof"`
}
type HParamDef_HParamType_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,3,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type HParamDef_HParamType_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,oneof"`
}
type HParamDef_HParamType_Int64List struct {
	Int64List *HParamDef_Int64List `protobuf:"bytes,4,opt,name=int64_list,json=int64List,oneof"`
}
type HParamDef_HParamType_FloatList struct {
	FloatList *HParamDef_FloatList `protobuf:"bytes,5,opt,name=float_list,json=floatList,oneof"`
}
type HParamDef_HParamType_BytesList struct {
	BytesList *HParamDef_BytesList `protobuf:"bytes,6,opt,name=bytes_list,json=bytesList,oneof"`
}
type HParamDef_HParamType_BoolList struct {
	BoolList *HParamDef_BoolList `protobuf:"bytes,8,opt,name=bool_list,json=boolList,oneof"`
}

func (*HParamDef_HParamType_Int64Value) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_FloatValue) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_BytesValue) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_BoolValue) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_Int64List) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_FloatList) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_BytesList) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_BoolList) isHParamDef_HParamType_Kind()   {}

func (m *HParamDef_HParamType) GetKind() isHParamDef_HParamType_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *HParamDef_HParamType) GetInt64Value() int64 {
	if x, ok := m.GetKind().(*HParamDef_HParamType_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *HParamDef_HParamType) GetFloatValue() float32 {
	if x, ok := m.GetKind().(*HParamDef_HParamType_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *HParamDef_HParamType) GetBytesValue() []byte {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *HParamDef_HParamType) GetBoolValue() bool {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *HParamDef_HParamType) GetInt64List() *HParamDef_Int64List {
	if x, ok := m.GetKind().(*HParamDef_HParamType_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (m *HParamDef_HParamType) GetFloatList() *HParamDef_FloatList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (m *HParamDef_HParamType) GetBytesList() *HParamDef_BytesList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (m *HParamDef_HParamType) GetBoolList() *HParamDef_BoolList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BoolList); ok {
		return x.BoolList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HParamDef_HParamType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HParamDef_HParamType_OneofMarshaler, _HParamDef_HParamType_OneofUnmarshaler, _HParamDef_HParamType_OneofSizer, []interface{}{
		(*HParamDef_HParamType_Int64Value)(nil),
		(*HParamDef_HParamType_FloatValue)(nil),
		(*HParamDef_HParamType_BytesValue)(nil),
		(*HParamDef_HParamType_BoolValue)(nil),
		(*HParamDef_HParamType_Int64List)(nil),
		(*HParamDef_HParamType_FloatList)(nil),
		(*HParamDef_HParamType_BytesList)(nil),
		(*HParamDef_HParamType_BoolList)(nil),
	}
}

func _HParamDef_HParamType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HParamDef_HParamType)
	// kind
	switch x := m.Kind.(type) {
	case *HParamDef_HParamType_Int64Value:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *HParamDef_HParamType_FloatValue:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *HParamDef_HParamType_BytesValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *HParamDef_HParamType_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *HParamDef_HParamType_Int64List:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64List); err != nil {
			return err
		}
	case *HParamDef_HParamType_FloatList:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FloatList); err != nil {
			return err
		}
	case *HParamDef_HParamType_BytesList:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BytesList); err != nil {
			return err
		}
	case *HParamDef_HParamType_BoolList:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HParamDef_HParamType.Kind has unexpected type %T", x)
	}
	return nil
}

func _HParamDef_HParamType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HParamDef_HParamType)
	switch tag {
	case 1: // kind.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &HParamDef_HParamType_Int64Value{int64(x)}
		return true, err
	case 2: // kind.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Kind = &HParamDef_HParamType_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // kind.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Kind = &HParamDef_HParamType_BytesValue{x}
		return true, err
	case 7: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &HParamDef_HParamType_BoolValue{x != 0}
		return true, err
	case 4: // kind.int64_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_Int64List)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_Int64List{msg}
		return true, err
	case 5: // kind.float_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_FloatList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_FloatList{msg}
		return true, err
	case 6: // kind.bytes_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_BytesList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_BytesList{msg}
		return true, err
	case 8: // kind.bool_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_BoolList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_BoolList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HParamDef_HParamType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HParamDef_HParamType)
	// kind
	switch x := m.Kind.(type) {
	case *HParamDef_HParamType_Int64Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *HParamDef_HParamType_FloatValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *HParamDef_HParamType_BytesValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *HParamDef_HParamType_BoolValue:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *HParamDef_HParamType_Int64List:
		s := proto.Size(x.Int64List)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_FloatList:
		s := proto.Size(x.FloatList)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_BytesList:
		s := proto.Size(x.BytesList)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_BoolList:
		s := proto.Size(x.BoolList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HParamDef)(nil), "tensorflow.HParamDef")
	proto.RegisterType((*HParamDef_BytesList)(nil), "tensorflow.HParamDef.BytesList")
	proto.RegisterType((*HParamDef_FloatList)(nil), "tensorflow.HParamDef.FloatList")
	proto.RegisterType((*HParamDef_Int64List)(nil), "tensorflow.HParamDef.Int64List")
	proto.RegisterType((*HParamDef_BoolList)(nil), "tensorflow.HParamDef.BoolList")
	proto.RegisterType((*HParamDef_HParamType)(nil), "tensorflow.HParamDef.HParamType")
}

func init() {
	proto.RegisterFile("serving/tensorflow/contrib/training/python/training/hparam.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6b, 0xdb, 0x30,
	0x14, 0xc7, 0x23, 0x3b, 0xf1, 0xec, 0xe7, 0x1c, 0x82, 0xd9, 0x21, 0xe4, 0xb0, 0x38, 0x63, 0x03,
	0x9f, 0x1c, 0xc8, 0x46, 0xd8, 0x06, 0x03, 0x63, 0xda, 0xe2, 0x42, 0x0f, 0xc5, 0x94, 0x5e, 0x7a,
	0x08, 0x76, 0x6b, 0x37, 0x22, 0xae, 0x64, 0x6c, 0x35, 0xc5, 0x9f, 0xa7, 0x5f, 0xac, 0x1f, 0xa3,
	0xc7, 0x22, 0xc9, 0x51, 0x0c, 0x69, 0x72, 0x93, 0xfe, 0xfa, 0xe9, 0xaf, 0xa7, 0xf7, 0x7f, 0x10,
	0xd4, 0x59, 0xb5, 0xc5, 0xe4, 0x71, 0xce, 0x32, 0x52, 0xd3, 0x2a, 0x2f, 0xe8, 0xcb, 0xfc, 0x9e,
	0x12, 0x56, 0xe1, 0x74, 0xce, 0xaa, 0x04, 0x13, 0x7e, 0x56, 0x36, 0x6c, 0x4d, 0xc9, 0x7e, 0xbf,
	0x2e, 0x93, 0x2a, 0x79, 0xf2, 0xcb, 0x8a, 0x32, 0xea, 0xc0, 0xfe, 0xe6, 0xf7, 0xb7, 0x01, 0x58,
	0xd1, 0x35, 0x3f, 0x3c, 0xcb, 0x72, 0xe7, 0x2f, 0x18, 0x92, 0x1c, 0x23, 0x57, 0xf7, 0xec, 0xc5,
	0xcc, 0xdf, 0xa3, 0xbe, 0xc2, 0xfc, 0x48, 0x30, 0xe7, 0x84, 0x55, 0x4d, 0xdc, 0x5e, 0x98, 0xcc,
	0xc0, 0x0a, 0x1b, 0x96, 0xd5, 0x57, 0xb8, 0x66, 0xce, 0x57, 0x18, 0x6c, 0x93, 0xe2, 0x39, 0x13,
	0x36, 0xc3, 0x58, 0x6e, 0x26, 0x3f, 0xc1, 0xba, 0x28, 0x68, 0xc2, 0x04, 0x32, 0xee, 0x22, 0x5a,
	0xa8, 0x8d, 0x50, 0x07, 0xbb, 0x24, 0x6c, 0xf9, 0xfb, 0x10, 0xd3, 0xbb, 0xd8, 0x0f, 0x30, 0x43,
	0x4a, 0x8b, 0x43, 0xca, 0xec, 0x52, 0xaf, 0x3a, 0x80, 0x2c, 0xfc, 0xa6, 0x29, 0x33, 0x67, 0x06,
	0x36, 0xe6, 0xde, 0xab, 0x1d, 0x8e, 0x3c, 0x3d, 0xea, 0xc5, 0x20, 0xc4, 0x5b, 0xae, 0x71, 0x24,
	0xe7, 0x55, 0xb6, 0x88, 0xe6, 0x22, 0x4f, 0xe3, 0x88, 0x10, 0x15, 0x92, 0xf2, 0xbf, 0xb6, 0x88,
	0xee, 0x22, 0x6f, 0xc8, 0x11, 0x21, 0x4a, 0x64, 0x0a, 0x90, 0x52, 0x5a, 0xb4, 0xc4, 0x17, 0x17,
	0x79, 0x66, 0xd4, 0x8b, 0x2d, 0xae, 0x49, 0x20, 0x00, 0xf9, 0xe8, 0xaa, 0xc0, 0x35, 0x1b, 0xf7,
	0x5d, 0xe4, 0xd9, 0x8b, 0xe9, 0xe7, 0xed, 0x56, 0xdd, 0xe0, 0x0e, 0x58, 0xb5, 0x26, 0x00, 0x59,
	0x93, 0x74, 0x18, 0x9c, 0x72, 0x50, 0x6d, 0xe7, 0x0e, 0xb9, 0xca, 0x20, 0x00, 0x59, 0xb2, 0x74,
	0x30, 0x4e, 0x39, 0xa8, 0x6c, 0xc5, 0x2f, 0x54, 0xd0, 0xff, 0x41, 0x7c, 0x49, 0x1a, 0x98, 0xc2,
	0xe0, 0xdb, 0x11, 0x83, 0x36, 0xab, 0xa8, 0x17, 0x9b, 0x69, 0xbb, 0x0e, 0x0d, 0xe8, 0x6f, 0x30,
	0x79, 0x98, 0xdc, 0x81, 0xdd, 0x99, 0x29, 0x67, 0x04, 0xfa, 0x26, 0x6b, 0x44, 0x3a, 0x56, 0xcc,
	0x97, 0xce, 0x72, 0x17, 0xb0, 0x26, 0xde, 0x70, 0x8f, 0xcc, 0xa5, 0x0a, 0xba, 0x8d, 0xff, 0x9f,
	0xf6, 0x07, 0x85, 0xfa, 0x3b, 0x42, 0xa9, 0x21, 0x46, 0xff, 0xd7, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xda, 0xcb, 0x07, 0x54, 0x3e, 0x03, 0x00, 0x00,
}
