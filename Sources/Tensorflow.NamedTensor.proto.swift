/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "named_tensor.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct NamedTensorRoot {
        public static let `default` = NamedTensorRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// A pair of tensor name and tensor values.
    final public class NamedTensorProto : GeneratedMessage {

        public static func == (lhs: Tensorflow.NamedTensorProto, rhs: Tensorflow.NamedTensorProto) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasTensor == rhs.hasTensor) && (!lhs.hasTensor || lhs.tensor == rhs.tensor)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Name of the tensor.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var tensor:Tensorflow.TensorProto!
        public fileprivate(set) var hasTensor:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasTensor {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:tensor)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasTensor {
                if let varSizetensor = tensor?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizetensor
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.NamedTensorProto.Builder {
            return Tensorflow.NamedTensorProto.classBuilder() as! Tensorflow.NamedTensorProto.Builder
        }
        public func getBuilder() -> Tensorflow.NamedTensorProto.Builder {
            return classBuilder() as! Tensorflow.NamedTensorProto.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.NamedTensorProto.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.NamedTensorProto.Builder()
        }
        public func toBuilder() throws -> Tensorflow.NamedTensorProto.Builder {
            return try Tensorflow.NamedTensorProto.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.NamedTensorProto) throws -> Tensorflow.NamedTensorProto.Builder {
            return try Tensorflow.NamedTensorProto.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasTensor {
                jsonMap["tensor"] = try tensor.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.NamedTensorProto {
            return try Tensorflow.NamedTensorProto.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.NamedTensorProto {
            return try Tensorflow.NamedTensorProto.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasTensor {
                output += "\(indent) tensor {\n"
                if let outDescTensor = tensor {
                    output += try outDescTensor.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasTensor {
                    if let hashValuetensor = tensor?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetensor
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.NamedTensorProto"
        }
        override public func className() -> String {
            return "Tensorflow.NamedTensorProto"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.NamedTensorProto = Tensorflow.NamedTensorProto()
            public func getMessage() -> Tensorflow.NamedTensorProto {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Name of the tensor.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.NamedTensorProto.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.NamedTensorProto.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// The client can populate a TensorProto using a tensorflow::Tensor`, or
            /// directly using the protobuf field accessors.
            /// The client specifies whether the returned tensor values should be
            /// filled tensor fields (float_val, int_val, etc.) or encoded in a
            /// compact form in tensor.tensor_content.
            public var tensor:Tensorflow.TensorProto! {
                get {
                    if tensorBuilder_ != nil {
                        builderResult.tensor = tensorBuilder_.getMessage()
                    }
                    return builderResult.tensor
                }
                set (value) {
                    builderResult.hasTensor = true
                    builderResult.tensor = value
                }
            }
            public var hasTensor:Bool {
                get {
                    return builderResult.hasTensor
                }
            }
            fileprivate var tensorBuilder_:Tensorflow.TensorProto.Builder! {
                didSet {
                    builderResult.hasTensor = true
                }
            }
            public func getTensorBuilder() -> Tensorflow.TensorProto.Builder {
                if tensorBuilder_ == nil {
                    tensorBuilder_ = Tensorflow.TensorProto.Builder()
                    builderResult.tensor = tensorBuilder_.getMessage()
                    if tensor != nil {
                        try! tensorBuilder_.mergeFrom(other: tensor)
                    }
                }
                return tensorBuilder_
            }
            @discardableResult
            public func setTensor(_ value:Tensorflow.TensorProto!) -> Tensorflow.NamedTensorProto.Builder {
                self.tensor = value
                return self
            }
            @discardableResult
            public func mergeTensor(value:Tensorflow.TensorProto) throws -> Tensorflow.NamedTensorProto.Builder {
                if builderResult.hasTensor {
                    builderResult.tensor = try Tensorflow.TensorProto.builderWithPrototype(prototype:builderResult.tensor).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.tensor = value
                }
                builderResult.hasTensor = true
                return self
            }
            @discardableResult
            public func clearTensor() -> Tensorflow.NamedTensorProto.Builder {
                tensorBuilder_ = nil
                builderResult.hasTensor = false
                builderResult.tensor = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.NamedTensorProto.Builder {
                builderResult = Tensorflow.NamedTensorProto()
                return self
            }
            override public func clone() throws -> Tensorflow.NamedTensorProto.Builder {
                return try Tensorflow.NamedTensorProto.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.NamedTensorProto {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.NamedTensorProto {
                let returnMe:Tensorflow.NamedTensorProto = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.NamedTensorProto) throws -> Tensorflow.NamedTensorProto.Builder {
                if other == Tensorflow.NamedTensorProto() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if (other.hasTensor) {
                    try mergeTensor(value: other.tensor)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.NamedTensorProto.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.NamedTensorProto.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        let subBuilder:Tensorflow.TensorProto.Builder = Tensorflow.TensorProto.Builder()
                        if hasTensor {
                            try subBuilder.mergeFrom(other: tensor)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        tensor = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.NamedTensorProto.Builder {
                let resultDecodedBuilder = Tensorflow.NamedTensorProto.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueTensor = jsonMap["tensor"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.tensor = try Tensorflow.TensorProto.Builder.decodeToBuilder(jsonMap:jsonValueTensor).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.NamedTensorProto.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.NamedTensorProto.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.NamedTensorProto: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.NamedTensorProto> {
        var mergedArray = Array<Tensorflow.NamedTensorProto>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.NamedTensorProto? {
        return try Tensorflow.NamedTensorProto.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.NamedTensorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.NamedTensorProto {
        return try Tensorflow.NamedTensorProto.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "tensor": return self.tensor
        default: return nil
        }
    }
}
extension Tensorflow.NamedTensorProto.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "tensor": return self.tensor
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "tensor":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorProto else {
                    return
                }
                self.tensor = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
