/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "tensor_description.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct TensorDescriptionRoot {
        public static let `default` = TensorDescriptionRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TypesRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.AllocationDescriptionRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class TensorDescription : GeneratedMessage {

        public static func == (lhs: Tensorflow.TensorDescription, rhs: Tensorflow.TensorDescription) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasDtype == rhs.hasDtype) && (!lhs.hasDtype || lhs.dtype == rhs.dtype)
            fieldCheck = fieldCheck && (lhs.hasShape == rhs.hasShape) && (!lhs.hasShape || lhs.shape == rhs.shape)
            fieldCheck = fieldCheck && (lhs.hasAllocationDescription == rhs.hasAllocationDescription) && (!lhs.hasAllocationDescription || lhs.allocationDescription == rhs.allocationDescription)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var dtype:Tensorflow.DataType = Tensorflow.DataType.dtInvalid
        public fileprivate(set) var hasDtype:Bool = false
        public fileprivate(set) var shape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasShape:Bool = false
        public fileprivate(set) var allocationDescription:Tensorflow.AllocationDescription!
        public fileprivate(set) var hasAllocationDescription:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasDtype {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:dtype.rawValue)
            }
            if hasShape {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:shape)
            }
            if hasAllocationDescription {
                try codedOutputStream.writeMessage(fieldNumber: 4, value:allocationDescription)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasDtype) {
                serialize_size += dtype.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasShape {
                if let varSizeshape = shape?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeshape
                }
            }
            if hasAllocationDescription {
                if let varSizeallocationDescription = allocationDescription?.computeMessageSize(fieldNumber: 4) {
                    serialize_size += varSizeallocationDescription
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.TensorDescription.Builder {
            return Tensorflow.TensorDescription.classBuilder() as! Tensorflow.TensorDescription.Builder
        }
        public func getBuilder() -> Tensorflow.TensorDescription.Builder {
            return classBuilder() as! Tensorflow.TensorDescription.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorDescription.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorDescription.Builder()
        }
        public func toBuilder() throws -> Tensorflow.TensorDescription.Builder {
            return try Tensorflow.TensorDescription.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.TensorDescription) throws -> Tensorflow.TensorDescription.Builder {
            return try Tensorflow.TensorDescription.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasDtype {
                jsonMap["dtype"] = dtype.toString()
            }
            if hasShape {
                jsonMap["shape"] = try shape.encode()
            }
            if hasAllocationDescription {
                jsonMap["allocationDescription"] = try allocationDescription.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorDescription {
            return try Tensorflow.TensorDescription.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.TensorDescription {
            return try Tensorflow.TensorDescription.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasDtype) {
                output += "\(indent) dtype: \(dtype.description)\n"
            }
            if hasShape {
                output += "\(indent) shape {\n"
                if let outDescShape = shape {
                    output += try outDescShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasAllocationDescription {
                output += "\(indent) allocationDescription {\n"
                if let outDescAllocationDescription = allocationDescription {
                    output += try outDescAllocationDescription.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDtype {
                     hashCode = (hashCode &* 31) &+ dtype.hashValue
                }
                if hasShape {
                    if let hashValueshape = shape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueshape
                    }
                }
                if hasAllocationDescription {
                    if let hashValueallocationDescription = allocationDescription?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueallocationDescription
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.TensorDescription"
        }
        override public func className() -> String {
            return "Tensorflow.TensorDescription"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.TensorDescription = Tensorflow.TensorDescription()
            public func getMessage() -> Tensorflow.TensorDescription {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Data type of tensor elements
                public var dtype:Tensorflow.DataType {
                    get {
                        return builderResult.dtype
                    }
                    set (value) {
                        builderResult.hasDtype = true
                        builderResult.dtype = value
                    }
                }
                public var hasDtype:Bool{
                    get {
                        return builderResult.hasDtype
                    }
                }
            @discardableResult
                public func setDtype(_ value:Tensorflow.DataType) -> Tensorflow.TensorDescription.Builder {
                  self.dtype = value
                  return self
                }
            @discardableResult
                public func clearDtype() -> Tensorflow.TensorDescription.Builder {
                   builderResult.hasDtype = false
                   builderResult.dtype = .dtInvalid
                   return self
                }
            /// Shape of the tensor.
            public var shape:Tensorflow.TensorShapeProto! {
                get {
                    if shapeBuilder_ != nil {
                        builderResult.shape = shapeBuilder_.getMessage()
                    }
                    return builderResult.shape
                }
                set (value) {
                    builderResult.hasShape = true
                    builderResult.shape = value
                }
            }
            public var hasShape:Bool {
                get {
                    return builderResult.hasShape
                }
            }
            fileprivate var shapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasShape = true
                }
            }
            public func getShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if shapeBuilder_ == nil {
                    shapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.shape = shapeBuilder_.getMessage()
                    if shape != nil {
                        try! shapeBuilder_.mergeFrom(other: shape)
                    }
                }
                return shapeBuilder_
            }
            @discardableResult
            public func setShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.TensorDescription.Builder {
                self.shape = value
                return self
            }
            @discardableResult
            public func mergeShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.TensorDescription.Builder {
                if builderResult.hasShape {
                    builderResult.shape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.shape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.shape = value
                }
                builderResult.hasShape = true
                return self
            }
            @discardableResult
            public func clearShape() -> Tensorflow.TensorDescription.Builder {
                shapeBuilder_ = nil
                builderResult.hasShape = false
                builderResult.shape = nil
                return self
            }
            /// Information about the size and allocator used for the data
            public var allocationDescription:Tensorflow.AllocationDescription! {
                get {
                    if allocationDescriptionBuilder_ != nil {
                        builderResult.allocationDescription = allocationDescriptionBuilder_.getMessage()
                    }
                    return builderResult.allocationDescription
                }
                set (value) {
                    builderResult.hasAllocationDescription = true
                    builderResult.allocationDescription = value
                }
            }
            public var hasAllocationDescription:Bool {
                get {
                    return builderResult.hasAllocationDescription
                }
            }
            fileprivate var allocationDescriptionBuilder_:Tensorflow.AllocationDescription.Builder! {
                didSet {
                    builderResult.hasAllocationDescription = true
                }
            }
            public func getAllocationDescriptionBuilder() -> Tensorflow.AllocationDescription.Builder {
                if allocationDescriptionBuilder_ == nil {
                    allocationDescriptionBuilder_ = Tensorflow.AllocationDescription.Builder()
                    builderResult.allocationDescription = allocationDescriptionBuilder_.getMessage()
                    if allocationDescription != nil {
                        try! allocationDescriptionBuilder_.mergeFrom(other: allocationDescription)
                    }
                }
                return allocationDescriptionBuilder_
            }
            @discardableResult
            public func setAllocationDescription(_ value:Tensorflow.AllocationDescription!) -> Tensorflow.TensorDescription.Builder {
                self.allocationDescription = value
                return self
            }
            @discardableResult
            public func mergeAllocationDescription(value:Tensorflow.AllocationDescription) throws -> Tensorflow.TensorDescription.Builder {
                if builderResult.hasAllocationDescription {
                    builderResult.allocationDescription = try Tensorflow.AllocationDescription.builderWithPrototype(prototype:builderResult.allocationDescription).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.allocationDescription = value
                }
                builderResult.hasAllocationDescription = true
                return self
            }
            @discardableResult
            public func clearAllocationDescription() -> Tensorflow.TensorDescription.Builder {
                allocationDescriptionBuilder_ = nil
                builderResult.hasAllocationDescription = false
                builderResult.allocationDescription = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.TensorDescription.Builder {
                builderResult = Tensorflow.TensorDescription()
                return self
            }
            override public func clone() throws -> Tensorflow.TensorDescription.Builder {
                return try Tensorflow.TensorDescription.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.TensorDescription {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.TensorDescription {
                let returnMe:Tensorflow.TensorDescription = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.TensorDescription) throws -> Tensorflow.TensorDescription.Builder {
                if other == Tensorflow.TensorDescription() {
                    return self
                }
                if other.hasDtype {
                    dtype = other.dtype
                }
                if (other.hasShape) {
                    try mergeShape(value: other.shape)
                }
                if (other.hasAllocationDescription) {
                    try mergeAllocationDescription(value: other.allocationDescription)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorDescription.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorDescription.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntdtype = try codedInputStream.readEnum()
                        if let enumsdtype = Tensorflow.DataType(rawValue:valueIntdtype){
                            dtype = enumsdtype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntdtype))
                        }

                    case 18:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasShape {
                            try subBuilder.mergeFrom(other: shape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        shape = subBuilder.buildPartial()

                    case 34:
                        let subBuilder:Tensorflow.AllocationDescription.Builder = Tensorflow.AllocationDescription.Builder()
                        if hasAllocationDescription {
                            try subBuilder.mergeFrom(other: allocationDescription)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        allocationDescription = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorDescription.Builder {
                let resultDecodedBuilder = Tensorflow.TensorDescription.Builder()
                if let jsonValueDtype = jsonMap["dtype"] as? String {
                    resultDecodedBuilder.dtype = try Tensorflow.DataType.fromString(str: jsonValueDtype)
                }
                if let jsonValueShape = jsonMap["shape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.shape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueShape).build()

                }
                if let jsonValueAllocationDescription = jsonMap["allocationDescription"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.allocationDescription = try Tensorflow.AllocationDescription.Builder.decodeToBuilder(jsonMap:jsonValueAllocationDescription).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.TensorDescription.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.TensorDescription.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.TensorDescription: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.TensorDescription> {
        var mergedArray = Array<Tensorflow.TensorDescription>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.TensorDescription? {
        return try Tensorflow.TensorDescription.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.TensorDescriptionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorDescription {
        return try Tensorflow.TensorDescription.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "dtype": return self.dtype
        case "shape": return self.shape
        case "allocationDescription": return self.allocationDescription
        default: return nil
        }
    }
}
extension Tensorflow.TensorDescription.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "dtype": return self.dtype
            case "shape": return self.shape
            case "allocationDescription": return self.allocationDescription
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "dtype":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DataType else {
                    return
                }
                self.dtype = newSubscriptValue
            case "shape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.shape = newSubscriptValue
            case "allocationDescription":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.AllocationDescription else {
                    return
                }
                self.allocationDescription = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
