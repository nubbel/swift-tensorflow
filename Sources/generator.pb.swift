// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protobuf/generator.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Details about a Generator.
public struct Tensorflow_Magenta_GeneratorDetails: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GeneratorDetails"

  /// A unique ID for the generator on this server.
  public var id: String = String()

  /// A short, human-readable description of the generator.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Options for generating a sequence.
public struct Tensorflow_Magenta_GeneratorOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GeneratorOptions"

  /// Sections of input sequence to condition on.
  public var inputSections: [Tensorflow_Magenta_GeneratorOptions.SequenceSection] = []

  /// Sections of sequence to generate.
  public var generateSections: [Tensorflow_Magenta_GeneratorOptions.SequenceSection] = []

  public var args: Dictionary<String,Tensorflow_Magenta_GeneratorOptions.ArgValue> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SequenceSection: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Magenta_GeneratorOptions.protoMessageName + ".SequenceSection"

    /// Start time for the section in seconds, inclusive.
    public var startTime: Double = 0

    /// End time for the section in seconds, exclusive.
    public var endTime: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &self.startTime)
        case 2: try decoder.decodeSingularDoubleField(value: &self.endTime)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.startTime != 0 {
        try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 1)
      }
      if self.endTime != 0 {
        try visitor.visitSingularDoubleField(value: self.endTime, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Map of argument name to argument value for additional arguments.
  /// Generators should ignore unsupported arguments.
  public struct ArgValue: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Magenta_GeneratorOptions.protoMessageName + ".ArgValue"

    /// Each argument value can be exactly one kind.
    public var kind: Tensorflow_Magenta_GeneratorOptions.ArgValue.OneOf_Kind? = nil

    public var byteValue: Data {
      get {
        if case .byteValue(let v)? = kind {return v}
        return SwiftProtobuf.Internal.emptyData
      }
      set {kind = .byteValue(newValue)}
    }

    public var intValue: Int32 {
      get {
        if case .intValue(let v)? = kind {return v}
        return 0
      }
      set {kind = .intValue(newValue)}
    }

    public var floatValue: Double {
      get {
        if case .floatValue(let v)? = kind {return v}
        return 0
      }
      set {kind = .floatValue(newValue)}
    }

    public var boolValue: Bool {
      get {
        if case .boolValue(let v)? = kind {return v}
        return false
      }
      set {kind = .boolValue(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Each argument value can be exactly one kind.
    public enum OneOf_Kind: Equatable {
      case byteValue(Data)
      case intValue(Int32)
      case floatValue(Double)
      case boolValue(Bool)

      public static func ==(lhs: Tensorflow_Magenta_GeneratorOptions.ArgValue.OneOf_Kind, rhs: Tensorflow_Magenta_GeneratorOptions.ArgValue.OneOf_Kind) -> Bool {
        switch (lhs, rhs) {
        case (.byteValue(let l), .byteValue(let r)): return l == r
        case (.intValue(let l), .intValue(let r)): return l == r
        case (.floatValue(let l), .floatValue(let r)): return l == r
        case (.boolValue(let l), .boolValue(let r)): return l == r
        default: return false
        }
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {self.kind = .byteValue(v)}
        case 2:
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {self.kind = .intValue(v)}
        case 3:
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {self.kind = .floatValue(v)}
        case 4:
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {self.kind = .boolValue(v)}
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      switch self.kind {
      case .byteValue(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
      case .intValue(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      case .floatValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      case .boolValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      case nil: break
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inputSections)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.generateSections)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Magenta_GeneratorOptions.ArgValue>.self, value: &self.args)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputSections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputSections, fieldNumber: 1)
    }
    if !self.generateSections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.generateSections, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Magenta_GeneratorOptions.ArgValue>.self, value: self.args, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Bundle for wrapping a generator id, checkpoint file, and metagraph.
/// Intended to make sharing pre-trained models easier.
/// Next ID: 5
public struct Tensorflow_Magenta_GeneratorBundle: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GeneratorBundle"

  /// Details about the generator that created this bundle.
  public var generatorDetails: Tensorflow_Magenta_GeneratorDetails {
    get {return _storage._generatorDetails ?? Tensorflow_Magenta_GeneratorDetails()}
    set {_uniqueStorage()._generatorDetails = newValue}
  }
  /// Returns true if `generatorDetails` has been explicitly set.
  public var hasGeneratorDetails: Bool {return _storage._generatorDetails != nil}
  /// Clears the value of `generatorDetails`. Subsequent reads from it will return its default value.
  public mutating func clearGeneratorDetails() {_storage._generatorDetails = nil}

  public var bundleDetails: Tensorflow_Magenta_GeneratorBundle.BundleDetails {
    get {return _storage._bundleDetails ?? Tensorflow_Magenta_GeneratorBundle.BundleDetails()}
    set {_uniqueStorage()._bundleDetails = newValue}
  }
  /// Returns true if `bundleDetails` has been explicitly set.
  public var hasBundleDetails: Bool {return _storage._bundleDetails != nil}
  /// Clears the value of `bundleDetails`. Subsequent reads from it will return its default value.
  public mutating func clearBundleDetails() {_storage._bundleDetails = nil}

  /// The contents of the checkpoint file generated by the Saver.
  /// This is a repeated field so we can eventually support sharded checkpoints.
  /// But for now, we support only 1 file.
  public var checkpointFile: [Data] {
    get {return _storage._checkpointFile}
    set {_uniqueStorage()._checkpointFile = newValue}
  }

  /// The contents of the metagraph file generated by the Saver.
  public var metagraphFile: Data {
    get {return _storage._metagraphFile}
    set {_uniqueStorage()._metagraphFile = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Details about this specific bundle.
  public struct BundleDetails: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Magenta_GeneratorBundle.protoMessageName + ".BundleDetails"

    /// A short, human-readable text description of the bundle (e.g., training
    /// data, hyper parameters, etc.).
    public var description_p: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.description_p)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.description_p.isEmpty {
        try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._generatorDetails)
        case 2: try decoder.decodeRepeatedBytesField(value: &_storage._checkpointFile)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._metagraphFile)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._bundleDetails)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._generatorDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._checkpointFile.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._checkpointFile, fieldNumber: 2)
      }
      if !_storage._metagraphFile.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._metagraphFile, fieldNumber: 3)
      }
      if let v = _storage._bundleDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.magenta"

extension Tensorflow_Magenta_GeneratorDetails: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorDetails) -> Bool {
    if self.id != other.id {return false}
    if self.description_p != other.description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Magenta_GeneratorOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_sections"),
    2: .standard(proto: "generate_sections"),
    3: .same(proto: "args"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorOptions) -> Bool {
    if self.inputSections != other.inputSections {return false}
    if self.generateSections != other.generateSections {return false}
    if self.args != other.args {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Magenta_GeneratorOptions.SequenceSection: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorOptions.SequenceSection) -> Bool {
    if self.startTime != other.startTime {return false}
    if self.endTime != other.endTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Magenta_GeneratorOptions.ArgValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "byte_value"),
    2: .standard(proto: "int_value"),
    3: .standard(proto: "float_value"),
    4: .standard(proto: "bool_value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorOptions.ArgValue) -> Bool {
    if self.kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Magenta_GeneratorBundle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "generator_details"),
    4: .standard(proto: "bundle_details"),
    2: .standard(proto: "checkpoint_file"),
    3: .standard(proto: "metagraph_file"),
  ]

  fileprivate class _StorageClass {
    var _generatorDetails: Tensorflow_Magenta_GeneratorDetails? = nil
    var _bundleDetails: Tensorflow_Magenta_GeneratorBundle.BundleDetails? = nil
    var _checkpointFile: [Data] = []
    var _metagraphFile: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _generatorDetails = source._generatorDetails
      _bundleDetails = source._bundleDetails
      _checkpointFile = source._checkpointFile
      _metagraphFile = source._metagraphFile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorBundle) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._generatorDetails != other_storage._generatorDetails {return false}
        if _storage._bundleDetails != other_storage._bundleDetails {return false}
        if _storage._checkpointFile != other_storage._checkpointFile {return false}
        if _storage._metagraphFile != other_storage._metagraphFile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Magenta_GeneratorBundle.BundleDetails: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Magenta_GeneratorBundle.BundleDetails) -> Bool {
    if self.description_p != other.description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
