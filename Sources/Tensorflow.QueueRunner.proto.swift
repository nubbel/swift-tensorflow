/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "queue_runner.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct QueueRunnerRoot {
        public static let `default` = QueueRunnerRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.Error.ErrorCodesRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Protocol buffer representing a QueueRunner.
    final public class QueueRunnerDef : GeneratedMessage {

        public static func == (lhs: Tensorflow.QueueRunnerDef, rhs: Tensorflow.QueueRunnerDef) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasQueueName == rhs.hasQueueName) && (!lhs.hasQueueName || lhs.queueName == rhs.queueName)
            fieldCheck = fieldCheck && (lhs.enqueueOpName == rhs.enqueueOpName)
            fieldCheck = fieldCheck && (lhs.hasCloseOpName == rhs.hasCloseOpName) && (!lhs.hasCloseOpName || lhs.closeOpName == rhs.closeOpName)
            fieldCheck = fieldCheck && (lhs.hasCancelOpName == rhs.hasCancelOpName) && (!lhs.hasCancelOpName || lhs.cancelOpName == rhs.cancelOpName)
            fieldCheck = fieldCheck && (lhs.queueClosedExceptionTypes == rhs.queueClosedExceptionTypes)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Queue name.
        public fileprivate(set) var queueName:String = ""
        public fileprivate(set) var hasQueueName:Bool = false

        /// A list of enqueue operations.
        public fileprivate(set) var enqueueOpName:Array<String> = Array<String>()
        /// The operation to run to close the queue.
        public fileprivate(set) var closeOpName:String = ""
        public fileprivate(set) var hasCloseOpName:Bool = false

        /// The operation to run to cancel the queue.
        public fileprivate(set) var cancelOpName:String = ""
        public fileprivate(set) var hasCancelOpName:Bool = false

        private var queueClosedExceptionTypesMemoizedSerializedSize:Int32 = 0
        public fileprivate(set) var queueClosedExceptionTypes:Array<Tensorflow.Error.Code> = Array<Tensorflow.Error.Code>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasQueueName {
                try codedOutputStream.writeString(fieldNumber: 1, value:queueName)
            }
            if !enqueueOpName.isEmpty {
                for oneValueenqueueOpName in enqueueOpName {
                    try codedOutputStream.writeString(fieldNumber: 2, value:oneValueenqueueOpName)
                }
            }
            if hasCloseOpName {
                try codedOutputStream.writeString(fieldNumber: 3, value:closeOpName)
            }
            if hasCancelOpName {
                try codedOutputStream.writeString(fieldNumber: 4, value:cancelOpName)
            }
            if !queueClosedExceptionTypes.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 42)
                try codedOutputStream.writeRawVarint32(value: queueClosedExceptionTypesMemoizedSerializedSize)
            }
            for oneValueOfqueueClosedExceptionTypes in queueClosedExceptionTypes {
                  try codedOutputStream.writeEnumNoTag(value: oneValueOfqueueClosedExceptionTypes.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasQueueName {
                serialize_size += queueName.computeStringSize(fieldNumber: 1)
            }
            var dataSizeEnqueueOpName:Int32 = 0
            for oneValueenqueueOpName in enqueueOpName {
                dataSizeEnqueueOpName += oneValueenqueueOpName.computeStringSizeNoTag()
            }
            serialize_size += dataSizeEnqueueOpName
            serialize_size += 1 * Int32(enqueueOpName.count)
            if hasCloseOpName {
                serialize_size += closeOpName.computeStringSize(fieldNumber: 3)
            }
            if hasCancelOpName {
                serialize_size += cancelOpName.computeStringSize(fieldNumber: 4)
            }
            var dataSizequeueClosedExceptionTypes:Int32 = 0
            for oneValueOfqueueClosedExceptionTypes in queueClosedExceptionTypes {
                dataSizequeueClosedExceptionTypes += oneValueOfqueueClosedExceptionTypes.rawValue.computeEnumSizeNoTag()
            }
            serialize_size += dataSizequeueClosedExceptionTypes
            if !queueClosedExceptionTypes.isEmpty {
                serialize_size += 1
                serialize_size += dataSizequeueClosedExceptionTypes.computeRawVarint32Size()
            }
            queueClosedExceptionTypesMemoizedSerializedSize = dataSizequeueClosedExceptionTypes
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.QueueRunnerDef.Builder {
            return Tensorflow.QueueRunnerDef.classBuilder() as! Tensorflow.QueueRunnerDef.Builder
        }
        public func getBuilder() -> Tensorflow.QueueRunnerDef.Builder {
            return classBuilder() as! Tensorflow.QueueRunnerDef.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.QueueRunnerDef.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.QueueRunnerDef.Builder()
        }
        public func toBuilder() throws -> Tensorflow.QueueRunnerDef.Builder {
            return try Tensorflow.QueueRunnerDef.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.QueueRunnerDef) throws -> Tensorflow.QueueRunnerDef.Builder {
            return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasQueueName {
                jsonMap["queueName"] = queueName
            }
            if !enqueueOpName.isEmpty {
                var jsonArrayEnqueueOpName:Array<String> = []
                for oneValueEnqueueOpName in enqueueOpName {
                    jsonArrayEnqueueOpName.append(oneValueEnqueueOpName)
                }
                jsonMap["enqueueOpName"] = jsonArrayEnqueueOpName
            }
            if hasCloseOpName {
                jsonMap["closeOpName"] = closeOpName
            }
            if hasCancelOpName {
                jsonMap["cancelOpName"] = cancelOpName
            }
            if !queueClosedExceptionTypes.isEmpty {
                var jsonArrayQueueClosedExceptionTypes:Array<String> = []
                for oneValueQueueClosedExceptionTypes in queueClosedExceptionTypes {
                    jsonArrayQueueClosedExceptionTypes.append(oneValueQueueClosedExceptionTypes.toString())
                }
                jsonMap["queueClosedExceptionTypes"] = jsonArrayQueueClosedExceptionTypes
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.QueueRunnerDef {
            return try Tensorflow.QueueRunnerDef.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.QueueRunnerDef {
            return try Tensorflow.QueueRunnerDef.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasQueueName {
                output += "\(indent) queueName: \(queueName) \n"
            }
            var enqueueOpNameElementIndex:Int = 0
            for oneValueEnqueueOpName in enqueueOpName  {
                output += "\(indent) enqueueOpName[\(enqueueOpNameElementIndex)]: \(oneValueEnqueueOpName)\n"
                enqueueOpNameElementIndex += 1
            }
            if hasCloseOpName {
                output += "\(indent) closeOpName: \(closeOpName) \n"
            }
            if hasCancelOpName {
                output += "\(indent) cancelOpName: \(cancelOpName) \n"
            }
            var queueClosedExceptionTypesElementIndex:Int = 0
            for oneValueOfqueueClosedExceptionTypes in queueClosedExceptionTypes {
                output += "\(indent) queueClosedExceptionTypes[\(queueClosedExceptionTypesElementIndex)]: \(oneValueOfqueueClosedExceptionTypes.description)\n"
                queueClosedExceptionTypesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasQueueName {
                    hashCode = (hashCode &* 31) &+ queueName.hashValue
                }
                for oneValueEnqueueOpName in enqueueOpName {
                    hashCode = (hashCode &* 31) &+ oneValueEnqueueOpName.hashValue
                }
                if hasCloseOpName {
                    hashCode = (hashCode &* 31) &+ closeOpName.hashValue
                }
                if hasCancelOpName {
                    hashCode = (hashCode &* 31) &+ cancelOpName.hashValue
                }
                for oneValueOfqueueClosedExceptionTypes in queueClosedExceptionTypes {
                    hashCode = (hashCode &* 31) &+ oneValueOfqueueClosedExceptionTypes.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.QueueRunnerDef"
        }
        override public func className() -> String {
            return "Tensorflow.QueueRunnerDef"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.QueueRunnerDef = Tensorflow.QueueRunnerDef()
            public func getMessage() -> Tensorflow.QueueRunnerDef {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Queue name.
            public var queueName:String {
                get {
                    return builderResult.queueName
                }
                set (value) {
                    builderResult.hasQueueName = true
                    builderResult.queueName = value
                }
            }
            public var hasQueueName:Bool {
                get {
                    return builderResult.hasQueueName
                }
            }
            @discardableResult
            public func setQueueName(_ value:String) -> Tensorflow.QueueRunnerDef.Builder {
                self.queueName = value
                return self
            }
            @discardableResult
            public func clearQueueName() -> Tensorflow.QueueRunnerDef.Builder{
                builderResult.hasQueueName = false
                builderResult.queueName = ""
                return self
            }
            /// A list of enqueue operations.
            public var enqueueOpName:Array<String> {
                get {
                    return builderResult.enqueueOpName
                }
                set (array) {
                    builderResult.enqueueOpName = array
                }
            }
            @discardableResult
            public func setEnqueueOpName(_ value:Array<String>) -> Tensorflow.QueueRunnerDef.Builder {
                self.enqueueOpName = value
                return self
            }
            @discardableResult
            public func clearEnqueueOpName() -> Tensorflow.QueueRunnerDef.Builder {
                builderResult.enqueueOpName.removeAll(keepingCapacity: false)
                return self
            }
            /// The operation to run to close the queue.
            public var closeOpName:String {
                get {
                    return builderResult.closeOpName
                }
                set (value) {
                    builderResult.hasCloseOpName = true
                    builderResult.closeOpName = value
                }
            }
            public var hasCloseOpName:Bool {
                get {
                    return builderResult.hasCloseOpName
                }
            }
            @discardableResult
            public func setCloseOpName(_ value:String) -> Tensorflow.QueueRunnerDef.Builder {
                self.closeOpName = value
                return self
            }
            @discardableResult
            public func clearCloseOpName() -> Tensorflow.QueueRunnerDef.Builder{
                builderResult.hasCloseOpName = false
                builderResult.closeOpName = ""
                return self
            }
            /// The operation to run to cancel the queue.
            public var cancelOpName:String {
                get {
                    return builderResult.cancelOpName
                }
                set (value) {
                    builderResult.hasCancelOpName = true
                    builderResult.cancelOpName = value
                }
            }
            public var hasCancelOpName:Bool {
                get {
                    return builderResult.hasCancelOpName
                }
            }
            @discardableResult
            public func setCancelOpName(_ value:String) -> Tensorflow.QueueRunnerDef.Builder {
                self.cancelOpName = value
                return self
            }
            @discardableResult
            public func clearCancelOpName() -> Tensorflow.QueueRunnerDef.Builder{
                builderResult.hasCancelOpName = false
                builderResult.cancelOpName = ""
                return self
            }
            /// A list of exception types considered to signal a safely closed queue
            /// if raised during enqueue operations.
            public var queueClosedExceptionTypes:Array<Tensorflow.Error.Code> {
                get {
                    return builderResult.queueClosedExceptionTypes
                }
                set (value) {
                    builderResult.queueClosedExceptionTypes = value
                }
            }
            @discardableResult
            public func setQueueClosedExceptionTypes(_ value:Array<Tensorflow.Error.Code>) -> Tensorflow.QueueRunnerDef.Builder {
                self.queueClosedExceptionTypes = value
                return self
            }
            @discardableResult
            public func clearQueueClosedExceptionTypes() -> Tensorflow.QueueRunnerDef.Builder {
                builderResult.queueClosedExceptionTypes.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.QueueRunnerDef.Builder {
                builderResult = Tensorflow.QueueRunnerDef()
                return self
            }
            override public func clone() throws -> Tensorflow.QueueRunnerDef.Builder {
                return try Tensorflow.QueueRunnerDef.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.QueueRunnerDef {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.QueueRunnerDef {
                let returnMe:Tensorflow.QueueRunnerDef = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.QueueRunnerDef) throws -> Tensorflow.QueueRunnerDef.Builder {
                if other == Tensorflow.QueueRunnerDef() {
                    return self
                }
                if other.hasQueueName {
                    queueName = other.queueName
                }
                if !other.enqueueOpName.isEmpty {
                    builderResult.enqueueOpName += other.enqueueOpName
                }
                if other.hasCloseOpName {
                    closeOpName = other.closeOpName
                }
                if other.hasCancelOpName {
                    cancelOpName = other.cancelOpName
                }
                if !other.queueClosedExceptionTypes.isEmpty {
                     builderResult.queueClosedExceptionTypes += other.queueClosedExceptionTypes
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.QueueRunnerDef.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.QueueRunnerDef.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        queueName = try codedInputStream.readString()

                    case 18:
                        enqueueOpName += [try codedInputStream.readString()]

                    case 26:
                        closeOpName = try codedInputStream.readString()

                    case 34:
                        cancelOpName = try codedInputStream.readString()

                    case 42:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let oldLimit = try codedInputStream.pushLimit(byteLimit: length)
                        while codedInputStream.bytesUntilLimit() > 0 {
                        let valueIntqueueClosedExceptionTypes = try codedInputStream.readEnum()
                        if let enumsqueueClosedExceptionTypes = Tensorflow.Error.Code(rawValue:valueIntqueueClosedExceptionTypes) {
                            builderResult.queueClosedExceptionTypes.append(enumsqueueClosedExceptionTypes)
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntqueueClosedExceptionTypes))
                        }
                        }
                        codedInputStream.popLimit(oldLimit: oldLimit)

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.QueueRunnerDef.Builder {
                let resultDecodedBuilder = Tensorflow.QueueRunnerDef.Builder()
                if let jsonValueQueueName = jsonMap["queueName"] as? String {
                    resultDecodedBuilder.queueName = jsonValueQueueName
                }
                if let jsonValueEnqueueOpName = jsonMap["enqueueOpName"] as? Array<String> {
                    var jsonArrayEnqueueOpName:Array<String> = []
                    for oneValueEnqueueOpName in jsonValueEnqueueOpName {
                        jsonArrayEnqueueOpName.append(oneValueEnqueueOpName)
                    }
                    resultDecodedBuilder.enqueueOpName = jsonArrayEnqueueOpName
                }
                if let jsonValueCloseOpName = jsonMap["closeOpName"] as? String {
                    resultDecodedBuilder.closeOpName = jsonValueCloseOpName
                }
                if let jsonValueCancelOpName = jsonMap["cancelOpName"] as? String {
                    resultDecodedBuilder.cancelOpName = jsonValueCancelOpName
                }
                if let jsonValueQueueClosedExceptionTypes = jsonMap["queueClosedExceptionTypes"] as? Array<String> {
                    var jsonArrayQueueClosedExceptionTypes:Array<Tensorflow.Error.Code> = []
                    for oneValueQueueClosedExceptionTypes in jsonValueQueueClosedExceptionTypes {
                        let enumFromStringQueueClosedExceptionTypes = try Tensorflow.Error.Code.fromString(str: oneValueQueueClosedExceptionTypes)
                        jsonArrayQueueClosedExceptionTypes.append(enumFromStringQueueClosedExceptionTypes)
                    }
                    resultDecodedBuilder.queueClosedExceptionTypes = jsonArrayQueueClosedExceptionTypes
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.QueueRunnerDef.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.QueueRunnerDef.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.QueueRunnerDef: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.QueueRunnerDef> {
        var mergedArray = Array<Tensorflow.QueueRunnerDef>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.QueueRunnerDef? {
        return try Tensorflow.QueueRunnerDef.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.QueueRunnerRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.QueueRunnerDef {
        return try Tensorflow.QueueRunnerDef.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "queueName": return self.queueName
        case "enqueueOpName": return self.enqueueOpName
        case "closeOpName": return self.closeOpName
        case "cancelOpName": return self.cancelOpName
        case "queueClosedExceptionTypes": return self.queueClosedExceptionTypes
        default: return nil
        }
    }
}
extension Tensorflow.QueueRunnerDef.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "queueName": return self.queueName
            case "enqueueOpName": return self.enqueueOpName
            case "closeOpName": return self.closeOpName
            case "cancelOpName": return self.cancelOpName
            case "queueClosedExceptionTypes": return self.queueClosedExceptionTypes
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "queueName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.queueName = newSubscriptValue
            case "enqueueOpName":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.enqueueOpName = newSubscriptValue
            case "closeOpName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.closeOpName = newSubscriptValue
            case "cancelOpName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cancelOpName = newSubscriptValue
            case "queueClosedExceptionTypes":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.Error.Code> else {
                    return
                }
                self.queueClosedExceptionTypes = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
