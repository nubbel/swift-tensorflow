/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "saved_model.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct SavedModelRoot {
        public static let `default` = SavedModelRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.MetaGraphRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// SavedModel is the high level serialization format for TensorFlow Models.
    /// See [todo: doc links, similar to session_bundle] for more information.
    final public class SavedModel : GeneratedMessage {

        public static func == (lhs: Tensorflow.SavedModel, rhs: Tensorflow.SavedModel) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasSavedModelSchemaVersion == rhs.hasSavedModelSchemaVersion) && (!lhs.hasSavedModelSchemaVersion || lhs.savedModelSchemaVersion == rhs.savedModelSchemaVersion)
            fieldCheck = fieldCheck && (lhs.metaGraphs == rhs.metaGraphs)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// The schema version of the SavedModel instance. Used for versioning when
        /// making future changes to the specification/implementation. Initial value
        /// at release will be 1.
        public fileprivate(set) var savedModelSchemaVersion:Int64 = Int64(0)
        public fileprivate(set) var hasSavedModelSchemaVersion:Bool = false

        public fileprivate(set) var metaGraphs:Array<Tensorflow.MetaGraphDef>  = Array<Tensorflow.MetaGraphDef>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasSavedModelSchemaVersion {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:savedModelSchemaVersion)
            }
            for oneElementMetaGraphs in metaGraphs {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementMetaGraphs)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasSavedModelSchemaVersion {
                serialize_size += savedModelSchemaVersion.computeInt64Size(fieldNumber: 1)
            }
            for oneElementMetaGraphs in metaGraphs {
                serialize_size += oneElementMetaGraphs.computeMessageSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SavedModel.Builder {
            return Tensorflow.SavedModel.classBuilder() as! Tensorflow.SavedModel.Builder
        }
        public func getBuilder() -> Tensorflow.SavedModel.Builder {
            return classBuilder() as! Tensorflow.SavedModel.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedModel.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedModel.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SavedModel.Builder {
            return try Tensorflow.SavedModel.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SavedModel) throws -> Tensorflow.SavedModel.Builder {
            return try Tensorflow.SavedModel.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasSavedModelSchemaVersion {
                jsonMap["savedModelSchemaVersion"] = "\(savedModelSchemaVersion)"
            }
            if !metaGraphs.isEmpty {
                var jsonArrayMetaGraphs:Array<Dictionary<String,Any>> = []
                for oneValueMetaGraphs in metaGraphs {
                    let ecodedMessageMetaGraphs = try oneValueMetaGraphs.encode()
                    jsonArrayMetaGraphs.append(ecodedMessageMetaGraphs)
                }
                jsonMap["metaGraphs"] = jsonArrayMetaGraphs
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedModel {
            return try Tensorflow.SavedModel.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SavedModel {
            return try Tensorflow.SavedModel.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasSavedModelSchemaVersion {
                output += "\(indent) savedModelSchemaVersion: \(savedModelSchemaVersion) \n"
            }
            var metaGraphsElementIndex:Int = 0
            for oneElementMetaGraphs in metaGraphs {
                output += "\(indent) metaGraphs[\(metaGraphsElementIndex)] {\n"
                output += try oneElementMetaGraphs.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                metaGraphsElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasSavedModelSchemaVersion {
                    hashCode = (hashCode &* 31) &+ savedModelSchemaVersion.hashValue
                }
                for oneElementMetaGraphs in metaGraphs {
                    hashCode = (hashCode &* 31) &+ oneElementMetaGraphs.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SavedModel"
        }
        override public func className() -> String {
            return "Tensorflow.SavedModel"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SavedModel = Tensorflow.SavedModel()
            public func getMessage() -> Tensorflow.SavedModel {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// The schema version of the SavedModel instance. Used for versioning when
            /// making future changes to the specification/implementation. Initial value
            /// at release will be 1.
            public var savedModelSchemaVersion:Int64 {
                get {
                    return builderResult.savedModelSchemaVersion
                }
                set (value) {
                    builderResult.hasSavedModelSchemaVersion = true
                    builderResult.savedModelSchemaVersion = value
                }
            }
            public var hasSavedModelSchemaVersion:Bool {
                get {
                    return builderResult.hasSavedModelSchemaVersion
                }
            }
            @discardableResult
            public func setSavedModelSchemaVersion(_ value:Int64) -> Tensorflow.SavedModel.Builder {
                self.savedModelSchemaVersion = value
                return self
            }
            @discardableResult
            public func clearSavedModelSchemaVersion() -> Tensorflow.SavedModel.Builder{
                builderResult.hasSavedModelSchemaVersion = false
                builderResult.savedModelSchemaVersion = Int64(0)
                return self
            }
            /// One or more MetaGraphs.
            public var metaGraphs:Array<Tensorflow.MetaGraphDef> {
                get {
                    return builderResult.metaGraphs
                }
                set (value) {
                    builderResult.metaGraphs = value
                }
            }
            @discardableResult
            public func setMetaGraphs(_ value:Array<Tensorflow.MetaGraphDef>) -> Tensorflow.SavedModel.Builder {
                self.metaGraphs = value
                return self
            }
            @discardableResult
            public func clearMetaGraphs() -> Tensorflow.SavedModel.Builder {
                builderResult.metaGraphs.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SavedModel.Builder {
                builderResult = Tensorflow.SavedModel()
                return self
            }
            override public func clone() throws -> Tensorflow.SavedModel.Builder {
                return try Tensorflow.SavedModel.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SavedModel {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SavedModel {
                let returnMe:Tensorflow.SavedModel = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SavedModel) throws -> Tensorflow.SavedModel.Builder {
                if other == Tensorflow.SavedModel() {
                    return self
                }
                if other.hasSavedModelSchemaVersion {
                    savedModelSchemaVersion = other.savedModelSchemaVersion
                }
                if !other.metaGraphs.isEmpty  {
                     builderResult.metaGraphs += other.metaGraphs
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedModel.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedModel.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        savedModelSchemaVersion = try codedInputStream.readInt64()

                    case 18:
                        let subBuilder = Tensorflow.MetaGraphDef.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        metaGraphs.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedModel.Builder {
                let resultDecodedBuilder = Tensorflow.SavedModel.Builder()
                if let jsonValueSavedModelSchemaVersion = jsonMap["savedModelSchemaVersion"] as? String {
                    resultDecodedBuilder.savedModelSchemaVersion = Int64(jsonValueSavedModelSchemaVersion)!
                } else if let jsonValueSavedModelSchemaVersion = jsonMap["savedModelSchemaVersion"] as? Int {
                    resultDecodedBuilder.savedModelSchemaVersion = Int64(jsonValueSavedModelSchemaVersion)
                }
                if let jsonValueMetaGraphs = jsonMap["metaGraphs"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayMetaGraphs:Array<Tensorflow.MetaGraphDef> = []
                    for oneValueMetaGraphs in jsonValueMetaGraphs {
                        let messageFromStringMetaGraphs = try Tensorflow.MetaGraphDef.Builder.decodeToBuilder(jsonMap:oneValueMetaGraphs).build()

                        jsonArrayMetaGraphs.append(messageFromStringMetaGraphs)
                    }
                    resultDecodedBuilder.metaGraphs = jsonArrayMetaGraphs
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SavedModel.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SavedModel.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.SavedModel: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SavedModel> {
        var mergedArray = Array<Tensorflow.SavedModel>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SavedModel? {
        return try Tensorflow.SavedModel.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.SavedModelRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedModel {
        return try Tensorflow.SavedModel.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "savedModelSchemaVersion": return self.savedModelSchemaVersion
        case "metaGraphs": return self.metaGraphs
        default: return nil
        }
    }
}
extension Tensorflow.SavedModel.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "savedModelSchemaVersion": return self.savedModelSchemaVersion
            case "metaGraphs": return self.metaGraphs
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "savedModelSchemaVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.savedModelSchemaVersion = newSubscriptValue
            case "metaGraphs":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.MetaGraphDef> else {
                    return
                }
                self.metaGraphs = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
