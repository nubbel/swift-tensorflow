/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "example_proto_fast_parsing_test.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct ExampleProtoFastParsingTestRoot {
        public static let `default` = ExampleProtoFastParsingTestRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.FeatureRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// This message is parallel to Example, but with additional fields to test
    /// unknown fields handling in example_proto_fast_parsing_test.cc.
    final public class ExampleWithExtras : GeneratedMessage {

        public static func == (lhs: Tensorflow.ExampleWithExtras, rhs: Tensorflow.ExampleWithExtras) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasFeatures == rhs.hasFeatures) && (!lhs.hasFeatures || lhs.features == rhs.features)
            fieldCheck = fieldCheck && (lhs.hasExtra1 == rhs.hasExtra1) && (!lhs.hasExtra1 || lhs.extra1 == rhs.extra1)
            fieldCheck = fieldCheck && (lhs.hasExtra2 == rhs.hasExtra2) && (!lhs.hasExtra2 || lhs.extra2 == rhs.extra2)
            fieldCheck = fieldCheck && (lhs.hasExtra3 == rhs.hasExtra3) && (!lhs.hasExtra3 || lhs.extra3 == rhs.extra3)
            fieldCheck = fieldCheck && (lhs.hasExtra4 == rhs.hasExtra4) && (!lhs.hasExtra4 || lhs.extra4 == rhs.extra4)
            fieldCheck = fieldCheck && (lhs.hasExtra5 == rhs.hasExtra5) && (!lhs.hasExtra5 || lhs.extra5 == rhs.extra5)
            fieldCheck = fieldCheck && (lhs.extra6 == rhs.extra6)
            fieldCheck = fieldCheck && (lhs.hasExtra7 == rhs.hasExtra7) && (!lhs.hasExtra7 || lhs.extra7 == rhs.extra7)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var features:Tensorflow.Features!
        public fileprivate(set) var hasFeatures:Bool = false
        public fileprivate(set) var extra1:String = ""
        public fileprivate(set) var hasExtra1:Bool = false

        public fileprivate(set) var extra2:Int64 = Int64(0)
        public fileprivate(set) var hasExtra2:Bool = false

        public fileprivate(set) var extra3:UInt32 = UInt32(0)
        public fileprivate(set) var hasExtra3:Bool = false

        public fileprivate(set) var extra4:UInt64 = UInt64(0)
        public fileprivate(set) var hasExtra4:Bool = false

        public fileprivate(set) var extra5:Double = Double(0)
        public fileprivate(set) var hasExtra5:Bool = false

        public fileprivate(set) var extra6:Array<Float> = Array<Float>()
        private var extra6MemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var extra7:Tensorflow.Features!
        public fileprivate(set) var hasExtra7:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasFeatures {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:features)
            }
            if hasExtra1 {
                try codedOutputStream.writeString(fieldNumber: 1337, value:extra1)
            }
            if hasExtra2 {
                try codedOutputStream.writeInt64(fieldNumber: 1338, value:extra2)
            }
            if hasExtra3 {
                try codedOutputStream.writeFixed32(fieldNumber: 1339, value:extra3)
            }
            if hasExtra4 {
                try codedOutputStream.writeFixed64(fieldNumber: 1340, value:extra4)
            }
            if hasExtra5 {
                try codedOutputStream.writeDouble(fieldNumber: 1341, value:extra5)
            }
            if !extra6.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 10738)
                try codedOutputStream.writeRawVarint32(value: extra6MemoizedSerializedSize)
                for oneValueextra6 in extra6 {
                    try codedOutputStream.writeFloatNoTag(value: oneValueextra6)
                }
            }
            if hasExtra7 {
                try codedOutputStream.writeMessage(fieldNumber: 1343, value:extra7)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasFeatures {
                if let varSizefeatures = features?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizefeatures
                }
            }
            if hasExtra1 {
                serialize_size += extra1.computeStringSize(fieldNumber: 1337)
            }
            if hasExtra2 {
                serialize_size += extra2.computeInt64Size(fieldNumber: 1338)
            }
            if hasExtra3 {
                serialize_size += extra3.computeFixed32Size(fieldNumber: 1339)
            }
            if hasExtra4 {
                serialize_size += extra4.computeFixed64Size(fieldNumber: 1340)
            }
            if hasExtra5 {
                serialize_size += extra5.computeDoubleSize(fieldNumber: 1341)
            }
            var dataSizeExtra6:Int32 = 0
            dataSizeExtra6 = 4 * Int32(extra6.count)
            serialize_size += dataSizeExtra6
            if !extra6.isEmpty {
                serialize_size += 2
                serialize_size += dataSizeExtra6.computeInt32SizeNoTag()
            }
            extra6MemoizedSerializedSize = dataSizeExtra6
            if hasExtra7 {
                if let varSizeextra7 = extra7?.computeMessageSize(fieldNumber: 1343) {
                    serialize_size += varSizeextra7
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.ExampleWithExtras.Builder {
            return Tensorflow.ExampleWithExtras.classBuilder() as! Tensorflow.ExampleWithExtras.Builder
        }
        public func getBuilder() -> Tensorflow.ExampleWithExtras.Builder {
            return classBuilder() as! Tensorflow.ExampleWithExtras.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.ExampleWithExtras.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.ExampleWithExtras.Builder()
        }
        public func toBuilder() throws -> Tensorflow.ExampleWithExtras.Builder {
            return try Tensorflow.ExampleWithExtras.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.ExampleWithExtras) throws -> Tensorflow.ExampleWithExtras.Builder {
            return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasFeatures {
                jsonMap["features"] = try features.encode()
            }
            if hasExtra1 {
                jsonMap["extra1"] = extra1
            }
            if hasExtra2 {
                jsonMap["extra2"] = "\(extra2)"
            }
            if hasExtra3 {
                jsonMap["extra3"] = UInt(extra3)
            }
            if hasExtra4 {
                jsonMap["extra4"] = "\(extra4)"
            }
            if hasExtra5 {
                jsonMap["extra5"] = Double(extra5)
            }
            if !extra6.isEmpty {
                var jsonArrayExtra6:Array<Float> = []
                for oneValueExtra6 in extra6 {
                    jsonArrayExtra6.append(Float(oneValueExtra6))
                }
                jsonMap["extra6"] = jsonArrayExtra6
            }
            if hasExtra7 {
                jsonMap["extra7"] = try extra7.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.ExampleWithExtras {
            return try Tensorflow.ExampleWithExtras.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.ExampleWithExtras {
            return try Tensorflow.ExampleWithExtras.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasFeatures {
                output += "\(indent) features {\n"
                if let outDescFeatures = features {
                    output += try outDescFeatures.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasExtra1 {
                output += "\(indent) extra1: \(extra1) \n"
            }
            if hasExtra2 {
                output += "\(indent) extra2: \(extra2) \n"
            }
            if hasExtra3 {
                output += "\(indent) extra3: \(extra3) \n"
            }
            if hasExtra4 {
                output += "\(indent) extra4: \(extra4) \n"
            }
            if hasExtra5 {
                output += "\(indent) extra5: \(extra5) \n"
            }
            var extra6ElementIndex:Int = 0
            for oneValueExtra6 in extra6  {
                output += "\(indent) extra6[\(extra6ElementIndex)]: \(oneValueExtra6)\n"
                extra6ElementIndex += 1
            }
            if hasExtra7 {
                output += "\(indent) extra7 {\n"
                if let outDescExtra7 = extra7 {
                    output += try outDescExtra7.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasFeatures {
                    if let hashValuefeatures = features?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuefeatures
                    }
                }
                if hasExtra1 {
                    hashCode = (hashCode &* 31) &+ extra1.hashValue
                }
                if hasExtra2 {
                    hashCode = (hashCode &* 31) &+ extra2.hashValue
                }
                if hasExtra3 {
                    hashCode = (hashCode &* 31) &+ extra3.hashValue
                }
                if hasExtra4 {
                    hashCode = (hashCode &* 31) &+ extra4.hashValue
                }
                if hasExtra5 {
                    hashCode = (hashCode &* 31) &+ extra5.hashValue
                }
                for oneValueExtra6 in extra6 {
                    hashCode = (hashCode &* 31) &+ oneValueExtra6.hashValue
                }
                if hasExtra7 {
                    if let hashValueextra7 = extra7?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueextra7
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.ExampleWithExtras"
        }
        override public func className() -> String {
            return "Tensorflow.ExampleWithExtras"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.ExampleWithExtras = Tensorflow.ExampleWithExtras()
            public func getMessage() -> Tensorflow.ExampleWithExtras {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var features:Tensorflow.Features! {
                get {
                    if featuresBuilder_ != nil {
                        builderResult.features = featuresBuilder_.getMessage()
                    }
                    return builderResult.features
                }
                set (value) {
                    builderResult.hasFeatures = true
                    builderResult.features = value
                }
            }
            public var hasFeatures:Bool {
                get {
                    return builderResult.hasFeatures
                }
            }
            fileprivate var featuresBuilder_:Tensorflow.Features.Builder! {
                didSet {
                    builderResult.hasFeatures = true
                }
            }
            public func getFeaturesBuilder() -> Tensorflow.Features.Builder {
                if featuresBuilder_ == nil {
                    featuresBuilder_ = Tensorflow.Features.Builder()
                    builderResult.features = featuresBuilder_.getMessage()
                    if features != nil {
                        try! featuresBuilder_.mergeFrom(other: features)
                    }
                }
                return featuresBuilder_
            }
            @discardableResult
            public func setFeatures(_ value:Tensorflow.Features!) -> Tensorflow.ExampleWithExtras.Builder {
                self.features = value
                return self
            }
            @discardableResult
            public func mergeFeatures(value:Tensorflow.Features) throws -> Tensorflow.ExampleWithExtras.Builder {
                if builderResult.hasFeatures {
                    builderResult.features = try Tensorflow.Features.builderWithPrototype(prototype:builderResult.features).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.features = value
                }
                builderResult.hasFeatures = true
                return self
            }
            @discardableResult
            public func clearFeatures() -> Tensorflow.ExampleWithExtras.Builder {
                featuresBuilder_ = nil
                builderResult.hasFeatures = false
                builderResult.features = nil
                return self
            }
            public var extra1:String {
                get {
                    return builderResult.extra1
                }
                set (value) {
                    builderResult.hasExtra1 = true
                    builderResult.extra1 = value
                }
            }
            public var hasExtra1:Bool {
                get {
                    return builderResult.hasExtra1
                }
            }
            @discardableResult
            public func setExtra1(_ value:String) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra1 = value
                return self
            }
            @discardableResult
            public func clearExtra1() -> Tensorflow.ExampleWithExtras.Builder{
                builderResult.hasExtra1 = false
                builderResult.extra1 = ""
                return self
            }
            public var extra2:Int64 {
                get {
                    return builderResult.extra2
                }
                set (value) {
                    builderResult.hasExtra2 = true
                    builderResult.extra2 = value
                }
            }
            public var hasExtra2:Bool {
                get {
                    return builderResult.hasExtra2
                }
            }
            @discardableResult
            public func setExtra2(_ value:Int64) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra2 = value
                return self
            }
            @discardableResult
            public func clearExtra2() -> Tensorflow.ExampleWithExtras.Builder{
                builderResult.hasExtra2 = false
                builderResult.extra2 = Int64(0)
                return self
            }
            public var extra3:UInt32 {
                get {
                    return builderResult.extra3
                }
                set (value) {
                    builderResult.hasExtra3 = true
                    builderResult.extra3 = value
                }
            }
            public var hasExtra3:Bool {
                get {
                    return builderResult.hasExtra3
                }
            }
            @discardableResult
            public func setExtra3(_ value:UInt32) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra3 = value
                return self
            }
            @discardableResult
            public func clearExtra3() -> Tensorflow.ExampleWithExtras.Builder{
                builderResult.hasExtra3 = false
                builderResult.extra3 = UInt32(0)
                return self
            }
            public var extra4:UInt64 {
                get {
                    return builderResult.extra4
                }
                set (value) {
                    builderResult.hasExtra4 = true
                    builderResult.extra4 = value
                }
            }
            public var hasExtra4:Bool {
                get {
                    return builderResult.hasExtra4
                }
            }
            @discardableResult
            public func setExtra4(_ value:UInt64) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra4 = value
                return self
            }
            @discardableResult
            public func clearExtra4() -> Tensorflow.ExampleWithExtras.Builder{
                builderResult.hasExtra4 = false
                builderResult.extra4 = UInt64(0)
                return self
            }
            public var extra5:Double {
                get {
                    return builderResult.extra5
                }
                set (value) {
                    builderResult.hasExtra5 = true
                    builderResult.extra5 = value
                }
            }
            public var hasExtra5:Bool {
                get {
                    return builderResult.hasExtra5
                }
            }
            @discardableResult
            public func setExtra5(_ value:Double) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra5 = value
                return self
            }
            @discardableResult
            public func clearExtra5() -> Tensorflow.ExampleWithExtras.Builder{
                builderResult.hasExtra5 = false
                builderResult.extra5 = Double(0)
                return self
            }
            public var extra6:Array<Float> {
                get {
                    return builderResult.extra6
                }
                set (array) {
                    builderResult.extra6 = array
                }
            }
            @discardableResult
            public func setExtra6(_ value:Array<Float>) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra6 = value
                return self
            }
            @discardableResult
            public func clearExtra6() -> Tensorflow.ExampleWithExtras.Builder {
                builderResult.extra6.removeAll(keepingCapacity: false)
                return self
            }
            public var extra7:Tensorflow.Features! {
                get {
                    if extra7Builder_ != nil {
                        builderResult.extra7 = extra7Builder_.getMessage()
                    }
                    return builderResult.extra7
                }
                set (value) {
                    builderResult.hasExtra7 = true
                    builderResult.extra7 = value
                }
            }
            public var hasExtra7:Bool {
                get {
                    return builderResult.hasExtra7
                }
            }
            fileprivate var extra7Builder_:Tensorflow.Features.Builder! {
                didSet {
                    builderResult.hasExtra7 = true
                }
            }
            public func getExtra7Builder() -> Tensorflow.Features.Builder {
                if extra7Builder_ == nil {
                    extra7Builder_ = Tensorflow.Features.Builder()
                    builderResult.extra7 = extra7Builder_.getMessage()
                    if extra7 != nil {
                        try! extra7Builder_.mergeFrom(other: extra7)
                    }
                }
                return extra7Builder_
            }
            @discardableResult
            public func setExtra7(_ value:Tensorflow.Features!) -> Tensorflow.ExampleWithExtras.Builder {
                self.extra7 = value
                return self
            }
            @discardableResult
            public func mergeExtra7(value:Tensorflow.Features) throws -> Tensorflow.ExampleWithExtras.Builder {
                if builderResult.hasExtra7 {
                    builderResult.extra7 = try Tensorflow.Features.builderWithPrototype(prototype:builderResult.extra7).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.extra7 = value
                }
                builderResult.hasExtra7 = true
                return self
            }
            @discardableResult
            public func clearExtra7() -> Tensorflow.ExampleWithExtras.Builder {
                extra7Builder_ = nil
                builderResult.hasExtra7 = false
                builderResult.extra7 = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.ExampleWithExtras.Builder {
                builderResult = Tensorflow.ExampleWithExtras()
                return self
            }
            override public func clone() throws -> Tensorflow.ExampleWithExtras.Builder {
                return try Tensorflow.ExampleWithExtras.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.ExampleWithExtras {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.ExampleWithExtras {
                let returnMe:Tensorflow.ExampleWithExtras = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.ExampleWithExtras) throws -> Tensorflow.ExampleWithExtras.Builder {
                if other == Tensorflow.ExampleWithExtras() {
                    return self
                }
                if (other.hasFeatures) {
                    try mergeFeatures(value: other.features)
                }
                if other.hasExtra1 {
                    extra1 = other.extra1
                }
                if other.hasExtra2 {
                    extra2 = other.extra2
                }
                if other.hasExtra3 {
                    extra3 = other.extra3
                }
                if other.hasExtra4 {
                    extra4 = other.extra4
                }
                if other.hasExtra5 {
                    extra5 = other.extra5
                }
                if !other.extra6.isEmpty {
                    builderResult.extra6 += other.extra6
                }
                if (other.hasExtra7) {
                    try mergeExtra7(value: other.extra7)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.ExampleWithExtras.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ExampleWithExtras.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.Features.Builder = Tensorflow.Features.Builder()
                        if hasFeatures {
                            try subBuilder.mergeFrom(other: features)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        features = subBuilder.buildPartial()

                    case 10698:
                        extra1 = try codedInputStream.readString()

                    case 10704:
                        extra2 = try codedInputStream.readInt64()

                    case 10717:
                        extra3 = try codedInputStream.readFixed32()

                    case 10721:
                        extra4 = try codedInputStream.readFixed64()

                    case 10729:
                        extra5 = try codedInputStream.readDouble()

                    case 10738:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.extra6.append(try codedInputStream.readFloat())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 10746:
                        let subBuilder:Tensorflow.Features.Builder = Tensorflow.Features.Builder()
                        if hasExtra7 {
                            try subBuilder.mergeFrom(other: extra7)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        extra7 = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.ExampleWithExtras.Builder {
                let resultDecodedBuilder = Tensorflow.ExampleWithExtras.Builder()
                if let jsonValueFeatures = jsonMap["features"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.features = try Tensorflow.Features.Builder.decodeToBuilder(jsonMap:jsonValueFeatures).build()

                }
                if let jsonValueExtra1 = jsonMap["extra1"] as? String {
                    resultDecodedBuilder.extra1 = jsonValueExtra1
                }
                if let jsonValueExtra2 = jsonMap["extra2"] as? String {
                    resultDecodedBuilder.extra2 = Int64(jsonValueExtra2)!
                } else if let jsonValueExtra2 = jsonMap["extra2"] as? Int {
                    resultDecodedBuilder.extra2 = Int64(jsonValueExtra2)
                }
                if let jsonValueExtra3 = jsonMap["extra3"] as? UInt {
                    resultDecodedBuilder.extra3 = UInt32(jsonValueExtra3)
                } else if let jsonValueExtra3 = jsonMap["extra3"] as? String {
                    resultDecodedBuilder.extra3 = UInt32(jsonValueExtra3)!
                }
                if let jsonValueExtra4 = jsonMap["extra4"] as? String {
                    resultDecodedBuilder.extra4 = UInt64(jsonValueExtra4)!
                } else if let jsonValueExtra4 = jsonMap["extra4"] as? UInt {
                    resultDecodedBuilder.extra4 = UInt64(jsonValueExtra4)
                }
                if let jsonValueExtra5 = jsonMap["extra5"] as? Double {
                    resultDecodedBuilder.extra5 = Double(jsonValueExtra5)
                } else if let jsonValueExtra5 = jsonMap["extra5"] as? String {
                    resultDecodedBuilder.extra5 = Double(jsonValueExtra5)!
                }
                if let jsonValueExtra6 = jsonMap["extra6"] as? Array<Float> {
                    var jsonArrayExtra6:Array<Float> = []
                    for oneValueExtra6 in jsonValueExtra6 {
                        jsonArrayExtra6.append(Float(oneValueExtra6))
                    }
                    resultDecodedBuilder.extra6 = jsonArrayExtra6
                }
                if let jsonValueExtra7 = jsonMap["extra7"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.extra7 = try Tensorflow.Features.Builder.decodeToBuilder(jsonMap:jsonValueExtra7).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.ExampleWithExtras.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.ExampleWithExtras.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.ExampleWithExtras: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.ExampleWithExtras> {
        var mergedArray = Array<Tensorflow.ExampleWithExtras>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.ExampleWithExtras? {
        return try Tensorflow.ExampleWithExtras.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.ExampleProtoFastParsingTestRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ExampleWithExtras {
        return try Tensorflow.ExampleWithExtras.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "features": return self.features
        case "extra1": return self.extra1
        case "extra2": return self.extra2
        case "extra3": return self.extra3
        case "extra4": return self.extra4
        case "extra5": return self.extra5
        case "extra6": return self.extra6
        case "extra7": return self.extra7
        default: return nil
        }
    }
}
extension Tensorflow.ExampleWithExtras.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "features": return self.features
            case "extra1": return self.extra1
            case "extra2": return self.extra2
            case "extra3": return self.extra3
            case "extra4": return self.extra4
            case "extra5": return self.extra5
            case "extra6": return self.extra6
            case "extra7": return self.extra7
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "features":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Features else {
                    return
                }
                self.features = newSubscriptValue
            case "extra1":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.extra1 = newSubscriptValue
            case "extra2":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.extra2 = newSubscriptValue
            case "extra3":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.extra3 = newSubscriptValue
            case "extra4":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.extra4 = newSubscriptValue
            case "extra5":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.extra5 = newSubscriptValue
            case "extra6":
                guard let newSubscriptValue = newSubscriptValue as? Array<Float> else {
                    return
                }
                self.extra6 = newSubscriptValue
            case "extra7":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Features else {
                    return
                }
                self.extra7 = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
