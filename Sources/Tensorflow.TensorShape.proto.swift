/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "tensor_shape.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct TensorShapeRoot {
        public static let `default` = TensorShapeRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Dimensions of a tensor.
    final public class TensorShapeProto : GeneratedMessage {

        public static func == (lhs: Tensorflow.TensorShapeProto, rhs: Tensorflow.TensorShapeProto) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.dim == rhs.dim)
            fieldCheck = fieldCheck && (lhs.hasUnknownRank == rhs.hasUnknownRank) && (!lhs.hasUnknownRank || lhs.unknownRank == rhs.unknownRank)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        /// One dimension of the tensor.
        final public class Dim : GeneratedMessage {

            public static func == (lhs: Tensorflow.TensorShapeProto.Dim, rhs: Tensorflow.TensorShapeProto.Dim) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasSize == rhs.hasSize) && (!lhs.hasSize || lhs.size == rhs.size)
                fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }

            /// Size of the tensor in that dimension.
            /// This value must be >= -1, but values of -1 are reserved for "unknown"
            /// shapes (values of -1 mean "unknown" dimension).  Certain wrappers
            /// that work with TensorShapeProto may fail at runtime when deserializing
            /// a TensorShapeProto containing a dim value of -1.
            public fileprivate(set) var size:Int64 = Int64(0)
            public fileprivate(set) var hasSize:Bool = false

            /// Optional name of the tensor dimension.
            public fileprivate(set) var name:String = ""
            public fileprivate(set) var hasName:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasSize {
                    try codedOutputStream.writeInt64(fieldNumber: 1, value:size)
                }
                if hasName {
                    try codedOutputStream.writeString(fieldNumber: 2, value:name)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasSize {
                    serialize_size += size.computeInt64Size(fieldNumber: 1)
                }
                if hasName {
                    serialize_size += name.computeStringSize(fieldNumber: 2)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Tensorflow.TensorShapeProto.Dim.Builder {
                return Tensorflow.TensorShapeProto.Dim.classBuilder() as! Tensorflow.TensorShapeProto.Dim.Builder
            }
            public func getBuilder() -> Tensorflow.TensorShapeProto.Dim.Builder {
                return classBuilder() as! Tensorflow.TensorShapeProto.Dim.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.TensorShapeProto.Dim.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.TensorShapeProto.Dim.Builder()
            }
            public func toBuilder() throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                return try Tensorflow.TensorShapeProto.Dim.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Tensorflow.TensorShapeProto.Dim) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasSize {
                    jsonMap["size"] = "\(size)"
                }
                if hasName {
                    jsonMap["name"] = name
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorShapeProto.Dim {
                return try Tensorflow.TensorShapeProto.Dim.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Tensorflow.TensorShapeProto.Dim {
                return try Tensorflow.TensorShapeProto.Dim.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasSize {
                    output += "\(indent) size: \(size) \n"
                }
                if hasName {
                    output += "\(indent) name: \(name) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasSize {
                        hashCode = (hashCode &* 31) &+ size.hashValue
                    }
                    if hasName {
                        hashCode = (hashCode &* 31) &+ name.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Tensorflow.TensorShapeProto.Dim"
            }
            override public func className() -> String {
                return "Tensorflow.TensorShapeProto.Dim"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Tensorflow.TensorShapeProto.Dim = Tensorflow.TensorShapeProto.Dim()
                public func getMessage() -> Tensorflow.TensorShapeProto.Dim {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                /// Size of the tensor in that dimension.
                /// This value must be >= -1, but values of -1 are reserved for "unknown"
                /// shapes (values of -1 mean "unknown" dimension).  Certain wrappers
                /// that work with TensorShapeProto may fail at runtime when deserializing
                /// a TensorShapeProto containing a dim value of -1.
                public var size:Int64 {
                    get {
                        return builderResult.size
                    }
                    set (value) {
                        builderResult.hasSize = true
                        builderResult.size = value
                    }
                }
                public var hasSize:Bool {
                    get {
                        return builderResult.hasSize
                    }
                }
                @discardableResult
                public func setSize(_ value:Int64) -> Tensorflow.TensorShapeProto.Dim.Builder {
                    self.size = value
                    return self
                }
                @discardableResult
                public func clearSize() -> Tensorflow.TensorShapeProto.Dim.Builder{
                    builderResult.hasSize = false
                    builderResult.size = Int64(0)
                    return self
                }
                /// Optional name of the tensor dimension.
                public var name:String {
                    get {
                        return builderResult.name
                    }
                    set (value) {
                        builderResult.hasName = true
                        builderResult.name = value
                    }
                }
                public var hasName:Bool {
                    get {
                        return builderResult.hasName
                    }
                }
                @discardableResult
                public func setName(_ value:String) -> Tensorflow.TensorShapeProto.Dim.Builder {
                    self.name = value
                    return self
                }
                @discardableResult
                public func clearName() -> Tensorflow.TensorShapeProto.Dim.Builder{
                    builderResult.hasName = false
                    builderResult.name = ""
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Tensorflow.TensorShapeProto.Dim.Builder {
                    builderResult = Tensorflow.TensorShapeProto.Dim()
                    return self
                }
                override public func clone() throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    return try Tensorflow.TensorShapeProto.Dim.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Tensorflow.TensorShapeProto.Dim {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Tensorflow.TensorShapeProto.Dim {
                    let returnMe:Tensorflow.TensorShapeProto.Dim = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Tensorflow.TensorShapeProto.Dim) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    if other == Tensorflow.TensorShapeProto.Dim() {
                        return self
                    }
                    if other.hasSize {
                        size = other.size
                    }
                    if other.hasName {
                        name = other.name
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            size = try codedInputStream.readInt64()

                        case 18:
                            name = try codedInputStream.readString()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    let resultDecodedBuilder = Tensorflow.TensorShapeProto.Dim.Builder()
                    if let jsonValueSize = jsonMap["size"] as? String {
                        resultDecodedBuilder.size = Int64(jsonValueSize)!
                    } else if let jsonValueSize = jsonMap["size"] as? Int {
                        resultDecodedBuilder.size = Int64(jsonValueSize)
                    }
                    if let jsonValueName = jsonMap["name"] as? String {
                        resultDecodedBuilder.name = jsonValueName
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.TensorShapeProto.Dim.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Tensorflow.TensorShapeProto.Dim.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        public fileprivate(set) var dim:Array<Tensorflow.TensorShapeProto.Dim>  = Array<Tensorflow.TensorShapeProto.Dim>()
        /// If true, the number of dimensions in the shape is unknown.
        /// If true, "dim.size()" must be 0.
        public fileprivate(set) var unknownRank:Bool = false
        public fileprivate(set) var hasUnknownRank:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementDim in dim {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementDim)
            }
            if hasUnknownRank {
                try codedOutputStream.writeBool(fieldNumber: 3, value:unknownRank)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementDim in dim {
                serialize_size += oneElementDim.computeMessageSize(fieldNumber: 2)
            }
            if hasUnknownRank {
                serialize_size += unknownRank.computeBoolSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.TensorShapeProto.Builder {
            return Tensorflow.TensorShapeProto.classBuilder() as! Tensorflow.TensorShapeProto.Builder
        }
        public func getBuilder() -> Tensorflow.TensorShapeProto.Builder {
            return classBuilder() as! Tensorflow.TensorShapeProto.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorShapeProto.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorShapeProto.Builder()
        }
        public func toBuilder() throws -> Tensorflow.TensorShapeProto.Builder {
            return try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.TensorShapeProto) throws -> Tensorflow.TensorShapeProto.Builder {
            return try Tensorflow.TensorShapeProto.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !dim.isEmpty {
                var jsonArrayDim:Array<Dictionary<String,Any>> = []
                for oneValueDim in dim {
                    let ecodedMessageDim = try oneValueDim.encode()
                    jsonArrayDim.append(ecodedMessageDim)
                }
                jsonMap["dim"] = jsonArrayDim
            }
            if hasUnknownRank {
                jsonMap["unknownRank"] = unknownRank
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorShapeProto {
            return try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.TensorShapeProto {
            return try Tensorflow.TensorShapeProto.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var dimElementIndex:Int = 0
            for oneElementDim in dim {
                output += "\(indent) dim[\(dimElementIndex)] {\n"
                output += try oneElementDim.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                dimElementIndex += 1
            }
            if hasUnknownRank {
                output += "\(indent) unknownRank: \(unknownRank) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementDim in dim {
                    hashCode = (hashCode &* 31) &+ oneElementDim.hashValue
                }
                if hasUnknownRank {
                    hashCode = (hashCode &* 31) &+ unknownRank.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.TensorShapeProto"
        }
        override public func className() -> String {
            return "Tensorflow.TensorShapeProto"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.TensorShapeProto = Tensorflow.TensorShapeProto()
            public func getMessage() -> Tensorflow.TensorShapeProto {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Dimensions of the tensor, such as {"input", 30}, {"output", 40}
            /// for a 30 x 40 2D tensor.  If an entry has size -1, this
            /// corresponds to a dimension of unknown size. The names are
            /// optional.
            /// The order of entries in "dim" matters: It indicates the layout of the
            /// values in the tensor in-memory representation.
            /// The first entry in "dim" is the outermost dimension used to layout the
            /// values, the last entry is the innermost dimension.  This matches the
            /// in-memory layout of RowMajor Eigen tensors.
            /// If "dim.size()" > 0, "unknown_rank" must be false.
            public var dim:Array<Tensorflow.TensorShapeProto.Dim> {
                get {
                    return builderResult.dim
                }
                set (value) {
                    builderResult.dim = value
                }
            }
            @discardableResult
            public func setDim(_ value:Array<Tensorflow.TensorShapeProto.Dim>) -> Tensorflow.TensorShapeProto.Builder {
                self.dim = value
                return self
            }
            @discardableResult
            public func clearDim() -> Tensorflow.TensorShapeProto.Builder {
                builderResult.dim.removeAll(keepingCapacity: false)
                return self
            }
            /// If true, the number of dimensions in the shape is unknown.
            /// If true, "dim.size()" must be 0.
            public var unknownRank:Bool {
                get {
                    return builderResult.unknownRank
                }
                set (value) {
                    builderResult.hasUnknownRank = true
                    builderResult.unknownRank = value
                }
            }
            public var hasUnknownRank:Bool {
                get {
                    return builderResult.hasUnknownRank
                }
            }
            @discardableResult
            public func setUnknownRank(_ value:Bool) -> Tensorflow.TensorShapeProto.Builder {
                self.unknownRank = value
                return self
            }
            @discardableResult
            public func clearUnknownRank() -> Tensorflow.TensorShapeProto.Builder{
                builderResult.hasUnknownRank = false
                builderResult.unknownRank = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.TensorShapeProto.Builder {
                builderResult = Tensorflow.TensorShapeProto()
                return self
            }
            override public func clone() throws -> Tensorflow.TensorShapeProto.Builder {
                return try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.TensorShapeProto {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.TensorShapeProto {
                let returnMe:Tensorflow.TensorShapeProto = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.TensorShapeProto) throws -> Tensorflow.TensorShapeProto.Builder {
                if other == Tensorflow.TensorShapeProto() {
                    return self
                }
                if !other.dim.isEmpty  {
                     builderResult.dim += other.dim
                }
                if other.hasUnknownRank {
                    unknownRank = other.unknownRank
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorShapeProto.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 18:
                        let subBuilder = Tensorflow.TensorShapeProto.Dim.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        dim.append(subBuilder.buildPartial())

                    case 24:
                        unknownRank = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorShapeProto.Builder {
                let resultDecodedBuilder = Tensorflow.TensorShapeProto.Builder()
                if let jsonValueDim = jsonMap["dim"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayDim:Array<Tensorflow.TensorShapeProto.Dim> = []
                    for oneValueDim in jsonValueDim {
                        let messageFromStringDim = try Tensorflow.TensorShapeProto.Dim.Builder.decodeToBuilder(jsonMap:oneValueDim).build()

                        jsonArrayDim.append(messageFromStringDim)
                    }
                    resultDecodedBuilder.dim = jsonArrayDim
                }
                if let jsonValueUnknownRank = jsonMap["unknownRank"] as? Bool {
                    resultDecodedBuilder.unknownRank = jsonValueUnknownRank
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.TensorShapeProto.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.TensorShapeProto: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.TensorShapeProto> {
        var mergedArray = Array<Tensorflow.TensorShapeProto>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.TensorShapeProto? {
        return try Tensorflow.TensorShapeProto.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.TensorShapeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto {
        return try Tensorflow.TensorShapeProto.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "dim": return self.dim
        case "unknownRank": return self.unknownRank
        default: return nil
        }
    }
}
extension Tensorflow.TensorShapeProto.Dim: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.TensorShapeProto.Dim> {
        var mergedArray = Array<Tensorflow.TensorShapeProto.Dim>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.TensorShapeProto.Dim? {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.TensorShapeRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorShapeProto.Dim {
        return try Tensorflow.TensorShapeProto.Dim.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "size": return self.size
        case "name": return self.name
        default: return nil
        }
    }
}
extension Tensorflow.TensorShapeProto.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "dim": return self.dim
            case "unknownRank": return self.unknownRank
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "dim":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.TensorShapeProto.Dim> else {
                    return
                }
                self.dim = newSubscriptValue
            case "unknownRank":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.unknownRank = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.TensorShapeProto.Dim.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "size": return self.size
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "size":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.size = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
