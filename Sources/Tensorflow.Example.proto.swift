/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "example.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct ExampleRoot {
        public static let `default` = ExampleRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.FeatureRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Example : GeneratedMessage {

        public static func == (lhs: Tensorflow.Example, rhs: Tensorflow.Example) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasFeatures == rhs.hasFeatures) && (!lhs.hasFeatures || lhs.features == rhs.features)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var features:Tensorflow.Features!
        public fileprivate(set) var hasFeatures:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasFeatures {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:features)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasFeatures {
                if let varSizefeatures = features?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizefeatures
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Example.Builder {
            return Tensorflow.Example.classBuilder() as! Tensorflow.Example.Builder
        }
        public func getBuilder() -> Tensorflow.Example.Builder {
            return classBuilder() as! Tensorflow.Example.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Example.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Example.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Example.Builder {
            return try Tensorflow.Example.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Example) throws -> Tensorflow.Example.Builder {
            return try Tensorflow.Example.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasFeatures {
                jsonMap["features"] = try features.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Example {
            return try Tensorflow.Example.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Example {
            return try Tensorflow.Example.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasFeatures {
                output += "\(indent) features {\n"
                if let outDescFeatures = features {
                    output += try outDescFeatures.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasFeatures {
                    if let hashValuefeatures = features?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuefeatures
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Example"
        }
        override public func className() -> String {
            return "Tensorflow.Example"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Example = Tensorflow.Example()
            public func getMessage() -> Tensorflow.Example {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var features:Tensorflow.Features! {
                get {
                    if featuresBuilder_ != nil {
                        builderResult.features = featuresBuilder_.getMessage()
                    }
                    return builderResult.features
                }
                set (value) {
                    builderResult.hasFeatures = true
                    builderResult.features = value
                }
            }
            public var hasFeatures:Bool {
                get {
                    return builderResult.hasFeatures
                }
            }
            fileprivate var featuresBuilder_:Tensorflow.Features.Builder! {
                didSet {
                    builderResult.hasFeatures = true
                }
            }
            public func getFeaturesBuilder() -> Tensorflow.Features.Builder {
                if featuresBuilder_ == nil {
                    featuresBuilder_ = Tensorflow.Features.Builder()
                    builderResult.features = featuresBuilder_.getMessage()
                    if features != nil {
                        try! featuresBuilder_.mergeFrom(other: features)
                    }
                }
                return featuresBuilder_
            }
            @discardableResult
            public func setFeatures(_ value:Tensorflow.Features!) -> Tensorflow.Example.Builder {
                self.features = value
                return self
            }
            @discardableResult
            public func mergeFeatures(value:Tensorflow.Features) throws -> Tensorflow.Example.Builder {
                if builderResult.hasFeatures {
                    builderResult.features = try Tensorflow.Features.builderWithPrototype(prototype:builderResult.features).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.features = value
                }
                builderResult.hasFeatures = true
                return self
            }
            @discardableResult
            public func clearFeatures() -> Tensorflow.Example.Builder {
                featuresBuilder_ = nil
                builderResult.hasFeatures = false
                builderResult.features = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Example.Builder {
                builderResult = Tensorflow.Example()
                return self
            }
            override public func clone() throws -> Tensorflow.Example.Builder {
                return try Tensorflow.Example.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Example {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Example {
                let returnMe:Tensorflow.Example = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Example) throws -> Tensorflow.Example.Builder {
                if other == Tensorflow.Example() {
                    return self
                }
                if (other.hasFeatures) {
                    try mergeFeatures(value: other.features)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Example.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Example.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.Features.Builder = Tensorflow.Features.Builder()
                        if hasFeatures {
                            try subBuilder.mergeFrom(other: features)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        features = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Example.Builder {
                let resultDecodedBuilder = Tensorflow.Example.Builder()
                if let jsonValueFeatures = jsonMap["features"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.features = try Tensorflow.Features.Builder.decodeToBuilder(jsonMap:jsonValueFeatures).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Example.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Example.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SequenceExample : GeneratedMessage {

        public static func == (lhs: Tensorflow.SequenceExample, rhs: Tensorflow.SequenceExample) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasContext == rhs.hasContext) && (!lhs.hasContext || lhs.context == rhs.context)
            fieldCheck = fieldCheck && (lhs.hasFeatureLists == rhs.hasFeatureLists) && (!lhs.hasFeatureLists || lhs.featureLists == rhs.featureLists)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var context:Tensorflow.Features!
        public fileprivate(set) var hasContext:Bool = false
        public fileprivate(set) var featureLists:Tensorflow.FeatureLists!
        public fileprivate(set) var hasFeatureLists:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasContext {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:context)
            }
            if hasFeatureLists {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:featureLists)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasContext {
                if let varSizecontext = context?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizecontext
                }
            }
            if hasFeatureLists {
                if let varSizefeatureLists = featureLists?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizefeatureLists
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SequenceExample.Builder {
            return Tensorflow.SequenceExample.classBuilder() as! Tensorflow.SequenceExample.Builder
        }
        public func getBuilder() -> Tensorflow.SequenceExample.Builder {
            return classBuilder() as! Tensorflow.SequenceExample.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SequenceExample.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SequenceExample.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SequenceExample.Builder {
            return try Tensorflow.SequenceExample.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SequenceExample) throws -> Tensorflow.SequenceExample.Builder {
            return try Tensorflow.SequenceExample.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasContext {
                jsonMap["context"] = try context.encode()
            }
            if hasFeatureLists {
                jsonMap["featureLists"] = try featureLists.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SequenceExample {
            return try Tensorflow.SequenceExample.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SequenceExample {
            return try Tensorflow.SequenceExample.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasContext {
                output += "\(indent) context {\n"
                if let outDescContext = context {
                    output += try outDescContext.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasFeatureLists {
                output += "\(indent) featureLists {\n"
                if let outDescFeatureLists = featureLists {
                    output += try outDescFeatureLists.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasContext {
                    if let hashValuecontext = context?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuecontext
                    }
                }
                if hasFeatureLists {
                    if let hashValuefeatureLists = featureLists?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuefeatureLists
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SequenceExample"
        }
        override public func className() -> String {
            return "Tensorflow.SequenceExample"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SequenceExample = Tensorflow.SequenceExample()
            public func getMessage() -> Tensorflow.SequenceExample {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var context:Tensorflow.Features! {
                get {
                    if contextBuilder_ != nil {
                        builderResult.context = contextBuilder_.getMessage()
                    }
                    return builderResult.context
                }
                set (value) {
                    builderResult.hasContext = true
                    builderResult.context = value
                }
            }
            public var hasContext:Bool {
                get {
                    return builderResult.hasContext
                }
            }
            fileprivate var contextBuilder_:Tensorflow.Features.Builder! {
                didSet {
                    builderResult.hasContext = true
                }
            }
            public func getContextBuilder() -> Tensorflow.Features.Builder {
                if contextBuilder_ == nil {
                    contextBuilder_ = Tensorflow.Features.Builder()
                    builderResult.context = contextBuilder_.getMessage()
                    if context != nil {
                        try! contextBuilder_.mergeFrom(other: context)
                    }
                }
                return contextBuilder_
            }
            @discardableResult
            public func setContext(_ value:Tensorflow.Features!) -> Tensorflow.SequenceExample.Builder {
                self.context = value
                return self
            }
            @discardableResult
            public func mergeContext(value:Tensorflow.Features) throws -> Tensorflow.SequenceExample.Builder {
                if builderResult.hasContext {
                    builderResult.context = try Tensorflow.Features.builderWithPrototype(prototype:builderResult.context).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.context = value
                }
                builderResult.hasContext = true
                return self
            }
            @discardableResult
            public func clearContext() -> Tensorflow.SequenceExample.Builder {
                contextBuilder_ = nil
                builderResult.hasContext = false
                builderResult.context = nil
                return self
            }
            public var featureLists:Tensorflow.FeatureLists! {
                get {
                    if featureListsBuilder_ != nil {
                        builderResult.featureLists = featureListsBuilder_.getMessage()
                    }
                    return builderResult.featureLists
                }
                set (value) {
                    builderResult.hasFeatureLists = true
                    builderResult.featureLists = value
                }
            }
            public var hasFeatureLists:Bool {
                get {
                    return builderResult.hasFeatureLists
                }
            }
            fileprivate var featureListsBuilder_:Tensorflow.FeatureLists.Builder! {
                didSet {
                    builderResult.hasFeatureLists = true
                }
            }
            public func getFeatureListsBuilder() -> Tensorflow.FeatureLists.Builder {
                if featureListsBuilder_ == nil {
                    featureListsBuilder_ = Tensorflow.FeatureLists.Builder()
                    builderResult.featureLists = featureListsBuilder_.getMessage()
                    if featureLists != nil {
                        try! featureListsBuilder_.mergeFrom(other: featureLists)
                    }
                }
                return featureListsBuilder_
            }
            @discardableResult
            public func setFeatureLists(_ value:Tensorflow.FeatureLists!) -> Tensorflow.SequenceExample.Builder {
                self.featureLists = value
                return self
            }
            @discardableResult
            public func mergeFeatureLists(value:Tensorflow.FeatureLists) throws -> Tensorflow.SequenceExample.Builder {
                if builderResult.hasFeatureLists {
                    builderResult.featureLists = try Tensorflow.FeatureLists.builderWithPrototype(prototype:builderResult.featureLists).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.featureLists = value
                }
                builderResult.hasFeatureLists = true
                return self
            }
            @discardableResult
            public func clearFeatureLists() -> Tensorflow.SequenceExample.Builder {
                featureListsBuilder_ = nil
                builderResult.hasFeatureLists = false
                builderResult.featureLists = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SequenceExample.Builder {
                builderResult = Tensorflow.SequenceExample()
                return self
            }
            override public func clone() throws -> Tensorflow.SequenceExample.Builder {
                return try Tensorflow.SequenceExample.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SequenceExample {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SequenceExample {
                let returnMe:Tensorflow.SequenceExample = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SequenceExample) throws -> Tensorflow.SequenceExample.Builder {
                if other == Tensorflow.SequenceExample() {
                    return self
                }
                if (other.hasContext) {
                    try mergeContext(value: other.context)
                }
                if (other.hasFeatureLists) {
                    try mergeFeatureLists(value: other.featureLists)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SequenceExample.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SequenceExample.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.Features.Builder = Tensorflow.Features.Builder()
                        if hasContext {
                            try subBuilder.mergeFrom(other: context)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        context = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Tensorflow.FeatureLists.Builder = Tensorflow.FeatureLists.Builder()
                        if hasFeatureLists {
                            try subBuilder.mergeFrom(other: featureLists)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        featureLists = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SequenceExample.Builder {
                let resultDecodedBuilder = Tensorflow.SequenceExample.Builder()
                if let jsonValueContext = jsonMap["context"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.context = try Tensorflow.Features.Builder.decodeToBuilder(jsonMap:jsonValueContext).build()

                }
                if let jsonValueFeatureLists = jsonMap["featureLists"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.featureLists = try Tensorflow.FeatureLists.Builder.decodeToBuilder(jsonMap:jsonValueFeatureLists).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SequenceExample.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SequenceExample.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.Example: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Example> {
        var mergedArray = Array<Tensorflow.Example>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Example? {
        return try Tensorflow.Example.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.ExampleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Example {
        return try Tensorflow.Example.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "features": return self.features
        default: return nil
        }
    }
}
extension Tensorflow.Example.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "features": return self.features
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "features":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Features else {
                    return
                }
                self.features = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.SequenceExample: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SequenceExample> {
        var mergedArray = Array<Tensorflow.SequenceExample>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SequenceExample? {
        return try Tensorflow.SequenceExample.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.ExampleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SequenceExample {
        return try Tensorflow.SequenceExample.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "context": return self.context
        case "featureLists": return self.featureLists
        default: return nil
        }
    }
}
extension Tensorflow.SequenceExample.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "context": return self.context
            case "featureLists": return self.featureLists
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "context":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Features else {
                    return
                }
                self.context = newSubscriptValue
            case "featureLists":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.FeatureLists else {
                    return
                }
                self.featureLists = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
