// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Config proto for FileSystemStoragePathSource.
public struct Tensorflow_Serving_FileSystemStoragePathSourceConfig: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FileSystemStoragePathSourceConfig"

  /// The servables to monitor for new versions, and aspire.
  public var servables: [Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor] = []

  /// A single servable name/base_path pair to monitor.
  /// DEPRECATED: Use 'servables' instead.
  /// TODO(b/30898016): Stop using these fields, and ultimately remove them here.
  public var servableName: String = String()

  public var basePath: String = String()

  /// How long to wait between file-system polling to look for children of
  /// 'base_path', in seconds.
  ///
  /// For testing use only: a negative value disables the polling thread.
  public var fileSystemPollWaitSeconds: Int64 = 0

  /// If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
  /// fail if, for any configured servables, the file system doesn't currently
  /// contain at least one version under the base path.
  /// (Otherwise, it will emit a warning and keep pinging the file system to
  /// check for a version to appear later.)
  public var failIfZeroVersionsAtStartup: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A policy that dictates which version(s) of a servable should be served.
  public struct ServableVersionPolicy: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.protoMessageName + ".ServableVersionPolicy"

    public var policyChoice: OneOf_PolicyChoice? {
      get {return _storage._policyChoice}
      set {_uniqueStorage()._policyChoice = newValue}
    }

    public var latest: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest {
      get {
        if case .latest(let v)? = _storage._policyChoice {return v}
        return Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest()
      }
      set {_uniqueStorage()._policyChoice = .latest(newValue)}
    }

    public var all: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All {
      get {
        if case .all(let v)? = _storage._policyChoice {return v}
        return Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All()
      }
      set {_uniqueStorage()._policyChoice = .all(newValue)}
    }

    public var specific: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific {
      get {
        if case .specific(let v)? = _storage._policyChoice {return v}
        return Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific()
      }
      set {_uniqueStorage()._policyChoice = .specific(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_PolicyChoice: Equatable {
      case latest(Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
      case all(Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
      case specific(Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)

      public static func ==(lhs: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.OneOf_PolicyChoice, rhs: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.OneOf_PolicyChoice) -> Bool {
        switch (lhs, rhs) {
        case (.latest(let l), .latest(let r)): return l == r
        case (.all(let l), .all(let r)): return l == r
        case (.specific(let l), .specific(let r)): return l == r
        default: return false
        }
      }
    }

    /// Serve the latest versions (i.e. the ones with the highest version
    /// numbers), among those found on disk.
    ///
    /// This is the default policy, with the default number of versions as 1.
    public struct Latest: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.protoMessageName + ".Latest"

      /// Number of latest versions to serve. (The default is 1.)
      public var numVersions: UInt32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularUInt32Field(value: &self.numVersions)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.numVersions != 0 {
          try visitor.visitSingularUInt32Field(value: self.numVersions, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    /// Serve all versions found on disk.
    public struct All: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.protoMessageName + ".All"

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    /// Serve a specific version (or set of versions).
    ///
    /// This policy is useful for rolling back to a specific version, or for
    /// canarying a specific version while still serving a separate stable
    /// version.
    public struct Specific: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.protoMessageName + ".Specific"

      /// The version numbers to serve.
      public var versions: [Int64] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeRepeatedInt64Field(value: &self.versions)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.versions.isEmpty {
          try visitor.visitPackedInt64Field(value: self.versions, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 100:
            var v: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest?
            if let current = _storage._policyChoice {
              try decoder.handleConflictingOneOf()
              if case .latest(let m) = current {v = m}
            }
            try decoder.decodeSingularMessageField(value: &v)
            if let v = v {_storage._policyChoice = .latest(v)}
          case 101:
            var v: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All?
            if let current = _storage._policyChoice {
              try decoder.handleConflictingOneOf()
              if case .all(let m) = current {v = m}
            }
            try decoder.decodeSingularMessageField(value: &v)
            if let v = v {_storage._policyChoice = .all(v)}
          case 102:
            var v: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific?
            if let current = _storage._policyChoice {
              try decoder.handleConflictingOneOf()
              if case .specific(let m) = current {v = m}
            }
            try decoder.decodeSingularMessageField(value: &v)
            if let v = v {_storage._policyChoice = .specific(v)}
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        switch _storage._policyChoice {
        case .latest(let v)?:
          try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
        case .all(let v)?:
          try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
        case .specific(let v)?:
          try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
        case nil: break
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// A servable name and base path to look for versions of the servable.
  public struct ServableToMonitor: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.protoMessageName + ".ServableToMonitor"

    /// The servable name to supply in aspired-versions callback calls. Child
    /// paths of 'base_path' are considered to be versions of this servable.
    public var servableName: String {
      get {return _storage._servableName}
      set {_uniqueStorage()._servableName = newValue}
    }

    /// The path to monitor, i.e. look for child paths of the form base_path/123.
    public var basePath: String {
      get {return _storage._basePath}
      set {_uniqueStorage()._basePath = newValue}
    }

    /// The policy to determines the number of versions of the servable to be
    /// served at the same time.
    public var servableVersionPolicy: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy {
      get {return _storage._servableVersionPolicy ?? Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy()}
      set {_uniqueStorage()._servableVersionPolicy = newValue}
    }
    /// Returns true if `servableVersionPolicy` has been explicitly set.
    public var hasServableVersionPolicy: Bool {return _storage._servableVersionPolicy != nil}
    /// Clears the value of `servableVersionPolicy`. Subsequent reads from it will return its default value.
    public mutating func clearServableVersionPolicy() {_storage._servableVersionPolicy = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._servableName)
          case 2: try decoder.decodeSingularStringField(value: &_storage._basePath)
          case 4: try decoder.decodeSingularMessageField(value: &_storage._servableVersionPolicy)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._servableName.isEmpty {
          try visitor.visitSingularStringField(value: _storage._servableName, fieldNumber: 1)
        }
        if !_storage._basePath.isEmpty {
          try visitor.visitSingularStringField(value: _storage._basePath, fieldNumber: 2)
        }
        if let v = _storage._servableVersionPolicy {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.servableName)
      case 2: try decoder.decodeSingularStringField(value: &self.basePath)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fileSystemPollWaitSeconds)
      case 4: try decoder.decodeSingularBoolField(value: &self.failIfZeroVersionsAtStartup)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.servables)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.servableName.isEmpty {
      try visitor.visitSingularStringField(value: self.servableName, fieldNumber: 1)
    }
    if !self.basePath.isEmpty {
      try visitor.visitSingularStringField(value: self.basePath, fieldNumber: 2)
    }
    if self.fileSystemPollWaitSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.fileSystemPollWaitSeconds, fieldNumber: 3)
    }
    if self.failIfZeroVersionsAtStartup != false {
      try visitor.visitSingularBoolField(value: self.failIfZeroVersionsAtStartup, fieldNumber: 4)
    }
    if !self.servables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.servables, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "servables"),
    1: .standard(proto: "servable_name"),
    2: .standard(proto: "base_path"),
    3: .standard(proto: "file_system_poll_wait_seconds"),
    4: .standard(proto: "fail_if_zero_versions_at_startup"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig) -> Bool {
    if self.servables != other.servables {return false}
    if self.servableName != other.servableName {return false}
    if self.basePath != other.basePath {return false}
    if self.fileSystemPollWaitSeconds != other.fileSystemPollWaitSeconds {return false}
    if self.failIfZeroVersionsAtStartup != other.failIfZeroVersionsAtStartup {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .same(proto: "latest"),
    101: .same(proto: "all"),
    102: .same(proto: "specific"),
  ]

  fileprivate class _StorageClass {
    var _policyChoice: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.OneOf_PolicyChoice?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _policyChoice = source._policyChoice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._policyChoice != other_storage._policyChoice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_versions"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest) -> Bool {
    if self.numVersions != other.numVersions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.All) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "versions"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific) -> Bool {
    if self.versions != other.versions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "servable_name"),
    2: .standard(proto: "base_path"),
    4: .standard(proto: "servable_version_policy"),
  ]

  fileprivate class _StorageClass {
    var _servableName: String = String()
    var _basePath: String = String()
    var _servableVersionPolicy: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableVersionPolicy? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _servableName = source._servableName
      _basePath = source._basePath
      _servableVersionPolicy = source._servableVersionPolicy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._servableName != other_storage._servableName {return false}
        if _storage._basePath != other_storage._basePath {return false}
        if _storage._servableVersionPolicy != other_storage._servableVersionPolicy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
