/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "device_attributes.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct DeviceAttributesRoot {
        public static let `default` = DeviceAttributesRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class DeviceLocality : GeneratedMessage {

        public static func == (lhs: Tensorflow.DeviceLocality, rhs: Tensorflow.DeviceLocality) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasBusId == rhs.hasBusId) && (!lhs.hasBusId || lhs.busId == rhs.busId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Optional bus locality of device.  Default value of 0 means
        /// no specific locality.  Specific localities are indexed from 1.
        public fileprivate(set) var busId:Int32 = Int32(0)
        public fileprivate(set) var hasBusId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasBusId {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:busId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasBusId {
                serialize_size += busId.computeInt32Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.DeviceLocality.Builder {
            return Tensorflow.DeviceLocality.classBuilder() as! Tensorflow.DeviceLocality.Builder
        }
        public func getBuilder() -> Tensorflow.DeviceLocality.Builder {
            return classBuilder() as! Tensorflow.DeviceLocality.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.DeviceLocality.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.DeviceLocality.Builder()
        }
        public func toBuilder() throws -> Tensorflow.DeviceLocality.Builder {
            return try Tensorflow.DeviceLocality.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.DeviceLocality) throws -> Tensorflow.DeviceLocality.Builder {
            return try Tensorflow.DeviceLocality.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasBusId {
                jsonMap["busId"] = Int(busId)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.DeviceLocality {
            return try Tensorflow.DeviceLocality.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.DeviceLocality {
            return try Tensorflow.DeviceLocality.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasBusId {
                output += "\(indent) busId: \(busId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBusId {
                    hashCode = (hashCode &* 31) &+ busId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.DeviceLocality"
        }
        override public func className() -> String {
            return "Tensorflow.DeviceLocality"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.DeviceLocality = Tensorflow.DeviceLocality()
            public func getMessage() -> Tensorflow.DeviceLocality {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Optional bus locality of device.  Default value of 0 means
            /// no specific locality.  Specific localities are indexed from 1.
            public var busId:Int32 {
                get {
                    return builderResult.busId
                }
                set (value) {
                    builderResult.hasBusId = true
                    builderResult.busId = value
                }
            }
            public var hasBusId:Bool {
                get {
                    return builderResult.hasBusId
                }
            }
            @discardableResult
            public func setBusId(_ value:Int32) -> Tensorflow.DeviceLocality.Builder {
                self.busId = value
                return self
            }
            @discardableResult
            public func clearBusId() -> Tensorflow.DeviceLocality.Builder{
                builderResult.hasBusId = false
                builderResult.busId = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.DeviceLocality.Builder {
                builderResult = Tensorflow.DeviceLocality()
                return self
            }
            override public func clone() throws -> Tensorflow.DeviceLocality.Builder {
                return try Tensorflow.DeviceLocality.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.DeviceLocality {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.DeviceLocality {
                let returnMe:Tensorflow.DeviceLocality = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.DeviceLocality) throws -> Tensorflow.DeviceLocality.Builder {
                if other == Tensorflow.DeviceLocality() {
                    return self
                }
                if other.hasBusId {
                    busId = other.busId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.DeviceLocality.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceLocality.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        busId = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.DeviceLocality.Builder {
                let resultDecodedBuilder = Tensorflow.DeviceLocality.Builder()
                if let jsonValueBusId = jsonMap["busId"] as? Int {
                    resultDecodedBuilder.busId = Int32(jsonValueBusId)
                } else if let jsonValueBusId = jsonMap["busId"] as? String {
                    resultDecodedBuilder.busId = Int32(jsonValueBusId)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.DeviceLocality.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.DeviceLocality.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class DeviceAttributes : GeneratedMessage {

        public static func == (lhs: Tensorflow.DeviceAttributes, rhs: Tensorflow.DeviceAttributes) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasDeviceType == rhs.hasDeviceType) && (!lhs.hasDeviceType || lhs.deviceType == rhs.deviceType)
            fieldCheck = fieldCheck && (lhs.hasMemoryLimit == rhs.hasMemoryLimit) && (!lhs.hasMemoryLimit || lhs.memoryLimit == rhs.memoryLimit)
            fieldCheck = fieldCheck && (lhs.hasLocality == rhs.hasLocality) && (!lhs.hasLocality || lhs.locality == rhs.locality)
            fieldCheck = fieldCheck && (lhs.hasIncarnation == rhs.hasIncarnation) && (!lhs.hasIncarnation || lhs.incarnation == rhs.incarnation)
            fieldCheck = fieldCheck && (lhs.hasPhysicalDeviceDesc == rhs.hasPhysicalDeviceDesc) && (!lhs.hasPhysicalDeviceDesc || lhs.physicalDeviceDesc == rhs.physicalDeviceDesc)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Fully specified name of the device within a cluster.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        /// String representation of device_type.
        public fileprivate(set) var deviceType:String = ""
        public fileprivate(set) var hasDeviceType:Bool = false

        /// Memory capacity of device in bytes.
        public fileprivate(set) var memoryLimit:Int64 = Int64(0)
        public fileprivate(set) var hasMemoryLimit:Bool = false

        public fileprivate(set) var locality:Tensorflow.DeviceLocality!
        public fileprivate(set) var hasLocality:Bool = false
        /// A device is assigned a global unique number each time it is
        /// initialized. "incarnation" should never be 0.
        public fileprivate(set) var incarnation:UInt64 = UInt64(0)
        public fileprivate(set) var hasIncarnation:Bool = false

        /// String representation of the physical device that this device maps to.
        public fileprivate(set) var physicalDeviceDesc:String = ""
        public fileprivate(set) var hasPhysicalDeviceDesc:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasDeviceType {
                try codedOutputStream.writeString(fieldNumber: 2, value:deviceType)
            }
            if hasMemoryLimit {
                try codedOutputStream.writeInt64(fieldNumber: 4, value:memoryLimit)
            }
            if hasLocality {
                try codedOutputStream.writeMessage(fieldNumber: 5, value:locality)
            }
            if hasIncarnation {
                try codedOutputStream.writeFixed64(fieldNumber: 6, value:incarnation)
            }
            if hasPhysicalDeviceDesc {
                try codedOutputStream.writeString(fieldNumber: 7, value:physicalDeviceDesc)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasDeviceType {
                serialize_size += deviceType.computeStringSize(fieldNumber: 2)
            }
            if hasMemoryLimit {
                serialize_size += memoryLimit.computeInt64Size(fieldNumber: 4)
            }
            if hasLocality {
                if let varSizelocality = locality?.computeMessageSize(fieldNumber: 5) {
                    serialize_size += varSizelocality
                }
            }
            if hasIncarnation {
                serialize_size += incarnation.computeFixed64Size(fieldNumber: 6)
            }
            if hasPhysicalDeviceDesc {
                serialize_size += physicalDeviceDesc.computeStringSize(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.DeviceAttributes.Builder {
            return Tensorflow.DeviceAttributes.classBuilder() as! Tensorflow.DeviceAttributes.Builder
        }
        public func getBuilder() -> Tensorflow.DeviceAttributes.Builder {
            return classBuilder() as! Tensorflow.DeviceAttributes.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.DeviceAttributes.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.DeviceAttributes.Builder()
        }
        public func toBuilder() throws -> Tensorflow.DeviceAttributes.Builder {
            return try Tensorflow.DeviceAttributes.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.DeviceAttributes) throws -> Tensorflow.DeviceAttributes.Builder {
            return try Tensorflow.DeviceAttributes.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasDeviceType {
                jsonMap["deviceType"] = deviceType
            }
            if hasMemoryLimit {
                jsonMap["memoryLimit"] = "\(memoryLimit)"
            }
            if hasLocality {
                jsonMap["locality"] = try locality.encode()
            }
            if hasIncarnation {
                jsonMap["incarnation"] = "\(incarnation)"
            }
            if hasPhysicalDeviceDesc {
                jsonMap["physicalDeviceDesc"] = physicalDeviceDesc
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.DeviceAttributes {
            return try Tensorflow.DeviceAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.DeviceAttributes {
            return try Tensorflow.DeviceAttributes.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasDeviceType {
                output += "\(indent) deviceType: \(deviceType) \n"
            }
            if hasMemoryLimit {
                output += "\(indent) memoryLimit: \(memoryLimit) \n"
            }
            if hasLocality {
                output += "\(indent) locality {\n"
                if let outDescLocality = locality {
                    output += try outDescLocality.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasIncarnation {
                output += "\(indent) incarnation: \(incarnation) \n"
            }
            if hasPhysicalDeviceDesc {
                output += "\(indent) physicalDeviceDesc: \(physicalDeviceDesc) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasDeviceType {
                    hashCode = (hashCode &* 31) &+ deviceType.hashValue
                }
                if hasMemoryLimit {
                    hashCode = (hashCode &* 31) &+ memoryLimit.hashValue
                }
                if hasLocality {
                    if let hashValuelocality = locality?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuelocality
                    }
                }
                if hasIncarnation {
                    hashCode = (hashCode &* 31) &+ incarnation.hashValue
                }
                if hasPhysicalDeviceDesc {
                    hashCode = (hashCode &* 31) &+ physicalDeviceDesc.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.DeviceAttributes"
        }
        override public func className() -> String {
            return "Tensorflow.DeviceAttributes"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.DeviceAttributes = Tensorflow.DeviceAttributes()
            public func getMessage() -> Tensorflow.DeviceAttributes {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Fully specified name of the device within a cluster.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.DeviceAttributes.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.DeviceAttributes.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// String representation of device_type.
            public var deviceType:String {
                get {
                    return builderResult.deviceType
                }
                set (value) {
                    builderResult.hasDeviceType = true
                    builderResult.deviceType = value
                }
            }
            public var hasDeviceType:Bool {
                get {
                    return builderResult.hasDeviceType
                }
            }
            @discardableResult
            public func setDeviceType(_ value:String) -> Tensorflow.DeviceAttributes.Builder {
                self.deviceType = value
                return self
            }
            @discardableResult
            public func clearDeviceType() -> Tensorflow.DeviceAttributes.Builder{
                builderResult.hasDeviceType = false
                builderResult.deviceType = ""
                return self
            }
            /// Memory capacity of device in bytes.
            public var memoryLimit:Int64 {
                get {
                    return builderResult.memoryLimit
                }
                set (value) {
                    builderResult.hasMemoryLimit = true
                    builderResult.memoryLimit = value
                }
            }
            public var hasMemoryLimit:Bool {
                get {
                    return builderResult.hasMemoryLimit
                }
            }
            @discardableResult
            public func setMemoryLimit(_ value:Int64) -> Tensorflow.DeviceAttributes.Builder {
                self.memoryLimit = value
                return self
            }
            @discardableResult
            public func clearMemoryLimit() -> Tensorflow.DeviceAttributes.Builder{
                builderResult.hasMemoryLimit = false
                builderResult.memoryLimit = Int64(0)
                return self
            }
            /// Platform-specific data about device that may be useful
            /// for supporting efficient data transfers.
            public var locality:Tensorflow.DeviceLocality! {
                get {
                    if localityBuilder_ != nil {
                        builderResult.locality = localityBuilder_.getMessage()
                    }
                    return builderResult.locality
                }
                set (value) {
                    builderResult.hasLocality = true
                    builderResult.locality = value
                }
            }
            public var hasLocality:Bool {
                get {
                    return builderResult.hasLocality
                }
            }
            fileprivate var localityBuilder_:Tensorflow.DeviceLocality.Builder! {
                didSet {
                    builderResult.hasLocality = true
                }
            }
            public func getLocalityBuilder() -> Tensorflow.DeviceLocality.Builder {
                if localityBuilder_ == nil {
                    localityBuilder_ = Tensorflow.DeviceLocality.Builder()
                    builderResult.locality = localityBuilder_.getMessage()
                    if locality != nil {
                        try! localityBuilder_.mergeFrom(other: locality)
                    }
                }
                return localityBuilder_
            }
            @discardableResult
            public func setLocality(_ value:Tensorflow.DeviceLocality!) -> Tensorflow.DeviceAttributes.Builder {
                self.locality = value
                return self
            }
            @discardableResult
            public func mergeLocality(value:Tensorflow.DeviceLocality) throws -> Tensorflow.DeviceAttributes.Builder {
                if builderResult.hasLocality {
                    builderResult.locality = try Tensorflow.DeviceLocality.builderWithPrototype(prototype:builderResult.locality).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.locality = value
                }
                builderResult.hasLocality = true
                return self
            }
            @discardableResult
            public func clearLocality() -> Tensorflow.DeviceAttributes.Builder {
                localityBuilder_ = nil
                builderResult.hasLocality = false
                builderResult.locality = nil
                return self
            }
            /// A device is assigned a global unique number each time it is
            /// initialized. "incarnation" should never be 0.
            public var incarnation:UInt64 {
                get {
                    return builderResult.incarnation
                }
                set (value) {
                    builderResult.hasIncarnation = true
                    builderResult.incarnation = value
                }
            }
            public var hasIncarnation:Bool {
                get {
                    return builderResult.hasIncarnation
                }
            }
            @discardableResult
            public func setIncarnation(_ value:UInt64) -> Tensorflow.DeviceAttributes.Builder {
                self.incarnation = value
                return self
            }
            @discardableResult
            public func clearIncarnation() -> Tensorflow.DeviceAttributes.Builder{
                builderResult.hasIncarnation = false
                builderResult.incarnation = UInt64(0)
                return self
            }
            /// String representation of the physical device that this device maps to.
            public var physicalDeviceDesc:String {
                get {
                    return builderResult.physicalDeviceDesc
                }
                set (value) {
                    builderResult.hasPhysicalDeviceDesc = true
                    builderResult.physicalDeviceDesc = value
                }
            }
            public var hasPhysicalDeviceDesc:Bool {
                get {
                    return builderResult.hasPhysicalDeviceDesc
                }
            }
            @discardableResult
            public func setPhysicalDeviceDesc(_ value:String) -> Tensorflow.DeviceAttributes.Builder {
                self.physicalDeviceDesc = value
                return self
            }
            @discardableResult
            public func clearPhysicalDeviceDesc() -> Tensorflow.DeviceAttributes.Builder{
                builderResult.hasPhysicalDeviceDesc = false
                builderResult.physicalDeviceDesc = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.DeviceAttributes.Builder {
                builderResult = Tensorflow.DeviceAttributes()
                return self
            }
            override public func clone() throws -> Tensorflow.DeviceAttributes.Builder {
                return try Tensorflow.DeviceAttributes.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.DeviceAttributes {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.DeviceAttributes {
                let returnMe:Tensorflow.DeviceAttributes = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.DeviceAttributes) throws -> Tensorflow.DeviceAttributes.Builder {
                if other == Tensorflow.DeviceAttributes() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasDeviceType {
                    deviceType = other.deviceType
                }
                if other.hasMemoryLimit {
                    memoryLimit = other.memoryLimit
                }
                if (other.hasLocality) {
                    try mergeLocality(value: other.locality)
                }
                if other.hasIncarnation {
                    incarnation = other.incarnation
                }
                if other.hasPhysicalDeviceDesc {
                    physicalDeviceDesc = other.physicalDeviceDesc
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.DeviceAttributes.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceAttributes.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        deviceType = try codedInputStream.readString()

                    case 32:
                        memoryLimit = try codedInputStream.readInt64()

                    case 42:
                        let subBuilder:Tensorflow.DeviceLocality.Builder = Tensorflow.DeviceLocality.Builder()
                        if hasLocality {
                            try subBuilder.mergeFrom(other: locality)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        locality = subBuilder.buildPartial()

                    case 49:
                        incarnation = try codedInputStream.readFixed64()

                    case 58:
                        physicalDeviceDesc = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.DeviceAttributes.Builder {
                let resultDecodedBuilder = Tensorflow.DeviceAttributes.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueDeviceType = jsonMap["deviceType"] as? String {
                    resultDecodedBuilder.deviceType = jsonValueDeviceType
                }
                if let jsonValueMemoryLimit = jsonMap["memoryLimit"] as? String {
                    resultDecodedBuilder.memoryLimit = Int64(jsonValueMemoryLimit)!
                } else if let jsonValueMemoryLimit = jsonMap["memoryLimit"] as? Int {
                    resultDecodedBuilder.memoryLimit = Int64(jsonValueMemoryLimit)
                }
                if let jsonValueLocality = jsonMap["locality"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.locality = try Tensorflow.DeviceLocality.Builder.decodeToBuilder(jsonMap:jsonValueLocality).build()

                }
                if let jsonValueIncarnation = jsonMap["incarnation"] as? String {
                    resultDecodedBuilder.incarnation = UInt64(jsonValueIncarnation)!
                } else if let jsonValueIncarnation = jsonMap["incarnation"] as? UInt {
                    resultDecodedBuilder.incarnation = UInt64(jsonValueIncarnation)
                }
                if let jsonValuePhysicalDeviceDesc = jsonMap["physicalDeviceDesc"] as? String {
                    resultDecodedBuilder.physicalDeviceDesc = jsonValuePhysicalDeviceDesc
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.DeviceAttributes.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.DeviceAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.DeviceLocality: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.DeviceLocality> {
        var mergedArray = Array<Tensorflow.DeviceLocality>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.DeviceLocality? {
        return try Tensorflow.DeviceLocality.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.DeviceAttributesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceLocality {
        return try Tensorflow.DeviceLocality.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "busId": return self.busId
        default: return nil
        }
    }
}
extension Tensorflow.DeviceLocality.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "busId": return self.busId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "busId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.busId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.DeviceAttributes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.DeviceAttributes> {
        var mergedArray = Array<Tensorflow.DeviceAttributes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.DeviceAttributes? {
        return try Tensorflow.DeviceAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.DeviceAttributesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.DeviceAttributes {
        return try Tensorflow.DeviceAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "deviceType": return self.deviceType
        case "memoryLimit": return self.memoryLimit
        case "locality": return self.locality
        case "incarnation": return self.incarnation
        case "physicalDeviceDesc": return self.physicalDeviceDesc
        default: return nil
        }
    }
}
extension Tensorflow.DeviceAttributes.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "deviceType": return self.deviceType
            case "memoryLimit": return self.memoryLimit
            case "locality": return self.locality
            case "incarnation": return self.incarnation
            case "physicalDeviceDesc": return self.physicalDeviceDesc
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "deviceType":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.deviceType = newSubscriptValue
            case "memoryLimit":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.memoryLimit = newSubscriptValue
            case "locality":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DeviceLocality else {
                    return
                }
                self.locality = newSubscriptValue
            case "incarnation":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.incarnation = newSubscriptValue
            case "physicalDeviceDesc":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.physicalDeviceDesc = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
