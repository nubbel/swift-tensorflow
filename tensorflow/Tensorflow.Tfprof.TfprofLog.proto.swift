/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "tfprof_log.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct Tensorflow { public struct Tfprof { }}

public extension Tensorflow.Tfprof {
    public struct TfprofLogRoot {
        public static let `default` = TfprofLogRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class OpLogEntry : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfprof.OpLogEntry, rhs: Tensorflow.Tfprof.OpLogEntry) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasFloatOps == rhs.hasFloatOps) && (!lhs.hasFloatOps || lhs.floatOps == rhs.floatOps)
            fieldCheck = fieldCheck && (lhs.types == rhs.types)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// op name.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        /// float_ops is filled by tfprof Python API when called. It requires the
        /// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
        /// implemented.
        public fileprivate(set) var floatOps:Int64 = Int64(0)
        public fileprivate(set) var hasFloatOps:Bool = false

        /// User can define extra op type information for an op. This allows the user
        /// to select a group of ops precisely using op_type as a key.
        public fileprivate(set) var types:Array<String> = Array<String>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasFloatOps {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:floatOps)
            }
            if !types.isEmpty {
                for oneValuetypes in types {
                    try codedOutputStream.writeString(fieldNumber: 3, value:oneValuetypes)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasFloatOps {
                serialize_size += floatOps.computeInt64Size(fieldNumber: 2)
            }
            var dataSizeTypes:Int32 = 0
            for oneValuetypes in types {
                dataSizeTypes += oneValuetypes.computeStringSizeNoTag()
            }
            serialize_size += dataSizeTypes
            serialize_size += 1 * Int32(types.count)
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfprof.OpLogEntry.Builder {
            return Tensorflow.Tfprof.OpLogEntry.classBuilder() as! Tensorflow.Tfprof.OpLogEntry.Builder
        }
        public func getBuilder() -> Tensorflow.Tfprof.OpLogEntry.Builder {
            return classBuilder() as! Tensorflow.Tfprof.OpLogEntry.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfprof.OpLogEntry.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfprof.OpLogEntry.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
            return try Tensorflow.Tfprof.OpLogEntry.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfprof.OpLogEntry) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
            return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasFloatOps {
                jsonMap["floatOps"] = "\(floatOps)"
            }
            if !types.isEmpty {
                var jsonArrayTypes:Array<String> = []
                for oneValueTypes in types {
                    jsonArrayTypes.append(oneValueTypes)
                }
                jsonMap["types"] = jsonArrayTypes
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfprof.OpLogEntry {
            return try Tensorflow.Tfprof.OpLogEntry.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfprof.OpLogEntry {
            return try Tensorflow.Tfprof.OpLogEntry.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasFloatOps {
                output += "\(indent) floatOps: \(floatOps) \n"
            }
            var typesElementIndex:Int = 0
            for oneValueTypes in types  {
                output += "\(indent) types[\(typesElementIndex)]: \(oneValueTypes)\n"
                typesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasFloatOps {
                    hashCode = (hashCode &* 31) &+ floatOps.hashValue
                }
                for oneValueTypes in types {
                    hashCode = (hashCode &* 31) &+ oneValueTypes.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfprof.OpLogEntry"
        }
        override public func className() -> String {
            return "Tensorflow.Tfprof.OpLogEntry"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfprof.OpLogEntry = Tensorflow.Tfprof.OpLogEntry()
            public func getMessage() -> Tensorflow.Tfprof.OpLogEntry {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// op name.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.Tfprof.OpLogEntry.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.Tfprof.OpLogEntry.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// float_ops is filled by tfprof Python API when called. It requires the
            /// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
            /// implemented.
            public var floatOps:Int64 {
                get {
                    return builderResult.floatOps
                }
                set (value) {
                    builderResult.hasFloatOps = true
                    builderResult.floatOps = value
                }
            }
            public var hasFloatOps:Bool {
                get {
                    return builderResult.hasFloatOps
                }
            }
            @discardableResult
            public func setFloatOps(_ value:Int64) -> Tensorflow.Tfprof.OpLogEntry.Builder {
                self.floatOps = value
                return self
            }
            @discardableResult
            public func clearFloatOps() -> Tensorflow.Tfprof.OpLogEntry.Builder{
                builderResult.hasFloatOps = false
                builderResult.floatOps = Int64(0)
                return self
            }
            /// User can define extra op type information for an op. This allows the user
            /// to select a group of ops precisely using op_type as a key.
            public var types:Array<String> {
                get {
                    return builderResult.types
                }
                set (array) {
                    builderResult.types = array
                }
            }
            @discardableResult
            public func setTypes(_ value:Array<String>) -> Tensorflow.Tfprof.OpLogEntry.Builder {
                self.types = value
                return self
            }
            @discardableResult
            public func clearTypes() -> Tensorflow.Tfprof.OpLogEntry.Builder {
                builderResult.types.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfprof.OpLogEntry.Builder {
                builderResult = Tensorflow.Tfprof.OpLogEntry()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                return try Tensorflow.Tfprof.OpLogEntry.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfprof.OpLogEntry {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfprof.OpLogEntry {
                let returnMe:Tensorflow.Tfprof.OpLogEntry = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfprof.OpLogEntry) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                if other == Tensorflow.Tfprof.OpLogEntry() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasFloatOps {
                    floatOps = other.floatOps
                }
                if !other.types.isEmpty {
                    builderResult.types += other.types
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 16:
                        floatOps = try codedInputStream.readInt64()

                    case 26:
                        types += [try codedInputStream.readString()]

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                let resultDecodedBuilder = Tensorflow.Tfprof.OpLogEntry.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueFloatOps = jsonMap["floatOps"] as? String {
                    resultDecodedBuilder.floatOps = Int64(jsonValueFloatOps)!
                } else if let jsonValueFloatOps = jsonMap["floatOps"] as? Int {
                    resultDecodedBuilder.floatOps = Int64(jsonValueFloatOps)
                }
                if let jsonValueTypes = jsonMap["types"] as? Array<String> {
                    var jsonArrayTypes:Array<String> = []
                    for oneValueTypes in jsonValueTypes {
                        jsonArrayTypes.append(oneValueTypes)
                    }
                    resultDecodedBuilder.types = jsonArrayTypes
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfprof.OpLogEntry.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfprof.OpLogEntry.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class OpLog : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfprof.OpLog, rhs: Tensorflow.Tfprof.OpLog) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.logEntries == rhs.logEntries)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var logEntries:Array<Tensorflow.Tfprof.OpLogEntry>  = Array<Tensorflow.Tfprof.OpLogEntry>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementLogEntries in logEntries {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementLogEntries)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementLogEntries in logEntries {
                serialize_size += oneElementLogEntries.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfprof.OpLog.Builder {
            return Tensorflow.Tfprof.OpLog.classBuilder() as! Tensorflow.Tfprof.OpLog.Builder
        }
        public func getBuilder() -> Tensorflow.Tfprof.OpLog.Builder {
            return classBuilder() as! Tensorflow.Tfprof.OpLog.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfprof.OpLog.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfprof.OpLog.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfprof.OpLog.Builder {
            return try Tensorflow.Tfprof.OpLog.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfprof.OpLog) throws -> Tensorflow.Tfprof.OpLog.Builder {
            return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !logEntries.isEmpty {
                var jsonArrayLogEntries:Array<Dictionary<String,Any>> = []
                for oneValueLogEntries in logEntries {
                    let ecodedMessageLogEntries = try oneValueLogEntries.encode()
                    jsonArrayLogEntries.append(ecodedMessageLogEntries)
                }
                jsonMap["logEntries"] = jsonArrayLogEntries
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfprof.OpLog {
            return try Tensorflow.Tfprof.OpLog.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfprof.OpLog {
            return try Tensorflow.Tfprof.OpLog.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var logEntriesElementIndex:Int = 0
            for oneElementLogEntries in logEntries {
                output += "\(indent) logEntries[\(logEntriesElementIndex)] {\n"
                output += try oneElementLogEntries.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                logEntriesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementLogEntries in logEntries {
                    hashCode = (hashCode &* 31) &+ oneElementLogEntries.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfprof.OpLog"
        }
        override public func className() -> String {
            return "Tensorflow.Tfprof.OpLog"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfprof.OpLog = Tensorflow.Tfprof.OpLog()
            public func getMessage() -> Tensorflow.Tfprof.OpLog {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var logEntries:Array<Tensorflow.Tfprof.OpLogEntry> {
                get {
                    return builderResult.logEntries
                }
                set (value) {
                    builderResult.logEntries = value
                }
            }
            @discardableResult
            public func setLogEntries(_ value:Array<Tensorflow.Tfprof.OpLogEntry>) -> Tensorflow.Tfprof.OpLog.Builder {
                self.logEntries = value
                return self
            }
            @discardableResult
            public func clearLogEntries() -> Tensorflow.Tfprof.OpLog.Builder {
                builderResult.logEntries.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfprof.OpLog.Builder {
                builderResult = Tensorflow.Tfprof.OpLog()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfprof.OpLog.Builder {
                return try Tensorflow.Tfprof.OpLog.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfprof.OpLog {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfprof.OpLog {
                let returnMe:Tensorflow.Tfprof.OpLog = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfprof.OpLog) throws -> Tensorflow.Tfprof.OpLog.Builder {
                if other == Tensorflow.Tfprof.OpLog() {
                    return self
                }
                if !other.logEntries.isEmpty  {
                     builderResult.logEntries += other.logEntries
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfprof.OpLog.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLog.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Tensorflow.Tfprof.OpLogEntry.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        logEntries.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfprof.OpLog.Builder {
                let resultDecodedBuilder = Tensorflow.Tfprof.OpLog.Builder()
                if let jsonValueLogEntries = jsonMap["logEntries"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayLogEntries:Array<Tensorflow.Tfprof.OpLogEntry> = []
                    for oneValueLogEntries in jsonValueLogEntries {
                        let messageFromStringLogEntries = try Tensorflow.Tfprof.OpLogEntry.Builder.decodeToBuilder(jsonMap:oneValueLogEntries).build()

                        jsonArrayLogEntries.append(messageFromStringLogEntries)
                    }
                    resultDecodedBuilder.logEntries = jsonArrayLogEntries
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfprof.OpLog.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfprof.OpLog.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.Tfprof.OpLogEntry: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfprof.OpLogEntry> {
        var mergedArray = Array<Tensorflow.Tfprof.OpLogEntry>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfprof.OpLogEntry? {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfprof.TfprofLogRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLogEntry {
        return try Tensorflow.Tfprof.OpLogEntry.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "floatOps": return self.floatOps
        case "types": return self.types
        default: return nil
        }
    }
}
extension Tensorflow.Tfprof.OpLogEntry.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "floatOps": return self.floatOps
            case "types": return self.types
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "floatOps":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.floatOps = newSubscriptValue
            case "types":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.types = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.Tfprof.OpLog: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfprof.OpLog> {
        var mergedArray = Array<Tensorflow.Tfprof.OpLog>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfprof.OpLog? {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfprof.TfprofLogRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfprof.OpLog {
        return try Tensorflow.Tfprof.OpLog.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "logEntries": return self.logEntries
        default: return nil
        }
    }
}
extension Tensorflow.Tfprof.OpLog.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "logEntries": return self.logEntries
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "logEntries":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.Tfprof.OpLogEntry> else {
                    return
                }
                self.logEntries = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
