/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "quantiles.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct BoostedTrees { }

public extension BoostedTrees {
    public struct QuantilesRoot {
        public static let `default` = QuantilesRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class QuantileConfig : GeneratedMessage {

        public static func == (lhs: BoostedTrees.QuantileConfig, rhs: BoostedTrees.QuantileConfig) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasEps == rhs.hasEps) && (!lhs.hasEps || lhs.eps == rhs.eps)
            fieldCheck = fieldCheck && (lhs.hasNumQuantiles == rhs.hasNumQuantiles) && (!lhs.hasNumQuantiles || lhs.numQuantiles == rhs.numQuantiles)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Maximum eps error when computing quantile summaries.
        public fileprivate(set) var eps:Double = Double(0)
        public fileprivate(set) var hasEps:Bool = false

        /// Number of quantiles to generate.
        public fileprivate(set) var numQuantiles:Int64 = Int64(0)
        public fileprivate(set) var hasNumQuantiles:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasEps {
                try codedOutputStream.writeDouble(fieldNumber: 1, value:eps)
            }
            if hasNumQuantiles {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:numQuantiles)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasEps {
                serialize_size += eps.computeDoubleSize(fieldNumber: 1)
            }
            if hasNumQuantiles {
                serialize_size += numQuantiles.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BoostedTrees.QuantileConfig.Builder {
            return BoostedTrees.QuantileConfig.classBuilder() as! BoostedTrees.QuantileConfig.Builder
        }
        public func getBuilder() -> BoostedTrees.QuantileConfig.Builder {
            return classBuilder() as! BoostedTrees.QuantileConfig.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileConfig.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileConfig.Builder()
        }
        public func toBuilder() throws -> BoostedTrees.QuantileConfig.Builder {
            return try BoostedTrees.QuantileConfig.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BoostedTrees.QuantileConfig) throws -> BoostedTrees.QuantileConfig.Builder {
            return try BoostedTrees.QuantileConfig.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasEps {
                jsonMap["eps"] = Double(eps)
            }
            if hasNumQuantiles {
                jsonMap["numQuantiles"] = "\(numQuantiles)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileConfig {
            return try BoostedTrees.QuantileConfig.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BoostedTrees.QuantileConfig {
            return try BoostedTrees.QuantileConfig.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasEps {
                output += "\(indent) eps: \(eps) \n"
            }
            if hasNumQuantiles {
                output += "\(indent) numQuantiles: \(numQuantiles) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasEps {
                    hashCode = (hashCode &* 31) &+ eps.hashValue
                }
                if hasNumQuantiles {
                    hashCode = (hashCode &* 31) &+ numQuantiles.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BoostedTrees.QuantileConfig"
        }
        override public func className() -> String {
            return "BoostedTrees.QuantileConfig"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BoostedTrees.QuantileConfig = BoostedTrees.QuantileConfig()
            public func getMessage() -> BoostedTrees.QuantileConfig {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Maximum eps error when computing quantile summaries.
            public var eps:Double {
                get {
                    return builderResult.eps
                }
                set (value) {
                    builderResult.hasEps = true
                    builderResult.eps = value
                }
            }
            public var hasEps:Bool {
                get {
                    return builderResult.hasEps
                }
            }
            @discardableResult
            public func setEps(_ value:Double) -> BoostedTrees.QuantileConfig.Builder {
                self.eps = value
                return self
            }
            @discardableResult
            public func clearEps() -> BoostedTrees.QuantileConfig.Builder{
                builderResult.hasEps = false
                builderResult.eps = Double(0)
                return self
            }
            /// Number of quantiles to generate.
            public var numQuantiles:Int64 {
                get {
                    return builderResult.numQuantiles
                }
                set (value) {
                    builderResult.hasNumQuantiles = true
                    builderResult.numQuantiles = value
                }
            }
            public var hasNumQuantiles:Bool {
                get {
                    return builderResult.hasNumQuantiles
                }
            }
            @discardableResult
            public func setNumQuantiles(_ value:Int64) -> BoostedTrees.QuantileConfig.Builder {
                self.numQuantiles = value
                return self
            }
            @discardableResult
            public func clearNumQuantiles() -> BoostedTrees.QuantileConfig.Builder{
                builderResult.hasNumQuantiles = false
                builderResult.numQuantiles = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BoostedTrees.QuantileConfig.Builder {
                builderResult = BoostedTrees.QuantileConfig()
                return self
            }
            override public func clone() throws -> BoostedTrees.QuantileConfig.Builder {
                return try BoostedTrees.QuantileConfig.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BoostedTrees.QuantileConfig {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BoostedTrees.QuantileConfig {
                let returnMe:BoostedTrees.QuantileConfig = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BoostedTrees.QuantileConfig) throws -> BoostedTrees.QuantileConfig.Builder {
                if other == BoostedTrees.QuantileConfig() {
                    return self
                }
                if other.hasEps {
                    eps = other.eps
                }
                if other.hasNumQuantiles {
                    numQuantiles = other.numQuantiles
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileConfig.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileConfig.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 9:
                        eps = try codedInputStream.readDouble()

                    case 16:
                        numQuantiles = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileConfig.Builder {
                let resultDecodedBuilder = BoostedTrees.QuantileConfig.Builder()
                if let jsonValueEps = jsonMap["eps"] as? Double {
                    resultDecodedBuilder.eps = Double(jsonValueEps)
                } else if let jsonValueEps = jsonMap["eps"] as? String {
                    resultDecodedBuilder.eps = Double(jsonValueEps)!
                }
                if let jsonValueNumQuantiles = jsonMap["numQuantiles"] as? String {
                    resultDecodedBuilder.numQuantiles = Int64(jsonValueNumQuantiles)!
                } else if let jsonValueNumQuantiles = jsonMap["numQuantiles"] as? Int {
                    resultDecodedBuilder.numQuantiles = Int64(jsonValueNumQuantiles)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BoostedTrees.QuantileConfig.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BoostedTrees.QuantileConfig.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QuantileEntry : GeneratedMessage {

        public static func == (lhs: BoostedTrees.QuantileEntry, rhs: BoostedTrees.QuantileEntry) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = fieldCheck && (lhs.hasWeight == rhs.hasWeight) && (!lhs.hasWeight || lhs.weight == rhs.weight)
            fieldCheck = fieldCheck && (lhs.hasMinRank == rhs.hasMinRank) && (!lhs.hasMinRank || lhs.minRank == rhs.minRank)
            fieldCheck = fieldCheck && (lhs.hasMaxRank == rhs.hasMaxRank) && (!lhs.hasMaxRank || lhs.maxRank == rhs.maxRank)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Value for the entry.
        public fileprivate(set) var value:Float = Float(0)
        public fileprivate(set) var hasValue:Bool = false

        /// Weight for the entry.
        public fileprivate(set) var weight:Float = Float(0)
        public fileprivate(set) var hasWeight:Bool = false

        /// We need the minimum and maximum rank possible for this entry.
        /// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
        /// value in the input.
        public fileprivate(set) var minRank:Float = Float(0)
        public fileprivate(set) var hasMinRank:Bool = false

        public fileprivate(set) var maxRank:Float = Float(0)
        public fileprivate(set) var hasMaxRank:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeFloat(fieldNumber: 1, value:value)
            }
            if hasWeight {
                try codedOutputStream.writeFloat(fieldNumber: 2, value:weight)
            }
            if hasMinRank {
                try codedOutputStream.writeFloat(fieldNumber: 3, value:minRank)
            }
            if hasMaxRank {
                try codedOutputStream.writeFloat(fieldNumber: 4, value:maxRank)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeFloatSize(fieldNumber: 1)
            }
            if hasWeight {
                serialize_size += weight.computeFloatSize(fieldNumber: 2)
            }
            if hasMinRank {
                serialize_size += minRank.computeFloatSize(fieldNumber: 3)
            }
            if hasMaxRank {
                serialize_size += maxRank.computeFloatSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BoostedTrees.QuantileEntry.Builder {
            return BoostedTrees.QuantileEntry.classBuilder() as! BoostedTrees.QuantileEntry.Builder
        }
        public func getBuilder() -> BoostedTrees.QuantileEntry.Builder {
            return classBuilder() as! BoostedTrees.QuantileEntry.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileEntry.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileEntry.Builder()
        }
        public func toBuilder() throws -> BoostedTrees.QuantileEntry.Builder {
            return try BoostedTrees.QuantileEntry.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BoostedTrees.QuantileEntry) throws -> BoostedTrees.QuantileEntry.Builder {
            return try BoostedTrees.QuantileEntry.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = Float(value)
            }
            if hasWeight {
                jsonMap["weight"] = Float(weight)
            }
            if hasMinRank {
                jsonMap["minRank"] = Float(minRank)
            }
            if hasMaxRank {
                jsonMap["maxRank"] = Float(maxRank)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileEntry {
            return try BoostedTrees.QuantileEntry.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BoostedTrees.QuantileEntry {
            return try BoostedTrees.QuantileEntry.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            if hasWeight {
                output += "\(indent) weight: \(weight) \n"
            }
            if hasMinRank {
                output += "\(indent) minRank: \(minRank) \n"
            }
            if hasMaxRank {
                output += "\(indent) maxRank: \(maxRank) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                if hasWeight {
                    hashCode = (hashCode &* 31) &+ weight.hashValue
                }
                if hasMinRank {
                    hashCode = (hashCode &* 31) &+ minRank.hashValue
                }
                if hasMaxRank {
                    hashCode = (hashCode &* 31) &+ maxRank.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BoostedTrees.QuantileEntry"
        }
        override public func className() -> String {
            return "BoostedTrees.QuantileEntry"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BoostedTrees.QuantileEntry = BoostedTrees.QuantileEntry()
            public func getMessage() -> BoostedTrees.QuantileEntry {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Value for the entry.
            public var value:Float {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:Float) -> BoostedTrees.QuantileEntry.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> BoostedTrees.QuantileEntry.Builder{
                builderResult.hasValue = false
                builderResult.value = Float(0)
                return self
            }
            /// Weight for the entry.
            public var weight:Float {
                get {
                    return builderResult.weight
                }
                set (value) {
                    builderResult.hasWeight = true
                    builderResult.weight = value
                }
            }
            public var hasWeight:Bool {
                get {
                    return builderResult.hasWeight
                }
            }
            @discardableResult
            public func setWeight(_ value:Float) -> BoostedTrees.QuantileEntry.Builder {
                self.weight = value
                return self
            }
            @discardableResult
            public func clearWeight() -> BoostedTrees.QuantileEntry.Builder{
                builderResult.hasWeight = false
                builderResult.weight = Float(0)
                return self
            }
            /// We need the minimum and maximum rank possible for this entry.
            /// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
            /// value in the input.
            public var minRank:Float {
                get {
                    return builderResult.minRank
                }
                set (value) {
                    builderResult.hasMinRank = true
                    builderResult.minRank = value
                }
            }
            public var hasMinRank:Bool {
                get {
                    return builderResult.hasMinRank
                }
            }
            @discardableResult
            public func setMinRank(_ value:Float) -> BoostedTrees.QuantileEntry.Builder {
                self.minRank = value
                return self
            }
            @discardableResult
            public func clearMinRank() -> BoostedTrees.QuantileEntry.Builder{
                builderResult.hasMinRank = false
                builderResult.minRank = Float(0)
                return self
            }
            public var maxRank:Float {
                get {
                    return builderResult.maxRank
                }
                set (value) {
                    builderResult.hasMaxRank = true
                    builderResult.maxRank = value
                }
            }
            public var hasMaxRank:Bool {
                get {
                    return builderResult.hasMaxRank
                }
            }
            @discardableResult
            public func setMaxRank(_ value:Float) -> BoostedTrees.QuantileEntry.Builder {
                self.maxRank = value
                return self
            }
            @discardableResult
            public func clearMaxRank() -> BoostedTrees.QuantileEntry.Builder{
                builderResult.hasMaxRank = false
                builderResult.maxRank = Float(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BoostedTrees.QuantileEntry.Builder {
                builderResult = BoostedTrees.QuantileEntry()
                return self
            }
            override public func clone() throws -> BoostedTrees.QuantileEntry.Builder {
                return try BoostedTrees.QuantileEntry.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BoostedTrees.QuantileEntry {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BoostedTrees.QuantileEntry {
                let returnMe:BoostedTrees.QuantileEntry = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BoostedTrees.QuantileEntry) throws -> BoostedTrees.QuantileEntry.Builder {
                if other == BoostedTrees.QuantileEntry() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                if other.hasWeight {
                    weight = other.weight
                }
                if other.hasMinRank {
                    minRank = other.minRank
                }
                if other.hasMaxRank {
                    maxRank = other.maxRank
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileEntry.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileEntry.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 13:
                        value = try codedInputStream.readFloat()

                    case 21:
                        weight = try codedInputStream.readFloat()

                    case 29:
                        minRank = try codedInputStream.readFloat()

                    case 37:
                        maxRank = try codedInputStream.readFloat()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileEntry.Builder {
                let resultDecodedBuilder = BoostedTrees.QuantileEntry.Builder()
                if let jsonValueValue = jsonMap["value"] as? Float {
                    resultDecodedBuilder.value = Float(jsonValueValue)
                } else if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = Float(jsonValueValue)!
                }
                if let jsonValueWeight = jsonMap["weight"] as? Float {
                    resultDecodedBuilder.weight = Float(jsonValueWeight)
                } else if let jsonValueWeight = jsonMap["weight"] as? String {
                    resultDecodedBuilder.weight = Float(jsonValueWeight)!
                }
                if let jsonValueMinRank = jsonMap["minRank"] as? Float {
                    resultDecodedBuilder.minRank = Float(jsonValueMinRank)
                } else if let jsonValueMinRank = jsonMap["minRank"] as? String {
                    resultDecodedBuilder.minRank = Float(jsonValueMinRank)!
                }
                if let jsonValueMaxRank = jsonMap["maxRank"] as? Float {
                    resultDecodedBuilder.maxRank = Float(jsonValueMaxRank)
                } else if let jsonValueMaxRank = jsonMap["maxRank"] as? String {
                    resultDecodedBuilder.maxRank = Float(jsonValueMaxRank)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BoostedTrees.QuantileEntry.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BoostedTrees.QuantileEntry.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QuantileSummaryState : GeneratedMessage {

        public static func == (lhs: BoostedTrees.QuantileSummaryState, rhs: BoostedTrees.QuantileSummaryState) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.entries == rhs.entries)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var entries:Array<BoostedTrees.QuantileEntry>  = Array<BoostedTrees.QuantileEntry>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementEntries in entries {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementEntries)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementEntries in entries {
                serialize_size += oneElementEntries.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BoostedTrees.QuantileSummaryState.Builder {
            return BoostedTrees.QuantileSummaryState.classBuilder() as! BoostedTrees.QuantileSummaryState.Builder
        }
        public func getBuilder() -> BoostedTrees.QuantileSummaryState.Builder {
            return classBuilder() as! BoostedTrees.QuantileSummaryState.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileSummaryState.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileSummaryState.Builder()
        }
        public func toBuilder() throws -> BoostedTrees.QuantileSummaryState.Builder {
            return try BoostedTrees.QuantileSummaryState.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BoostedTrees.QuantileSummaryState) throws -> BoostedTrees.QuantileSummaryState.Builder {
            return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !entries.isEmpty {
                var jsonArrayEntries:Array<Dictionary<String,Any>> = []
                for oneValueEntries in entries {
                    let ecodedMessageEntries = try oneValueEntries.encode()
                    jsonArrayEntries.append(ecodedMessageEntries)
                }
                jsonMap["entries"] = jsonArrayEntries
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileSummaryState {
            return try BoostedTrees.QuantileSummaryState.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BoostedTrees.QuantileSummaryState {
            return try BoostedTrees.QuantileSummaryState.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var entriesElementIndex:Int = 0
            for oneElementEntries in entries {
                output += "\(indent) entries[\(entriesElementIndex)] {\n"
                output += try oneElementEntries.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                entriesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementEntries in entries {
                    hashCode = (hashCode &* 31) &+ oneElementEntries.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BoostedTrees.QuantileSummaryState"
        }
        override public func className() -> String {
            return "BoostedTrees.QuantileSummaryState"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BoostedTrees.QuantileSummaryState = BoostedTrees.QuantileSummaryState()
            public func getMessage() -> BoostedTrees.QuantileSummaryState {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var entries:Array<BoostedTrees.QuantileEntry> {
                get {
                    return builderResult.entries
                }
                set (value) {
                    builderResult.entries = value
                }
            }
            @discardableResult
            public func setEntries(_ value:Array<BoostedTrees.QuantileEntry>) -> BoostedTrees.QuantileSummaryState.Builder {
                self.entries = value
                return self
            }
            @discardableResult
            public func clearEntries() -> BoostedTrees.QuantileSummaryState.Builder {
                builderResult.entries.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BoostedTrees.QuantileSummaryState.Builder {
                builderResult = BoostedTrees.QuantileSummaryState()
                return self
            }
            override public func clone() throws -> BoostedTrees.QuantileSummaryState.Builder {
                return try BoostedTrees.QuantileSummaryState.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BoostedTrees.QuantileSummaryState {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BoostedTrees.QuantileSummaryState {
                let returnMe:BoostedTrees.QuantileSummaryState = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BoostedTrees.QuantileSummaryState) throws -> BoostedTrees.QuantileSummaryState.Builder {
                if other == BoostedTrees.QuantileSummaryState() {
                    return self
                }
                if !other.entries.isEmpty  {
                     builderResult.entries += other.entries
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileSummaryState.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileSummaryState.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = BoostedTrees.QuantileEntry.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        entries.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileSummaryState.Builder {
                let resultDecodedBuilder = BoostedTrees.QuantileSummaryState.Builder()
                if let jsonValueEntries = jsonMap["entries"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayEntries:Array<BoostedTrees.QuantileEntry> = []
                    for oneValueEntries in jsonValueEntries {
                        let messageFromStringEntries = try BoostedTrees.QuantileEntry.Builder.decodeToBuilder(jsonMap:oneValueEntries).build()

                        jsonArrayEntries.append(messageFromStringEntries)
                    }
                    resultDecodedBuilder.entries = jsonArrayEntries
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BoostedTrees.QuantileSummaryState.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BoostedTrees.QuantileSummaryState.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class QuantileStreamState : GeneratedMessage {

        public static func == (lhs: BoostedTrees.QuantileStreamState, rhs: BoostedTrees.QuantileStreamState) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.summaries == rhs.summaries)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var summaries:Array<BoostedTrees.QuantileSummaryState>  = Array<BoostedTrees.QuantileSummaryState>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementSummaries in summaries {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementSummaries)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementSummaries in summaries {
                serialize_size += oneElementSummaries.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BoostedTrees.QuantileStreamState.Builder {
            return BoostedTrees.QuantileStreamState.classBuilder() as! BoostedTrees.QuantileStreamState.Builder
        }
        public func getBuilder() -> BoostedTrees.QuantileStreamState.Builder {
            return classBuilder() as! BoostedTrees.QuantileStreamState.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileStreamState.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BoostedTrees.QuantileStreamState.Builder()
        }
        public func toBuilder() throws -> BoostedTrees.QuantileStreamState.Builder {
            return try BoostedTrees.QuantileStreamState.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BoostedTrees.QuantileStreamState) throws -> BoostedTrees.QuantileStreamState.Builder {
            return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !summaries.isEmpty {
                var jsonArraySummaries:Array<Dictionary<String,Any>> = []
                for oneValueSummaries in summaries {
                    let ecodedMessageSummaries = try oneValueSummaries.encode()
                    jsonArraySummaries.append(ecodedMessageSummaries)
                }
                jsonMap["summaries"] = jsonArraySummaries
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileStreamState {
            return try BoostedTrees.QuantileStreamState.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BoostedTrees.QuantileStreamState {
            return try BoostedTrees.QuantileStreamState.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var summariesElementIndex:Int = 0
            for oneElementSummaries in summaries {
                output += "\(indent) summaries[\(summariesElementIndex)] {\n"
                output += try oneElementSummaries.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                summariesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementSummaries in summaries {
                    hashCode = (hashCode &* 31) &+ oneElementSummaries.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BoostedTrees.QuantileStreamState"
        }
        override public func className() -> String {
            return "BoostedTrees.QuantileStreamState"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BoostedTrees.QuantileStreamState = BoostedTrees.QuantileStreamState()
            public func getMessage() -> BoostedTrees.QuantileStreamState {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var summaries:Array<BoostedTrees.QuantileSummaryState> {
                get {
                    return builderResult.summaries
                }
                set (value) {
                    builderResult.summaries = value
                }
            }
            @discardableResult
            public func setSummaries(_ value:Array<BoostedTrees.QuantileSummaryState>) -> BoostedTrees.QuantileStreamState.Builder {
                self.summaries = value
                return self
            }
            @discardableResult
            public func clearSummaries() -> BoostedTrees.QuantileStreamState.Builder {
                builderResult.summaries.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BoostedTrees.QuantileStreamState.Builder {
                builderResult = BoostedTrees.QuantileStreamState()
                return self
            }
            override public func clone() throws -> BoostedTrees.QuantileStreamState.Builder {
                return try BoostedTrees.QuantileStreamState.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BoostedTrees.QuantileStreamState {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BoostedTrees.QuantileStreamState {
                let returnMe:BoostedTrees.QuantileStreamState = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BoostedTrees.QuantileStreamState) throws -> BoostedTrees.QuantileStreamState.Builder {
                if other == BoostedTrees.QuantileStreamState() {
                    return self
                }
                if !other.summaries.isEmpty  {
                     builderResult.summaries += other.summaries
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileStreamState.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileStreamState.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = BoostedTrees.QuantileSummaryState.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        summaries.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BoostedTrees.QuantileStreamState.Builder {
                let resultDecodedBuilder = BoostedTrees.QuantileStreamState.Builder()
                if let jsonValueSummaries = jsonMap["summaries"] as? Array<Dictionary<String,Any>> {
                    var jsonArraySummaries:Array<BoostedTrees.QuantileSummaryState> = []
                    for oneValueSummaries in jsonValueSummaries {
                        let messageFromStringSummaries = try BoostedTrees.QuantileSummaryState.Builder.decodeToBuilder(jsonMap:oneValueSummaries).build()

                        jsonArraySummaries.append(messageFromStringSummaries)
                    }
                    resultDecodedBuilder.summaries = jsonArraySummaries
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BoostedTrees.QuantileStreamState.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BoostedTrees.QuantileStreamState.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension BoostedTrees.QuantileConfig: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BoostedTrees.QuantileConfig> {
        var mergedArray = Array<BoostedTrees.QuantileConfig>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileConfig? {
        return try BoostedTrees.QuantileConfig.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(data: data, extensionRegistry:BoostedTrees.QuantilesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileConfig {
        return try BoostedTrees.QuantileConfig.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "eps": return self.eps
        case "numQuantiles": return self.numQuantiles
        default: return nil
        }
    }
}
extension BoostedTrees.QuantileConfig.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "eps": return self.eps
            case "numQuantiles": return self.numQuantiles
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "eps":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.eps = newSubscriptValue
            case "numQuantiles":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.numQuantiles = newSubscriptValue
            default: return
            }
        }
    }
}
extension BoostedTrees.QuantileEntry: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BoostedTrees.QuantileEntry> {
        var mergedArray = Array<BoostedTrees.QuantileEntry>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileEntry? {
        return try BoostedTrees.QuantileEntry.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(data: data, extensionRegistry:BoostedTrees.QuantilesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileEntry {
        return try BoostedTrees.QuantileEntry.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        case "weight": return self.weight
        case "minRank": return self.minRank
        case "maxRank": return self.maxRank
        default: return nil
        }
    }
}
extension BoostedTrees.QuantileEntry.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            case "weight": return self.weight
            case "minRank": return self.minRank
            case "maxRank": return self.maxRank
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.value = newSubscriptValue
            case "weight":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.weight = newSubscriptValue
            case "minRank":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.minRank = newSubscriptValue
            case "maxRank":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.maxRank = newSubscriptValue
            default: return
            }
        }
    }
}
extension BoostedTrees.QuantileSummaryState: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BoostedTrees.QuantileSummaryState> {
        var mergedArray = Array<BoostedTrees.QuantileSummaryState>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileSummaryState? {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(data: data, extensionRegistry:BoostedTrees.QuantilesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileSummaryState {
        return try BoostedTrees.QuantileSummaryState.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "entries": return self.entries
        default: return nil
        }
    }
}
extension BoostedTrees.QuantileSummaryState.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "entries": return self.entries
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "entries":
                guard let newSubscriptValue = newSubscriptValue as? Array<BoostedTrees.QuantileEntry> else {
                    return
                }
                self.entries = newSubscriptValue
            default: return
            }
        }
    }
}
extension BoostedTrees.QuantileStreamState: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BoostedTrees.QuantileStreamState> {
        var mergedArray = Array<BoostedTrees.QuantileStreamState>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileStreamState? {
        return try BoostedTrees.QuantileStreamState.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(data: data, extensionRegistry:BoostedTrees.QuantilesRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BoostedTrees.QuantileStreamState {
        return try BoostedTrees.QuantileStreamState.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "summaries": return self.summaries
        default: return nil
        }
    }
}
extension BoostedTrees.QuantileStreamState.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "summaries": return self.summaries
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "summaries":
                guard let newSubscriptValue = newSubscriptValue as? Array<BoostedTrees.QuantileSummaryState> else {
                    return
                }
                self.summaries = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
