/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "remote_fused_graph_execute_info.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct RemoteFusedGraphExecuteInfoRoot {
        public static let `default` = RemoteFusedGraphExecuteInfoRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.GraphRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TypesRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Protocol buffer representing a handle to a tensorflow resource. Handles are
    /// not valid across executions, but can be serialized back and forth from within
    /// a single run.
    final public class RemoteFusedGraphExecuteInfo : GeneratedMessage {

        public static func == (lhs: Tensorflow.RemoteFusedGraphExecuteInfo, rhs: Tensorflow.RemoteFusedGraphExecuteInfo) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasRemoteGraph == rhs.hasRemoteGraph) && (!lhs.hasRemoteGraph || lhs.remoteGraph == rhs.remoteGraph)
            fieldCheck = fieldCheck && (lhs.graphInputNodeName == rhs.graphInputNodeName)
            fieldCheck = fieldCheck && (lhs.graphOutputNodeName == rhs.graphOutputNodeName)
            fieldCheck = fieldCheck && (lhs.hasExecutorName == rhs.hasExecutorName) && (!lhs.hasExecutorName || lhs.executorName == rhs.executorName)
            fieldCheck = fieldCheck && (lhs.hasSerializedExecutorParameters == rhs.hasSerializedExecutorParameters) && (!lhs.hasSerializedExecutorParameters || lhs.serializedExecutorParameters == rhs.serializedExecutorParameters)
            fieldCheck = fieldCheck && (lhs.defaultGraphInputTensorShape == rhs.defaultGraphInputTensorShape)
            fieldCheck = fieldCheck && (lhs.defaultGraphOutputTensorShape == rhs.defaultGraphOutputTensorShape)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class TensorShapeTypeProto : GeneratedMessage {

            public static func == (lhs: Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto, rhs: Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasDtype == rhs.hasDtype) && (!lhs.hasDtype || lhs.dtype == rhs.dtype)
                fieldCheck = fieldCheck && (lhs.hasShape == rhs.hasShape) && (!lhs.hasShape || lhs.shape == rhs.shape)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }

            public fileprivate(set) var dtype:Tensorflow.DataType = Tensorflow.DataType.dtInvalid
            public fileprivate(set) var hasDtype:Bool = false
            public fileprivate(set) var shape:Tensorflow.TensorShapeProto!
            public fileprivate(set) var hasShape:Bool = false
            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasDtype {
                    try codedOutputStream.writeEnum(fieldNumber: 1, value:dtype.rawValue)
                }
                if hasShape {
                    try codedOutputStream.writeMessage(fieldNumber: 2, value:shape)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if (hasDtype) {
                    serialize_size += dtype.rawValue.computeEnumSize(fieldNumber: 1)
                }
                if hasShape {
                    if let varSizeshape = shape?.computeMessageSize(fieldNumber: 2) {
                        serialize_size += varSizeshape
                    }
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                return Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.classBuilder() as! Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder
            }
            public func getBuilder() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                return classBuilder() as! Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder()
            }
            public func toBuilder() throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasDtype {
                    jsonMap["dtype"] = dtype.toString()
                }
                if hasShape {
                    jsonMap["shape"] = try shape.encode()
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
                return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
                return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if (hasDtype) {
                    output += "\(indent) dtype: \(dtype.description)\n"
                }
                if hasShape {
                    output += "\(indent) shape {\n"
                    if let outDescShape = shape {
                        output += try outDescShape.getDescription(indent: "\(indent)  ")
                    }
                    output += "\(indent) }\n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasDtype {
                         hashCode = (hashCode &* 31) &+ dtype.hashValue
                    }
                    if hasShape {
                        if let hashValueshape = shape?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValueshape
                        }
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto"
            }
            override public func className() -> String {
                return "Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto = Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto()
                public func getMessage() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                    public var dtype:Tensorflow.DataType {
                        get {
                            return builderResult.dtype
                        }
                        set (value) {
                            builderResult.hasDtype = true
                            builderResult.dtype = value
                        }
                    }
                    public var hasDtype:Bool{
                        get {
                            return builderResult.hasDtype
                        }
                    }
                @discardableResult
                    public func setDtype(_ value:Tensorflow.DataType) -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                      self.dtype = value
                      return self
                    }
                @discardableResult
                    public func clearDtype() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                       builderResult.hasDtype = false
                       builderResult.dtype = .dtInvalid
                       return self
                    }
                public var shape:Tensorflow.TensorShapeProto! {
                    get {
                        if shapeBuilder_ != nil {
                            builderResult.shape = shapeBuilder_.getMessage()
                        }
                        return builderResult.shape
                    }
                    set (value) {
                        builderResult.hasShape = true
                        builderResult.shape = value
                    }
                }
                public var hasShape:Bool {
                    get {
                        return builderResult.hasShape
                    }
                }
                fileprivate var shapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                    didSet {
                        builderResult.hasShape = true
                    }
                }
                public func getShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                    if shapeBuilder_ == nil {
                        shapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                        builderResult.shape = shapeBuilder_.getMessage()
                        if shape != nil {
                            try! shapeBuilder_.mergeFrom(other: shape)
                        }
                    }
                    return shapeBuilder_
                }
                @discardableResult
                public func setShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    self.shape = value
                    return self
                }
                @discardableResult
                public func mergeShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    if builderResult.hasShape {
                        builderResult.shape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.shape).mergeFrom(other: value).buildPartial()
                    } else {
                        builderResult.shape = value
                    }
                    builderResult.hasShape = true
                    return self
                }
                @discardableResult
                public func clearShape() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    shapeBuilder_ = nil
                    builderResult.hasShape = false
                    builderResult.shape = nil
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    builderResult = Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto()
                    return self
                }
                override public func clone() throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
                    let returnMe:Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    if other == Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto() {
                        return self
                    }
                    if other.hasDtype {
                        dtype = other.dtype
                    }
                    if (other.hasShape) {
                        try mergeShape(value: other.shape)
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            let valueIntdtype = try codedInputStream.readEnum()
                            if let enumsdtype = Tensorflow.DataType(rawValue:valueIntdtype){
                                dtype = enumsdtype
                            } else {
                                try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntdtype))
                            }

                        case 18:
                            let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                            if hasShape {
                                try subBuilder.mergeFrom(other: shape)
                            }
                            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                            shape = subBuilder.buildPartial()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    let resultDecodedBuilder = Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder()
                    if let jsonValueDtype = jsonMap["dtype"] as? String {
                        resultDecodedBuilder.dtype = try Tensorflow.DataType.fromString(str: jsonValueDtype)
                    }
                    if let jsonValueShape = jsonMap["shape"] as? Dictionary<String,Any> {
                        resultDecodedBuilder.shape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueShape).build()

                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        public fileprivate(set) var remoteGraph:Tensorflow.GraphDef!
        public fileprivate(set) var hasRemoteGraph:Bool = false
        /// Remote fused graph input node name
        public fileprivate(set) var graphInputNodeName:Array<String> = Array<String>()
        /// Remote fused graph output node name
        public fileprivate(set) var graphOutputNodeName:Array<String> = Array<String>()
        /// Executor's name
        public fileprivate(set) var executorName:String = ""
        public fileprivate(set) var hasExecutorName:Bool = false

        /// Optional: Parameters given to the executor
        public fileprivate(set) var serializedExecutorParameters:Data = Data()
        public fileprivate(set) var hasSerializedExecutorParameters:Bool = false

        public fileprivate(set) var defaultGraphInputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>  = Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>()
        public fileprivate(set) var defaultGraphOutputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>  = Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasRemoteGraph {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:remoteGraph)
            }
            if !graphInputNodeName.isEmpty {
                for oneValuegraphInputNodeName in graphInputNodeName {
                    try codedOutputStream.writeString(fieldNumber: 2, value:oneValuegraphInputNodeName)
                }
            }
            if !graphOutputNodeName.isEmpty {
                for oneValuegraphOutputNodeName in graphOutputNodeName {
                    try codedOutputStream.writeString(fieldNumber: 3, value:oneValuegraphOutputNodeName)
                }
            }
            if hasExecutorName {
                try codedOutputStream.writeString(fieldNumber: 4, value:executorName)
            }
            if hasSerializedExecutorParameters {
                try codedOutputStream.writeData(fieldNumber: 5, value:serializedExecutorParameters)
            }
            for oneElementDefaultGraphInputTensorShape in defaultGraphInputTensorShape {
                  try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementDefaultGraphInputTensorShape)
            }
            for oneElementDefaultGraphOutputTensorShape in defaultGraphOutputTensorShape {
                  try codedOutputStream.writeMessage(fieldNumber: 7, value:oneElementDefaultGraphOutputTensorShape)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasRemoteGraph {
                if let varSizeremoteGraph = remoteGraph?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeremoteGraph
                }
            }
            var dataSizeGraphInputNodeName:Int32 = 0
            for oneValuegraphInputNodeName in graphInputNodeName {
                dataSizeGraphInputNodeName += oneValuegraphInputNodeName.computeStringSizeNoTag()
            }
            serialize_size += dataSizeGraphInputNodeName
            serialize_size += 1 * Int32(graphInputNodeName.count)
            var dataSizeGraphOutputNodeName:Int32 = 0
            for oneValuegraphOutputNodeName in graphOutputNodeName {
                dataSizeGraphOutputNodeName += oneValuegraphOutputNodeName.computeStringSizeNoTag()
            }
            serialize_size += dataSizeGraphOutputNodeName
            serialize_size += 1 * Int32(graphOutputNodeName.count)
            if hasExecutorName {
                serialize_size += executorName.computeStringSize(fieldNumber: 4)
            }
            if hasSerializedExecutorParameters {
                serialize_size += serializedExecutorParameters.computeDataSize(fieldNumber: 5)
            }
            for oneElementDefaultGraphInputTensorShape in defaultGraphInputTensorShape {
                serialize_size += oneElementDefaultGraphInputTensorShape.computeMessageSize(fieldNumber: 6)
            }
            for oneElementDefaultGraphOutputTensorShape in defaultGraphOutputTensorShape {
                serialize_size += oneElementDefaultGraphOutputTensorShape.computeMessageSize(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
            return Tensorflow.RemoteFusedGraphExecuteInfo.classBuilder() as! Tensorflow.RemoteFusedGraphExecuteInfo.Builder
        }
        public func getBuilder() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
            return classBuilder() as! Tensorflow.RemoteFusedGraphExecuteInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.RemoteFusedGraphExecuteInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.RemoteFusedGraphExecuteInfo.Builder()
        }
        public func toBuilder() throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
            return try Tensorflow.RemoteFusedGraphExecuteInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.RemoteFusedGraphExecuteInfo) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
            return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasRemoteGraph {
                jsonMap["remoteGraph"] = try remoteGraph.encode()
            }
            if !graphInputNodeName.isEmpty {
                var jsonArrayGraphInputNodeName:Array<String> = []
                for oneValueGraphInputNodeName in graphInputNodeName {
                    jsonArrayGraphInputNodeName.append(oneValueGraphInputNodeName)
                }
                jsonMap["graphInputNodeName"] = jsonArrayGraphInputNodeName
            }
            if !graphOutputNodeName.isEmpty {
                var jsonArrayGraphOutputNodeName:Array<String> = []
                for oneValueGraphOutputNodeName in graphOutputNodeName {
                    jsonArrayGraphOutputNodeName.append(oneValueGraphOutputNodeName)
                }
                jsonMap["graphOutputNodeName"] = jsonArrayGraphOutputNodeName
            }
            if hasExecutorName {
                jsonMap["executorName"] = executorName
            }
            if hasSerializedExecutorParameters {
                jsonMap["serializedExecutorParameters"] = serializedExecutorParameters.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            if !defaultGraphInputTensorShape.isEmpty {
                var jsonArrayDefaultGraphInputTensorShape:Array<Dictionary<String,Any>> = []
                for oneValueDefaultGraphInputTensorShape in defaultGraphInputTensorShape {
                    let ecodedMessageDefaultGraphInputTensorShape = try oneValueDefaultGraphInputTensorShape.encode()
                    jsonArrayDefaultGraphInputTensorShape.append(ecodedMessageDefaultGraphInputTensorShape)
                }
                jsonMap["defaultGraphInputTensorShape"] = jsonArrayDefaultGraphInputTensorShape
            }
            if !defaultGraphOutputTensorShape.isEmpty {
                var jsonArrayDefaultGraphOutputTensorShape:Array<Dictionary<String,Any>> = []
                for oneValueDefaultGraphOutputTensorShape in defaultGraphOutputTensorShape {
                    let ecodedMessageDefaultGraphOutputTensorShape = try oneValueDefaultGraphOutputTensorShape.encode()
                    jsonArrayDefaultGraphOutputTensorShape.append(ecodedMessageDefaultGraphOutputTensorShape)
                }
                jsonMap["defaultGraphOutputTensorShape"] = jsonArrayDefaultGraphOutputTensorShape
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
            return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
            return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasRemoteGraph {
                output += "\(indent) remoteGraph {\n"
                if let outDescRemoteGraph = remoteGraph {
                    output += try outDescRemoteGraph.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            var graphInputNodeNameElementIndex:Int = 0
            for oneValueGraphInputNodeName in graphInputNodeName  {
                output += "\(indent) graphInputNodeName[\(graphInputNodeNameElementIndex)]: \(oneValueGraphInputNodeName)\n"
                graphInputNodeNameElementIndex += 1
            }
            var graphOutputNodeNameElementIndex:Int = 0
            for oneValueGraphOutputNodeName in graphOutputNodeName  {
                output += "\(indent) graphOutputNodeName[\(graphOutputNodeNameElementIndex)]: \(oneValueGraphOutputNodeName)\n"
                graphOutputNodeNameElementIndex += 1
            }
            if hasExecutorName {
                output += "\(indent) executorName: \(executorName) \n"
            }
            if hasSerializedExecutorParameters {
                output += "\(indent) serializedExecutorParameters: \(serializedExecutorParameters) \n"
            }
            var defaultGraphInputTensorShapeElementIndex:Int = 0
            for oneElementDefaultGraphInputTensorShape in defaultGraphInputTensorShape {
                output += "\(indent) defaultGraphInputTensorShape[\(defaultGraphInputTensorShapeElementIndex)] {\n"
                output += try oneElementDefaultGraphInputTensorShape.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                defaultGraphInputTensorShapeElementIndex += 1
            }
            var defaultGraphOutputTensorShapeElementIndex:Int = 0
            for oneElementDefaultGraphOutputTensorShape in defaultGraphOutputTensorShape {
                output += "\(indent) defaultGraphOutputTensorShape[\(defaultGraphOutputTensorShapeElementIndex)] {\n"
                output += try oneElementDefaultGraphOutputTensorShape.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                defaultGraphOutputTensorShapeElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRemoteGraph {
                    if let hashValueremoteGraph = remoteGraph?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueremoteGraph
                    }
                }
                for oneValueGraphInputNodeName in graphInputNodeName {
                    hashCode = (hashCode &* 31) &+ oneValueGraphInputNodeName.hashValue
                }
                for oneValueGraphOutputNodeName in graphOutputNodeName {
                    hashCode = (hashCode &* 31) &+ oneValueGraphOutputNodeName.hashValue
                }
                if hasExecutorName {
                    hashCode = (hashCode &* 31) &+ executorName.hashValue
                }
                if hasSerializedExecutorParameters {
                    hashCode = (hashCode &* 31) &+ serializedExecutorParameters.hashValue
                }
                for oneElementDefaultGraphInputTensorShape in defaultGraphInputTensorShape {
                    hashCode = (hashCode &* 31) &+ oneElementDefaultGraphInputTensorShape.hashValue
                }
                for oneElementDefaultGraphOutputTensorShape in defaultGraphOutputTensorShape {
                    hashCode = (hashCode &* 31) &+ oneElementDefaultGraphOutputTensorShape.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.RemoteFusedGraphExecuteInfo"
        }
        override public func className() -> String {
            return "Tensorflow.RemoteFusedGraphExecuteInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.RemoteFusedGraphExecuteInfo = Tensorflow.RemoteFusedGraphExecuteInfo()
            public func getMessage() -> Tensorflow.RemoteFusedGraphExecuteInfo {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Definition of remote graph
            public var remoteGraph:Tensorflow.GraphDef! {
                get {
                    if remoteGraphBuilder_ != nil {
                        builderResult.remoteGraph = remoteGraphBuilder_.getMessage()
                    }
                    return builderResult.remoteGraph
                }
                set (value) {
                    builderResult.hasRemoteGraph = true
                    builderResult.remoteGraph = value
                }
            }
            public var hasRemoteGraph:Bool {
                get {
                    return builderResult.hasRemoteGraph
                }
            }
            fileprivate var remoteGraphBuilder_:Tensorflow.GraphDef.Builder! {
                didSet {
                    builderResult.hasRemoteGraph = true
                }
            }
            public func getRemoteGraphBuilder() -> Tensorflow.GraphDef.Builder {
                if remoteGraphBuilder_ == nil {
                    remoteGraphBuilder_ = Tensorflow.GraphDef.Builder()
                    builderResult.remoteGraph = remoteGraphBuilder_.getMessage()
                    if remoteGraph != nil {
                        try! remoteGraphBuilder_.mergeFrom(other: remoteGraph)
                    }
                }
                return remoteGraphBuilder_
            }
            @discardableResult
            public func setRemoteGraph(_ value:Tensorflow.GraphDef!) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.remoteGraph = value
                return self
            }
            @discardableResult
            public func mergeRemoteGraph(value:Tensorflow.GraphDef) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                if builderResult.hasRemoteGraph {
                    builderResult.remoteGraph = try Tensorflow.GraphDef.builderWithPrototype(prototype:builderResult.remoteGraph).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.remoteGraph = value
                }
                builderResult.hasRemoteGraph = true
                return self
            }
            @discardableResult
            public func clearRemoteGraph() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                remoteGraphBuilder_ = nil
                builderResult.hasRemoteGraph = false
                builderResult.remoteGraph = nil
                return self
            }
            /// Remote fused graph input node name
            public var graphInputNodeName:Array<String> {
                get {
                    return builderResult.graphInputNodeName
                }
                set (array) {
                    builderResult.graphInputNodeName = array
                }
            }
            @discardableResult
            public func setGraphInputNodeName(_ value:Array<String>) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.graphInputNodeName = value
                return self
            }
            @discardableResult
            public func clearGraphInputNodeName() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                builderResult.graphInputNodeName.removeAll(keepingCapacity: false)
                return self
            }
            /// Remote fused graph output node name
            public var graphOutputNodeName:Array<String> {
                get {
                    return builderResult.graphOutputNodeName
                }
                set (array) {
                    builderResult.graphOutputNodeName = array
                }
            }
            @discardableResult
            public func setGraphOutputNodeName(_ value:Array<String>) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.graphOutputNodeName = value
                return self
            }
            @discardableResult
            public func clearGraphOutputNodeName() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                builderResult.graphOutputNodeName.removeAll(keepingCapacity: false)
                return self
            }
            /// Executor's name
            public var executorName:String {
                get {
                    return builderResult.executorName
                }
                set (value) {
                    builderResult.hasExecutorName = true
                    builderResult.executorName = value
                }
            }
            public var hasExecutorName:Bool {
                get {
                    return builderResult.hasExecutorName
                }
            }
            @discardableResult
            public func setExecutorName(_ value:String) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.executorName = value
                return self
            }
            @discardableResult
            public func clearExecutorName() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder{
                builderResult.hasExecutorName = false
                builderResult.executorName = ""
                return self
            }
            /// Optional: Parameters given to the executor
            public var serializedExecutorParameters:Data {
                get {
                    return builderResult.serializedExecutorParameters
                }
                set (value) {
                    builderResult.hasSerializedExecutorParameters = true
                    builderResult.serializedExecutorParameters = value
                }
            }
            public var hasSerializedExecutorParameters:Bool {
                get {
                    return builderResult.hasSerializedExecutorParameters
                }
            }
            @discardableResult
            public func setSerializedExecutorParameters(_ value:Data) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.serializedExecutorParameters = value
                return self
            }
            @discardableResult
            public func clearSerializedExecutorParameters() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder{
                builderResult.hasSerializedExecutorParameters = false
                builderResult.serializedExecutorParameters = Data()
                return self
            }
            /// Optional: Default graph input tensor shape used to allocate memory
            /// before executing op
            public var defaultGraphInputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> {
                get {
                    return builderResult.defaultGraphInputTensorShape
                }
                set (value) {
                    builderResult.defaultGraphInputTensorShape = value
                }
            }
            @discardableResult
            public func setDefaultGraphInputTensorShape(_ value:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.defaultGraphInputTensorShape = value
                return self
            }
            @discardableResult
            public func clearDefaultGraphInputTensorShape() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                builderResult.defaultGraphInputTensorShape.removeAll(keepingCapacity: false)
                return self
            }
            /// Optional: Default graph input tensor shape used to allocate memory
            /// before executing op
            /// TODO(satok): Remote output tensor shape once shape information is stored
            /// in NodeDef
            public var defaultGraphOutputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> {
                get {
                    return builderResult.defaultGraphOutputTensorShape
                }
                set (value) {
                    builderResult.defaultGraphOutputTensorShape = value
                }
            }
            @discardableResult
            public func setDefaultGraphOutputTensorShape(_ value:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>) -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                self.defaultGraphOutputTensorShape = value
                return self
            }
            @discardableResult
            public func clearDefaultGraphOutputTensorShape() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                builderResult.defaultGraphOutputTensorShape.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                builderResult = Tensorflow.RemoteFusedGraphExecuteInfo()
                return self
            }
            override public func clone() throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                return try Tensorflow.RemoteFusedGraphExecuteInfo.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.RemoteFusedGraphExecuteInfo {
                let returnMe:Tensorflow.RemoteFusedGraphExecuteInfo = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.RemoteFusedGraphExecuteInfo) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                if other == Tensorflow.RemoteFusedGraphExecuteInfo() {
                    return self
                }
                if (other.hasRemoteGraph) {
                    try mergeRemoteGraph(value: other.remoteGraph)
                }
                if !other.graphInputNodeName.isEmpty {
                    builderResult.graphInputNodeName += other.graphInputNodeName
                }
                if !other.graphOutputNodeName.isEmpty {
                    builderResult.graphOutputNodeName += other.graphOutputNodeName
                }
                if other.hasExecutorName {
                    executorName = other.executorName
                }
                if other.hasSerializedExecutorParameters {
                    serializedExecutorParameters = other.serializedExecutorParameters
                }
                if !other.defaultGraphInputTensorShape.isEmpty  {
                     builderResult.defaultGraphInputTensorShape += other.defaultGraphInputTensorShape
                }
                if !other.defaultGraphOutputTensorShape.isEmpty  {
                     builderResult.defaultGraphOutputTensorShape += other.defaultGraphOutputTensorShape
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.GraphDef.Builder = Tensorflow.GraphDef.Builder()
                        if hasRemoteGraph {
                            try subBuilder.mergeFrom(other: remoteGraph)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        remoteGraph = subBuilder.buildPartial()

                    case 18:
                        graphInputNodeName += [try codedInputStream.readString()]

                    case 26:
                        graphOutputNodeName += [try codedInputStream.readString()]

                    case 34:
                        executorName = try codedInputStream.readString()

                    case 42:
                        serializedExecutorParameters = try codedInputStream.readData()

                    case 50:
                        let subBuilder = Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        defaultGraphInputTensorShape.append(subBuilder.buildPartial())

                    case 58:
                        let subBuilder = Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        defaultGraphOutputTensorShape.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                let resultDecodedBuilder = Tensorflow.RemoteFusedGraphExecuteInfo.Builder()
                if let jsonValueRemoteGraph = jsonMap["remoteGraph"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.remoteGraph = try Tensorflow.GraphDef.Builder.decodeToBuilder(jsonMap:jsonValueRemoteGraph).build()

                }
                if let jsonValueGraphInputNodeName = jsonMap["graphInputNodeName"] as? Array<String> {
                    var jsonArrayGraphInputNodeName:Array<String> = []
                    for oneValueGraphInputNodeName in jsonValueGraphInputNodeName {
                        jsonArrayGraphInputNodeName.append(oneValueGraphInputNodeName)
                    }
                    resultDecodedBuilder.graphInputNodeName = jsonArrayGraphInputNodeName
                }
                if let jsonValueGraphOutputNodeName = jsonMap["graphOutputNodeName"] as? Array<String> {
                    var jsonArrayGraphOutputNodeName:Array<String> = []
                    for oneValueGraphOutputNodeName in jsonValueGraphOutputNodeName {
                        jsonArrayGraphOutputNodeName.append(oneValueGraphOutputNodeName)
                    }
                    resultDecodedBuilder.graphOutputNodeName = jsonArrayGraphOutputNodeName
                }
                if let jsonValueExecutorName = jsonMap["executorName"] as? String {
                    resultDecodedBuilder.executorName = jsonValueExecutorName
                }
                if let jsonValueSerializedExecutorParameters = jsonMap["serializedExecutorParameters"] as? String {
                    resultDecodedBuilder.serializedExecutorParameters = Data(base64Encoded:jsonValueSerializedExecutorParameters, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                if let jsonValueDefaultGraphInputTensorShape = jsonMap["defaultGraphInputTensorShape"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayDefaultGraphInputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> = []
                    for oneValueDefaultGraphInputTensorShape in jsonValueDefaultGraphInputTensorShape {
                        let messageFromStringDefaultGraphInputTensorShape = try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder.decodeToBuilder(jsonMap:oneValueDefaultGraphInputTensorShape).build()

                        jsonArrayDefaultGraphInputTensorShape.append(messageFromStringDefaultGraphInputTensorShape)
                    }
                    resultDecodedBuilder.defaultGraphInputTensorShape = jsonArrayDefaultGraphInputTensorShape
                }
                if let jsonValueDefaultGraphOutputTensorShape = jsonMap["defaultGraphOutputTensorShape"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayDefaultGraphOutputTensorShape:Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> = []
                    for oneValueDefaultGraphOutputTensorShape in jsonValueDefaultGraphOutputTensorShape {
                        let messageFromStringDefaultGraphOutputTensorShape = try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder.decodeToBuilder(jsonMap:oneValueDefaultGraphOutputTensorShape).build()

                        jsonArrayDefaultGraphOutputTensorShape.append(messageFromStringDefaultGraphOutputTensorShape)
                    }
                    resultDecodedBuilder.defaultGraphOutputTensorShape = jsonArrayDefaultGraphOutputTensorShape
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.RemoteFusedGraphExecuteInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.RemoteFusedGraphExecuteInfo> {
        var mergedArray = Array<Tensorflow.RemoteFusedGraphExecuteInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo? {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.RemoteFusedGraphExecuteInfoRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "remoteGraph": return self.remoteGraph
        case "graphInputNodeName": return self.graphInputNodeName
        case "graphOutputNodeName": return self.graphOutputNodeName
        case "executorName": return self.executorName
        case "serializedExecutorParameters": return self.serializedExecutorParameters
        case "defaultGraphInputTensorShape": return self.defaultGraphInputTensorShape
        case "defaultGraphOutputTensorShape": return self.defaultGraphOutputTensorShape
        default: return nil
        }
    }
}
extension Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> {
        var mergedArray = Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto? {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.RemoteFusedGraphExecuteInfoRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto {
        return try Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "dtype": return self.dtype
        case "shape": return self.shape
        default: return nil
        }
    }
}
extension Tensorflow.RemoteFusedGraphExecuteInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "remoteGraph": return self.remoteGraph
            case "graphInputNodeName": return self.graphInputNodeName
            case "graphOutputNodeName": return self.graphOutputNodeName
            case "executorName": return self.executorName
            case "serializedExecutorParameters": return self.serializedExecutorParameters
            case "defaultGraphInputTensorShape": return self.defaultGraphInputTensorShape
            case "defaultGraphOutputTensorShape": return self.defaultGraphOutputTensorShape
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "remoteGraph":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.GraphDef else {
                    return
                }
                self.remoteGraph = newSubscriptValue
            case "graphInputNodeName":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.graphInputNodeName = newSubscriptValue
            case "graphOutputNodeName":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.graphOutputNodeName = newSubscriptValue
            case "executorName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.executorName = newSubscriptValue
            case "serializedExecutorParameters":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.serializedExecutorParameters = newSubscriptValue
            case "defaultGraphInputTensorShape":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> else {
                    return
                }
                self.defaultGraphInputTensorShape = newSubscriptValue
            case "defaultGraphOutputTensorShape":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto> else {
                    return
                }
                self.defaultGraphOutputTensorShape = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "dtype": return self.dtype
            case "shape": return self.shape
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "dtype":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DataType else {
                    return
                }
                self.dtype = newSubscriptValue
            case "shape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.shape = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
