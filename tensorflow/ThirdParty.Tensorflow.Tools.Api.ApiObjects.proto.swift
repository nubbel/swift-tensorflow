/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "api_objects.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ThirdParty { public struct Tensorflow { public struct Tools { public struct Api { }}}}

public extension ThirdParty.Tensorflow.Tools.Api {
    public struct ApiObjectsRoot {
        public static let `default` = ApiObjectsRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Tfapimember : GeneratedMessage {

        public static func == (lhs: ThirdParty.Tensorflow.Tools.Api.Tfapimember, rhs: ThirdParty.Tensorflow.Tools.Api.Tfapimember) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasMtype == rhs.hasMtype) && (!lhs.hasMtype || lhs.mtype == rhs.mtype)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var mtype:String = ""
        public fileprivate(set) var hasMtype:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasMtype {
                try codedOutputStream.writeString(fieldNumber: 2, value:mtype)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasMtype {
                serialize_size += mtype.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimember.classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder
        }
        public func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
            return classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder()
        }
        public func toBuilder() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:ThirdParty.Tensorflow.Tools.Api.Tfapimember) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasMtype {
                jsonMap["mtype"] = mtype
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasMtype {
                output += "\(indent) mtype: \(mtype) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasMtype {
                    hashCode = (hashCode &* 31) &+ mtype.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimember"
        }
        override public func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimember"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:ThirdParty.Tensorflow.Tools.Api.Tfapimember = ThirdParty.Tensorflow.Tools.Api.Tfapimember()
            public func getMessage() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            public var mtype:String {
                get {
                    return builderResult.mtype
                }
                set (value) {
                    builderResult.hasMtype = true
                    builderResult.mtype = value
                }
            }
            public var hasMtype:Bool {
                get {
                    return builderResult.hasMtype
                }
            }
            @discardableResult
            public func setMtype(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                self.mtype = value
                return self
            }
            @discardableResult
            public func clearMtype() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder{
                builderResult.hasMtype = false
                builderResult.mtype = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                builderResult = ThirdParty.Tensorflow.Tools.Api.Tfapimember()
                return self
            }
            override public func clone() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
                let returnMe:ThirdParty.Tensorflow.Tools.Api.Tfapimember = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:ThirdParty.Tensorflow.Tools.Api.Tfapimember) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                if other == ThirdParty.Tensorflow.Tools.Api.Tfapimember() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasMtype {
                    mtype = other.mtype
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        mtype = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                let resultDecodedBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueMtype = jsonMap["mtype"] as? String {
                    resultDecodedBuilder.mtype = jsonValueMtype
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Tfapimethod : GeneratedMessage {

        public static func == (lhs: ThirdParty.Tensorflow.Tools.Api.Tfapimethod, rhs: ThirdParty.Tensorflow.Tools.Api.Tfapimethod) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasPath == rhs.hasPath) && (!lhs.hasPath || lhs.path == rhs.path)
            fieldCheck = fieldCheck && (lhs.hasArgspec == rhs.hasArgspec) && (!lhs.hasArgspec || lhs.argspec == rhs.argspec)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var path:String = ""
        public fileprivate(set) var hasPath:Bool = false

        public fileprivate(set) var argspec:String = ""
        public fileprivate(set) var hasArgspec:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasPath {
                try codedOutputStream.writeString(fieldNumber: 2, value:path)
            }
            if hasArgspec {
                try codedOutputStream.writeString(fieldNumber: 3, value:argspec)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasPath {
                serialize_size += path.computeStringSize(fieldNumber: 2)
            }
            if hasArgspec {
                serialize_size += argspec.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimethod.classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder
        }
        public func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
            return classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder()
        }
        public func toBuilder() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:ThirdParty.Tensorflow.Tools.Api.Tfapimethod) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasPath {
                jsonMap["path"] = path
            }
            if hasArgspec {
                jsonMap["argspec"] = argspec
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasPath {
                output += "\(indent) path: \(path) \n"
            }
            if hasArgspec {
                output += "\(indent) argspec: \(argspec) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasPath {
                    hashCode = (hashCode &* 31) &+ path.hashValue
                }
                if hasArgspec {
                    hashCode = (hashCode &* 31) &+ argspec.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimethod"
        }
        override public func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimethod"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:ThirdParty.Tensorflow.Tools.Api.Tfapimethod = ThirdParty.Tensorflow.Tools.Api.Tfapimethod()
            public func getMessage() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            public var path:String {
                get {
                    return builderResult.path
                }
                set (value) {
                    builderResult.hasPath = true
                    builderResult.path = value
                }
            }
            public var hasPath:Bool {
                get {
                    return builderResult.hasPath
                }
            }
            @discardableResult
            public func setPath(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                self.path = value
                return self
            }
            @discardableResult
            public func clearPath() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder{
                builderResult.hasPath = false
                builderResult.path = ""
                return self
            }
            public var argspec:String {
                get {
                    return builderResult.argspec
                }
                set (value) {
                    builderResult.hasArgspec = true
                    builderResult.argspec = value
                }
            }
            public var hasArgspec:Bool {
                get {
                    return builderResult.hasArgspec
                }
            }
            @discardableResult
            public func setArgspec(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                self.argspec = value
                return self
            }
            @discardableResult
            public func clearArgspec() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder{
                builderResult.hasArgspec = false
                builderResult.argspec = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                builderResult = ThirdParty.Tensorflow.Tools.Api.Tfapimethod()
                return self
            }
            override public func clone() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
                let returnMe:ThirdParty.Tensorflow.Tools.Api.Tfapimethod = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:ThirdParty.Tensorflow.Tools.Api.Tfapimethod) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                if other == ThirdParty.Tensorflow.Tools.Api.Tfapimethod() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasPath {
                    path = other.path
                }
                if other.hasArgspec {
                    argspec = other.argspec
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        path = try codedInputStream.readString()

                    case 26:
                        argspec = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                let resultDecodedBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValuePath = jsonMap["path"] as? String {
                    resultDecodedBuilder.path = jsonValuePath
                }
                if let jsonValueArgspec = jsonMap["argspec"] as? String {
                    resultDecodedBuilder.argspec = jsonValueArgspec
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Tfapimodule : GeneratedMessage {

        public static func == (lhs: ThirdParty.Tensorflow.Tools.Api.Tfapimodule, rhs: ThirdParty.Tensorflow.Tools.Api.Tfapimodule) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.member == rhs.member)
            fieldCheck = fieldCheck && (lhs.memberMethod == rhs.memberMethod)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var member:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>  = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>()
        public fileprivate(set) var memberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>  = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementMember in member {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementMember)
            }
            for oneElementMemberMethod in memberMethod {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementMemberMethod)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementMember in member {
                serialize_size += oneElementMember.computeMessageSize(fieldNumber: 1)
            }
            for oneElementMemberMethod in memberMethod {
                serialize_size += oneElementMemberMethod.computeMessageSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimodule.classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder
        }
        public func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
            return classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder()
        }
        public func toBuilder() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:ThirdParty.Tensorflow.Tools.Api.Tfapimodule) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !member.isEmpty {
                var jsonArrayMember:Array<Dictionary<String,Any>> = []
                for oneValueMember in member {
                    let ecodedMessageMember = try oneValueMember.encode()
                    jsonArrayMember.append(ecodedMessageMember)
                }
                jsonMap["member"] = jsonArrayMember
            }
            if !memberMethod.isEmpty {
                var jsonArrayMemberMethod:Array<Dictionary<String,Any>> = []
                for oneValueMemberMethod in memberMethod {
                    let ecodedMessageMemberMethod = try oneValueMemberMethod.encode()
                    jsonArrayMemberMethod.append(ecodedMessageMemberMethod)
                }
                jsonMap["memberMethod"] = jsonArrayMemberMethod
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var memberElementIndex:Int = 0
            for oneElementMember in member {
                output += "\(indent) member[\(memberElementIndex)] {\n"
                output += try oneElementMember.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                memberElementIndex += 1
            }
            var memberMethodElementIndex:Int = 0
            for oneElementMemberMethod in memberMethod {
                output += "\(indent) memberMethod[\(memberMethodElementIndex)] {\n"
                output += try oneElementMemberMethod.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                memberMethodElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementMember in member {
                    hashCode = (hashCode &* 31) &+ oneElementMember.hashValue
                }
                for oneElementMemberMethod in memberMethod {
                    hashCode = (hashCode &* 31) &+ oneElementMemberMethod.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimodule"
        }
        override public func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapimodule"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:ThirdParty.Tensorflow.Tools.Api.Tfapimodule = ThirdParty.Tensorflow.Tools.Api.Tfapimodule()
            public func getMessage() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var member:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> {
                get {
                    return builderResult.member
                }
                set (value) {
                    builderResult.member = value
                }
            }
            @discardableResult
            public func setMember(_ value:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>) -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                self.member = value
                return self
            }
            @discardableResult
            public func clearMember() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                builderResult.member.removeAll(keepingCapacity: false)
                return self
            }
            public var memberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> {
                get {
                    return builderResult.memberMethod
                }
                set (value) {
                    builderResult.memberMethod = value
                }
            }
            @discardableResult
            public func setMemberMethod(_ value:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>) -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                self.memberMethod = value
                return self
            }
            @discardableResult
            public func clearMemberMethod() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                builderResult.memberMethod.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                builderResult = ThirdParty.Tensorflow.Tools.Api.Tfapimodule()
                return self
            }
            override public func clone() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
                let returnMe:ThirdParty.Tensorflow.Tools.Api.Tfapimodule = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:ThirdParty.Tensorflow.Tools.Api.Tfapimodule) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                if other == ThirdParty.Tensorflow.Tools.Api.Tfapimodule() {
                    return self
                }
                if !other.member.isEmpty  {
                     builderResult.member += other.member
                }
                if !other.memberMethod.isEmpty  {
                     builderResult.memberMethod += other.memberMethod
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        member.append(subBuilder.buildPartial())

                    case 18:
                        let subBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        memberMethod.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                let resultDecodedBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder()
                if let jsonValueMember = jsonMap["member"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayMember:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> = []
                    for oneValueMember in jsonValueMember {
                        let messageFromStringMember = try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder.decodeToBuilder(jsonMap:oneValueMember).build()

                        jsonArrayMember.append(messageFromStringMember)
                    }
                    resultDecodedBuilder.member = jsonArrayMember
                }
                if let jsonValueMemberMethod = jsonMap["memberMethod"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayMemberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> = []
                    for oneValueMemberMethod in jsonValueMemberMethod {
                        let messageFromStringMemberMethod = try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder.decodeToBuilder(jsonMap:oneValueMemberMethod).build()

                        jsonArrayMemberMethod.append(messageFromStringMemberMethod)
                    }
                    resultDecodedBuilder.memberMethod = jsonArrayMemberMethod
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Tfapiclass : GeneratedMessage {

        public static func == (lhs: ThirdParty.Tensorflow.Tools.Api.Tfapiclass, rhs: ThirdParty.Tensorflow.Tools.Api.Tfapiclass) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.isInstance == rhs.isInstance)
            fieldCheck = fieldCheck && (lhs.member == rhs.member)
            fieldCheck = fieldCheck && (lhs.memberMethod == rhs.memberMethod)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var isInstance:Array<String> = Array<String>()
        public fileprivate(set) var member:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>  = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>()
        public fileprivate(set) var memberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>  = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if !isInstance.isEmpty {
                for oneValueisInstance in isInstance {
                    try codedOutputStream.writeString(fieldNumber: 1, value:oneValueisInstance)
                }
            }
            for oneElementMember in member {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementMember)
            }
            for oneElementMemberMethod in memberMethod {
                  try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementMemberMethod)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            var dataSizeIsInstance:Int32 = 0
            for oneValueisInstance in isInstance {
                dataSizeIsInstance += oneValueisInstance.computeStringSizeNoTag()
            }
            serialize_size += dataSizeIsInstance
            serialize_size += 1 * Int32(isInstance.count)
            for oneElementMember in member {
                serialize_size += oneElementMember.computeMessageSize(fieldNumber: 2)
            }
            for oneElementMemberMethod in memberMethod {
                serialize_size += oneElementMemberMethod.computeMessageSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiclass.classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder
        }
        public func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
            return classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder()
        }
        public func toBuilder() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:ThirdParty.Tensorflow.Tools.Api.Tfapiclass) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !isInstance.isEmpty {
                var jsonArrayIsInstance:Array<String> = []
                for oneValueIsInstance in isInstance {
                    jsonArrayIsInstance.append(oneValueIsInstance)
                }
                jsonMap["isInstance"] = jsonArrayIsInstance
            }
            if !member.isEmpty {
                var jsonArrayMember:Array<Dictionary<String,Any>> = []
                for oneValueMember in member {
                    let ecodedMessageMember = try oneValueMember.encode()
                    jsonArrayMember.append(ecodedMessageMember)
                }
                jsonMap["member"] = jsonArrayMember
            }
            if !memberMethod.isEmpty {
                var jsonArrayMemberMethod:Array<Dictionary<String,Any>> = []
                for oneValueMemberMethod in memberMethod {
                    let ecodedMessageMemberMethod = try oneValueMemberMethod.encode()
                    jsonArrayMemberMethod.append(ecodedMessageMemberMethod)
                }
                jsonMap["memberMethod"] = jsonArrayMemberMethod
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var isInstanceElementIndex:Int = 0
            for oneValueIsInstance in isInstance  {
                output += "\(indent) isInstance[\(isInstanceElementIndex)]: \(oneValueIsInstance)\n"
                isInstanceElementIndex += 1
            }
            var memberElementIndex:Int = 0
            for oneElementMember in member {
                output += "\(indent) member[\(memberElementIndex)] {\n"
                output += try oneElementMember.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                memberElementIndex += 1
            }
            var memberMethodElementIndex:Int = 0
            for oneElementMemberMethod in memberMethod {
                output += "\(indent) memberMethod[\(memberMethodElementIndex)] {\n"
                output += try oneElementMemberMethod.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                memberMethodElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValueIsInstance in isInstance {
                    hashCode = (hashCode &* 31) &+ oneValueIsInstance.hashValue
                }
                for oneElementMember in member {
                    hashCode = (hashCode &* 31) &+ oneElementMember.hashValue
                }
                for oneElementMemberMethod in memberMethod {
                    hashCode = (hashCode &* 31) &+ oneElementMemberMethod.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapiclass"
        }
        override public func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapiclass"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:ThirdParty.Tensorflow.Tools.Api.Tfapiclass = ThirdParty.Tensorflow.Tools.Api.Tfapiclass()
            public func getMessage() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var isInstance:Array<String> {
                get {
                    return builderResult.isInstance
                }
                set (array) {
                    builderResult.isInstance = array
                }
            }
            @discardableResult
            public func setIsInstance(_ value:Array<String>) -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                self.isInstance = value
                return self
            }
            @discardableResult
            public func clearIsInstance() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                builderResult.isInstance.removeAll(keepingCapacity: false)
                return self
            }
            public var member:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> {
                get {
                    return builderResult.member
                }
                set (value) {
                    builderResult.member = value
                }
            }
            @discardableResult
            public func setMember(_ value:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>) -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                self.member = value
                return self
            }
            @discardableResult
            public func clearMember() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                builderResult.member.removeAll(keepingCapacity: false)
                return self
            }
            public var memberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> {
                get {
                    return builderResult.memberMethod
                }
                set (value) {
                    builderResult.memberMethod = value
                }
            }
            @discardableResult
            public func setMemberMethod(_ value:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>) -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                self.memberMethod = value
                return self
            }
            @discardableResult
            public func clearMemberMethod() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                builderResult.memberMethod.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                builderResult = ThirdParty.Tensorflow.Tools.Api.Tfapiclass()
                return self
            }
            override public func clone() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
                let returnMe:ThirdParty.Tensorflow.Tools.Api.Tfapiclass = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:ThirdParty.Tensorflow.Tools.Api.Tfapiclass) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                if other == ThirdParty.Tensorflow.Tools.Api.Tfapiclass() {
                    return self
                }
                if !other.isInstance.isEmpty {
                    builderResult.isInstance += other.isInstance
                }
                if !other.member.isEmpty  {
                     builderResult.member += other.member
                }
                if !other.memberMethod.isEmpty  {
                     builderResult.memberMethod += other.memberMethod
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        isInstance += [try codedInputStream.readString()]

                    case 18:
                        let subBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        member.append(subBuilder.buildPartial())

                    case 26:
                        let subBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        memberMethod.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                let resultDecodedBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder()
                if let jsonValueIsInstance = jsonMap["isInstance"] as? Array<String> {
                    var jsonArrayIsInstance:Array<String> = []
                    for oneValueIsInstance in jsonValueIsInstance {
                        jsonArrayIsInstance.append(oneValueIsInstance)
                    }
                    resultDecodedBuilder.isInstance = jsonArrayIsInstance
                }
                if let jsonValueMember = jsonMap["member"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayMember:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> = []
                    for oneValueMember in jsonValueMember {
                        let messageFromStringMember = try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder.decodeToBuilder(jsonMap:oneValueMember).build()

                        jsonArrayMember.append(messageFromStringMember)
                    }
                    resultDecodedBuilder.member = jsonArrayMember
                }
                if let jsonValueMemberMethod = jsonMap["memberMethod"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayMemberMethod:Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> = []
                    for oneValueMemberMethod in jsonValueMemberMethod {
                        let messageFromStringMemberMethod = try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder.decodeToBuilder(jsonMap:oneValueMemberMethod).build()

                        jsonArrayMemberMethod.append(messageFromStringMemberMethod)
                    }
                    resultDecodedBuilder.memberMethod = jsonArrayMemberMethod
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class Tfapiobject : GeneratedMessage {

        public static func == (lhs: ThirdParty.Tensorflow.Tools.Api.Tfapiobject, rhs: ThirdParty.Tensorflow.Tools.Api.Tfapiobject) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasPath == rhs.hasPath) && (!lhs.hasPath || lhs.path == rhs.path)
            fieldCheck = fieldCheck && (lhs.hasTfModule == rhs.hasTfModule) && (!lhs.hasTfModule || lhs.tfModule == rhs.tfModule)
            fieldCheck = fieldCheck && (lhs.hasTfClass == rhs.hasTfClass) && (!lhs.hasTfClass || lhs.tfClass == rhs.tfClass)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var path:String = ""
        public fileprivate(set) var hasPath:Bool = false

        public fileprivate(set) var tfModule:ThirdParty.Tensorflow.Tools.Api.Tfapimodule!
        public fileprivate(set) var hasTfModule:Bool = false
        public fileprivate(set) var tfClass:ThirdParty.Tensorflow.Tools.Api.Tfapiclass!
        public fileprivate(set) var hasTfClass:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasPath {
                try codedOutputStream.writeString(fieldNumber: 1, value:path)
            }
            if hasTfModule {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:tfModule)
            }
            if hasTfClass {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:tfClass)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasPath {
                serialize_size += path.computeStringSize(fieldNumber: 1)
            }
            if hasTfModule {
                if let varSizetfModule = tfModule?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizetfModule
                }
            }
            if hasTfClass {
                if let varSizetfClass = tfClass?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizetfClass
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiobject.classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder
        }
        public func getBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
            return classBuilder() as! ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder()
        }
        public func toBuilder() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:ThirdParty.Tensorflow.Tools.Api.Tfapiobject) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasPath {
                jsonMap["path"] = path
            }
            if hasTfModule {
                jsonMap["tfModule"] = try tfModule.encode()
            }
            if hasTfClass {
                jsonMap["tfClass"] = try tfClass.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
            return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasPath {
                output += "\(indent) path: \(path) \n"
            }
            if hasTfModule {
                output += "\(indent) tfModule {\n"
                if let outDescTfModule = tfModule {
                    output += try outDescTfModule.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasTfClass {
                output += "\(indent) tfClass {\n"
                if let outDescTfClass = tfClass {
                    output += try outDescTfClass.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasPath {
                    hashCode = (hashCode &* 31) &+ path.hashValue
                }
                if hasTfModule {
                    if let hashValuetfModule = tfModule?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetfModule
                    }
                }
                if hasTfClass {
                    if let hashValuetfClass = tfClass?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetfClass
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapiobject"
        }
        override public func className() -> String {
            return "ThirdParty.Tensorflow.Tools.Api.Tfapiobject"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:ThirdParty.Tensorflow.Tools.Api.Tfapiobject = ThirdParty.Tensorflow.Tools.Api.Tfapiobject()
            public func getMessage() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var path:String {
                get {
                    return builderResult.path
                }
                set (value) {
                    builderResult.hasPath = true
                    builderResult.path = value
                }
            }
            public var hasPath:Bool {
                get {
                    return builderResult.hasPath
                }
            }
            @discardableResult
            public func setPath(_ value:String) -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                self.path = value
                return self
            }
            @discardableResult
            public func clearPath() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder{
                builderResult.hasPath = false
                builderResult.path = ""
                return self
            }
            public var tfModule:ThirdParty.Tensorflow.Tools.Api.Tfapimodule! {
                get {
                    if tfModuleBuilder_ != nil {
                        builderResult.tfModule = tfModuleBuilder_.getMessage()
                    }
                    return builderResult.tfModule
                }
                set (value) {
                    builderResult.hasTfModule = true
                    builderResult.tfModule = value
                }
            }
            public var hasTfModule:Bool {
                get {
                    return builderResult.hasTfModule
                }
            }
            fileprivate var tfModuleBuilder_:ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder! {
                didSet {
                    builderResult.hasTfModule = true
                }
            }
            public func getTfModuleBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder {
                if tfModuleBuilder_ == nil {
                    tfModuleBuilder_ = ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder()
                    builderResult.tfModule = tfModuleBuilder_.getMessage()
                    if tfModule != nil {
                        try! tfModuleBuilder_.mergeFrom(other: tfModule)
                    }
                }
                return tfModuleBuilder_
            }
            @discardableResult
            public func setTfModule(_ value:ThirdParty.Tensorflow.Tools.Api.Tfapimodule!) -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                self.tfModule = value
                return self
            }
            @discardableResult
            public func mergeTfModule(value:ThirdParty.Tensorflow.Tools.Api.Tfapimodule) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                if builderResult.hasTfModule {
                    builderResult.tfModule = try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.builderWithPrototype(prototype:builderResult.tfModule).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.tfModule = value
                }
                builderResult.hasTfModule = true
                return self
            }
            @discardableResult
            public func clearTfModule() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                tfModuleBuilder_ = nil
                builderResult.hasTfModule = false
                builderResult.tfModule = nil
                return self
            }
            public var tfClass:ThirdParty.Tensorflow.Tools.Api.Tfapiclass! {
                get {
                    if tfClassBuilder_ != nil {
                        builderResult.tfClass = tfClassBuilder_.getMessage()
                    }
                    return builderResult.tfClass
                }
                set (value) {
                    builderResult.hasTfClass = true
                    builderResult.tfClass = value
                }
            }
            public var hasTfClass:Bool {
                get {
                    return builderResult.hasTfClass
                }
            }
            fileprivate var tfClassBuilder_:ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder! {
                didSet {
                    builderResult.hasTfClass = true
                }
            }
            public func getTfClassBuilder() -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder {
                if tfClassBuilder_ == nil {
                    tfClassBuilder_ = ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder()
                    builderResult.tfClass = tfClassBuilder_.getMessage()
                    if tfClass != nil {
                        try! tfClassBuilder_.mergeFrom(other: tfClass)
                    }
                }
                return tfClassBuilder_
            }
            @discardableResult
            public func setTfClass(_ value:ThirdParty.Tensorflow.Tools.Api.Tfapiclass!) -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                self.tfClass = value
                return self
            }
            @discardableResult
            public func mergeTfClass(value:ThirdParty.Tensorflow.Tools.Api.Tfapiclass) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                if builderResult.hasTfClass {
                    builderResult.tfClass = try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.builderWithPrototype(prototype:builderResult.tfClass).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.tfClass = value
                }
                builderResult.hasTfClass = true
                return self
            }
            @discardableResult
            public func clearTfClass() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                tfClassBuilder_ = nil
                builderResult.hasTfClass = false
                builderResult.tfClass = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                builderResult = ThirdParty.Tensorflow.Tools.Api.Tfapiobject()
                return self
            }
            override public func clone() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
                let returnMe:ThirdParty.Tensorflow.Tools.Api.Tfapiobject = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:ThirdParty.Tensorflow.Tools.Api.Tfapiobject) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                if other == ThirdParty.Tensorflow.Tools.Api.Tfapiobject() {
                    return self
                }
                if other.hasPath {
                    path = other.path
                }
                if (other.hasTfModule) {
                    try mergeTfModule(value: other.tfModule)
                }
                if (other.hasTfClass) {
                    try mergeTfClass(value: other.tfClass)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        path = try codedInputStream.readString()

                    case 18:
                        let subBuilder:ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder = ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder()
                        if hasTfModule {
                            try subBuilder.mergeFrom(other: tfModule)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        tfModule = subBuilder.buildPartial()

                    case 26:
                        let subBuilder:ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder = ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder()
                        if hasTfClass {
                            try subBuilder.mergeFrom(other: tfClass)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        tfClass = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                let resultDecodedBuilder = ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder()
                if let jsonValuePath = jsonMap["path"] as? String {
                    resultDecodedBuilder.path = jsonValuePath
                }
                if let jsonValueTfModule = jsonMap["tfModule"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.tfModule = try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder.decodeToBuilder(jsonMap:jsonValueTfModule).build()

                }
                if let jsonValueTfClass = jsonMap["tfClass"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.tfClass = try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder.decodeToBuilder(jsonMap:jsonValueTfClass).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimember: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> {
        var mergedArray = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember? {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(data: data, extensionRegistry:ThirdParty.Tensorflow.Tools.Api.ApiObjectsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimember {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "mtype": return self.mtype
        default: return nil
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimember.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "mtype": return self.mtype
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "mtype":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.mtype = newSubscriptValue
            default: return
            }
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimethod: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> {
        var mergedArray = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod? {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(data: data, extensionRegistry:ThirdParty.Tensorflow.Tools.Api.ApiObjectsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimethod {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "path": return self.path
        case "argspec": return self.argspec
        default: return nil
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimethod.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "path": return self.path
            case "argspec": return self.argspec
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "path":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.path = newSubscriptValue
            case "argspec":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.argspec = newSubscriptValue
            default: return
            }
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimodule: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ThirdParty.Tensorflow.Tools.Api.Tfapimodule> {
        var mergedArray = Array<ThirdParty.Tensorflow.Tools.Api.Tfapimodule>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule? {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(data: data, extensionRegistry:ThirdParty.Tensorflow.Tools.Api.ApiObjectsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapimodule {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "member": return self.member
        case "memberMethod": return self.memberMethod
        default: return nil
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapimodule.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "member": return self.member
            case "memberMethod": return self.memberMethod
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "member":
                guard let newSubscriptValue = newSubscriptValue as? Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> else {
                    return
                }
                self.member = newSubscriptValue
            case "memberMethod":
                guard let newSubscriptValue = newSubscriptValue as? Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> else {
                    return
                }
                self.memberMethod = newSubscriptValue
            default: return
            }
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapiclass: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ThirdParty.Tensorflow.Tools.Api.Tfapiclass> {
        var mergedArray = Array<ThirdParty.Tensorflow.Tools.Api.Tfapiclass>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass? {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(data: data, extensionRegistry:ThirdParty.Tensorflow.Tools.Api.ApiObjectsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiclass {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "isInstance": return self.isInstance
        case "member": return self.member
        case "memberMethod": return self.memberMethod
        default: return nil
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapiclass.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "isInstance": return self.isInstance
            case "member": return self.member
            case "memberMethod": return self.memberMethod
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "isInstance":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.isInstance = newSubscriptValue
            case "member":
                guard let newSubscriptValue = newSubscriptValue as? Array<ThirdParty.Tensorflow.Tools.Api.Tfapimember> else {
                    return
                }
                self.member = newSubscriptValue
            case "memberMethod":
                guard let newSubscriptValue = newSubscriptValue as? Array<ThirdParty.Tensorflow.Tools.Api.Tfapimethod> else {
                    return
                }
                self.memberMethod = newSubscriptValue
            default: return
            }
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapiobject: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ThirdParty.Tensorflow.Tools.Api.Tfapiobject> {
        var mergedArray = Array<ThirdParty.Tensorflow.Tools.Api.Tfapiobject>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject? {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(data: data, extensionRegistry:ThirdParty.Tensorflow.Tools.Api.ApiObjectsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ThirdParty.Tensorflow.Tools.Api.Tfapiobject {
        return try ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "path": return self.path
        case "tfModule": return self.tfModule
        case "tfClass": return self.tfClass
        default: return nil
        }
    }
}
extension ThirdParty.Tensorflow.Tools.Api.Tfapiobject.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "path": return self.path
            case "tfModule": return self.tfModule
            case "tfClass": return self.tfClass
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "path":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.path = newSubscriptValue
            case "tfModule":
                guard let newSubscriptValue = newSubscriptValue as? ThirdParty.Tensorflow.Tools.Api.Tfapimodule else {
                    return
                }
                self.tfModule = newSubscriptValue
            case "tfClass":
                guard let newSubscriptValue = newSubscriptValue as? ThirdParty.Tensorflow.Tools.Api.Tfapiclass else {
                    return
                }
                self.tfClass = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
