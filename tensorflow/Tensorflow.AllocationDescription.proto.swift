/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "allocation_description.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct AllocationDescriptionRoot {
        public static let `default` = AllocationDescriptionRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class AllocationDescription : GeneratedMessage {

        public static func == (lhs: Tensorflow.AllocationDescription, rhs: Tensorflow.AllocationDescription) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasRequestedBytes == rhs.hasRequestedBytes) && (!lhs.hasRequestedBytes || lhs.requestedBytes == rhs.requestedBytes)
            fieldCheck = fieldCheck && (lhs.hasAllocatedBytes == rhs.hasAllocatedBytes) && (!lhs.hasAllocatedBytes || lhs.allocatedBytes == rhs.allocatedBytes)
            fieldCheck = fieldCheck && (lhs.hasAllocatorName == rhs.hasAllocatorName) && (!lhs.hasAllocatorName || lhs.allocatorName == rhs.allocatorName)
            fieldCheck = fieldCheck && (lhs.hasAllocationId == rhs.hasAllocationId) && (!lhs.hasAllocationId || lhs.allocationId == rhs.allocationId)
            fieldCheck = fieldCheck && (lhs.hasHasSingleReference == rhs.hasHasSingleReference) && (!lhs.hasHasSingleReference || lhs.hasSingleReference == rhs.hasSingleReference)
            fieldCheck = fieldCheck && (lhs.hasPtr == rhs.hasPtr) && (!lhs.hasPtr || lhs.ptr == rhs.ptr)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Total number of bytes requested
        public fileprivate(set) var requestedBytes:Int64 = Int64(0)
        public fileprivate(set) var hasRequestedBytes:Bool = false

        /// Total number of bytes allocated if known
        public fileprivate(set) var allocatedBytes:Int64 = Int64(0)
        public fileprivate(set) var hasAllocatedBytes:Bool = false

        /// Name of the allocator used
        public fileprivate(set) var allocatorName:String = ""
        public fileprivate(set) var hasAllocatorName:Bool = false

        /// Identifier of the allocated buffer if known
        public fileprivate(set) var allocationId:Int64 = Int64(0)
        public fileprivate(set) var hasAllocationId:Bool = false

        /// Set if this tensor only has one remaining reference
        public fileprivate(set) var hasSingleReference:Bool = false
        public fileprivate(set) var hasHasSingleReference:Bool = false

        /// Address of the allocation.
        public fileprivate(set) var ptr:UInt64 = UInt64(0)
        public fileprivate(set) var hasPtr:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasRequestedBytes {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:requestedBytes)
            }
            if hasAllocatedBytes {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:allocatedBytes)
            }
            if hasAllocatorName {
                try codedOutputStream.writeString(fieldNumber: 3, value:allocatorName)
            }
            if hasAllocationId {
                try codedOutputStream.writeInt64(fieldNumber: 4, value:allocationId)
            }
            if hasHasSingleReference {
                try codedOutputStream.writeBool(fieldNumber: 5, value:hasSingleReference)
            }
            if hasPtr {
                try codedOutputStream.writeUInt64(fieldNumber: 6, value:ptr)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasRequestedBytes {
                serialize_size += requestedBytes.computeInt64Size(fieldNumber: 1)
            }
            if hasAllocatedBytes {
                serialize_size += allocatedBytes.computeInt64Size(fieldNumber: 2)
            }
            if hasAllocatorName {
                serialize_size += allocatorName.computeStringSize(fieldNumber: 3)
            }
            if hasAllocationId {
                serialize_size += allocationId.computeInt64Size(fieldNumber: 4)
            }
            if hasHasSingleReference {
                serialize_size += hasSingleReference.computeBoolSize(fieldNumber: 5)
            }
            if hasPtr {
                serialize_size += ptr.computeUInt64Size(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.AllocationDescription.Builder {
            return Tensorflow.AllocationDescription.classBuilder() as! Tensorflow.AllocationDescription.Builder
        }
        public func getBuilder() -> Tensorflow.AllocationDescription.Builder {
            return classBuilder() as! Tensorflow.AllocationDescription.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.AllocationDescription.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.AllocationDescription.Builder()
        }
        public func toBuilder() throws -> Tensorflow.AllocationDescription.Builder {
            return try Tensorflow.AllocationDescription.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.AllocationDescription) throws -> Tensorflow.AllocationDescription.Builder {
            return try Tensorflow.AllocationDescription.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasRequestedBytes {
                jsonMap["requestedBytes"] = "\(requestedBytes)"
            }
            if hasAllocatedBytes {
                jsonMap["allocatedBytes"] = "\(allocatedBytes)"
            }
            if hasAllocatorName {
                jsonMap["allocatorName"] = allocatorName
            }
            if hasAllocationId {
                jsonMap["allocationId"] = "\(allocationId)"
            }
            if hasHasSingleReference {
                jsonMap["hasSingleReference"] = hasSingleReference
            }
            if hasPtr {
                jsonMap["ptr"] = "\(ptr)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.AllocationDescription {
            return try Tensorflow.AllocationDescription.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.AllocationDescription {
            return try Tensorflow.AllocationDescription.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasRequestedBytes {
                output += "\(indent) requestedBytes: \(requestedBytes) \n"
            }
            if hasAllocatedBytes {
                output += "\(indent) allocatedBytes: \(allocatedBytes) \n"
            }
            if hasAllocatorName {
                output += "\(indent) allocatorName: \(allocatorName) \n"
            }
            if hasAllocationId {
                output += "\(indent) allocationId: \(allocationId) \n"
            }
            if hasHasSingleReference {
                output += "\(indent) hasSingleReference: \(hasSingleReference) \n"
            }
            if hasPtr {
                output += "\(indent) ptr: \(ptr) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRequestedBytes {
                    hashCode = (hashCode &* 31) &+ requestedBytes.hashValue
                }
                if hasAllocatedBytes {
                    hashCode = (hashCode &* 31) &+ allocatedBytes.hashValue
                }
                if hasAllocatorName {
                    hashCode = (hashCode &* 31) &+ allocatorName.hashValue
                }
                if hasAllocationId {
                    hashCode = (hashCode &* 31) &+ allocationId.hashValue
                }
                if hasHasSingleReference {
                    hashCode = (hashCode &* 31) &+ hasSingleReference.hashValue
                }
                if hasPtr {
                    hashCode = (hashCode &* 31) &+ ptr.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.AllocationDescription"
        }
        override public func className() -> String {
            return "Tensorflow.AllocationDescription"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.AllocationDescription = Tensorflow.AllocationDescription()
            public func getMessage() -> Tensorflow.AllocationDescription {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Total number of bytes requested
            public var requestedBytes:Int64 {
                get {
                    return builderResult.requestedBytes
                }
                set (value) {
                    builderResult.hasRequestedBytes = true
                    builderResult.requestedBytes = value
                }
            }
            public var hasRequestedBytes:Bool {
                get {
                    return builderResult.hasRequestedBytes
                }
            }
            @discardableResult
            public func setRequestedBytes(_ value:Int64) -> Tensorflow.AllocationDescription.Builder {
                self.requestedBytes = value
                return self
            }
            @discardableResult
            public func clearRequestedBytes() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasRequestedBytes = false
                builderResult.requestedBytes = Int64(0)
                return self
            }
            /// Total number of bytes allocated if known
            public var allocatedBytes:Int64 {
                get {
                    return builderResult.allocatedBytes
                }
                set (value) {
                    builderResult.hasAllocatedBytes = true
                    builderResult.allocatedBytes = value
                }
            }
            public var hasAllocatedBytes:Bool {
                get {
                    return builderResult.hasAllocatedBytes
                }
            }
            @discardableResult
            public func setAllocatedBytes(_ value:Int64) -> Tensorflow.AllocationDescription.Builder {
                self.allocatedBytes = value
                return self
            }
            @discardableResult
            public func clearAllocatedBytes() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasAllocatedBytes = false
                builderResult.allocatedBytes = Int64(0)
                return self
            }
            /// Name of the allocator used
            public var allocatorName:String {
                get {
                    return builderResult.allocatorName
                }
                set (value) {
                    builderResult.hasAllocatorName = true
                    builderResult.allocatorName = value
                }
            }
            public var hasAllocatorName:Bool {
                get {
                    return builderResult.hasAllocatorName
                }
            }
            @discardableResult
            public func setAllocatorName(_ value:String) -> Tensorflow.AllocationDescription.Builder {
                self.allocatorName = value
                return self
            }
            @discardableResult
            public func clearAllocatorName() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasAllocatorName = false
                builderResult.allocatorName = ""
                return self
            }
            /// Identifier of the allocated buffer if known
            public var allocationId:Int64 {
                get {
                    return builderResult.allocationId
                }
                set (value) {
                    builderResult.hasAllocationId = true
                    builderResult.allocationId = value
                }
            }
            public var hasAllocationId:Bool {
                get {
                    return builderResult.hasAllocationId
                }
            }
            @discardableResult
            public func setAllocationId(_ value:Int64) -> Tensorflow.AllocationDescription.Builder {
                self.allocationId = value
                return self
            }
            @discardableResult
            public func clearAllocationId() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasAllocationId = false
                builderResult.allocationId = Int64(0)
                return self
            }
            /// Set if this tensor only has one remaining reference
            public var hasSingleReference:Bool {
                get {
                    return builderResult.hasSingleReference
                }
                set (value) {
                    builderResult.hasHasSingleReference = true
                    builderResult.hasSingleReference = value
                }
            }
            public var hasHasSingleReference:Bool {
                get {
                    return builderResult.hasHasSingleReference
                }
            }
            @discardableResult
            public func setHasSingleReference(_ value:Bool) -> Tensorflow.AllocationDescription.Builder {
                self.hasSingleReference = value
                return self
            }
            @discardableResult
            public func clearHasSingleReference() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasHasSingleReference = false
                builderResult.hasSingleReference = false
                return self
            }
            /// Address of the allocation.
            public var ptr:UInt64 {
                get {
                    return builderResult.ptr
                }
                set (value) {
                    builderResult.hasPtr = true
                    builderResult.ptr = value
                }
            }
            public var hasPtr:Bool {
                get {
                    return builderResult.hasPtr
                }
            }
            @discardableResult
            public func setPtr(_ value:UInt64) -> Tensorflow.AllocationDescription.Builder {
                self.ptr = value
                return self
            }
            @discardableResult
            public func clearPtr() -> Tensorflow.AllocationDescription.Builder{
                builderResult.hasPtr = false
                builderResult.ptr = UInt64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.AllocationDescription.Builder {
                builderResult = Tensorflow.AllocationDescription()
                return self
            }
            override public func clone() throws -> Tensorflow.AllocationDescription.Builder {
                return try Tensorflow.AllocationDescription.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.AllocationDescription {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.AllocationDescription {
                let returnMe:Tensorflow.AllocationDescription = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.AllocationDescription) throws -> Tensorflow.AllocationDescription.Builder {
                if other == Tensorflow.AllocationDescription() {
                    return self
                }
                if other.hasRequestedBytes {
                    requestedBytes = other.requestedBytes
                }
                if other.hasAllocatedBytes {
                    allocatedBytes = other.allocatedBytes
                }
                if other.hasAllocatorName {
                    allocatorName = other.allocatorName
                }
                if other.hasAllocationId {
                    allocationId = other.allocationId
                }
                if other.hasHasSingleReference {
                    hasSingleReference = other.hasSingleReference
                }
                if other.hasPtr {
                    ptr = other.ptr
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.AllocationDescription.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AllocationDescription.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        requestedBytes = try codedInputStream.readInt64()

                    case 16:
                        allocatedBytes = try codedInputStream.readInt64()

                    case 26:
                        allocatorName = try codedInputStream.readString()

                    case 32:
                        allocationId = try codedInputStream.readInt64()

                    case 40:
                        hasSingleReference = try codedInputStream.readBool()

                    case 48:
                        ptr = try codedInputStream.readUInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.AllocationDescription.Builder {
                let resultDecodedBuilder = Tensorflow.AllocationDescription.Builder()
                if let jsonValueRequestedBytes = jsonMap["requestedBytes"] as? String {
                    resultDecodedBuilder.requestedBytes = Int64(jsonValueRequestedBytes)!
                } else if let jsonValueRequestedBytes = jsonMap["requestedBytes"] as? Int {
                    resultDecodedBuilder.requestedBytes = Int64(jsonValueRequestedBytes)
                }
                if let jsonValueAllocatedBytes = jsonMap["allocatedBytes"] as? String {
                    resultDecodedBuilder.allocatedBytes = Int64(jsonValueAllocatedBytes)!
                } else if let jsonValueAllocatedBytes = jsonMap["allocatedBytes"] as? Int {
                    resultDecodedBuilder.allocatedBytes = Int64(jsonValueAllocatedBytes)
                }
                if let jsonValueAllocatorName = jsonMap["allocatorName"] as? String {
                    resultDecodedBuilder.allocatorName = jsonValueAllocatorName
                }
                if let jsonValueAllocationId = jsonMap["allocationId"] as? String {
                    resultDecodedBuilder.allocationId = Int64(jsonValueAllocationId)!
                } else if let jsonValueAllocationId = jsonMap["allocationId"] as? Int {
                    resultDecodedBuilder.allocationId = Int64(jsonValueAllocationId)
                }
                if let jsonValueHasSingleReference = jsonMap["hasSingleReference"] as? Bool {
                    resultDecodedBuilder.hasSingleReference = jsonValueHasSingleReference
                }
                if let jsonValuePtr = jsonMap["ptr"] as? String {
                    resultDecodedBuilder.ptr = UInt64(jsonValuePtr)!
                } else if let jsonValuePtr = jsonMap["ptr"] as? UInt {
                    resultDecodedBuilder.ptr = UInt64(jsonValuePtr)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.AllocationDescription.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.AllocationDescription.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.AllocationDescription: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.AllocationDescription> {
        var mergedArray = Array<Tensorflow.AllocationDescription>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.AllocationDescription? {
        return try Tensorflow.AllocationDescription.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.AllocationDescriptionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AllocationDescription {
        return try Tensorflow.AllocationDescription.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "requestedBytes": return self.requestedBytes
        case "allocatedBytes": return self.allocatedBytes
        case "allocatorName": return self.allocatorName
        case "allocationId": return self.allocationId
        case "hasSingleReference": return self.hasSingleReference
        case "ptr": return self.ptr
        default: return nil
        }
    }
}
extension Tensorflow.AllocationDescription.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "requestedBytes": return self.requestedBytes
            case "allocatedBytes": return self.allocatedBytes
            case "allocatorName": return self.allocatorName
            case "allocationId": return self.allocationId
            case "hasSingleReference": return self.hasSingleReference
            case "ptr": return self.ptr
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "requestedBytes":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.requestedBytes = newSubscriptValue
            case "allocatedBytes":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.allocatedBytes = newSubscriptValue
            case "allocatorName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.allocatorName = newSubscriptValue
            case "allocationId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.allocationId = newSubscriptValue
            case "hasSingleReference":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.hasSingleReference = newSubscriptValue
            case "ptr":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.ptr = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
