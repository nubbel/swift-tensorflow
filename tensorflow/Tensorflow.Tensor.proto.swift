/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "tensor.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct TensorRoot {
        public static let `default` = TensorRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.ResourceHandleRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TypesRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Protocol buffer representing a tensor.
    final public class TensorProto : GeneratedMessage {

        public static func == (lhs: Tensorflow.TensorProto, rhs: Tensorflow.TensorProto) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasDtype == rhs.hasDtype) && (!lhs.hasDtype || lhs.dtype == rhs.dtype)
            fieldCheck = fieldCheck && (lhs.hasTensorShape == rhs.hasTensorShape) && (!lhs.hasTensorShape || lhs.tensorShape == rhs.tensorShape)
            fieldCheck = fieldCheck && (lhs.hasVersionNumber == rhs.hasVersionNumber) && (!lhs.hasVersionNumber || lhs.versionNumber == rhs.versionNumber)
            fieldCheck = fieldCheck && (lhs.hasTensorContent == rhs.hasTensorContent) && (!lhs.hasTensorContent || lhs.tensorContent == rhs.tensorContent)
            fieldCheck = fieldCheck && (lhs.floatVal == rhs.floatVal)
            fieldCheck = fieldCheck && (lhs.doubleVal == rhs.doubleVal)
            fieldCheck = fieldCheck && (lhs.intVal == rhs.intVal)
            fieldCheck = fieldCheck && (lhs.stringVal == rhs.stringVal)
            fieldCheck = fieldCheck && (lhs.scomplexVal == rhs.scomplexVal)
            fieldCheck = fieldCheck && (lhs.int64Val == rhs.int64Val)
            fieldCheck = fieldCheck && (lhs.boolVal == rhs.boolVal)
            fieldCheck = fieldCheck && (lhs.dcomplexVal == rhs.dcomplexVal)
            fieldCheck = fieldCheck && (lhs.halfVal == rhs.halfVal)
            fieldCheck = fieldCheck && (lhs.resourceHandleVal == rhs.resourceHandleVal)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var dtype:Tensorflow.DataType = Tensorflow.DataType.dtInvalid
        public fileprivate(set) var hasDtype:Bool = false
        public fileprivate(set) var tensorShape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasTensorShape:Bool = false
        /// Version number.
        /// In version 0, if the "repeated xxx" representations contain only one
        /// element, that element is repeated to fill the shape.  This makes it easy
        /// to represent a constant Tensor with a single value.
        public fileprivate(set) var versionNumber:Int32 = Int32(0)
        public fileprivate(set) var hasVersionNumber:Bool = false

        /// Serialized raw tensor content from either Tensor::AsProtoTensorContent or
        /// memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
        /// can be used for all tensor types. The purpose of this representation is to
        /// reduce serialization overhead during RPC call by avoiding serialization of
        /// many repeated small items.
        public fileprivate(set) var tensorContent:Data = Data()
        public fileprivate(set) var hasTensorContent:Bool = false

        /// DT_HALF. Note that since protobuf has no int16 type, we'll have some
        /// pointless zero padding for each value here.
        public fileprivate(set) var halfVal:Array<Int32> = Array<Int32>()
        private var halfValMemoizedSerializedSize:Int32 = -1
        /// DT_FLOAT.
        public fileprivate(set) var floatVal:Array<Float> = Array<Float>()
        private var floatValMemoizedSerializedSize:Int32 = -1
        /// DT_DOUBLE.
        public fileprivate(set) var doubleVal:Array<Double> = Array<Double>()
        private var doubleValMemoizedSerializedSize:Int32 = -1
        /// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
        public fileprivate(set) var intVal:Array<Int32> = Array<Int32>()
        private var intValMemoizedSerializedSize:Int32 = -1
        /// DT_STRING
        public fileprivate(set) var stringVal:Array<Data> = Array<Data>()
        /// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
        /// and imaginary parts of i-th single precision complex.
        public fileprivate(set) var scomplexVal:Array<Float> = Array<Float>()
        private var scomplexValMemoizedSerializedSize:Int32 = -1
        /// DT_INT64
        public fileprivate(set) var int64Val:Array<Int64> = Array<Int64>()
        private var int64ValMemoizedSerializedSize:Int32 = -1
        /// DT_BOOL
        public fileprivate(set) var boolVal:Array<Bool> = Array<Bool>()
        private var boolValMemoizedSerializedSize:Int32 = -1
        /// DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
        /// and imaginary parts of i-th double precision complex.
        public fileprivate(set) var dcomplexVal:Array<Double> = Array<Double>()
        private var dcomplexValMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var resourceHandleVal:Array<Tensorflow.ResourceHandle>  = Array<Tensorflow.ResourceHandle>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasDtype {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:dtype.rawValue)
            }
            if hasTensorShape {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:tensorShape)
            }
            if hasVersionNumber {
                try codedOutputStream.writeInt32(fieldNumber: 3, value:versionNumber)
            }
            if hasTensorContent {
                try codedOutputStream.writeData(fieldNumber: 4, value:tensorContent)
            }
            if !floatVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 42)
                try codedOutputStream.writeRawVarint32(value: floatValMemoizedSerializedSize)
                for oneValuefloatVal in floatVal {
                    try codedOutputStream.writeFloatNoTag(value: oneValuefloatVal)
                }
            }
            if !doubleVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 50)
                try codedOutputStream.writeRawVarint32(value: doubleValMemoizedSerializedSize)
                for oneValuedoubleVal in doubleVal {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuedoubleVal)
                }
            }
            if !intVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 58)
                try codedOutputStream.writeRawVarint32(value: intValMemoizedSerializedSize)
                for oneValueintVal in intVal {
                    try codedOutputStream.writeInt32NoTag(value: oneValueintVal)
                }
            }
            if !stringVal.isEmpty {
                for oneValuestringVal in stringVal {
                    try codedOutputStream.writeData(fieldNumber: 8, value:oneValuestringVal)
                }
            }
            if !scomplexVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 74)
                try codedOutputStream.writeRawVarint32(value: scomplexValMemoizedSerializedSize)
                for oneValuescomplexVal in scomplexVal {
                    try codedOutputStream.writeFloatNoTag(value: oneValuescomplexVal)
                }
            }
            if !int64Val.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 82)
                try codedOutputStream.writeRawVarint32(value: int64ValMemoizedSerializedSize)
                for oneValueint64Val in int64Val {
                    try codedOutputStream.writeInt64NoTag(value: oneValueint64Val)
                }
            }
            if !boolVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 90)
                try codedOutputStream.writeRawVarint32(value: boolValMemoizedSerializedSize)
                for oneValueboolVal in boolVal {
                    try codedOutputStream.writeBoolNoTag(value: oneValueboolVal)
                }
            }
            if !dcomplexVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 98)
                try codedOutputStream.writeRawVarint32(value: dcomplexValMemoizedSerializedSize)
                for oneValuedcomplexVal in dcomplexVal {
                    try codedOutputStream.writeDoubleNoTag(value: oneValuedcomplexVal)
                }
            }
            if !halfVal.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 106)
                try codedOutputStream.writeRawVarint32(value: halfValMemoizedSerializedSize)
                for oneValuehalfVal in halfVal {
                    try codedOutputStream.writeInt32NoTag(value: oneValuehalfVal)
                }
            }
            for oneElementResourceHandleVal in resourceHandleVal {
                  try codedOutputStream.writeMessage(fieldNumber: 14, value:oneElementResourceHandleVal)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasDtype) {
                serialize_size += dtype.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasTensorShape {
                if let varSizetensorShape = tensorShape?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizetensorShape
                }
            }
            if hasVersionNumber {
                serialize_size += versionNumber.computeInt32Size(fieldNumber: 3)
            }
            if hasTensorContent {
                serialize_size += tensorContent.computeDataSize(fieldNumber: 4)
            }
            var dataSizeFloatVal:Int32 = 0
            dataSizeFloatVal = 4 * Int32(floatVal.count)
            serialize_size += dataSizeFloatVal
            if !floatVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeFloatVal.computeInt32SizeNoTag()
            }
            floatValMemoizedSerializedSize = dataSizeFloatVal
            var dataSizeDoubleVal:Int32 = 0
            dataSizeDoubleVal = 8 * Int32(doubleVal.count)
            serialize_size += dataSizeDoubleVal
            if !doubleVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeDoubleVal.computeInt32SizeNoTag()
            }
            doubleValMemoizedSerializedSize = dataSizeDoubleVal
            var dataSizeIntVal:Int32 = 0
            for oneValueintVal in intVal {
                dataSizeIntVal += oneValueintVal.computeInt32SizeNoTag()
            }
            serialize_size += dataSizeIntVal
            if !intVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeIntVal.computeInt32SizeNoTag()
            }
            intValMemoizedSerializedSize = dataSizeIntVal
            var dataSizeStringVal:Int32 = 0
            for oneValuestringVal in stringVal {
                dataSizeStringVal += oneValuestringVal.computeDataSizeNoTag()
            }
            serialize_size += dataSizeStringVal
            serialize_size += 1 * Int32(stringVal.count)
            var dataSizeScomplexVal:Int32 = 0
            dataSizeScomplexVal = 4 * Int32(scomplexVal.count)
            serialize_size += dataSizeScomplexVal
            if !scomplexVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeScomplexVal.computeInt32SizeNoTag()
            }
            scomplexValMemoizedSerializedSize = dataSizeScomplexVal
            var dataSizeInt64Val:Int32 = 0
            for oneValueint64Val in int64Val {
                dataSizeInt64Val += oneValueint64Val.computeInt64SizeNoTag()
            }
            serialize_size += dataSizeInt64Val
            if !int64Val.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeInt64Val.computeInt32SizeNoTag()
            }
            int64ValMemoizedSerializedSize = dataSizeInt64Val
            var dataSizeBoolVal:Int32 = 0
            dataSizeBoolVal = 1 * Int32(boolVal.count)
            serialize_size += dataSizeBoolVal
            if !boolVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeBoolVal.computeInt32SizeNoTag()
            }
            boolValMemoizedSerializedSize = dataSizeBoolVal
            var dataSizeDcomplexVal:Int32 = 0
            dataSizeDcomplexVal = 8 * Int32(dcomplexVal.count)
            serialize_size += dataSizeDcomplexVal
            if !dcomplexVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeDcomplexVal.computeInt32SizeNoTag()
            }
            dcomplexValMemoizedSerializedSize = dataSizeDcomplexVal
            var dataSizeHalfVal:Int32 = 0
            for oneValuehalfVal in halfVal {
                dataSizeHalfVal += oneValuehalfVal.computeInt32SizeNoTag()
            }
            serialize_size += dataSizeHalfVal
            if !halfVal.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeHalfVal.computeInt32SizeNoTag()
            }
            halfValMemoizedSerializedSize = dataSizeHalfVal
            for oneElementResourceHandleVal in resourceHandleVal {
                serialize_size += oneElementResourceHandleVal.computeMessageSize(fieldNumber: 14)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.TensorProto.Builder {
            return Tensorflow.TensorProto.classBuilder() as! Tensorflow.TensorProto.Builder
        }
        public func getBuilder() -> Tensorflow.TensorProto.Builder {
            return classBuilder() as! Tensorflow.TensorProto.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorProto.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.TensorProto.Builder()
        }
        public func toBuilder() throws -> Tensorflow.TensorProto.Builder {
            return try Tensorflow.TensorProto.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.TensorProto) throws -> Tensorflow.TensorProto.Builder {
            return try Tensorflow.TensorProto.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasDtype {
                jsonMap["dtype"] = dtype.toString()
            }
            if hasTensorShape {
                jsonMap["tensorShape"] = try tensorShape.encode()
            }
            if hasVersionNumber {
                jsonMap["versionNumber"] = Int(versionNumber)
            }
            if hasTensorContent {
                jsonMap["tensorContent"] = tensorContent.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            if !halfVal.isEmpty {
                var jsonArrayHalfVal:Array<Int> = []
                for oneValueHalfVal in halfVal {
                    jsonArrayHalfVal.append(Int(oneValueHalfVal))
                }
                jsonMap["halfVal"] = jsonArrayHalfVal
            }
            if !floatVal.isEmpty {
                var jsonArrayFloatVal:Array<Float> = []
                for oneValueFloatVal in floatVal {
                    jsonArrayFloatVal.append(Float(oneValueFloatVal))
                }
                jsonMap["floatVal"] = jsonArrayFloatVal
            }
            if !doubleVal.isEmpty {
                var jsonArrayDoubleVal:Array<Double> = []
                for oneValueDoubleVal in doubleVal {
                    jsonArrayDoubleVal.append(Double(oneValueDoubleVal))
                }
                jsonMap["doubleVal"] = jsonArrayDoubleVal
            }
            if !intVal.isEmpty {
                var jsonArrayIntVal:Array<Int> = []
                for oneValueIntVal in intVal {
                    jsonArrayIntVal.append(Int(oneValueIntVal))
                }
                jsonMap["intVal"] = jsonArrayIntVal
            }
            if !stringVal.isEmpty {
                var jsonArrayStringVal:Array<String> = []
                for oneValueStringVal in stringVal {
                    jsonArrayStringVal.append(oneValueStringVal.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0)))
                }
                jsonMap["stringVal"] = jsonArrayStringVal
            }
            if !scomplexVal.isEmpty {
                var jsonArrayScomplexVal:Array<Float> = []
                for oneValueScomplexVal in scomplexVal {
                    jsonArrayScomplexVal.append(Float(oneValueScomplexVal))
                }
                jsonMap["scomplexVal"] = jsonArrayScomplexVal
            }
            if !int64Val.isEmpty {
                var jsonArrayInt64Val:Array<String> = []
                for oneValueInt64Val in int64Val {
                    jsonArrayInt64Val.append("\(oneValueInt64Val)")
                }
                jsonMap["int64Val"] = jsonArrayInt64Val
            }
            if !boolVal.isEmpty {
                var jsonArrayBoolVal:Array<Bool> = []
                for oneValueBoolVal in boolVal {
                    jsonArrayBoolVal.append(oneValueBoolVal)
                }
                jsonMap["boolVal"] = jsonArrayBoolVal
            }
            if !dcomplexVal.isEmpty {
                var jsonArrayDcomplexVal:Array<Double> = []
                for oneValueDcomplexVal in dcomplexVal {
                    jsonArrayDcomplexVal.append(Double(oneValueDcomplexVal))
                }
                jsonMap["dcomplexVal"] = jsonArrayDcomplexVal
            }
            if !resourceHandleVal.isEmpty {
                var jsonArrayResourceHandleVal:Array<Dictionary<String,Any>> = []
                for oneValueResourceHandleVal in resourceHandleVal {
                    let ecodedMessageResourceHandleVal = try oneValueResourceHandleVal.encode()
                    jsonArrayResourceHandleVal.append(ecodedMessageResourceHandleVal)
                }
                jsonMap["resourceHandleVal"] = jsonArrayResourceHandleVal
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorProto {
            return try Tensorflow.TensorProto.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.TensorProto {
            return try Tensorflow.TensorProto.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasDtype) {
                output += "\(indent) dtype: \(dtype.description)\n"
            }
            if hasTensorShape {
                output += "\(indent) tensorShape {\n"
                if let outDescTensorShape = tensorShape {
                    output += try outDescTensorShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasVersionNumber {
                output += "\(indent) versionNumber: \(versionNumber) \n"
            }
            if hasTensorContent {
                output += "\(indent) tensorContent: \(tensorContent) \n"
            }
            var floatValElementIndex:Int = 0
            for oneValueFloatVal in floatVal  {
                output += "\(indent) floatVal[\(floatValElementIndex)]: \(oneValueFloatVal)\n"
                floatValElementIndex += 1
            }
            var doubleValElementIndex:Int = 0
            for oneValueDoubleVal in doubleVal  {
                output += "\(indent) doubleVal[\(doubleValElementIndex)]: \(oneValueDoubleVal)\n"
                doubleValElementIndex += 1
            }
            var intValElementIndex:Int = 0
            for oneValueIntVal in intVal  {
                output += "\(indent) intVal[\(intValElementIndex)]: \(oneValueIntVal)\n"
                intValElementIndex += 1
            }
            var stringValElementIndex:Int = 0
            for oneValueStringVal in stringVal  {
                output += "\(indent) stringVal[\(stringValElementIndex)]: \(oneValueStringVal)\n"
                stringValElementIndex += 1
            }
            var scomplexValElementIndex:Int = 0
            for oneValueScomplexVal in scomplexVal  {
                output += "\(indent) scomplexVal[\(scomplexValElementIndex)]: \(oneValueScomplexVal)\n"
                scomplexValElementIndex += 1
            }
            var int64ValElementIndex:Int = 0
            for oneValueInt64Val in int64Val  {
                output += "\(indent) int64Val[\(int64ValElementIndex)]: \(oneValueInt64Val)\n"
                int64ValElementIndex += 1
            }
            var boolValElementIndex:Int = 0
            for oneValueBoolVal in boolVal  {
                output += "\(indent) boolVal[\(boolValElementIndex)]: \(oneValueBoolVal)\n"
                boolValElementIndex += 1
            }
            var dcomplexValElementIndex:Int = 0
            for oneValueDcomplexVal in dcomplexVal  {
                output += "\(indent) dcomplexVal[\(dcomplexValElementIndex)]: \(oneValueDcomplexVal)\n"
                dcomplexValElementIndex += 1
            }
            var halfValElementIndex:Int = 0
            for oneValueHalfVal in halfVal  {
                output += "\(indent) halfVal[\(halfValElementIndex)]: \(oneValueHalfVal)\n"
                halfValElementIndex += 1
            }
            var resourceHandleValElementIndex:Int = 0
            for oneElementResourceHandleVal in resourceHandleVal {
                output += "\(indent) resourceHandleVal[\(resourceHandleValElementIndex)] {\n"
                output += try oneElementResourceHandleVal.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                resourceHandleValElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDtype {
                     hashCode = (hashCode &* 31) &+ dtype.hashValue
                }
                if hasTensorShape {
                    if let hashValuetensorShape = tensorShape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetensorShape
                    }
                }
                if hasVersionNumber {
                    hashCode = (hashCode &* 31) &+ versionNumber.hashValue
                }
                if hasTensorContent {
                    hashCode = (hashCode &* 31) &+ tensorContent.hashValue
                }
                for oneValueFloatVal in floatVal {
                    hashCode = (hashCode &* 31) &+ oneValueFloatVal.hashValue
                }
                for oneValueDoubleVal in doubleVal {
                    hashCode = (hashCode &* 31) &+ oneValueDoubleVal.hashValue
                }
                for oneValueIntVal in intVal {
                    hashCode = (hashCode &* 31) &+ oneValueIntVal.hashValue
                }
                for oneValueStringVal in stringVal {
                    hashCode = (hashCode &* 31) &+ oneValueStringVal.hashValue
                }
                for oneValueScomplexVal in scomplexVal {
                    hashCode = (hashCode &* 31) &+ oneValueScomplexVal.hashValue
                }
                for oneValueInt64Val in int64Val {
                    hashCode = (hashCode &* 31) &+ oneValueInt64Val.hashValue
                }
                for oneValueBoolVal in boolVal {
                    hashCode = (hashCode &* 31) &+ oneValueBoolVal.hashValue
                }
                for oneValueDcomplexVal in dcomplexVal {
                    hashCode = (hashCode &* 31) &+ oneValueDcomplexVal.hashValue
                }
                for oneValueHalfVal in halfVal {
                    hashCode = (hashCode &* 31) &+ oneValueHalfVal.hashValue
                }
                for oneElementResourceHandleVal in resourceHandleVal {
                    hashCode = (hashCode &* 31) &+ oneElementResourceHandleVal.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.TensorProto"
        }
        override public func className() -> String {
            return "Tensorflow.TensorProto"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.TensorProto = Tensorflow.TensorProto()
            public func getMessage() -> Tensorflow.TensorProto {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var dtype:Tensorflow.DataType {
                    get {
                        return builderResult.dtype
                    }
                    set (value) {
                        builderResult.hasDtype = true
                        builderResult.dtype = value
                    }
                }
                public var hasDtype:Bool{
                    get {
                        return builderResult.hasDtype
                    }
                }
            @discardableResult
                public func setDtype(_ value:Tensorflow.DataType) -> Tensorflow.TensorProto.Builder {
                  self.dtype = value
                  return self
                }
            @discardableResult
                public func clearDtype() -> Tensorflow.TensorProto.Builder {
                   builderResult.hasDtype = false
                   builderResult.dtype = .dtInvalid
                   return self
                }
            /// Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
            public var tensorShape:Tensorflow.TensorShapeProto! {
                get {
                    if tensorShapeBuilder_ != nil {
                        builderResult.tensorShape = tensorShapeBuilder_.getMessage()
                    }
                    return builderResult.tensorShape
                }
                set (value) {
                    builderResult.hasTensorShape = true
                    builderResult.tensorShape = value
                }
            }
            public var hasTensorShape:Bool {
                get {
                    return builderResult.hasTensorShape
                }
            }
            fileprivate var tensorShapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasTensorShape = true
                }
            }
            public func getTensorShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if tensorShapeBuilder_ == nil {
                    tensorShapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.tensorShape = tensorShapeBuilder_.getMessage()
                    if tensorShape != nil {
                        try! tensorShapeBuilder_.mergeFrom(other: tensorShape)
                    }
                }
                return tensorShapeBuilder_
            }
            @discardableResult
            public func setTensorShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.TensorProto.Builder {
                self.tensorShape = value
                return self
            }
            @discardableResult
            public func mergeTensorShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.TensorProto.Builder {
                if builderResult.hasTensorShape {
                    builderResult.tensorShape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.tensorShape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.tensorShape = value
                }
                builderResult.hasTensorShape = true
                return self
            }
            @discardableResult
            public func clearTensorShape() -> Tensorflow.TensorProto.Builder {
                tensorShapeBuilder_ = nil
                builderResult.hasTensorShape = false
                builderResult.tensorShape = nil
                return self
            }
            /// Version number.
            /// In version 0, if the "repeated xxx" representations contain only one
            /// element, that element is repeated to fill the shape.  This makes it easy
            /// to represent a constant Tensor with a single value.
            public var versionNumber:Int32 {
                get {
                    return builderResult.versionNumber
                }
                set (value) {
                    builderResult.hasVersionNumber = true
                    builderResult.versionNumber = value
                }
            }
            public var hasVersionNumber:Bool {
                get {
                    return builderResult.hasVersionNumber
                }
            }
            @discardableResult
            public func setVersionNumber(_ value:Int32) -> Tensorflow.TensorProto.Builder {
                self.versionNumber = value
                return self
            }
            @discardableResult
            public func clearVersionNumber() -> Tensorflow.TensorProto.Builder{
                builderResult.hasVersionNumber = false
                builderResult.versionNumber = Int32(0)
                return self
            }
            /// Serialized raw tensor content from either Tensor::AsProtoTensorContent or
            /// memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
            /// can be used for all tensor types. The purpose of this representation is to
            /// reduce serialization overhead during RPC call by avoiding serialization of
            /// many repeated small items.
            public var tensorContent:Data {
                get {
                    return builderResult.tensorContent
                }
                set (value) {
                    builderResult.hasTensorContent = true
                    builderResult.tensorContent = value
                }
            }
            public var hasTensorContent:Bool {
                get {
                    return builderResult.hasTensorContent
                }
            }
            @discardableResult
            public func setTensorContent(_ value:Data) -> Tensorflow.TensorProto.Builder {
                self.tensorContent = value
                return self
            }
            @discardableResult
            public func clearTensorContent() -> Tensorflow.TensorProto.Builder{
                builderResult.hasTensorContent = false
                builderResult.tensorContent = Data()
                return self
            }
            /// DT_HALF. Note that since protobuf has no int16 type, we'll have some
            /// pointless zero padding for each value here.
            public var halfVal:Array<Int32> {
                get {
                    return builderResult.halfVal
                }
                set (array) {
                    builderResult.halfVal = array
                }
            }
            @discardableResult
            public func setHalfVal(_ value:Array<Int32>) -> Tensorflow.TensorProto.Builder {
                self.halfVal = value
                return self
            }
            @discardableResult
            public func clearHalfVal() -> Tensorflow.TensorProto.Builder {
                builderResult.halfVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_FLOAT.
            public var floatVal:Array<Float> {
                get {
                    return builderResult.floatVal
                }
                set (array) {
                    builderResult.floatVal = array
                }
            }
            @discardableResult
            public func setFloatVal(_ value:Array<Float>) -> Tensorflow.TensorProto.Builder {
                self.floatVal = value
                return self
            }
            @discardableResult
            public func clearFloatVal() -> Tensorflow.TensorProto.Builder {
                builderResult.floatVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_DOUBLE.
            public var doubleVal:Array<Double> {
                get {
                    return builderResult.doubleVal
                }
                set (array) {
                    builderResult.doubleVal = array
                }
            }
            @discardableResult
            public func setDoubleVal(_ value:Array<Double>) -> Tensorflow.TensorProto.Builder {
                self.doubleVal = value
                return self
            }
            @discardableResult
            public func clearDoubleVal() -> Tensorflow.TensorProto.Builder {
                builderResult.doubleVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
            public var intVal:Array<Int32> {
                get {
                    return builderResult.intVal
                }
                set (array) {
                    builderResult.intVal = array
                }
            }
            @discardableResult
            public func setIntVal(_ value:Array<Int32>) -> Tensorflow.TensorProto.Builder {
                self.intVal = value
                return self
            }
            @discardableResult
            public func clearIntVal() -> Tensorflow.TensorProto.Builder {
                builderResult.intVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_STRING
            public var stringVal:Array<Data> {
                get {
                    return builderResult.stringVal
                }
                set (array) {
                    builderResult.stringVal = array
                }
            }
            @discardableResult
            public func setStringVal(_ value:Array<Data>) -> Tensorflow.TensorProto.Builder {
                self.stringVal = value
                return self
            }
            @discardableResult
            public func clearStringVal() -> Tensorflow.TensorProto.Builder {
                builderResult.stringVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
            /// and imaginary parts of i-th single precision complex.
            public var scomplexVal:Array<Float> {
                get {
                    return builderResult.scomplexVal
                }
                set (array) {
                    builderResult.scomplexVal = array
                }
            }
            @discardableResult
            public func setScomplexVal(_ value:Array<Float>) -> Tensorflow.TensorProto.Builder {
                self.scomplexVal = value
                return self
            }
            @discardableResult
            public func clearScomplexVal() -> Tensorflow.TensorProto.Builder {
                builderResult.scomplexVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_INT64
            public var int64Val:Array<Int64> {
                get {
                    return builderResult.int64Val
                }
                set (array) {
                    builderResult.int64Val = array
                }
            }
            @discardableResult
            public func setInt64Val(_ value:Array<Int64>) -> Tensorflow.TensorProto.Builder {
                self.int64Val = value
                return self
            }
            @discardableResult
            public func clearInt64Val() -> Tensorflow.TensorProto.Builder {
                builderResult.int64Val.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_BOOL
            public var boolVal:Array<Bool> {
                get {
                    return builderResult.boolVal
                }
                set (array) {
                    builderResult.boolVal = array
                }
            }
            @discardableResult
            public func setBoolVal(_ value:Array<Bool>) -> Tensorflow.TensorProto.Builder {
                self.boolVal = value
                return self
            }
            @discardableResult
            public func clearBoolVal() -> Tensorflow.TensorProto.Builder {
                builderResult.boolVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
            /// and imaginary parts of i-th double precision complex.
            public var dcomplexVal:Array<Double> {
                get {
                    return builderResult.dcomplexVal
                }
                set (array) {
                    builderResult.dcomplexVal = array
                }
            }
            @discardableResult
            public func setDcomplexVal(_ value:Array<Double>) -> Tensorflow.TensorProto.Builder {
                self.dcomplexVal = value
                return self
            }
            @discardableResult
            public func clearDcomplexVal() -> Tensorflow.TensorProto.Builder {
                builderResult.dcomplexVal.removeAll(keepingCapacity: false)
                return self
            }
            /// DT_RESOURCE
            public var resourceHandleVal:Array<Tensorflow.ResourceHandle> {
                get {
                    return builderResult.resourceHandleVal
                }
                set (value) {
                    builderResult.resourceHandleVal = value
                }
            }
            @discardableResult
            public func setResourceHandleVal(_ value:Array<Tensorflow.ResourceHandle>) -> Tensorflow.TensorProto.Builder {
                self.resourceHandleVal = value
                return self
            }
            @discardableResult
            public func clearResourceHandleVal() -> Tensorflow.TensorProto.Builder {
                builderResult.resourceHandleVal.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.TensorProto.Builder {
                builderResult = Tensorflow.TensorProto()
                return self
            }
            override public func clone() throws -> Tensorflow.TensorProto.Builder {
                return try Tensorflow.TensorProto.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.TensorProto {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.TensorProto {
                let returnMe:Tensorflow.TensorProto = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.TensorProto) throws -> Tensorflow.TensorProto.Builder {
                if other == Tensorflow.TensorProto() {
                    return self
                }
                if other.hasDtype {
                    dtype = other.dtype
                }
                if (other.hasTensorShape) {
                    try mergeTensorShape(value: other.tensorShape)
                }
                if other.hasVersionNumber {
                    versionNumber = other.versionNumber
                }
                if other.hasTensorContent {
                    tensorContent = other.tensorContent
                }
                if !other.halfVal.isEmpty {
                    builderResult.halfVal += other.halfVal
                }
                if !other.floatVal.isEmpty {
                    builderResult.floatVal += other.floatVal
                }
                if !other.doubleVal.isEmpty {
                    builderResult.doubleVal += other.doubleVal
                }
                if !other.intVal.isEmpty {
                    builderResult.intVal += other.intVal
                }
                if !other.stringVal.isEmpty {
                    builderResult.stringVal += other.stringVal
                }
                if !other.scomplexVal.isEmpty {
                    builderResult.scomplexVal += other.scomplexVal
                }
                if !other.int64Val.isEmpty {
                    builderResult.int64Val += other.int64Val
                }
                if !other.boolVal.isEmpty {
                    builderResult.boolVal += other.boolVal
                }
                if !other.dcomplexVal.isEmpty {
                    builderResult.dcomplexVal += other.dcomplexVal
                }
                if !other.resourceHandleVal.isEmpty  {
                     builderResult.resourceHandleVal += other.resourceHandleVal
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorProto.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorProto.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntdtype = try codedInputStream.readEnum()
                        if let enumsdtype = Tensorflow.DataType(rawValue:valueIntdtype){
                            dtype = enumsdtype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntdtype))
                        }

                    case 18:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasTensorShape {
                            try subBuilder.mergeFrom(other: tensorShape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        tensorShape = subBuilder.buildPartial()

                    case 24:
                        versionNumber = try codedInputStream.readInt32()

                    case 34:
                        tensorContent = try codedInputStream.readData()

                    case 42:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.floatVal.append(try codedInputStream.readFloat())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 50:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.doubleVal.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 58:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.intVal.append(try codedInputStream.readInt32())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 66:
                        stringVal += [try codedInputStream.readData()]

                    case 74:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.scomplexVal.append(try codedInputStream.readFloat())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 82:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.int64Val.append(try codedInputStream.readInt64())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 90:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.boolVal.append(try codedInputStream.readBool())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 98:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.dcomplexVal.append(try codedInputStream.readDouble())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 106:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.halfVal.append(try codedInputStream.readInt32())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 114:
                        let subBuilder = Tensorflow.ResourceHandle.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        resourceHandleVal.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.TensorProto.Builder {
                let resultDecodedBuilder = Tensorflow.TensorProto.Builder()
                if let jsonValueDtype = jsonMap["dtype"] as? String {
                    resultDecodedBuilder.dtype = try Tensorflow.DataType.fromString(str: jsonValueDtype)
                }
                if let jsonValueTensorShape = jsonMap["tensorShape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.tensorShape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueTensorShape).build()

                }
                if let jsonValueVersionNumber = jsonMap["versionNumber"] as? Int {
                    resultDecodedBuilder.versionNumber = Int32(jsonValueVersionNumber)
                } else if let jsonValueVersionNumber = jsonMap["versionNumber"] as? String {
                    resultDecodedBuilder.versionNumber = Int32(jsonValueVersionNumber)!
                }
                if let jsonValueTensorContent = jsonMap["tensorContent"] as? String {
                    resultDecodedBuilder.tensorContent = Data(base64Encoded:jsonValueTensorContent, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                if let jsonValueHalfVal = jsonMap["halfVal"] as? Array<Int> {
                    var jsonArrayHalfVal:Array<Int32> = []
                    for oneValueHalfVal in jsonValueHalfVal {
                        jsonArrayHalfVal.append(Int32(oneValueHalfVal))
                    }
                    resultDecodedBuilder.halfVal = jsonArrayHalfVal
                }
                if let jsonValueFloatVal = jsonMap["floatVal"] as? Array<Float> {
                    var jsonArrayFloatVal:Array<Float> = []
                    for oneValueFloatVal in jsonValueFloatVal {
                        jsonArrayFloatVal.append(Float(oneValueFloatVal))
                    }
                    resultDecodedBuilder.floatVal = jsonArrayFloatVal
                }
                if let jsonValueDoubleVal = jsonMap["doubleVal"] as? Array<Double> {
                    var jsonArrayDoubleVal:Array<Double> = []
                    for oneValueDoubleVal in jsonValueDoubleVal {
                        jsonArrayDoubleVal.append(Double(oneValueDoubleVal))
                    }
                    resultDecodedBuilder.doubleVal = jsonArrayDoubleVal
                }
                if let jsonValueIntVal = jsonMap["intVal"] as? Array<Int> {
                    var jsonArrayIntVal:Array<Int32> = []
                    for oneValueIntVal in jsonValueIntVal {
                        jsonArrayIntVal.append(Int32(oneValueIntVal))
                    }
                    resultDecodedBuilder.intVal = jsonArrayIntVal
                }
                if let jsonValueStringVal = jsonMap["stringVal"] as? Array<String> {
                    var jsonArrayStringVal:Array<Data> = []
                    for oneValueStringVal in jsonValueStringVal {
                        jsonArrayStringVal.append(Data(base64Encoded:oneValueStringVal, options: Data.Base64DecodingOptions(rawValue:0))!)
                    }
                    resultDecodedBuilder.stringVal = jsonArrayStringVal
                }
                if let jsonValueScomplexVal = jsonMap["scomplexVal"] as? Array<Float> {
                    var jsonArrayScomplexVal:Array<Float> = []
                    for oneValueScomplexVal in jsonValueScomplexVal {
                        jsonArrayScomplexVal.append(Float(oneValueScomplexVal))
                    }
                    resultDecodedBuilder.scomplexVal = jsonArrayScomplexVal
                }
                if let jsonValueInt64Val = jsonMap["int64Val"] as? Array<String> {
                    var jsonArrayInt64Val:Array<Int64> = []
                    for oneValueInt64Val in jsonValueInt64Val {
                        jsonArrayInt64Val.append(Int64(oneValueInt64Val)!)
                    }
                    resultDecodedBuilder.int64Val = jsonArrayInt64Val
                }
                if let jsonValueBoolVal = jsonMap["boolVal"] as? Array<Bool> {
                    var jsonArrayBoolVal:Array<Bool> = []
                    for oneValueBoolVal in jsonValueBoolVal {
                        jsonArrayBoolVal.append(oneValueBoolVal)
                    }
                    resultDecodedBuilder.boolVal = jsonArrayBoolVal
                }
                if let jsonValueDcomplexVal = jsonMap["dcomplexVal"] as? Array<Double> {
                    var jsonArrayDcomplexVal:Array<Double> = []
                    for oneValueDcomplexVal in jsonValueDcomplexVal {
                        jsonArrayDcomplexVal.append(Double(oneValueDcomplexVal))
                    }
                    resultDecodedBuilder.dcomplexVal = jsonArrayDcomplexVal
                }
                if let jsonValueResourceHandleVal = jsonMap["resourceHandleVal"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayResourceHandleVal:Array<Tensorflow.ResourceHandle> = []
                    for oneValueResourceHandleVal in jsonValueResourceHandleVal {
                        let messageFromStringResourceHandleVal = try Tensorflow.ResourceHandle.Builder.decodeToBuilder(jsonMap:oneValueResourceHandleVal).build()

                        jsonArrayResourceHandleVal.append(messageFromStringResourceHandleVal)
                    }
                    resultDecodedBuilder.resourceHandleVal = jsonArrayResourceHandleVal
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.TensorProto.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.TensorProto.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.TensorProto: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.TensorProto> {
        var mergedArray = Array<Tensorflow.TensorProto>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.TensorProto? {
        return try Tensorflow.TensorProto.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.TensorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.TensorProto {
        return try Tensorflow.TensorProto.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "dtype": return self.dtype
        case "tensorShape": return self.tensorShape
        case "versionNumber": return self.versionNumber
        case "tensorContent": return self.tensorContent
        case "halfVal": return self.halfVal
        case "floatVal": return self.floatVal
        case "doubleVal": return self.doubleVal
        case "intVal": return self.intVal
        case "stringVal": return self.stringVal
        case "scomplexVal": return self.scomplexVal
        case "int64Val": return self.int64Val
        case "boolVal": return self.boolVal
        case "dcomplexVal": return self.dcomplexVal
        case "resourceHandleVal": return self.resourceHandleVal
        default: return nil
        }
    }
}
extension Tensorflow.TensorProto.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "dtype": return self.dtype
            case "tensorShape": return self.tensorShape
            case "versionNumber": return self.versionNumber
            case "tensorContent": return self.tensorContent
            case "halfVal": return self.halfVal
            case "floatVal": return self.floatVal
            case "doubleVal": return self.doubleVal
            case "intVal": return self.intVal
            case "stringVal": return self.stringVal
            case "scomplexVal": return self.scomplexVal
            case "int64Val": return self.int64Val
            case "boolVal": return self.boolVal
            case "dcomplexVal": return self.dcomplexVal
            case "resourceHandleVal": return self.resourceHandleVal
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "dtype":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DataType else {
                    return
                }
                self.dtype = newSubscriptValue
            case "tensorShape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.tensorShape = newSubscriptValue
            case "versionNumber":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.versionNumber = newSubscriptValue
            case "tensorContent":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.tensorContent = newSubscriptValue
            case "halfVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int32> else {
                    return
                }
                self.halfVal = newSubscriptValue
            case "floatVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Float> else {
                    return
                }
                self.floatVal = newSubscriptValue
            case "doubleVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.doubleVal = newSubscriptValue
            case "intVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int32> else {
                    return
                }
                self.intVal = newSubscriptValue
            case "stringVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Data> else {
                    return
                }
                self.stringVal = newSubscriptValue
            case "scomplexVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Float> else {
                    return
                }
                self.scomplexVal = newSubscriptValue
            case "int64Val":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.int64Val = newSubscriptValue
            case "boolVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Bool> else {
                    return
                }
                self.boolVal = newSubscriptValue
            case "dcomplexVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Double> else {
                    return
                }
                self.dcomplexVal = newSubscriptValue
            case "resourceHandleVal":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.ResourceHandle> else {
                    return
                }
                self.resourceHandleVal = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
