/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "saved_tensor_slice.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct SavedTensorSliceRoot {
        public static let `default` = SavedTensorSliceRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorSliceRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TypesRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.VersionsRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Metadata describing the set of slices of the same tensor saved in a
    /// checkpoint file.
    final public class SavedSliceMeta : GeneratedMessage {

        public static func == (lhs: Tensorflow.SavedSliceMeta, rhs: Tensorflow.SavedSliceMeta) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasShape == rhs.hasShape) && (!lhs.hasShape || lhs.shape == rhs.shape)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.slice == rhs.slice)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Name of the tensor.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var shape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasShape:Bool = false
        public fileprivate(set) var type:Tensorflow.DataType = Tensorflow.DataType.dtInvalid
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var slice:Array<Tensorflow.TensorSliceProto>  = Array<Tensorflow.TensorSliceProto>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasShape {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:shape)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:type.rawValue)
            }
            for oneElementSlice in slice {
                  try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementSlice)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasShape {
                if let varSizeshape = shape?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeshape
                }
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 3)
            }
            for oneElementSlice in slice {
                serialize_size += oneElementSlice.computeMessageSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SavedSliceMeta.Builder {
            return Tensorflow.SavedSliceMeta.classBuilder() as! Tensorflow.SavedSliceMeta.Builder
        }
        public func getBuilder() -> Tensorflow.SavedSliceMeta.Builder {
            return classBuilder() as! Tensorflow.SavedSliceMeta.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedSliceMeta.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedSliceMeta.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SavedSliceMeta.Builder {
            return try Tensorflow.SavedSliceMeta.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SavedSliceMeta) throws -> Tensorflow.SavedSliceMeta.Builder {
            return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasShape {
                jsonMap["shape"] = try shape.encode()
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if !slice.isEmpty {
                var jsonArraySlice:Array<Dictionary<String,Any>> = []
                for oneValueSlice in slice {
                    let ecodedMessageSlice = try oneValueSlice.encode()
                    jsonArraySlice.append(ecodedMessageSlice)
                }
                jsonMap["slice"] = jsonArraySlice
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedSliceMeta {
            return try Tensorflow.SavedSliceMeta.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SavedSliceMeta {
            return try Tensorflow.SavedSliceMeta.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasShape {
                output += "\(indent) shape {\n"
                if let outDescShape = shape {
                    output += try outDescShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            var sliceElementIndex:Int = 0
            for oneElementSlice in slice {
                output += "\(indent) slice[\(sliceElementIndex)] {\n"
                output += try oneElementSlice.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                sliceElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasShape {
                    if let hashValueshape = shape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueshape
                    }
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                for oneElementSlice in slice {
                    hashCode = (hashCode &* 31) &+ oneElementSlice.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SavedSliceMeta"
        }
        override public func className() -> String {
            return "Tensorflow.SavedSliceMeta"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SavedSliceMeta = Tensorflow.SavedSliceMeta()
            public func getMessage() -> Tensorflow.SavedSliceMeta {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Name of the tensor.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.SavedSliceMeta.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.SavedSliceMeta.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// Shape of the tensor
            public var shape:Tensorflow.TensorShapeProto! {
                get {
                    if shapeBuilder_ != nil {
                        builderResult.shape = shapeBuilder_.getMessage()
                    }
                    return builderResult.shape
                }
                set (value) {
                    builderResult.hasShape = true
                    builderResult.shape = value
                }
            }
            public var hasShape:Bool {
                get {
                    return builderResult.hasShape
                }
            }
            fileprivate var shapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasShape = true
                }
            }
            public func getShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if shapeBuilder_ == nil {
                    shapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.shape = shapeBuilder_.getMessage()
                    if shape != nil {
                        try! shapeBuilder_.mergeFrom(other: shape)
                    }
                }
                return shapeBuilder_
            }
            @discardableResult
            public func setShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.SavedSliceMeta.Builder {
                self.shape = value
                return self
            }
            @discardableResult
            public func mergeShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.SavedSliceMeta.Builder {
                if builderResult.hasShape {
                    builderResult.shape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.shape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.shape = value
                }
                builderResult.hasShape = true
                return self
            }
            @discardableResult
            public func clearShape() -> Tensorflow.SavedSliceMeta.Builder {
                shapeBuilder_ = nil
                builderResult.hasShape = false
                builderResult.shape = nil
                return self
            }
            /// Type of the tensor
                public var type:Tensorflow.DataType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Tensorflow.DataType) -> Tensorflow.SavedSliceMeta.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Tensorflow.SavedSliceMeta.Builder {
                   builderResult.hasType = false
                   builderResult.type = .dtInvalid
                   return self
                }
            /// Explicit list of slices saved in the checkpoint file.
            public var slice:Array<Tensorflow.TensorSliceProto> {
                get {
                    return builderResult.slice
                }
                set (value) {
                    builderResult.slice = value
                }
            }
            @discardableResult
            public func setSlice(_ value:Array<Tensorflow.TensorSliceProto>) -> Tensorflow.SavedSliceMeta.Builder {
                self.slice = value
                return self
            }
            @discardableResult
            public func clearSlice() -> Tensorflow.SavedSliceMeta.Builder {
                builderResult.slice.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SavedSliceMeta.Builder {
                builderResult = Tensorflow.SavedSliceMeta()
                return self
            }
            override public func clone() throws -> Tensorflow.SavedSliceMeta.Builder {
                return try Tensorflow.SavedSliceMeta.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SavedSliceMeta {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SavedSliceMeta {
                let returnMe:Tensorflow.SavedSliceMeta = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SavedSliceMeta) throws -> Tensorflow.SavedSliceMeta.Builder {
                if other == Tensorflow.SavedSliceMeta() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if (other.hasShape) {
                    try mergeShape(value: other.shape)
                }
                if other.hasType {
                    type = other.type
                }
                if !other.slice.isEmpty  {
                     builderResult.slice += other.slice
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedSliceMeta.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSliceMeta.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasShape {
                            try subBuilder.mergeFrom(other: shape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        shape = subBuilder.buildPartial()

                    case 24:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Tensorflow.DataType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueInttype))
                        }

                    case 34:
                        let subBuilder = Tensorflow.TensorSliceProto.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        slice.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedSliceMeta.Builder {
                let resultDecodedBuilder = Tensorflow.SavedSliceMeta.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueShape = jsonMap["shape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.shape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueShape).build()

                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Tensorflow.DataType.fromString(str: jsonValueType)
                }
                if let jsonValueSlice = jsonMap["slice"] as? Array<Dictionary<String,Any>> {
                    var jsonArraySlice:Array<Tensorflow.TensorSliceProto> = []
                    for oneValueSlice in jsonValueSlice {
                        let messageFromStringSlice = try Tensorflow.TensorSliceProto.Builder.decodeToBuilder(jsonMap:oneValueSlice).build()

                        jsonArraySlice.append(messageFromStringSlice)
                    }
                    resultDecodedBuilder.slice = jsonArraySlice
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SavedSliceMeta.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SavedSliceMeta.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Metadata describing the set of tensor slices saved in a checkpoint file.
    /// It is always stored at the beginning of each checkpoint file.
    final public class SavedTensorSliceMeta : GeneratedMessage {

        public static func == (lhs: Tensorflow.SavedTensorSliceMeta, rhs: Tensorflow.SavedTensorSliceMeta) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.tensor == rhs.tensor)
            fieldCheck = fieldCheck && (lhs.hasVersions == rhs.hasVersions) && (!lhs.hasVersions || lhs.versions == rhs.versions)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var tensor:Array<Tensorflow.SavedSliceMeta>  = Array<Tensorflow.SavedSliceMeta>()
        public fileprivate(set) var versions:Tensorflow.VersionDef!
        public fileprivate(set) var hasVersions:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementTensor in tensor {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementTensor)
            }
            if hasVersions {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:versions)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementTensor in tensor {
                serialize_size += oneElementTensor.computeMessageSize(fieldNumber: 1)
            }
            if hasVersions {
                if let varSizeversions = versions?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeversions
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SavedTensorSliceMeta.Builder {
            return Tensorflow.SavedTensorSliceMeta.classBuilder() as! Tensorflow.SavedTensorSliceMeta.Builder
        }
        public func getBuilder() -> Tensorflow.SavedTensorSliceMeta.Builder {
            return classBuilder() as! Tensorflow.SavedTensorSliceMeta.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedTensorSliceMeta.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedTensorSliceMeta.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SavedTensorSliceMeta.Builder {
            return try Tensorflow.SavedTensorSliceMeta.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SavedTensorSliceMeta) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
            return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !tensor.isEmpty {
                var jsonArrayTensor:Array<Dictionary<String,Any>> = []
                for oneValueTensor in tensor {
                    let ecodedMessageTensor = try oneValueTensor.encode()
                    jsonArrayTensor.append(ecodedMessageTensor)
                }
                jsonMap["tensor"] = jsonArrayTensor
            }
            if hasVersions {
                jsonMap["versions"] = try versions.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedTensorSliceMeta {
            return try Tensorflow.SavedTensorSliceMeta.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SavedTensorSliceMeta {
            return try Tensorflow.SavedTensorSliceMeta.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var tensorElementIndex:Int = 0
            for oneElementTensor in tensor {
                output += "\(indent) tensor[\(tensorElementIndex)] {\n"
                output += try oneElementTensor.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                tensorElementIndex += 1
            }
            if hasVersions {
                output += "\(indent) versions {\n"
                if let outDescVersions = versions {
                    output += try outDescVersions.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementTensor in tensor {
                    hashCode = (hashCode &* 31) &+ oneElementTensor.hashValue
                }
                if hasVersions {
                    if let hashValueversions = versions?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueversions
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SavedTensorSliceMeta"
        }
        override public func className() -> String {
            return "Tensorflow.SavedTensorSliceMeta"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SavedTensorSliceMeta = Tensorflow.SavedTensorSliceMeta()
            public func getMessage() -> Tensorflow.SavedTensorSliceMeta {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Each SavedSliceMeta describes the slices for one tensor.
            public var tensor:Array<Tensorflow.SavedSliceMeta> {
                get {
                    return builderResult.tensor
                }
                set (value) {
                    builderResult.tensor = value
                }
            }
            @discardableResult
            public func setTensor(_ value:Array<Tensorflow.SavedSliceMeta>) -> Tensorflow.SavedTensorSliceMeta.Builder {
                self.tensor = value
                return self
            }
            @discardableResult
            public func clearTensor() -> Tensorflow.SavedTensorSliceMeta.Builder {
                builderResult.tensor.removeAll(keepingCapacity: false)
                return self
            }
            /// Compatibility version of this checkpoint.  See core/public/version.h
            /// for version history.
            public var versions:Tensorflow.VersionDef! {
                get {
                    if versionsBuilder_ != nil {
                        builderResult.versions = versionsBuilder_.getMessage()
                    }
                    return builderResult.versions
                }
                set (value) {
                    builderResult.hasVersions = true
                    builderResult.versions = value
                }
            }
            public var hasVersions:Bool {
                get {
                    return builderResult.hasVersions
                }
            }
            fileprivate var versionsBuilder_:Tensorflow.VersionDef.Builder! {
                didSet {
                    builderResult.hasVersions = true
                }
            }
            public func getVersionsBuilder() -> Tensorflow.VersionDef.Builder {
                if versionsBuilder_ == nil {
                    versionsBuilder_ = Tensorflow.VersionDef.Builder()
                    builderResult.versions = versionsBuilder_.getMessage()
                    if versions != nil {
                        try! versionsBuilder_.mergeFrom(other: versions)
                    }
                }
                return versionsBuilder_
            }
            @discardableResult
            public func setVersions(_ value:Tensorflow.VersionDef!) -> Tensorflow.SavedTensorSliceMeta.Builder {
                self.versions = value
                return self
            }
            @discardableResult
            public func mergeVersions(value:Tensorflow.VersionDef) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                if builderResult.hasVersions {
                    builderResult.versions = try Tensorflow.VersionDef.builderWithPrototype(prototype:builderResult.versions).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.versions = value
                }
                builderResult.hasVersions = true
                return self
            }
            @discardableResult
            public func clearVersions() -> Tensorflow.SavedTensorSliceMeta.Builder {
                versionsBuilder_ = nil
                builderResult.hasVersions = false
                builderResult.versions = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SavedTensorSliceMeta.Builder {
                builderResult = Tensorflow.SavedTensorSliceMeta()
                return self
            }
            override public func clone() throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                return try Tensorflow.SavedTensorSliceMeta.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SavedTensorSliceMeta {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SavedTensorSliceMeta {
                let returnMe:Tensorflow.SavedTensorSliceMeta = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SavedTensorSliceMeta) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                if other == Tensorflow.SavedTensorSliceMeta() {
                    return self
                }
                if !other.tensor.isEmpty  {
                     builderResult.tensor += other.tensor
                }
                if (other.hasVersions) {
                    try mergeVersions(value: other.versions)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Tensorflow.SavedSliceMeta.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        tensor.append(subBuilder.buildPartial())

                    case 18:
                        let subBuilder:Tensorflow.VersionDef.Builder = Tensorflow.VersionDef.Builder()
                        if hasVersions {
                            try subBuilder.mergeFrom(other: versions)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        versions = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                let resultDecodedBuilder = Tensorflow.SavedTensorSliceMeta.Builder()
                if let jsonValueTensor = jsonMap["tensor"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayTensor:Array<Tensorflow.SavedSliceMeta> = []
                    for oneValueTensor in jsonValueTensor {
                        let messageFromStringTensor = try Tensorflow.SavedSliceMeta.Builder.decodeToBuilder(jsonMap:oneValueTensor).build()

                        jsonArrayTensor.append(messageFromStringTensor)
                    }
                    resultDecodedBuilder.tensor = jsonArrayTensor
                }
                if let jsonValueVersions = jsonMap["versions"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.versions = try Tensorflow.VersionDef.Builder.decodeToBuilder(jsonMap:jsonValueVersions).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SavedTensorSliceMeta.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SavedTensorSliceMeta.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Saved tensor slice: it stores the name of the tensors, the slice, and the
    /// raw data.
    final public class SavedSlice : GeneratedMessage {

        public static func == (lhs: Tensorflow.SavedSlice, rhs: Tensorflow.SavedSlice) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasSlice == rhs.hasSlice) && (!lhs.hasSlice || lhs.slice == rhs.slice)
            fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Name of the tensor that this slice belongs to. This must be identical to
        /// the name used to encode the key for this record.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var slice:Tensorflow.TensorSliceProto!
        public fileprivate(set) var hasSlice:Bool = false
        public fileprivate(set) var data:Tensorflow.TensorProto!
        public fileprivate(set) var hasData:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasSlice {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:slice)
            }
            if hasData {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:data)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasSlice {
                if let varSizeslice = slice?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeslice
                }
            }
            if hasData {
                if let varSizedata = data?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizedata
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SavedSlice.Builder {
            return Tensorflow.SavedSlice.classBuilder() as! Tensorflow.SavedSlice.Builder
        }
        public func getBuilder() -> Tensorflow.SavedSlice.Builder {
            return classBuilder() as! Tensorflow.SavedSlice.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedSlice.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedSlice.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SavedSlice.Builder {
            return try Tensorflow.SavedSlice.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SavedSlice) throws -> Tensorflow.SavedSlice.Builder {
            return try Tensorflow.SavedSlice.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasSlice {
                jsonMap["slice"] = try slice.encode()
            }
            if hasData {
                jsonMap["data"] = try data.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedSlice {
            return try Tensorflow.SavedSlice.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SavedSlice {
            return try Tensorflow.SavedSlice.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasSlice {
                output += "\(indent) slice {\n"
                if let outDescSlice = slice {
                    output += try outDescSlice.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasData {
                output += "\(indent) data {\n"
                if let outDescData = data {
                    output += try outDescData.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasSlice {
                    if let hashValueslice = slice?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueslice
                    }
                }
                if hasData {
                    if let hashValuedata = data?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuedata
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SavedSlice"
        }
        override public func className() -> String {
            return "Tensorflow.SavedSlice"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SavedSlice = Tensorflow.SavedSlice()
            public func getMessage() -> Tensorflow.SavedSlice {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Name of the tensor that this slice belongs to. This must be identical to
            /// the name used to encode the key for this record.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.SavedSlice.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.SavedSlice.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// Extent of the slice.  Must have one entry for each of the dimension of the
            /// tensor that this slice belongs to.
            public var slice:Tensorflow.TensorSliceProto! {
                get {
                    if sliceBuilder_ != nil {
                        builderResult.slice = sliceBuilder_.getMessage()
                    }
                    return builderResult.slice
                }
                set (value) {
                    builderResult.hasSlice = true
                    builderResult.slice = value
                }
            }
            public var hasSlice:Bool {
                get {
                    return builderResult.hasSlice
                }
            }
            fileprivate var sliceBuilder_:Tensorflow.TensorSliceProto.Builder! {
                didSet {
                    builderResult.hasSlice = true
                }
            }
            public func getSliceBuilder() -> Tensorflow.TensorSliceProto.Builder {
                if sliceBuilder_ == nil {
                    sliceBuilder_ = Tensorflow.TensorSliceProto.Builder()
                    builderResult.slice = sliceBuilder_.getMessage()
                    if slice != nil {
                        try! sliceBuilder_.mergeFrom(other: slice)
                    }
                }
                return sliceBuilder_
            }
            @discardableResult
            public func setSlice(_ value:Tensorflow.TensorSliceProto!) -> Tensorflow.SavedSlice.Builder {
                self.slice = value
                return self
            }
            @discardableResult
            public func mergeSlice(value:Tensorflow.TensorSliceProto) throws -> Tensorflow.SavedSlice.Builder {
                if builderResult.hasSlice {
                    builderResult.slice = try Tensorflow.TensorSliceProto.builderWithPrototype(prototype:builderResult.slice).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.slice = value
                }
                builderResult.hasSlice = true
                return self
            }
            @discardableResult
            public func clearSlice() -> Tensorflow.SavedSlice.Builder {
                sliceBuilder_ = nil
                builderResult.hasSlice = false
                builderResult.slice = nil
                return self
            }
            /// The raw data of the slice is stored as a TensorProto. Only raw data are
            /// stored (we don't fill in fields such as dtype or tensor_shape).
            public var data:Tensorflow.TensorProto! {
                get {
                    if dataBuilder_ != nil {
                        builderResult.data = dataBuilder_.getMessage()
                    }
                    return builderResult.data
                }
                set (value) {
                    builderResult.hasData = true
                    builderResult.data = value
                }
            }
            public var hasData:Bool {
                get {
                    return builderResult.hasData
                }
            }
            fileprivate var dataBuilder_:Tensorflow.TensorProto.Builder! {
                didSet {
                    builderResult.hasData = true
                }
            }
            public func getDataBuilder() -> Tensorflow.TensorProto.Builder {
                if dataBuilder_ == nil {
                    dataBuilder_ = Tensorflow.TensorProto.Builder()
                    builderResult.data = dataBuilder_.getMessage()
                    if data != nil {
                        try! dataBuilder_.mergeFrom(other: data)
                    }
                }
                return dataBuilder_
            }
            @discardableResult
            public func setData(_ value:Tensorflow.TensorProto!) -> Tensorflow.SavedSlice.Builder {
                self.data = value
                return self
            }
            @discardableResult
            public func mergeData(value:Tensorflow.TensorProto) throws -> Tensorflow.SavedSlice.Builder {
                if builderResult.hasData {
                    builderResult.data = try Tensorflow.TensorProto.builderWithPrototype(prototype:builderResult.data).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.data = value
                }
                builderResult.hasData = true
                return self
            }
            @discardableResult
            public func clearData() -> Tensorflow.SavedSlice.Builder {
                dataBuilder_ = nil
                builderResult.hasData = false
                builderResult.data = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SavedSlice.Builder {
                builderResult = Tensorflow.SavedSlice()
                return self
            }
            override public func clone() throws -> Tensorflow.SavedSlice.Builder {
                return try Tensorflow.SavedSlice.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SavedSlice {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SavedSlice {
                let returnMe:Tensorflow.SavedSlice = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SavedSlice) throws -> Tensorflow.SavedSlice.Builder {
                if other == Tensorflow.SavedSlice() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if (other.hasSlice) {
                    try mergeSlice(value: other.slice)
                }
                if (other.hasData) {
                    try mergeData(value: other.data)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedSlice.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSlice.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        let subBuilder:Tensorflow.TensorSliceProto.Builder = Tensorflow.TensorSliceProto.Builder()
                        if hasSlice {
                            try subBuilder.mergeFrom(other: slice)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        slice = subBuilder.buildPartial()

                    case 26:
                        let subBuilder:Tensorflow.TensorProto.Builder = Tensorflow.TensorProto.Builder()
                        if hasData {
                            try subBuilder.mergeFrom(other: data)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        data = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedSlice.Builder {
                let resultDecodedBuilder = Tensorflow.SavedSlice.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueSlice = jsonMap["slice"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.slice = try Tensorflow.TensorSliceProto.Builder.decodeToBuilder(jsonMap:jsonValueSlice).build()

                }
                if let jsonValueData = jsonMap["data"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.data = try Tensorflow.TensorProto.Builder.decodeToBuilder(jsonMap:jsonValueData).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SavedSlice.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SavedSlice.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
    /// message.
    final public class SavedTensorSlices : GeneratedMessage {

        public static func == (lhs: Tensorflow.SavedTensorSlices, rhs: Tensorflow.SavedTensorSlices) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasMeta == rhs.hasMeta) && (!lhs.hasMeta || lhs.meta == rhs.meta)
            fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var meta:Tensorflow.SavedTensorSliceMeta!
        public fileprivate(set) var hasMeta:Bool = false
        public fileprivate(set) var data:Tensorflow.SavedSlice!
        public fileprivate(set) var hasData:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasMeta {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:meta)
            }
            if hasData {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:data)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasMeta {
                if let varSizemeta = meta?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizemeta
                }
            }
            if hasData {
                if let varSizedata = data?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizedata
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.SavedTensorSlices.Builder {
            return Tensorflow.SavedTensorSlices.classBuilder() as! Tensorflow.SavedTensorSlices.Builder
        }
        public func getBuilder() -> Tensorflow.SavedTensorSlices.Builder {
            return classBuilder() as! Tensorflow.SavedTensorSlices.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedTensorSlices.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.SavedTensorSlices.Builder()
        }
        public func toBuilder() throws -> Tensorflow.SavedTensorSlices.Builder {
            return try Tensorflow.SavedTensorSlices.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.SavedTensorSlices) throws -> Tensorflow.SavedTensorSlices.Builder {
            return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasMeta {
                jsonMap["meta"] = try meta.encode()
            }
            if hasData {
                jsonMap["data"] = try data.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedTensorSlices {
            return try Tensorflow.SavedTensorSlices.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.SavedTensorSlices {
            return try Tensorflow.SavedTensorSlices.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasMeta {
                output += "\(indent) meta {\n"
                if let outDescMeta = meta {
                    output += try outDescMeta.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasData {
                output += "\(indent) data {\n"
                if let outDescData = data {
                    output += try outDescData.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasMeta {
                    if let hashValuemeta = meta?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuemeta
                    }
                }
                if hasData {
                    if let hashValuedata = data?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuedata
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.SavedTensorSlices"
        }
        override public func className() -> String {
            return "Tensorflow.SavedTensorSlices"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.SavedTensorSlices = Tensorflow.SavedTensorSlices()
            public func getMessage() -> Tensorflow.SavedTensorSlices {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// This is only present at the first item of each checkpoint file and serves
            /// as a table of contents, listing all the tensor slices saved in this file.
            public var meta:Tensorflow.SavedTensorSliceMeta! {
                get {
                    if metaBuilder_ != nil {
                        builderResult.meta = metaBuilder_.getMessage()
                    }
                    return builderResult.meta
                }
                set (value) {
                    builderResult.hasMeta = true
                    builderResult.meta = value
                }
            }
            public var hasMeta:Bool {
                get {
                    return builderResult.hasMeta
                }
            }
            fileprivate var metaBuilder_:Tensorflow.SavedTensorSliceMeta.Builder! {
                didSet {
                    builderResult.hasMeta = true
                }
            }
            public func getMetaBuilder() -> Tensorflow.SavedTensorSliceMeta.Builder {
                if metaBuilder_ == nil {
                    metaBuilder_ = Tensorflow.SavedTensorSliceMeta.Builder()
                    builderResult.meta = metaBuilder_.getMessage()
                    if meta != nil {
                        try! metaBuilder_.mergeFrom(other: meta)
                    }
                }
                return metaBuilder_
            }
            @discardableResult
            public func setMeta(_ value:Tensorflow.SavedTensorSliceMeta!) -> Tensorflow.SavedTensorSlices.Builder {
                self.meta = value
                return self
            }
            @discardableResult
            public func mergeMeta(value:Tensorflow.SavedTensorSliceMeta) throws -> Tensorflow.SavedTensorSlices.Builder {
                if builderResult.hasMeta {
                    builderResult.meta = try Tensorflow.SavedTensorSliceMeta.builderWithPrototype(prototype:builderResult.meta).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.meta = value
                }
                builderResult.hasMeta = true
                return self
            }
            @discardableResult
            public func clearMeta() -> Tensorflow.SavedTensorSlices.Builder {
                metaBuilder_ = nil
                builderResult.hasMeta = false
                builderResult.meta = nil
                return self
            }
            /// This exists in all but the first item of each checkpoint file.
            public var data:Tensorflow.SavedSlice! {
                get {
                    if dataBuilder_ != nil {
                        builderResult.data = dataBuilder_.getMessage()
                    }
                    return builderResult.data
                }
                set (value) {
                    builderResult.hasData = true
                    builderResult.data = value
                }
            }
            public var hasData:Bool {
                get {
                    return builderResult.hasData
                }
            }
            fileprivate var dataBuilder_:Tensorflow.SavedSlice.Builder! {
                didSet {
                    builderResult.hasData = true
                }
            }
            public func getDataBuilder() -> Tensorflow.SavedSlice.Builder {
                if dataBuilder_ == nil {
                    dataBuilder_ = Tensorflow.SavedSlice.Builder()
                    builderResult.data = dataBuilder_.getMessage()
                    if data != nil {
                        try! dataBuilder_.mergeFrom(other: data)
                    }
                }
                return dataBuilder_
            }
            @discardableResult
            public func setData(_ value:Tensorflow.SavedSlice!) -> Tensorflow.SavedTensorSlices.Builder {
                self.data = value
                return self
            }
            @discardableResult
            public func mergeData(value:Tensorflow.SavedSlice) throws -> Tensorflow.SavedTensorSlices.Builder {
                if builderResult.hasData {
                    builderResult.data = try Tensorflow.SavedSlice.builderWithPrototype(prototype:builderResult.data).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.data = value
                }
                builderResult.hasData = true
                return self
            }
            @discardableResult
            public func clearData() -> Tensorflow.SavedTensorSlices.Builder {
                dataBuilder_ = nil
                builderResult.hasData = false
                builderResult.data = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.SavedTensorSlices.Builder {
                builderResult = Tensorflow.SavedTensorSlices()
                return self
            }
            override public func clone() throws -> Tensorflow.SavedTensorSlices.Builder {
                return try Tensorflow.SavedTensorSlices.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.SavedTensorSlices {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.SavedTensorSlices {
                let returnMe:Tensorflow.SavedTensorSlices = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.SavedTensorSlices) throws -> Tensorflow.SavedTensorSlices.Builder {
                if other == Tensorflow.SavedTensorSlices() {
                    return self
                }
                if (other.hasMeta) {
                    try mergeMeta(value: other.meta)
                }
                if (other.hasData) {
                    try mergeData(value: other.data)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedTensorSlices.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSlices.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.SavedTensorSliceMeta.Builder = Tensorflow.SavedTensorSliceMeta.Builder()
                        if hasMeta {
                            try subBuilder.mergeFrom(other: meta)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        meta = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Tensorflow.SavedSlice.Builder = Tensorflow.SavedSlice.Builder()
                        if hasData {
                            try subBuilder.mergeFrom(other: data)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        data = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.SavedTensorSlices.Builder {
                let resultDecodedBuilder = Tensorflow.SavedTensorSlices.Builder()
                if let jsonValueMeta = jsonMap["meta"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.meta = try Tensorflow.SavedTensorSliceMeta.Builder.decodeToBuilder(jsonMap:jsonValueMeta).build()

                }
                if let jsonValueData = jsonMap["data"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.data = try Tensorflow.SavedSlice.Builder.decodeToBuilder(jsonMap:jsonValueData).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.SavedTensorSlices.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.SavedTensorSlices.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.SavedSliceMeta: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SavedSliceMeta> {
        var mergedArray = Array<Tensorflow.SavedSliceMeta>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SavedSliceMeta? {
        return try Tensorflow.SavedSliceMeta.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.SavedTensorSliceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSliceMeta {
        return try Tensorflow.SavedSliceMeta.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "shape": return self.shape
        case "type": return self.type
        case "slice": return self.slice
        default: return nil
        }
    }
}
extension Tensorflow.SavedSliceMeta.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "shape": return self.shape
            case "type": return self.type
            case "slice": return self.slice
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "shape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.shape = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DataType else {
                    return
                }
                self.type = newSubscriptValue
            case "slice":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.TensorSliceProto> else {
                    return
                }
                self.slice = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.SavedTensorSliceMeta: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SavedTensorSliceMeta> {
        var mergedArray = Array<Tensorflow.SavedTensorSliceMeta>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SavedTensorSliceMeta? {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.SavedTensorSliceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSliceMeta {
        return try Tensorflow.SavedTensorSliceMeta.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "tensor": return self.tensor
        case "versions": return self.versions
        default: return nil
        }
    }
}
extension Tensorflow.SavedTensorSliceMeta.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "tensor": return self.tensor
            case "versions": return self.versions
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "tensor":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.SavedSliceMeta> else {
                    return
                }
                self.tensor = newSubscriptValue
            case "versions":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.VersionDef else {
                    return
                }
                self.versions = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.SavedSlice: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SavedSlice> {
        var mergedArray = Array<Tensorflow.SavedSlice>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SavedSlice? {
        return try Tensorflow.SavedSlice.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.SavedTensorSliceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedSlice {
        return try Tensorflow.SavedSlice.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "slice": return self.slice
        case "data": return self.data
        default: return nil
        }
    }
}
extension Tensorflow.SavedSlice.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "slice": return self.slice
            case "data": return self.data
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "slice":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorSliceProto else {
                    return
                }
                self.slice = newSubscriptValue
            case "data":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorProto else {
                    return
                }
                self.data = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.SavedTensorSlices: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.SavedTensorSlices> {
        var mergedArray = Array<Tensorflow.SavedTensorSlices>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.SavedTensorSlices? {
        return try Tensorflow.SavedTensorSlices.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.SavedTensorSliceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.SavedTensorSlices {
        return try Tensorflow.SavedTensorSlices.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "meta": return self.meta
        case "data": return self.data
        default: return nil
        }
    }
}
extension Tensorflow.SavedTensorSlices.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "meta": return self.meta
            case "data": return self.data
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "meta":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.SavedTensorSliceMeta else {
                    return
                }
                self.meta = newSubscriptValue
            case "data":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.SavedSlice else {
                    return
                }
                self.data = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
