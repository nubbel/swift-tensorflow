/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "types.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct TypesRoot {
        public static let `default` = TypesRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    /// LINT.IfChange
    public enum DataType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        /// Not a legal value for DataType.  Used to indicate a DataType field
        /// has not been set.
        case dtInvalid = 0

        /// Data types that all computation devices are expected to be
        /// capable to support.
        case dtFloat = 1
        case dtDouble = 2
        case dtInt32 = 3
        case dtUint8 = 4
        case dtInt16 = 5
        case dtInt8 = 6
        case dtString = 7

        /// Single-precision complex
        case dtComplex64 = 8
        case dtInt64 = 9
        case dtBool = 10

        /// Quantized int8
        case dtQint8 = 11

        /// Quantized uint8
        case dtQuint8 = 12

        /// Quantized int32
        case dtQint32 = 13

        /// Float32 truncated to 16 bits.  Only for cast ops.
        case dtBfloat16 = 14

        /// Quantized int16
        case dtQint16 = 15

        /// Quantized uint16
        case dtQuint16 = 16
        case dtUint16 = 17

        /// Double-precision complex
        case dtComplex128 = 18
        case dtHalf = 19
        case dtResource = 20

        /// Do not use!  These are only for parameters.  Every enum above
        /// should have a corresponding value below (verified by types_test).
        case dtFloatRef = 101
        case dtDoubleRef = 102
        case dtInt32Ref = 103
        case dtUint8Ref = 104
        case dtInt16Ref = 105
        case dtInt8Ref = 106
        case dtStringRef = 107
        case dtComplex64Ref = 108
        case dtInt64Ref = 109
        case dtBoolRef = 110
        case dtQint8Ref = 111
        case dtQuint8Ref = 112
        case dtQint32Ref = 113
        case dtBfloat16Ref = 114
        case dtQint16Ref = 115
        case dtQuint16Ref = 116
        case dtUint16Ref = 117
        case dtComplex128Ref = 118
        case dtHalfRef = 119
        case dtResourceRef = 120
        public func toString() -> String {
            switch self {
            case .dtInvalid: return "DT_INVALID"
            case .dtFloat: return "DT_FLOAT"
            case .dtDouble: return "DT_DOUBLE"
            case .dtInt32: return "DT_INT32"
            case .dtUint8: return "DT_UINT8"
            case .dtInt16: return "DT_INT16"
            case .dtInt8: return "DT_INT8"
            case .dtString: return "DT_STRING"
            case .dtComplex64: return "DT_COMPLEX64"
            case .dtInt64: return "DT_INT64"
            case .dtBool: return "DT_BOOL"
            case .dtQint8: return "DT_QINT8"
            case .dtQuint8: return "DT_QUINT8"
            case .dtQint32: return "DT_QINT32"
            case .dtBfloat16: return "DT_BFLOAT16"
            case .dtQint16: return "DT_QINT16"
            case .dtQuint16: return "DT_QUINT16"
            case .dtUint16: return "DT_UINT16"
            case .dtComplex128: return "DT_COMPLEX128"
            case .dtHalf: return "DT_HALF"
            case .dtResource: return "DT_RESOURCE"
            case .dtFloatRef: return "DT_FLOAT_REF"
            case .dtDoubleRef: return "DT_DOUBLE_REF"
            case .dtInt32Ref: return "DT_INT32_REF"
            case .dtUint8Ref: return "DT_UINT8_REF"
            case .dtInt16Ref: return "DT_INT16_REF"
            case .dtInt8Ref: return "DT_INT8_REF"
            case .dtStringRef: return "DT_STRING_REF"
            case .dtComplex64Ref: return "DT_COMPLEX64_REF"
            case .dtInt64Ref: return "DT_INT64_REF"
            case .dtBoolRef: return "DT_BOOL_REF"
            case .dtQint8Ref: return "DT_QINT8_REF"
            case .dtQuint8Ref: return "DT_QUINT8_REF"
            case .dtQint32Ref: return "DT_QINT32_REF"
            case .dtBfloat16Ref: return "DT_BFLOAT16_REF"
            case .dtQint16Ref: return "DT_QINT16_REF"
            case .dtQuint16Ref: return "DT_QUINT16_REF"
            case .dtUint16Ref: return "DT_UINT16_REF"
            case .dtComplex128Ref: return "DT_COMPLEX128_REF"
            case .dtHalfRef: return "DT_HALF_REF"
            case .dtResourceRef: return "DT_RESOURCE_REF"
            }
        }
        public static func fromString(str:String) throws -> Tensorflow.DataType {
            switch str {
            case "DT_INVALID":    return .dtInvalid
            case "DT_FLOAT":    return .dtFloat
            case "DT_DOUBLE":    return .dtDouble
            case "DT_INT32":    return .dtInt32
            case "DT_UINT8":    return .dtUint8
            case "DT_INT16":    return .dtInt16
            case "DT_INT8":    return .dtInt8
            case "DT_STRING":    return .dtString
            case "DT_COMPLEX64":    return .dtComplex64
            case "DT_INT64":    return .dtInt64
            case "DT_BOOL":    return .dtBool
            case "DT_QINT8":    return .dtQint8
            case "DT_QUINT8":    return .dtQuint8
            case "DT_QINT32":    return .dtQint32
            case "DT_BFLOAT16":    return .dtBfloat16
            case "DT_QINT16":    return .dtQint16
            case "DT_QUINT16":    return .dtQuint16
            case "DT_UINT16":    return .dtUint16
            case "DT_COMPLEX128":    return .dtComplex128
            case "DT_HALF":    return .dtHalf
            case "DT_RESOURCE":    return .dtResource
            case "DT_FLOAT_REF":    return .dtFloatRef
            case "DT_DOUBLE_REF":    return .dtDoubleRef
            case "DT_INT32_REF":    return .dtInt32Ref
            case "DT_UINT8_REF":    return .dtUint8Ref
            case "DT_INT16_REF":    return .dtInt16Ref
            case "DT_INT8_REF":    return .dtInt8Ref
            case "DT_STRING_REF":    return .dtStringRef
            case "DT_COMPLEX64_REF":    return .dtComplex64Ref
            case "DT_INT64_REF":    return .dtInt64Ref
            case "DT_BOOL_REF":    return .dtBoolRef
            case "DT_QINT8_REF":    return .dtQint8Ref
            case "DT_QUINT8_REF":    return .dtQuint8Ref
            case "DT_QINT32_REF":    return .dtQint32Ref
            case "DT_BFLOAT16_REF":    return .dtBfloat16Ref
            case "DT_QINT16_REF":    return .dtQint16Ref
            case "DT_QUINT16_REF":    return .dtQuint16Ref
            case "DT_UINT16_REF":    return .dtUint16Ref
            case "DT_COMPLEX128_REF":    return .dtComplex128Ref
            case "DT_HALF_REF":    return .dtHalfRef
            case "DT_RESOURCE_REF":    return .dtResourceRef
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .dtInvalid: return ".dtInvalid"
            case .dtFloat: return ".dtFloat"
            case .dtDouble: return ".dtDouble"
            case .dtInt32: return ".dtInt32"
            case .dtUint8: return ".dtUint8"
            case .dtInt16: return ".dtInt16"
            case .dtInt8: return ".dtInt8"
            case .dtString: return ".dtString"
            case .dtComplex64: return ".dtComplex64"
            case .dtInt64: return ".dtInt64"
            case .dtBool: return ".dtBool"
            case .dtQint8: return ".dtQint8"
            case .dtQuint8: return ".dtQuint8"
            case .dtQint32: return ".dtQint32"
            case .dtBfloat16: return ".dtBfloat16"
            case .dtQint16: return ".dtQint16"
            case .dtQuint16: return ".dtQuint16"
            case .dtUint16: return ".dtUint16"
            case .dtComplex128: return ".dtComplex128"
            case .dtHalf: return ".dtHalf"
            case .dtResource: return ".dtResource"
            case .dtFloatRef: return ".dtFloatRef"
            case .dtDoubleRef: return ".dtDoubleRef"
            case .dtInt32Ref: return ".dtInt32Ref"
            case .dtUint8Ref: return ".dtUint8Ref"
            case .dtInt16Ref: return ".dtInt16Ref"
            case .dtInt8Ref: return ".dtInt8Ref"
            case .dtStringRef: return ".dtStringRef"
            case .dtComplex64Ref: return ".dtComplex64Ref"
            case .dtInt64Ref: return ".dtInt64Ref"
            case .dtBoolRef: return ".dtBoolRef"
            case .dtQint8Ref: return ".dtQint8Ref"
            case .dtQuint8Ref: return ".dtQuint8Ref"
            case .dtQint32Ref: return ".dtQint32Ref"
            case .dtBfloat16Ref: return ".dtBfloat16Ref"
            case .dtQint16Ref: return ".dtQint16Ref"
            case .dtQuint16Ref: return ".dtQuint16Ref"
            case .dtUint16Ref: return ".dtUint16Ref"
            case .dtComplex128Ref: return ".dtComplex128Ref"
            case .dtHalfRef: return ".dtHalfRef"
            case .dtResourceRef: return ".dtResourceRef"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:DataType, rhs:DataType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

}

// @@protoc_insertion_point(global_scope)
