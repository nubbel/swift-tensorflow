/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "memmapped_file_system.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct MemmappedFileSystemRoot {
        public static let `default` = MemmappedFileSystemRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// A message that describes one region of memmapped file.
    final public class MemmappedFileSystemDirectoryElement : GeneratedMessage {

        public static func == (lhs: Tensorflow.MemmappedFileSystemDirectoryElement, rhs: Tensorflow.MemmappedFileSystemDirectoryElement) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasOffset == rhs.hasOffset) && (!lhs.hasOffset || lhs.offset == rhs.offset)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var offset:UInt64 = UInt64(0)
        public fileprivate(set) var hasOffset:Bool = false

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasOffset {
                try codedOutputStream.writeUInt64(fieldNumber: 1, value:offset)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 2, value:name)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasOffset {
                serialize_size += offset.computeUInt64Size(fieldNumber: 1)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
            return Tensorflow.MemmappedFileSystemDirectoryElement.classBuilder() as! Tensorflow.MemmappedFileSystemDirectoryElement.Builder
        }
        public func getBuilder() -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
            return classBuilder() as! Tensorflow.MemmappedFileSystemDirectoryElement.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.MemmappedFileSystemDirectoryElement.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.MemmappedFileSystemDirectoryElement.Builder()
        }
        public func toBuilder() throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
            return try Tensorflow.MemmappedFileSystemDirectoryElement.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.MemmappedFileSystemDirectoryElement) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
            return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasOffset {
                jsonMap["offset"] = "\(offset)"
            }
            if hasName {
                jsonMap["name"] = name
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
            return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
            return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasOffset {
                output += "\(indent) offset: \(offset) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOffset {
                    hashCode = (hashCode &* 31) &+ offset.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.MemmappedFileSystemDirectoryElement"
        }
        override public func className() -> String {
            return "Tensorflow.MemmappedFileSystemDirectoryElement"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.MemmappedFileSystemDirectoryElement = Tensorflow.MemmappedFileSystemDirectoryElement()
            public func getMessage() -> Tensorflow.MemmappedFileSystemDirectoryElement {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var offset:UInt64 {
                get {
                    return builderResult.offset
                }
                set (value) {
                    builderResult.hasOffset = true
                    builderResult.offset = value
                }
            }
            public var hasOffset:Bool {
                get {
                    return builderResult.hasOffset
                }
            }
            @discardableResult
            public func setOffset(_ value:UInt64) -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                self.offset = value
                return self
            }
            @discardableResult
            public func clearOffset() -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder{
                builderResult.hasOffset = false
                builderResult.offset = UInt64(0)
                return self
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                builderResult = Tensorflow.MemmappedFileSystemDirectoryElement()
                return self
            }
            override public func clone() throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                return try Tensorflow.MemmappedFileSystemDirectoryElement.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.MemmappedFileSystemDirectoryElement {
                let returnMe:Tensorflow.MemmappedFileSystemDirectoryElement = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.MemmappedFileSystemDirectoryElement) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                if other == Tensorflow.MemmappedFileSystemDirectoryElement() {
                    return self
                }
                if other.hasOffset {
                    offset = other.offset
                }
                if other.hasName {
                    name = other.name
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        offset = try codedInputStream.readUInt64()

                    case 18:
                        name = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                let resultDecodedBuilder = Tensorflow.MemmappedFileSystemDirectoryElement.Builder()
                if let jsonValueOffset = jsonMap["offset"] as? String {
                    resultDecodedBuilder.offset = UInt64(jsonValueOffset)!
                } else if let jsonValueOffset = jsonMap["offset"] as? UInt {
                    resultDecodedBuilder.offset = UInt64(jsonValueOffset)
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.MemmappedFileSystemDirectoryElement.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// A directory of regions in a memmapped file.
    final public class MemmappedFileSystemDirectory : GeneratedMessage {

        public static func == (lhs: Tensorflow.MemmappedFileSystemDirectory, rhs: Tensorflow.MemmappedFileSystemDirectory) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.element == rhs.element)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var element:Array<Tensorflow.MemmappedFileSystemDirectoryElement>  = Array<Tensorflow.MemmappedFileSystemDirectoryElement>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementElement in element {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementElement)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementElement in element {
                serialize_size += oneElementElement.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.MemmappedFileSystemDirectory.Builder {
            return Tensorflow.MemmappedFileSystemDirectory.classBuilder() as! Tensorflow.MemmappedFileSystemDirectory.Builder
        }
        public func getBuilder() -> Tensorflow.MemmappedFileSystemDirectory.Builder {
            return classBuilder() as! Tensorflow.MemmappedFileSystemDirectory.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.MemmappedFileSystemDirectory.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.MemmappedFileSystemDirectory.Builder()
        }
        public func toBuilder() throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
            return try Tensorflow.MemmappedFileSystemDirectory.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.MemmappedFileSystemDirectory) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
            return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !element.isEmpty {
                var jsonArrayElement:Array<Dictionary<String,Any>> = []
                for oneValueElement in element {
                    let ecodedMessageElement = try oneValueElement.encode()
                    jsonArrayElement.append(ecodedMessageElement)
                }
                jsonMap["element"] = jsonArrayElement
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.MemmappedFileSystemDirectory {
            return try Tensorflow.MemmappedFileSystemDirectory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.MemmappedFileSystemDirectory {
            return try Tensorflow.MemmappedFileSystemDirectory.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var elementElementIndex:Int = 0
            for oneElementElement in element {
                output += "\(indent) element[\(elementElementIndex)] {\n"
                output += try oneElementElement.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                elementElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementElement in element {
                    hashCode = (hashCode &* 31) &+ oneElementElement.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.MemmappedFileSystemDirectory"
        }
        override public func className() -> String {
            return "Tensorflow.MemmappedFileSystemDirectory"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.MemmappedFileSystemDirectory = Tensorflow.MemmappedFileSystemDirectory()
            public func getMessage() -> Tensorflow.MemmappedFileSystemDirectory {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var element:Array<Tensorflow.MemmappedFileSystemDirectoryElement> {
                get {
                    return builderResult.element
                }
                set (value) {
                    builderResult.element = value
                }
            }
            @discardableResult
            public func setElement(_ value:Array<Tensorflow.MemmappedFileSystemDirectoryElement>) -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                self.element = value
                return self
            }
            @discardableResult
            public func clearElement() -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                builderResult.element.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                builderResult = Tensorflow.MemmappedFileSystemDirectory()
                return self
            }
            override public func clone() throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                return try Tensorflow.MemmappedFileSystemDirectory.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.MemmappedFileSystemDirectory {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.MemmappedFileSystemDirectory {
                let returnMe:Tensorflow.MemmappedFileSystemDirectory = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.MemmappedFileSystemDirectory) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                if other == Tensorflow.MemmappedFileSystemDirectory() {
                    return self
                }
                if !other.element.isEmpty  {
                     builderResult.element += other.element
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Tensorflow.MemmappedFileSystemDirectoryElement.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        element.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                let resultDecodedBuilder = Tensorflow.MemmappedFileSystemDirectory.Builder()
                if let jsonValueElement = jsonMap["element"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayElement:Array<Tensorflow.MemmappedFileSystemDirectoryElement> = []
                    for oneValueElement in jsonValueElement {
                        let messageFromStringElement = try Tensorflow.MemmappedFileSystemDirectoryElement.Builder.decodeToBuilder(jsonMap:oneValueElement).build()

                        jsonArrayElement.append(messageFromStringElement)
                    }
                    resultDecodedBuilder.element = jsonArrayElement
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.MemmappedFileSystemDirectory.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.MemmappedFileSystemDirectory.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.MemmappedFileSystemDirectoryElement: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.MemmappedFileSystemDirectoryElement> {
        var mergedArray = Array<Tensorflow.MemmappedFileSystemDirectoryElement>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.MemmappedFileSystemDirectoryElement? {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.MemmappedFileSystemRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectoryElement {
        return try Tensorflow.MemmappedFileSystemDirectoryElement.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "offset": return self.offset
        case "name": return self.name
        default: return nil
        }
    }
}
extension Tensorflow.MemmappedFileSystemDirectoryElement.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "offset": return self.offset
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "offset":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.offset = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.MemmappedFileSystemDirectory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.MemmappedFileSystemDirectory> {
        var mergedArray = Array<Tensorflow.MemmappedFileSystemDirectory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.MemmappedFileSystemDirectory? {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.MemmappedFileSystemRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.MemmappedFileSystemDirectory {
        return try Tensorflow.MemmappedFileSystemDirectory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "element": return self.element
        default: return nil
        }
    }
}
extension Tensorflow.MemmappedFileSystemDirectory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "element": return self.element
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "element":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.MemmappedFileSystemDirectoryElement> else {
                    return
                }
                self.element = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
