/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "rewriter_config.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct RewriterConfigRoot {
        public static let `default` = RewriterConfigRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class AutoParallelOptions : GeneratedMessage {

        public static func == (lhs: Tensorflow.AutoParallelOptions, rhs: Tensorflow.AutoParallelOptions) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasEnable == rhs.hasEnable) && (!lhs.hasEnable || lhs.enable == rhs.enable)
            fieldCheck = fieldCheck && (lhs.hasNumReplicas == rhs.hasNumReplicas) && (!lhs.hasNumReplicas || lhs.numReplicas == rhs.numReplicas)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var enable:Bool = false
        public fileprivate(set) var hasEnable:Bool = false

        public fileprivate(set) var numReplicas:Int32 = Int32(0)
        public fileprivate(set) var hasNumReplicas:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasEnable {
                try codedOutputStream.writeBool(fieldNumber: 1, value:enable)
            }
            if hasNumReplicas {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:numReplicas)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasEnable {
                serialize_size += enable.computeBoolSize(fieldNumber: 1)
            }
            if hasNumReplicas {
                serialize_size += numReplicas.computeInt32Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.AutoParallelOptions.Builder {
            return Tensorflow.AutoParallelOptions.classBuilder() as! Tensorflow.AutoParallelOptions.Builder
        }
        public func getBuilder() -> Tensorflow.AutoParallelOptions.Builder {
            return classBuilder() as! Tensorflow.AutoParallelOptions.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.AutoParallelOptions.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.AutoParallelOptions.Builder()
        }
        public func toBuilder() throws -> Tensorflow.AutoParallelOptions.Builder {
            return try Tensorflow.AutoParallelOptions.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.AutoParallelOptions) throws -> Tensorflow.AutoParallelOptions.Builder {
            return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasEnable {
                jsonMap["enable"] = enable
            }
            if hasNumReplicas {
                jsonMap["numReplicas"] = Int(numReplicas)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.AutoParallelOptions {
            return try Tensorflow.AutoParallelOptions.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.AutoParallelOptions {
            return try Tensorflow.AutoParallelOptions.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasEnable {
                output += "\(indent) enable: \(enable) \n"
            }
            if hasNumReplicas {
                output += "\(indent) numReplicas: \(numReplicas) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasEnable {
                    hashCode = (hashCode &* 31) &+ enable.hashValue
                }
                if hasNumReplicas {
                    hashCode = (hashCode &* 31) &+ numReplicas.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.AutoParallelOptions"
        }
        override public func className() -> String {
            return "Tensorflow.AutoParallelOptions"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.AutoParallelOptions = Tensorflow.AutoParallelOptions()
            public func getMessage() -> Tensorflow.AutoParallelOptions {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var enable:Bool {
                get {
                    return builderResult.enable
                }
                set (value) {
                    builderResult.hasEnable = true
                    builderResult.enable = value
                }
            }
            public var hasEnable:Bool {
                get {
                    return builderResult.hasEnable
                }
            }
            @discardableResult
            public func setEnable(_ value:Bool) -> Tensorflow.AutoParallelOptions.Builder {
                self.enable = value
                return self
            }
            @discardableResult
            public func clearEnable() -> Tensorflow.AutoParallelOptions.Builder{
                builderResult.hasEnable = false
                builderResult.enable = false
                return self
            }
            public var numReplicas:Int32 {
                get {
                    return builderResult.numReplicas
                }
                set (value) {
                    builderResult.hasNumReplicas = true
                    builderResult.numReplicas = value
                }
            }
            public var hasNumReplicas:Bool {
                get {
                    return builderResult.hasNumReplicas
                }
            }
            @discardableResult
            public func setNumReplicas(_ value:Int32) -> Tensorflow.AutoParallelOptions.Builder {
                self.numReplicas = value
                return self
            }
            @discardableResult
            public func clearNumReplicas() -> Tensorflow.AutoParallelOptions.Builder{
                builderResult.hasNumReplicas = false
                builderResult.numReplicas = Int32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.AutoParallelOptions.Builder {
                builderResult = Tensorflow.AutoParallelOptions()
                return self
            }
            override public func clone() throws -> Tensorflow.AutoParallelOptions.Builder {
                return try Tensorflow.AutoParallelOptions.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.AutoParallelOptions {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.AutoParallelOptions {
                let returnMe:Tensorflow.AutoParallelOptions = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.AutoParallelOptions) throws -> Tensorflow.AutoParallelOptions.Builder {
                if other == Tensorflow.AutoParallelOptions() {
                    return self
                }
                if other.hasEnable {
                    enable = other.enable
                }
                if other.hasNumReplicas {
                    numReplicas = other.numReplicas
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.AutoParallelOptions.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AutoParallelOptions.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        enable = try codedInputStream.readBool()

                    case 16:
                        numReplicas = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.AutoParallelOptions.Builder {
                let resultDecodedBuilder = Tensorflow.AutoParallelOptions.Builder()
                if let jsonValueEnable = jsonMap["enable"] as? Bool {
                    resultDecodedBuilder.enable = jsonValueEnable
                }
                if let jsonValueNumReplicas = jsonMap["numReplicas"] as? Int {
                    resultDecodedBuilder.numReplicas = Int32(jsonValueNumReplicas)
                } else if let jsonValueNumReplicas = jsonMap["numReplicas"] as? String {
                    resultDecodedBuilder.numReplicas = Int32(jsonValueNumReplicas)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.AutoParallelOptions.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.AutoParallelOptions.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class RewriterConfig : GeneratedMessage {

        public static func == (lhs: Tensorflow.RewriterConfig, rhs: Tensorflow.RewriterConfig) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasOptimizeTensorLayout == rhs.hasOptimizeTensorLayout) && (!lhs.hasOptimizeTensorLayout || lhs.optimizeTensorLayout == rhs.optimizeTensorLayout)
            fieldCheck = fieldCheck && (lhs.hasDisableModelPruning == rhs.hasDisableModelPruning) && (!lhs.hasDisableModelPruning || lhs.disableModelPruning == rhs.disableModelPruning)
            fieldCheck = fieldCheck && (lhs.hasConstantFolding == rhs.hasConstantFolding) && (!lhs.hasConstantFolding || lhs.constantFolding == rhs.constantFolding)
            fieldCheck = fieldCheck && (lhs.hasMemoryOptimization == rhs.hasMemoryOptimization) && (!lhs.hasMemoryOptimization || lhs.memoryOptimization == rhs.memoryOptimization)
            fieldCheck = fieldCheck && (lhs.hasAutoParallel == rhs.hasAutoParallel) && (!lhs.hasAutoParallel || lhs.autoParallel == rhs.autoParallel)
            fieldCheck = fieldCheck && (lhs.optimizers == rhs.optimizers)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum MemOptType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                /// Fully disabled
                case noMemOpt = 0

                /// Driven by manual annotations
                case manual = 1
                public func toString() -> String {
                    switch self {
                    case .noMemOpt: return "NO_MEM_OPT"
                    case .manual: return "MANUAL"
                    }
                }
                public static func fromString(str:String) throws -> Tensorflow.RewriterConfig.MemOptType {
                    switch str {
                    case "NO_MEM_OPT":    return .noMemOpt
                    case "MANUAL":    return .manual
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .noMemOpt: return ".noMemOpt"
                    case .manual: return ".manual"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:MemOptType, rhs:MemOptType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var optimizeTensorLayout:Bool = false
        public fileprivate(set) var hasOptimizeTensorLayout:Bool = false

        public fileprivate(set) var disableModelPruning:Bool = false
        public fileprivate(set) var hasDisableModelPruning:Bool = false

        public fileprivate(set) var constantFolding:Bool = false
        public fileprivate(set) var hasConstantFolding:Bool = false

        public fileprivate(set) var memoryOptimization:Tensorflow.RewriterConfig.MemOptType = Tensorflow.RewriterConfig.MemOptType.noMemOpt
        public fileprivate(set) var hasMemoryOptimization:Bool = false
        public fileprivate(set) var autoParallel:Tensorflow.AutoParallelOptions!
        public fileprivate(set) var hasAutoParallel:Bool = false
        /// If non-empty, will use this as an alternative way to specify a list of
        /// optimizations to turn on and the order of the optimizations.
        public fileprivate(set) var optimizers:Array<String> = Array<String>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasOptimizeTensorLayout {
                try codedOutputStream.writeBool(fieldNumber: 1, value:optimizeTensorLayout)
            }
            if hasDisableModelPruning {
                try codedOutputStream.writeBool(fieldNumber: 2, value:disableModelPruning)
            }
            if hasConstantFolding {
                try codedOutputStream.writeBool(fieldNumber: 3, value:constantFolding)
            }
            if hasMemoryOptimization {
                try codedOutputStream.writeEnum(fieldNumber: 4, value:memoryOptimization.rawValue)
            }
            if hasAutoParallel {
                try codedOutputStream.writeMessage(fieldNumber: 5, value:autoParallel)
            }
            if !optimizers.isEmpty {
                for oneValueoptimizers in optimizers {
                    try codedOutputStream.writeString(fieldNumber: 100, value:oneValueoptimizers)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasOptimizeTensorLayout {
                serialize_size += optimizeTensorLayout.computeBoolSize(fieldNumber: 1)
            }
            if hasDisableModelPruning {
                serialize_size += disableModelPruning.computeBoolSize(fieldNumber: 2)
            }
            if hasConstantFolding {
                serialize_size += constantFolding.computeBoolSize(fieldNumber: 3)
            }
            if (hasMemoryOptimization) {
                serialize_size += memoryOptimization.rawValue.computeEnumSize(fieldNumber: 4)
            }
            if hasAutoParallel {
                if let varSizeautoParallel = autoParallel?.computeMessageSize(fieldNumber: 5) {
                    serialize_size += varSizeautoParallel
                }
            }
            var dataSizeOptimizers:Int32 = 0
            for oneValueoptimizers in optimizers {
                dataSizeOptimizers += oneValueoptimizers.computeStringSizeNoTag()
            }
            serialize_size += dataSizeOptimizers
            serialize_size += 2 * Int32(optimizers.count)
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.RewriterConfig.Builder {
            return Tensorflow.RewriterConfig.classBuilder() as! Tensorflow.RewriterConfig.Builder
        }
        public func getBuilder() -> Tensorflow.RewriterConfig.Builder {
            return classBuilder() as! Tensorflow.RewriterConfig.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.RewriterConfig.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.RewriterConfig.Builder()
        }
        public func toBuilder() throws -> Tensorflow.RewriterConfig.Builder {
            return try Tensorflow.RewriterConfig.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.RewriterConfig) throws -> Tensorflow.RewriterConfig.Builder {
            return try Tensorflow.RewriterConfig.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasOptimizeTensorLayout {
                jsonMap["optimizeTensorLayout"] = optimizeTensorLayout
            }
            if hasDisableModelPruning {
                jsonMap["disableModelPruning"] = disableModelPruning
            }
            if hasConstantFolding {
                jsonMap["constantFolding"] = constantFolding
            }
            if hasMemoryOptimization {
                jsonMap["memoryOptimization"] = memoryOptimization.toString()
            }
            if hasAutoParallel {
                jsonMap["autoParallel"] = try autoParallel.encode()
            }
            if !optimizers.isEmpty {
                var jsonArrayOptimizers:Array<String> = []
                for oneValueOptimizers in optimizers {
                    jsonArrayOptimizers.append(oneValueOptimizers)
                }
                jsonMap["optimizers"] = jsonArrayOptimizers
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RewriterConfig {
            return try Tensorflow.RewriterConfig.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.RewriterConfig {
            return try Tensorflow.RewriterConfig.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasOptimizeTensorLayout {
                output += "\(indent) optimizeTensorLayout: \(optimizeTensorLayout) \n"
            }
            if hasDisableModelPruning {
                output += "\(indent) disableModelPruning: \(disableModelPruning) \n"
            }
            if hasConstantFolding {
                output += "\(indent) constantFolding: \(constantFolding) \n"
            }
            if (hasMemoryOptimization) {
                output += "\(indent) memoryOptimization: \(memoryOptimization.description)\n"
            }
            if hasAutoParallel {
                output += "\(indent) autoParallel {\n"
                if let outDescAutoParallel = autoParallel {
                    output += try outDescAutoParallel.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            var optimizersElementIndex:Int = 0
            for oneValueOptimizers in optimizers  {
                output += "\(indent) optimizers[\(optimizersElementIndex)]: \(oneValueOptimizers)\n"
                optimizersElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOptimizeTensorLayout {
                    hashCode = (hashCode &* 31) &+ optimizeTensorLayout.hashValue
                }
                if hasDisableModelPruning {
                    hashCode = (hashCode &* 31) &+ disableModelPruning.hashValue
                }
                if hasConstantFolding {
                    hashCode = (hashCode &* 31) &+ constantFolding.hashValue
                }
                if hasMemoryOptimization {
                     hashCode = (hashCode &* 31) &+ memoryOptimization.hashValue
                }
                if hasAutoParallel {
                    if let hashValueautoParallel = autoParallel?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueautoParallel
                    }
                }
                for oneValueOptimizers in optimizers {
                    hashCode = (hashCode &* 31) &+ oneValueOptimizers.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.RewriterConfig"
        }
        override public func className() -> String {
            return "Tensorflow.RewriterConfig"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.RewriterConfig = Tensorflow.RewriterConfig()
            public func getMessage() -> Tensorflow.RewriterConfig {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var optimizeTensorLayout:Bool {
                get {
                    return builderResult.optimizeTensorLayout
                }
                set (value) {
                    builderResult.hasOptimizeTensorLayout = true
                    builderResult.optimizeTensorLayout = value
                }
            }
            public var hasOptimizeTensorLayout:Bool {
                get {
                    return builderResult.hasOptimizeTensorLayout
                }
            }
            @discardableResult
            public func setOptimizeTensorLayout(_ value:Bool) -> Tensorflow.RewriterConfig.Builder {
                self.optimizeTensorLayout = value
                return self
            }
            @discardableResult
            public func clearOptimizeTensorLayout() -> Tensorflow.RewriterConfig.Builder{
                builderResult.hasOptimizeTensorLayout = false
                builderResult.optimizeTensorLayout = false
                return self
            }
            public var disableModelPruning:Bool {
                get {
                    return builderResult.disableModelPruning
                }
                set (value) {
                    builderResult.hasDisableModelPruning = true
                    builderResult.disableModelPruning = value
                }
            }
            public var hasDisableModelPruning:Bool {
                get {
                    return builderResult.hasDisableModelPruning
                }
            }
            @discardableResult
            public func setDisableModelPruning(_ value:Bool) -> Tensorflow.RewriterConfig.Builder {
                self.disableModelPruning = value
                return self
            }
            @discardableResult
            public func clearDisableModelPruning() -> Tensorflow.RewriterConfig.Builder{
                builderResult.hasDisableModelPruning = false
                builderResult.disableModelPruning = false
                return self
            }
            public var constantFolding:Bool {
                get {
                    return builderResult.constantFolding
                }
                set (value) {
                    builderResult.hasConstantFolding = true
                    builderResult.constantFolding = value
                }
            }
            public var hasConstantFolding:Bool {
                get {
                    return builderResult.hasConstantFolding
                }
            }
            @discardableResult
            public func setConstantFolding(_ value:Bool) -> Tensorflow.RewriterConfig.Builder {
                self.constantFolding = value
                return self
            }
            @discardableResult
            public func clearConstantFolding() -> Tensorflow.RewriterConfig.Builder{
                builderResult.hasConstantFolding = false
                builderResult.constantFolding = false
                return self
            }
                public var memoryOptimization:Tensorflow.RewriterConfig.MemOptType {
                    get {
                        return builderResult.memoryOptimization
                    }
                    set (value) {
                        builderResult.hasMemoryOptimization = true
                        builderResult.memoryOptimization = value
                    }
                }
                public var hasMemoryOptimization:Bool{
                    get {
                        return builderResult.hasMemoryOptimization
                    }
                }
            @discardableResult
                public func setMemoryOptimization(_ value:Tensorflow.RewriterConfig.MemOptType) -> Tensorflow.RewriterConfig.Builder {
                  self.memoryOptimization = value
                  return self
                }
            @discardableResult
                public func clearMemoryOptimization() -> Tensorflow.RewriterConfig.Builder {
                   builderResult.hasMemoryOptimization = false
                   builderResult.memoryOptimization = .noMemOpt
                   return self
                }
            public var autoParallel:Tensorflow.AutoParallelOptions! {
                get {
                    if autoParallelBuilder_ != nil {
                        builderResult.autoParallel = autoParallelBuilder_.getMessage()
                    }
                    return builderResult.autoParallel
                }
                set (value) {
                    builderResult.hasAutoParallel = true
                    builderResult.autoParallel = value
                }
            }
            public var hasAutoParallel:Bool {
                get {
                    return builderResult.hasAutoParallel
                }
            }
            fileprivate var autoParallelBuilder_:Tensorflow.AutoParallelOptions.Builder! {
                didSet {
                    builderResult.hasAutoParallel = true
                }
            }
            public func getAutoParallelBuilder() -> Tensorflow.AutoParallelOptions.Builder {
                if autoParallelBuilder_ == nil {
                    autoParallelBuilder_ = Tensorflow.AutoParallelOptions.Builder()
                    builderResult.autoParallel = autoParallelBuilder_.getMessage()
                    if autoParallel != nil {
                        try! autoParallelBuilder_.mergeFrom(other: autoParallel)
                    }
                }
                return autoParallelBuilder_
            }
            @discardableResult
            public func setAutoParallel(_ value:Tensorflow.AutoParallelOptions!) -> Tensorflow.RewriterConfig.Builder {
                self.autoParallel = value
                return self
            }
            @discardableResult
            public func mergeAutoParallel(value:Tensorflow.AutoParallelOptions) throws -> Tensorflow.RewriterConfig.Builder {
                if builderResult.hasAutoParallel {
                    builderResult.autoParallel = try Tensorflow.AutoParallelOptions.builderWithPrototype(prototype:builderResult.autoParallel).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.autoParallel = value
                }
                builderResult.hasAutoParallel = true
                return self
            }
            @discardableResult
            public func clearAutoParallel() -> Tensorflow.RewriterConfig.Builder {
                autoParallelBuilder_ = nil
                builderResult.hasAutoParallel = false
                builderResult.autoParallel = nil
                return self
            }
            /// If non-empty, will use this as an alternative way to specify a list of
            /// optimizations to turn on and the order of the optimizations.
            public var optimizers:Array<String> {
                get {
                    return builderResult.optimizers
                }
                set (array) {
                    builderResult.optimizers = array
                }
            }
            @discardableResult
            public func setOptimizers(_ value:Array<String>) -> Tensorflow.RewriterConfig.Builder {
                self.optimizers = value
                return self
            }
            @discardableResult
            public func clearOptimizers() -> Tensorflow.RewriterConfig.Builder {
                builderResult.optimizers.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.RewriterConfig.Builder {
                builderResult = Tensorflow.RewriterConfig()
                return self
            }
            override public func clone() throws -> Tensorflow.RewriterConfig.Builder {
                return try Tensorflow.RewriterConfig.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.RewriterConfig {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.RewriterConfig {
                let returnMe:Tensorflow.RewriterConfig = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.RewriterConfig) throws -> Tensorflow.RewriterConfig.Builder {
                if other == Tensorflow.RewriterConfig() {
                    return self
                }
                if other.hasOptimizeTensorLayout {
                    optimizeTensorLayout = other.optimizeTensorLayout
                }
                if other.hasDisableModelPruning {
                    disableModelPruning = other.disableModelPruning
                }
                if other.hasConstantFolding {
                    constantFolding = other.constantFolding
                }
                if other.hasMemoryOptimization {
                    memoryOptimization = other.memoryOptimization
                }
                if (other.hasAutoParallel) {
                    try mergeAutoParallel(value: other.autoParallel)
                }
                if !other.optimizers.isEmpty {
                    builderResult.optimizers += other.optimizers
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RewriterConfig.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RewriterConfig.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        optimizeTensorLayout = try codedInputStream.readBool()

                    case 16:
                        disableModelPruning = try codedInputStream.readBool()

                    case 24:
                        constantFolding = try codedInputStream.readBool()

                    case 32:
                        let valueIntmemoryOptimization = try codedInputStream.readEnum()
                        if let enumsmemoryOptimization = Tensorflow.RewriterConfig.MemOptType(rawValue:valueIntmemoryOptimization){
                            memoryOptimization = enumsmemoryOptimization
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntmemoryOptimization))
                        }

                    case 42:
                        let subBuilder:Tensorflow.AutoParallelOptions.Builder = Tensorflow.AutoParallelOptions.Builder()
                        if hasAutoParallel {
                            try subBuilder.mergeFrom(other: autoParallel)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        autoParallel = subBuilder.buildPartial()

                    case 802:
                        optimizers += [try codedInputStream.readString()]

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.RewriterConfig.Builder {
                let resultDecodedBuilder = Tensorflow.RewriterConfig.Builder()
                if let jsonValueOptimizeTensorLayout = jsonMap["optimizeTensorLayout"] as? Bool {
                    resultDecodedBuilder.optimizeTensorLayout = jsonValueOptimizeTensorLayout
                }
                if let jsonValueDisableModelPruning = jsonMap["disableModelPruning"] as? Bool {
                    resultDecodedBuilder.disableModelPruning = jsonValueDisableModelPruning
                }
                if let jsonValueConstantFolding = jsonMap["constantFolding"] as? Bool {
                    resultDecodedBuilder.constantFolding = jsonValueConstantFolding
                }
                if let jsonValueMemoryOptimization = jsonMap["memoryOptimization"] as? String {
                    resultDecodedBuilder.memoryOptimization = try Tensorflow.RewriterConfig.MemOptType.fromString(str: jsonValueMemoryOptimization)
                }
                if let jsonValueAutoParallel = jsonMap["autoParallel"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.autoParallel = try Tensorflow.AutoParallelOptions.Builder.decodeToBuilder(jsonMap:jsonValueAutoParallel).build()

                }
                if let jsonValueOptimizers = jsonMap["optimizers"] as? Array<String> {
                    var jsonArrayOptimizers:Array<String> = []
                    for oneValueOptimizers in jsonValueOptimizers {
                        jsonArrayOptimizers.append(oneValueOptimizers)
                    }
                    resultDecodedBuilder.optimizers = jsonArrayOptimizers
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.RewriterConfig.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.RewriterConfig.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.AutoParallelOptions: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.AutoParallelOptions> {
        var mergedArray = Array<Tensorflow.AutoParallelOptions>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.AutoParallelOptions? {
        return try Tensorflow.AutoParallelOptions.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.RewriterConfigRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.AutoParallelOptions {
        return try Tensorflow.AutoParallelOptions.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "enable": return self.enable
        case "numReplicas": return self.numReplicas
        default: return nil
        }
    }
}
extension Tensorflow.AutoParallelOptions.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "enable": return self.enable
            case "numReplicas": return self.numReplicas
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "enable":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.enable = newSubscriptValue
            case "numReplicas":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.numReplicas = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.RewriterConfig: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.RewriterConfig> {
        var mergedArray = Array<Tensorflow.RewriterConfig>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.RewriterConfig? {
        return try Tensorflow.RewriterConfig.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.RewriterConfigRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.RewriterConfig {
        return try Tensorflow.RewriterConfig.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "optimizeTensorLayout": return self.optimizeTensorLayout
        case "disableModelPruning": return self.disableModelPruning
        case "constantFolding": return self.constantFolding
        case "memoryOptimization": return self.memoryOptimization
        case "autoParallel": return self.autoParallel
        case "optimizers": return self.optimizers
        default: return nil
        }
    }
}
extension Tensorflow.RewriterConfig.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "optimizeTensorLayout": return self.optimizeTensorLayout
            case "disableModelPruning": return self.disableModelPruning
            case "constantFolding": return self.constantFolding
            case "memoryOptimization": return self.memoryOptimization
            case "autoParallel": return self.autoParallel
            case "optimizers": return self.optimizers
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "optimizeTensorLayout":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.optimizeTensorLayout = newSubscriptValue
            case "disableModelPruning":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.disableModelPruning = newSubscriptValue
            case "constantFolding":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.constantFolding = newSubscriptValue
            case "memoryOptimization":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.RewriterConfig.MemOptType else {
                    return
                }
                self.memoryOptimization = newSubscriptValue
            case "autoParallel":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.AutoParallelOptions else {
                    return
                }
                self.autoParallel = newSubscriptValue
            case "optimizers":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.optimizers = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
