/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "cpp_shape_inference.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct CppShapeInferenceRoot {
        public static let `default` = CppShapeInferenceRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TypesRoot.default.registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class CppShapeInferenceResult : GeneratedMessage {

        public static func == (lhs: Tensorflow.CppShapeInferenceResult, rhs: Tensorflow.CppShapeInferenceResult) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasShape == rhs.hasShape) && (!lhs.hasShape || lhs.shape == rhs.shape)
            fieldCheck = fieldCheck && (lhs.hasHandleShape == rhs.hasHandleShape) && (!lhs.hasHandleShape || lhs.handleShape == rhs.handleShape)
            fieldCheck = fieldCheck && (lhs.hasHandleDtype == rhs.hasHandleDtype) && (!lhs.hasHandleDtype || lhs.handleDtype == rhs.handleDtype)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var shape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasShape:Bool = false
        public fileprivate(set) var handleShape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasHandleShape:Bool = false
        public fileprivate(set) var handleDtype:Tensorflow.DataType = Tensorflow.DataType.dtInvalid
        public fileprivate(set) var hasHandleDtype:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasShape {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:shape)
            }
            if hasHandleShape {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:handleShape)
            }
            if hasHandleDtype {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:handleDtype.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasShape {
                if let varSizeshape = shape?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeshape
                }
            }
            if hasHandleShape {
                if let varSizehandleShape = handleShape?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizehandleShape
                }
            }
            if (hasHandleDtype) {
                serialize_size += handleDtype.rawValue.computeEnumSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.CppShapeInferenceResult.Builder {
            return Tensorflow.CppShapeInferenceResult.classBuilder() as! Tensorflow.CppShapeInferenceResult.Builder
        }
        public func getBuilder() -> Tensorflow.CppShapeInferenceResult.Builder {
            return classBuilder() as! Tensorflow.CppShapeInferenceResult.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.CppShapeInferenceResult.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.CppShapeInferenceResult.Builder()
        }
        public func toBuilder() throws -> Tensorflow.CppShapeInferenceResult.Builder {
            return try Tensorflow.CppShapeInferenceResult.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.CppShapeInferenceResult) throws -> Tensorflow.CppShapeInferenceResult.Builder {
            return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasShape {
                jsonMap["shape"] = try shape.encode()
            }
            if hasHandleShape {
                jsonMap["handleShape"] = try handleShape.encode()
            }
            if hasHandleDtype {
                jsonMap["handleDtype"] = handleDtype.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.CppShapeInferenceResult {
            return try Tensorflow.CppShapeInferenceResult.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.CppShapeInferenceResult {
            return try Tensorflow.CppShapeInferenceResult.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasShape {
                output += "\(indent) shape {\n"
                if let outDescShape = shape {
                    output += try outDescShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasHandleShape {
                output += "\(indent) handleShape {\n"
                if let outDescHandleShape = handleShape {
                    output += try outDescHandleShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if (hasHandleDtype) {
                output += "\(indent) handleDtype: \(handleDtype.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasShape {
                    if let hashValueshape = shape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueshape
                    }
                }
                if hasHandleShape {
                    if let hashValuehandleShape = handleShape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuehandleShape
                    }
                }
                if hasHandleDtype {
                     hashCode = (hashCode &* 31) &+ handleDtype.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.CppShapeInferenceResult"
        }
        override public func className() -> String {
            return "Tensorflow.CppShapeInferenceResult"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.CppShapeInferenceResult = Tensorflow.CppShapeInferenceResult()
            public func getMessage() -> Tensorflow.CppShapeInferenceResult {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var shape:Tensorflow.TensorShapeProto! {
                get {
                    if shapeBuilder_ != nil {
                        builderResult.shape = shapeBuilder_.getMessage()
                    }
                    return builderResult.shape
                }
                set (value) {
                    builderResult.hasShape = true
                    builderResult.shape = value
                }
            }
            public var hasShape:Bool {
                get {
                    return builderResult.hasShape
                }
            }
            fileprivate var shapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasShape = true
                }
            }
            public func getShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if shapeBuilder_ == nil {
                    shapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.shape = shapeBuilder_.getMessage()
                    if shape != nil {
                        try! shapeBuilder_.mergeFrom(other: shape)
                    }
                }
                return shapeBuilder_
            }
            @discardableResult
            public func setShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.CppShapeInferenceResult.Builder {
                self.shape = value
                return self
            }
            @discardableResult
            public func mergeShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                if builderResult.hasShape {
                    builderResult.shape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.shape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.shape = value
                }
                builderResult.hasShape = true
                return self
            }
            @discardableResult
            public func clearShape() -> Tensorflow.CppShapeInferenceResult.Builder {
                shapeBuilder_ = nil
                builderResult.hasShape = false
                builderResult.shape = nil
                return self
            }
            public var handleShape:Tensorflow.TensorShapeProto! {
                get {
                    if handleShapeBuilder_ != nil {
                        builderResult.handleShape = handleShapeBuilder_.getMessage()
                    }
                    return builderResult.handleShape
                }
                set (value) {
                    builderResult.hasHandleShape = true
                    builderResult.handleShape = value
                }
            }
            public var hasHandleShape:Bool {
                get {
                    return builderResult.hasHandleShape
                }
            }
            fileprivate var handleShapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasHandleShape = true
                }
            }
            public func getHandleShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if handleShapeBuilder_ == nil {
                    handleShapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.handleShape = handleShapeBuilder_.getMessage()
                    if handleShape != nil {
                        try! handleShapeBuilder_.mergeFrom(other: handleShape)
                    }
                }
                return handleShapeBuilder_
            }
            @discardableResult
            public func setHandleShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.CppShapeInferenceResult.Builder {
                self.handleShape = value
                return self
            }
            @discardableResult
            public func mergeHandleShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                if builderResult.hasHandleShape {
                    builderResult.handleShape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.handleShape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.handleShape = value
                }
                builderResult.hasHandleShape = true
                return self
            }
            @discardableResult
            public func clearHandleShape() -> Tensorflow.CppShapeInferenceResult.Builder {
                handleShapeBuilder_ = nil
                builderResult.hasHandleShape = false
                builderResult.handleShape = nil
                return self
            }
                public var handleDtype:Tensorflow.DataType {
                    get {
                        return builderResult.handleDtype
                    }
                    set (value) {
                        builderResult.hasHandleDtype = true
                        builderResult.handleDtype = value
                    }
                }
                public var hasHandleDtype:Bool{
                    get {
                        return builderResult.hasHandleDtype
                    }
                }
            @discardableResult
                public func setHandleDtype(_ value:Tensorflow.DataType) -> Tensorflow.CppShapeInferenceResult.Builder {
                  self.handleDtype = value
                  return self
                }
            @discardableResult
                public func clearHandleDtype() -> Tensorflow.CppShapeInferenceResult.Builder {
                   builderResult.hasHandleDtype = false
                   builderResult.handleDtype = .dtInvalid
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.CppShapeInferenceResult.Builder {
                builderResult = Tensorflow.CppShapeInferenceResult()
                return self
            }
            override public func clone() throws -> Tensorflow.CppShapeInferenceResult.Builder {
                return try Tensorflow.CppShapeInferenceResult.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.CppShapeInferenceResult {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.CppShapeInferenceResult {
                let returnMe:Tensorflow.CppShapeInferenceResult = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.CppShapeInferenceResult) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                if other == Tensorflow.CppShapeInferenceResult() {
                    return self
                }
                if (other.hasShape) {
                    try mergeShape(value: other.shape)
                }
                if (other.hasHandleShape) {
                    try mergeHandleShape(value: other.handleShape)
                }
                if other.hasHandleDtype {
                    handleDtype = other.handleDtype
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasShape {
                            try subBuilder.mergeFrom(other: shape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        shape = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasHandleShape {
                            try subBuilder.mergeFrom(other: handleShape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        handleShape = subBuilder.buildPartial()

                    case 24:
                        let valueInthandleDtype = try codedInputStream.readEnum()
                        if let enumshandleDtype = Tensorflow.DataType(rawValue:valueInthandleDtype){
                            handleDtype = enumshandleDtype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueInthandleDtype))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                let resultDecodedBuilder = Tensorflow.CppShapeInferenceResult.Builder()
                if let jsonValueShape = jsonMap["shape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.shape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueShape).build()

                }
                if let jsonValueHandleShape = jsonMap["handleShape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.handleShape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueHandleShape).build()

                }
                if let jsonValueHandleDtype = jsonMap["handleDtype"] as? String {
                    resultDecodedBuilder.handleDtype = try Tensorflow.DataType.fromString(str: jsonValueHandleDtype)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.CppShapeInferenceResult.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.CppShapeInferenceResult.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class CppShapeInferenceInputsNeeded : GeneratedMessage {

        public static func == (lhs: Tensorflow.CppShapeInferenceInputsNeeded, rhs: Tensorflow.CppShapeInferenceInputsNeeded) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.inputTensorsNeeded == rhs.inputTensorsNeeded)
            fieldCheck = fieldCheck && (lhs.inputTensorsAsShapesNeeded == rhs.inputTensorsAsShapesNeeded)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var inputTensorsNeeded:Array<Int32> = Array<Int32>()
        private var inputTensorsNeededMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var inputTensorsAsShapesNeeded:Array<Int32> = Array<Int32>()
        private var inputTensorsAsShapesNeededMemoizedSerializedSize:Int32 = -1
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if !inputTensorsNeeded.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 10)
                try codedOutputStream.writeRawVarint32(value: inputTensorsNeededMemoizedSerializedSize)
                for oneValueinputTensorsNeeded in inputTensorsNeeded {
                    try codedOutputStream.writeInt32NoTag(value: oneValueinputTensorsNeeded)
                }
            }
            if !inputTensorsAsShapesNeeded.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 18)
                try codedOutputStream.writeRawVarint32(value: inputTensorsAsShapesNeededMemoizedSerializedSize)
                for oneValueinputTensorsAsShapesNeeded in inputTensorsAsShapesNeeded {
                    try codedOutputStream.writeInt32NoTag(value: oneValueinputTensorsAsShapesNeeded)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            var dataSizeInputTensorsNeeded:Int32 = 0
            for oneValueinputTensorsNeeded in inputTensorsNeeded {
                dataSizeInputTensorsNeeded += oneValueinputTensorsNeeded.computeInt32SizeNoTag()
            }
            serialize_size += dataSizeInputTensorsNeeded
            if !inputTensorsNeeded.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeInputTensorsNeeded.computeInt32SizeNoTag()
            }
            inputTensorsNeededMemoizedSerializedSize = dataSizeInputTensorsNeeded
            var dataSizeInputTensorsAsShapesNeeded:Int32 = 0
            for oneValueinputTensorsAsShapesNeeded in inputTensorsAsShapesNeeded {
                dataSizeInputTensorsAsShapesNeeded += oneValueinputTensorsAsShapesNeeded.computeInt32SizeNoTag()
            }
            serialize_size += dataSizeInputTensorsAsShapesNeeded
            if !inputTensorsAsShapesNeeded.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeInputTensorsAsShapesNeeded.computeInt32SizeNoTag()
            }
            inputTensorsAsShapesNeededMemoizedSerializedSize = dataSizeInputTensorsAsShapesNeeded
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
            return Tensorflow.CppShapeInferenceInputsNeeded.classBuilder() as! Tensorflow.CppShapeInferenceInputsNeeded.Builder
        }
        public func getBuilder() -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
            return classBuilder() as! Tensorflow.CppShapeInferenceInputsNeeded.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.CppShapeInferenceInputsNeeded.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.CppShapeInferenceInputsNeeded.Builder()
        }
        public func toBuilder() throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
            return try Tensorflow.CppShapeInferenceInputsNeeded.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.CppShapeInferenceInputsNeeded) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
            return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !inputTensorsNeeded.isEmpty {
                var jsonArrayInputTensorsNeeded:Array<Int> = []
                for oneValueInputTensorsNeeded in inputTensorsNeeded {
                    jsonArrayInputTensorsNeeded.append(Int(oneValueInputTensorsNeeded))
                }
                jsonMap["inputTensorsNeeded"] = jsonArrayInputTensorsNeeded
            }
            if !inputTensorsAsShapesNeeded.isEmpty {
                var jsonArrayInputTensorsAsShapesNeeded:Array<Int> = []
                for oneValueInputTensorsAsShapesNeeded in inputTensorsAsShapesNeeded {
                    jsonArrayInputTensorsAsShapesNeeded.append(Int(oneValueInputTensorsAsShapesNeeded))
                }
                jsonMap["inputTensorsAsShapesNeeded"] = jsonArrayInputTensorsAsShapesNeeded
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
            return try Tensorflow.CppShapeInferenceInputsNeeded.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
            return try Tensorflow.CppShapeInferenceInputsNeeded.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var inputTensorsNeededElementIndex:Int = 0
            for oneValueInputTensorsNeeded in inputTensorsNeeded  {
                output += "\(indent) inputTensorsNeeded[\(inputTensorsNeededElementIndex)]: \(oneValueInputTensorsNeeded)\n"
                inputTensorsNeededElementIndex += 1
            }
            var inputTensorsAsShapesNeededElementIndex:Int = 0
            for oneValueInputTensorsAsShapesNeeded in inputTensorsAsShapesNeeded  {
                output += "\(indent) inputTensorsAsShapesNeeded[\(inputTensorsAsShapesNeededElementIndex)]: \(oneValueInputTensorsAsShapesNeeded)\n"
                inputTensorsAsShapesNeededElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValueInputTensorsNeeded in inputTensorsNeeded {
                    hashCode = (hashCode &* 31) &+ oneValueInputTensorsNeeded.hashValue
                }
                for oneValueInputTensorsAsShapesNeeded in inputTensorsAsShapesNeeded {
                    hashCode = (hashCode &* 31) &+ oneValueInputTensorsAsShapesNeeded.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.CppShapeInferenceInputsNeeded"
        }
        override public func className() -> String {
            return "Tensorflow.CppShapeInferenceInputsNeeded"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.CppShapeInferenceInputsNeeded = Tensorflow.CppShapeInferenceInputsNeeded()
            public func getMessage() -> Tensorflow.CppShapeInferenceInputsNeeded {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var inputTensorsNeeded:Array<Int32> {
                get {
                    return builderResult.inputTensorsNeeded
                }
                set (array) {
                    builderResult.inputTensorsNeeded = array
                }
            }
            @discardableResult
            public func setInputTensorsNeeded(_ value:Array<Int32>) -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                self.inputTensorsNeeded = value
                return self
            }
            @discardableResult
            public func clearInputTensorsNeeded() -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                builderResult.inputTensorsNeeded.removeAll(keepingCapacity: false)
                return self
            }
            public var inputTensorsAsShapesNeeded:Array<Int32> {
                get {
                    return builderResult.inputTensorsAsShapesNeeded
                }
                set (array) {
                    builderResult.inputTensorsAsShapesNeeded = array
                }
            }
            @discardableResult
            public func setInputTensorsAsShapesNeeded(_ value:Array<Int32>) -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                self.inputTensorsAsShapesNeeded = value
                return self
            }
            @discardableResult
            public func clearInputTensorsAsShapesNeeded() -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                builderResult.inputTensorsAsShapesNeeded.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                builderResult = Tensorflow.CppShapeInferenceInputsNeeded()
                return self
            }
            override public func clone() throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                return try Tensorflow.CppShapeInferenceInputsNeeded.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.CppShapeInferenceInputsNeeded {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.CppShapeInferenceInputsNeeded {
                let returnMe:Tensorflow.CppShapeInferenceInputsNeeded = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.CppShapeInferenceInputsNeeded) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                if other == Tensorflow.CppShapeInferenceInputsNeeded() {
                    return self
                }
                if !other.inputTensorsNeeded.isEmpty {
                    builderResult.inputTensorsNeeded += other.inputTensorsNeeded
                }
                if !other.inputTensorsAsShapesNeeded.isEmpty {
                    builderResult.inputTensorsAsShapesNeeded += other.inputTensorsAsShapesNeeded
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.inputTensorsNeeded.append(try codedInputStream.readInt32())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 18:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.inputTensorsAsShapesNeeded.append(try codedInputStream.readInt32())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                let resultDecodedBuilder = Tensorflow.CppShapeInferenceInputsNeeded.Builder()
                if let jsonValueInputTensorsNeeded = jsonMap["inputTensorsNeeded"] as? Array<Int> {
                    var jsonArrayInputTensorsNeeded:Array<Int32> = []
                    for oneValueInputTensorsNeeded in jsonValueInputTensorsNeeded {
                        jsonArrayInputTensorsNeeded.append(Int32(oneValueInputTensorsNeeded))
                    }
                    resultDecodedBuilder.inputTensorsNeeded = jsonArrayInputTensorsNeeded
                }
                if let jsonValueInputTensorsAsShapesNeeded = jsonMap["inputTensorsAsShapesNeeded"] as? Array<Int> {
                    var jsonArrayInputTensorsAsShapesNeeded:Array<Int32> = []
                    for oneValueInputTensorsAsShapesNeeded in jsonValueInputTensorsAsShapesNeeded {
                        jsonArrayInputTensorsAsShapesNeeded.append(Int32(oneValueInputTensorsAsShapesNeeded))
                    }
                    resultDecodedBuilder.inputTensorsAsShapesNeeded = jsonArrayInputTensorsAsShapesNeeded
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.CppShapeInferenceInputsNeeded.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.CppShapeInferenceInputsNeeded.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.CppShapeInferenceResult: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.CppShapeInferenceResult> {
        var mergedArray = Array<Tensorflow.CppShapeInferenceResult>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.CppShapeInferenceResult? {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.CppShapeInferenceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceResult {
        return try Tensorflow.CppShapeInferenceResult.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "shape": return self.shape
        case "handleShape": return self.handleShape
        case "handleDtype": return self.handleDtype
        default: return nil
        }
    }
}
extension Tensorflow.CppShapeInferenceResult.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "shape": return self.shape
            case "handleShape": return self.handleShape
            case "handleDtype": return self.handleDtype
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "shape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.shape = newSubscriptValue
            case "handleShape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.handleShape = newSubscriptValue
            case "handleDtype":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.DataType else {
                    return
                }
                self.handleDtype = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.CppShapeInferenceInputsNeeded: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.CppShapeInferenceInputsNeeded> {
        var mergedArray = Array<Tensorflow.CppShapeInferenceInputsNeeded>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.CppShapeInferenceInputsNeeded? {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.CppShapeInferenceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.CppShapeInferenceInputsNeeded {
        return try Tensorflow.CppShapeInferenceInputsNeeded.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "inputTensorsNeeded": return self.inputTensorsNeeded
        case "inputTensorsAsShapesNeeded": return self.inputTensorsAsShapesNeeded
        default: return nil
        }
    }
}
extension Tensorflow.CppShapeInferenceInputsNeeded.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "inputTensorsNeeded": return self.inputTensorsNeeded
            case "inputTensorsAsShapesNeeded": return self.inputTensorsAsShapesNeeded
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "inputTensorsNeeded":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int32> else {
                    return
                }
                self.inputTensorsNeeded = newSubscriptValue
            case "inputTensorsAsShapesNeeded":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int32> else {
                    return
                }
                self.inputTensorsAsShapesNeeded = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
