/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "debug_service.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct DebugServiceRoot {
        public static let `default` = DebugServiceRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.EventRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Reply message from EventListener to the client, i.e., to the source of the
    /// Event protocal buffers, e.g., debug ops inserted by a debugged runtime to a
    /// TensorFlow graph being executed.
    final public class EventReply : GeneratedMessage {

        public static func == (lhs: Tensorflow.EventReply, rhs: Tensorflow.EventReply) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.debugOpStateChanges == rhs.debugOpStateChanges)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class DebugOpStateChange : GeneratedMessage {

            public static func == (lhs: Tensorflow.EventReply.DebugOpStateChange, rhs: Tensorflow.EventReply.DebugOpStateChange) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasChange == rhs.hasChange) && (!lhs.hasChange || lhs.change == rhs.change)
                fieldCheck = fieldCheck && (lhs.hasNodeName == rhs.hasNodeName) && (!lhs.hasNodeName || lhs.nodeName == rhs.nodeName)
                fieldCheck = fieldCheck && (lhs.hasOutputSlot == rhs.hasOutputSlot) && (!lhs.hasOutputSlot || lhs.outputSlot == rhs.outputSlot)
                fieldCheck = fieldCheck && (lhs.hasDebugOp == rhs.hasDebugOp) && (!lhs.hasDebugOp || lhs.debugOp == rhs.debugOp)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }



                //Enum type declaration start 

                public enum Change:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                    case disable = 0
                    case enable = 1
                    public func toString() -> String {
                        switch self {
                        case .disable: return "DISABLE"
                        case .enable: return "ENABLE"
                        }
                    }
                    public static func fromString(str:String) throws -> Tensorflow.EventReply.DebugOpStateChange.Change {
                        switch str {
                        case "DISABLE":    return .disable
                        case "ENABLE":    return .enable
                        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                        }
                    }
                    public var debugDescription:String { return getDescription() }
                    public var description:String { return getDescription() }
                    private func getDescription() -> String { 
                        switch self {
                        case .disable: return ".disable"
                        case .enable: return ".enable"
                        }
                    }
                    public var hashValue:Int {
                        return self.rawValue.hashValue
                    }
                    public static func ==(lhs:Change, rhs:Change) -> Bool {
                        return lhs.hashValue == rhs.hashValue
                    }
                }

                //Enum type declaration end 

            public fileprivate(set) var change:Tensorflow.EventReply.DebugOpStateChange.Change = Tensorflow.EventReply.DebugOpStateChange.Change.disable
            public fileprivate(set) var hasChange:Bool = false
            public fileprivate(set) var nodeName:String = ""
            public fileprivate(set) var hasNodeName:Bool = false

            public fileprivate(set) var outputSlot:Int32 = Int32(0)
            public fileprivate(set) var hasOutputSlot:Bool = false

            public fileprivate(set) var debugOp:String = ""
            public fileprivate(set) var hasDebugOp:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasChange {
                    try codedOutputStream.writeEnum(fieldNumber: 1, value:change.rawValue)
                }
                if hasNodeName {
                    try codedOutputStream.writeString(fieldNumber: 2, value:nodeName)
                }
                if hasOutputSlot {
                    try codedOutputStream.writeInt32(fieldNumber: 3, value:outputSlot)
                }
                if hasDebugOp {
                    try codedOutputStream.writeString(fieldNumber: 4, value:debugOp)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if (hasChange) {
                    serialize_size += change.rawValue.computeEnumSize(fieldNumber: 1)
                }
                if hasNodeName {
                    serialize_size += nodeName.computeStringSize(fieldNumber: 2)
                }
                if hasOutputSlot {
                    serialize_size += outputSlot.computeInt32Size(fieldNumber: 3)
                }
                if hasDebugOp {
                    serialize_size += debugOp.computeStringSize(fieldNumber: 4)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                return Tensorflow.EventReply.DebugOpStateChange.classBuilder() as! Tensorflow.EventReply.DebugOpStateChange.Builder
            }
            public func getBuilder() -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                return classBuilder() as! Tensorflow.EventReply.DebugOpStateChange.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.EventReply.DebugOpStateChange.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return Tensorflow.EventReply.DebugOpStateChange.Builder()
            }
            public func toBuilder() throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                return try Tensorflow.EventReply.DebugOpStateChange.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Tensorflow.EventReply.DebugOpStateChange) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasChange {
                    jsonMap["change"] = change.toString()
                }
                if hasNodeName {
                    jsonMap["nodeName"] = nodeName
                }
                if hasOutputSlot {
                    jsonMap["outputSlot"] = Int(outputSlot)
                }
                if hasDebugOp {
                    jsonMap["debugOp"] = debugOp
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.EventReply.DebugOpStateChange {
                return try Tensorflow.EventReply.DebugOpStateChange.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Tensorflow.EventReply.DebugOpStateChange {
                return try Tensorflow.EventReply.DebugOpStateChange.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if (hasChange) {
                    output += "\(indent) change: \(change.description)\n"
                }
                if hasNodeName {
                    output += "\(indent) nodeName: \(nodeName) \n"
                }
                if hasOutputSlot {
                    output += "\(indent) outputSlot: \(outputSlot) \n"
                }
                if hasDebugOp {
                    output += "\(indent) debugOp: \(debugOp) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasChange {
                         hashCode = (hashCode &* 31) &+ change.hashValue
                    }
                    if hasNodeName {
                        hashCode = (hashCode &* 31) &+ nodeName.hashValue
                    }
                    if hasOutputSlot {
                        hashCode = (hashCode &* 31) &+ outputSlot.hashValue
                    }
                    if hasDebugOp {
                        hashCode = (hashCode &* 31) &+ debugOp.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Tensorflow.EventReply.DebugOpStateChange"
            }
            override public func className() -> String {
                return "Tensorflow.EventReply.DebugOpStateChange"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:Tensorflow.EventReply.DebugOpStateChange = Tensorflow.EventReply.DebugOpStateChange()
                public func getMessage() -> Tensorflow.EventReply.DebugOpStateChange {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                    public var change:Tensorflow.EventReply.DebugOpStateChange.Change {
                        get {
                            return builderResult.change
                        }
                        set (value) {
                            builderResult.hasChange = true
                            builderResult.change = value
                        }
                    }
                    public var hasChange:Bool{
                        get {
                            return builderResult.hasChange
                        }
                    }
                @discardableResult
                    public func setChange(_ value:Tensorflow.EventReply.DebugOpStateChange.Change) -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                      self.change = value
                      return self
                    }
                @discardableResult
                    public func clearChange() -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                       builderResult.hasChange = false
                       builderResult.change = .disable
                       return self
                    }
                public var nodeName:String {
                    get {
                        return builderResult.nodeName
                    }
                    set (value) {
                        builderResult.hasNodeName = true
                        builderResult.nodeName = value
                    }
                }
                public var hasNodeName:Bool {
                    get {
                        return builderResult.hasNodeName
                    }
                }
                @discardableResult
                public func setNodeName(_ value:String) -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    self.nodeName = value
                    return self
                }
                @discardableResult
                public func clearNodeName() -> Tensorflow.EventReply.DebugOpStateChange.Builder{
                    builderResult.hasNodeName = false
                    builderResult.nodeName = ""
                    return self
                }
                public var outputSlot:Int32 {
                    get {
                        return builderResult.outputSlot
                    }
                    set (value) {
                        builderResult.hasOutputSlot = true
                        builderResult.outputSlot = value
                    }
                }
                public var hasOutputSlot:Bool {
                    get {
                        return builderResult.hasOutputSlot
                    }
                }
                @discardableResult
                public func setOutputSlot(_ value:Int32) -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    self.outputSlot = value
                    return self
                }
                @discardableResult
                public func clearOutputSlot() -> Tensorflow.EventReply.DebugOpStateChange.Builder{
                    builderResult.hasOutputSlot = false
                    builderResult.outputSlot = Int32(0)
                    return self
                }
                public var debugOp:String {
                    get {
                        return builderResult.debugOp
                    }
                    set (value) {
                        builderResult.hasDebugOp = true
                        builderResult.debugOp = value
                    }
                }
                public var hasDebugOp:Bool {
                    get {
                        return builderResult.hasDebugOp
                    }
                }
                @discardableResult
                public func setDebugOp(_ value:String) -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    self.debugOp = value
                    return self
                }
                @discardableResult
                public func clearDebugOp() -> Tensorflow.EventReply.DebugOpStateChange.Builder{
                    builderResult.hasDebugOp = false
                    builderResult.debugOp = ""
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    builderResult = Tensorflow.EventReply.DebugOpStateChange()
                    return self
                }
                override public func clone() throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    return try Tensorflow.EventReply.DebugOpStateChange.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> Tensorflow.EventReply.DebugOpStateChange {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> Tensorflow.EventReply.DebugOpStateChange {
                    let returnMe:Tensorflow.EventReply.DebugOpStateChange = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:Tensorflow.EventReply.DebugOpStateChange) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    if other == Tensorflow.EventReply.DebugOpStateChange() {
                        return self
                    }
                    if other.hasChange {
                        change = other.change
                    }
                    if other.hasNodeName {
                        nodeName = other.nodeName
                    }
                    if other.hasOutputSlot {
                        outputSlot = other.outputSlot
                    }
                    if other.hasDebugOp {
                        debugOp = other.debugOp
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            let valueIntchange = try codedInputStream.readEnum()
                            if let enumschange = Tensorflow.EventReply.DebugOpStateChange.Change(rawValue:valueIntchange){
                                change = enumschange
                            } else {
                                try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntchange))
                            }

                        case 18:
                            nodeName = try codedInputStream.readString()

                        case 24:
                            outputSlot = try codedInputStream.readInt32()

                        case 34:
                            debugOp = try codedInputStream.readString()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    let resultDecodedBuilder = Tensorflow.EventReply.DebugOpStateChange.Builder()
                    if let jsonValueChange = jsonMap["change"] as? String {
                        resultDecodedBuilder.change = try Tensorflow.EventReply.DebugOpStateChange.Change.fromString(str: jsonValueChange)
                    }
                    if let jsonValueNodeName = jsonMap["nodeName"] as? String {
                        resultDecodedBuilder.nodeName = jsonValueNodeName
                    }
                    if let jsonValueOutputSlot = jsonMap["outputSlot"] as? Int {
                        resultDecodedBuilder.outputSlot = Int32(jsonValueOutputSlot)
                    } else if let jsonValueOutputSlot = jsonMap["outputSlot"] as? String {
                        resultDecodedBuilder.outputSlot = Int32(jsonValueOutputSlot)!
                    }
                    if let jsonValueDebugOp = jsonMap["debugOp"] as? String {
                        resultDecodedBuilder.debugOp = jsonValueDebugOp
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.EventReply.DebugOpStateChange.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Tensorflow.EventReply.DebugOpStateChange.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end

        public fileprivate(set) var debugOpStateChanges:Array<Tensorflow.EventReply.DebugOpStateChange>  = Array<Tensorflow.EventReply.DebugOpStateChange>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementDebugOpStateChanges in debugOpStateChanges {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementDebugOpStateChanges)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementDebugOpStateChanges in debugOpStateChanges {
                serialize_size += oneElementDebugOpStateChanges.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.EventReply.Builder {
            return Tensorflow.EventReply.classBuilder() as! Tensorflow.EventReply.Builder
        }
        public func getBuilder() -> Tensorflow.EventReply.Builder {
            return classBuilder() as! Tensorflow.EventReply.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.EventReply.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.EventReply.Builder()
        }
        public func toBuilder() throws -> Tensorflow.EventReply.Builder {
            return try Tensorflow.EventReply.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.EventReply) throws -> Tensorflow.EventReply.Builder {
            return try Tensorflow.EventReply.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !debugOpStateChanges.isEmpty {
                var jsonArrayDebugOpStateChanges:Array<Dictionary<String,Any>> = []
                for oneValueDebugOpStateChanges in debugOpStateChanges {
                    let ecodedMessageDebugOpStateChanges = try oneValueDebugOpStateChanges.encode()
                    jsonArrayDebugOpStateChanges.append(ecodedMessageDebugOpStateChanges)
                }
                jsonMap["debugOpStateChanges"] = jsonArrayDebugOpStateChanges
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.EventReply {
            return try Tensorflow.EventReply.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.EventReply {
            return try Tensorflow.EventReply.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var debugOpStateChangesElementIndex:Int = 0
            for oneElementDebugOpStateChanges in debugOpStateChanges {
                output += "\(indent) debugOpStateChanges[\(debugOpStateChangesElementIndex)] {\n"
                output += try oneElementDebugOpStateChanges.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                debugOpStateChangesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementDebugOpStateChanges in debugOpStateChanges {
                    hashCode = (hashCode &* 31) &+ oneElementDebugOpStateChanges.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.EventReply"
        }
        override public func className() -> String {
            return "Tensorflow.EventReply"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.EventReply = Tensorflow.EventReply()
            public func getMessage() -> Tensorflow.EventReply {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var debugOpStateChanges:Array<Tensorflow.EventReply.DebugOpStateChange> {
                get {
                    return builderResult.debugOpStateChanges
                }
                set (value) {
                    builderResult.debugOpStateChanges = value
                }
            }
            @discardableResult
            public func setDebugOpStateChanges(_ value:Array<Tensorflow.EventReply.DebugOpStateChange>) -> Tensorflow.EventReply.Builder {
                self.debugOpStateChanges = value
                return self
            }
            @discardableResult
            public func clearDebugOpStateChanges() -> Tensorflow.EventReply.Builder {
                builderResult.debugOpStateChanges.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.EventReply.Builder {
                builderResult = Tensorflow.EventReply()
                return self
            }
            override public func clone() throws -> Tensorflow.EventReply.Builder {
                return try Tensorflow.EventReply.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.EventReply {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.EventReply {
                let returnMe:Tensorflow.EventReply = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.EventReply) throws -> Tensorflow.EventReply.Builder {
                if other == Tensorflow.EventReply() {
                    return self
                }
                if !other.debugOpStateChanges.isEmpty  {
                     builderResult.debugOpStateChanges += other.debugOpStateChanges
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.EventReply.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Tensorflow.EventReply.DebugOpStateChange.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        debugOpStateChanges.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.EventReply.Builder {
                let resultDecodedBuilder = Tensorflow.EventReply.Builder()
                if let jsonValueDebugOpStateChanges = jsonMap["debugOpStateChanges"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayDebugOpStateChanges:Array<Tensorflow.EventReply.DebugOpStateChange> = []
                    for oneValueDebugOpStateChanges in jsonValueDebugOpStateChanges {
                        let messageFromStringDebugOpStateChanges = try Tensorflow.EventReply.DebugOpStateChange.Builder.decodeToBuilder(jsonMap:oneValueDebugOpStateChanges).build()

                        jsonArrayDebugOpStateChanges.append(messageFromStringDebugOpStateChanges)
                    }
                    resultDecodedBuilder.debugOpStateChanges = jsonArrayDebugOpStateChanges
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.EventReply.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.EventReply.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.EventReply: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.EventReply> {
        var mergedArray = Array<Tensorflow.EventReply>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.EventReply? {
        return try Tensorflow.EventReply.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.DebugServiceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply {
        return try Tensorflow.EventReply.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "debugOpStateChanges": return self.debugOpStateChanges
        default: return nil
        }
    }
}
extension Tensorflow.EventReply.DebugOpStateChange: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.EventReply.DebugOpStateChange> {
        var mergedArray = Array<Tensorflow.EventReply.DebugOpStateChange>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.EventReply.DebugOpStateChange? {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.DebugServiceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.EventReply.DebugOpStateChange {
        return try Tensorflow.EventReply.DebugOpStateChange.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "change": return self.change
        case "nodeName": return self.nodeName
        case "outputSlot": return self.outputSlot
        case "debugOp": return self.debugOp
        default: return nil
        }
    }
}
extension Tensorflow.EventReply.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "debugOpStateChanges": return self.debugOpStateChanges
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "debugOpStateChanges":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.EventReply.DebugOpStateChange> else {
                    return
                }
                self.debugOpStateChanges = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.EventReply.DebugOpStateChange.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "change": return self.change
            case "nodeName": return self.nodeName
            case "outputSlot": return self.outputSlot
            case "debugOp": return self.debugOp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "change":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.EventReply.DebugOpStateChange.Change else {
                    return
                }
                self.change = newSubscriptValue
            case "nodeName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nodeName = newSubscriptValue
            case "outputSlot":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.outputSlot = newSubscriptValue
            case "debugOp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.debugOp = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
