/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "tfcompile.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { public struct Tfcompile { }}

public extension Tensorflow.Tfcompile {
    public struct TfcompileRoot {
        public static let `default` = TfcompileRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Tensorflow.TensorShapeRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
    /// index of a particular node in the graph.  If the output of the named node
    /// feeds into other node(s), this corresponds to one or more edges.  Otherwise
    /// it doesn't correspond to any existing edges at all, e.g. for output nodes.
    final public class TensorId : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfcompile.TensorId, rhs: Tensorflow.Tfcompile.TensorId) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasNodeName == rhs.hasNodeName) && (!lhs.hasNodeName || lhs.nodeName == rhs.nodeName)
            fieldCheck = fieldCheck && (lhs.hasOutputIndex == rhs.hasOutputIndex) && (!lhs.hasOutputIndex || lhs.outputIndex == rhs.outputIndex)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var nodeName:String = ""
        public fileprivate(set) var hasNodeName:Bool = false

        public fileprivate(set) var outputIndex:Int64 = Int64(0)
        public fileprivate(set) var hasOutputIndex:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasNodeName {
                try codedOutputStream.writeString(fieldNumber: 1, value:nodeName)
            }
            if hasOutputIndex {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:outputIndex)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasNodeName {
                serialize_size += nodeName.computeStringSize(fieldNumber: 1)
            }
            if hasOutputIndex {
                serialize_size += outputIndex.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfcompile.TensorId.Builder {
            return Tensorflow.Tfcompile.TensorId.classBuilder() as! Tensorflow.Tfcompile.TensorId.Builder
        }
        public func getBuilder() -> Tensorflow.Tfcompile.TensorId.Builder {
            return classBuilder() as! Tensorflow.Tfcompile.TensorId.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.TensorId.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.TensorId.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfcompile.TensorId.Builder {
            return try Tensorflow.Tfcompile.TensorId.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfcompile.TensorId) throws -> Tensorflow.Tfcompile.TensorId.Builder {
            return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasNodeName {
                jsonMap["nodeName"] = nodeName
            }
            if hasOutputIndex {
                jsonMap["outputIndex"] = "\(outputIndex)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.TensorId {
            return try Tensorflow.Tfcompile.TensorId.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfcompile.TensorId {
            return try Tensorflow.Tfcompile.TensorId.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasNodeName {
                output += "\(indent) nodeName: \(nodeName) \n"
            }
            if hasOutputIndex {
                output += "\(indent) outputIndex: \(outputIndex) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasNodeName {
                    hashCode = (hashCode &* 31) &+ nodeName.hashValue
                }
                if hasOutputIndex {
                    hashCode = (hashCode &* 31) &+ outputIndex.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfcompile.TensorId"
        }
        override public func className() -> String {
            return "Tensorflow.Tfcompile.TensorId"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfcompile.TensorId = Tensorflow.Tfcompile.TensorId()
            public func getMessage() -> Tensorflow.Tfcompile.TensorId {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var nodeName:String {
                get {
                    return builderResult.nodeName
                }
                set (value) {
                    builderResult.hasNodeName = true
                    builderResult.nodeName = value
                }
            }
            public var hasNodeName:Bool {
                get {
                    return builderResult.hasNodeName
                }
            }
            @discardableResult
            public func setNodeName(_ value:String) -> Tensorflow.Tfcompile.TensorId.Builder {
                self.nodeName = value
                return self
            }
            @discardableResult
            public func clearNodeName() -> Tensorflow.Tfcompile.TensorId.Builder{
                builderResult.hasNodeName = false
                builderResult.nodeName = ""
                return self
            }
            public var outputIndex:Int64 {
                get {
                    return builderResult.outputIndex
                }
                set (value) {
                    builderResult.hasOutputIndex = true
                    builderResult.outputIndex = value
                }
            }
            public var hasOutputIndex:Bool {
                get {
                    return builderResult.hasOutputIndex
                }
            }
            @discardableResult
            public func setOutputIndex(_ value:Int64) -> Tensorflow.Tfcompile.TensorId.Builder {
                self.outputIndex = value
                return self
            }
            @discardableResult
            public func clearOutputIndex() -> Tensorflow.Tfcompile.TensorId.Builder{
                builderResult.hasOutputIndex = false
                builderResult.outputIndex = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfcompile.TensorId.Builder {
                builderResult = Tensorflow.Tfcompile.TensorId()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfcompile.TensorId.Builder {
                return try Tensorflow.Tfcompile.TensorId.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfcompile.TensorId {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfcompile.TensorId {
                let returnMe:Tensorflow.Tfcompile.TensorId = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfcompile.TensorId) throws -> Tensorflow.Tfcompile.TensorId.Builder {
                if other == Tensorflow.Tfcompile.TensorId() {
                    return self
                }
                if other.hasNodeName {
                    nodeName = other.nodeName
                }
                if other.hasOutputIndex {
                    outputIndex = other.outputIndex
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.TensorId.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.TensorId.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        nodeName = try codedInputStream.readString()

                    case 16:
                        outputIndex = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.TensorId.Builder {
                let resultDecodedBuilder = Tensorflow.Tfcompile.TensorId.Builder()
                if let jsonValueNodeName = jsonMap["nodeName"] as? String {
                    resultDecodedBuilder.nodeName = jsonValueNodeName
                }
                if let jsonValueOutputIndex = jsonMap["outputIndex"] as? String {
                    resultDecodedBuilder.outputIndex = Int64(jsonValueOutputIndex)!
                } else if let jsonValueOutputIndex = jsonMap["outputIndex"] as? Int {
                    resultDecodedBuilder.outputIndex = Int64(jsonValueOutputIndex)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfcompile.TensorId.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfcompile.TensorId.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Feed represents a single feed tensor in the graph, which corresponds to an
    /// input argument for the generated function.
    final public class Feed : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfcompile.Feed, rhs: Tensorflow.Tfcompile.Feed) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasShape == rhs.hasShape) && (!lhs.hasShape || lhs.shape == rhs.shape)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Tensorflow.Tfcompile.TensorId!
        public fileprivate(set) var hasId:Bool = false
        public fileprivate(set) var shape:Tensorflow.TensorShapeProto!
        public fileprivate(set) var hasShape:Bool = false
        /// Optional name for generated code.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:id)
            }
            if hasShape {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:shape)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 3, value:name)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                if let varSizeid = id?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeid
                }
            }
            if hasShape {
                if let varSizeshape = shape?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeshape
                }
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfcompile.Feed.Builder {
            return Tensorflow.Tfcompile.Feed.classBuilder() as! Tensorflow.Tfcompile.Feed.Builder
        }
        public func getBuilder() -> Tensorflow.Tfcompile.Feed.Builder {
            return classBuilder() as! Tensorflow.Tfcompile.Feed.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Feed.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Feed.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfcompile.Feed.Builder {
            return try Tensorflow.Tfcompile.Feed.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfcompile.Feed) throws -> Tensorflow.Tfcompile.Feed.Builder {
            return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = try id.encode()
            }
            if hasShape {
                jsonMap["shape"] = try shape.encode()
            }
            if hasName {
                jsonMap["name"] = name
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Feed {
            return try Tensorflow.Tfcompile.Feed.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfcompile.Feed {
            return try Tensorflow.Tfcompile.Feed.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id {\n"
                if let outDescId = id {
                    output += try outDescId.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasShape {
                output += "\(indent) shape {\n"
                if let outDescShape = shape {
                    output += try outDescShape.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    if let hashValueid = id?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueid
                    }
                }
                if hasShape {
                    if let hashValueshape = shape?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueshape
                    }
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfcompile.Feed"
        }
        override public func className() -> String {
            return "Tensorflow.Tfcompile.Feed"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfcompile.Feed = Tensorflow.Tfcompile.Feed()
            public func getMessage() -> Tensorflow.Tfcompile.Feed {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Tensorflow.Tfcompile.TensorId! {
                get {
                    if idBuilder_ != nil {
                        builderResult.id = idBuilder_.getMessage()
                    }
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            fileprivate var idBuilder_:Tensorflow.Tfcompile.TensorId.Builder! {
                didSet {
                    builderResult.hasId = true
                }
            }
            public func getIdBuilder() -> Tensorflow.Tfcompile.TensorId.Builder {
                if idBuilder_ == nil {
                    idBuilder_ = Tensorflow.Tfcompile.TensorId.Builder()
                    builderResult.id = idBuilder_.getMessage()
                    if id != nil {
                        try! idBuilder_.mergeFrom(other: id)
                    }
                }
                return idBuilder_
            }
            @discardableResult
            public func setId(_ value:Tensorflow.Tfcompile.TensorId!) -> Tensorflow.Tfcompile.Feed.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func mergeId(value:Tensorflow.Tfcompile.TensorId) throws -> Tensorflow.Tfcompile.Feed.Builder {
                if builderResult.hasId {
                    builderResult.id = try Tensorflow.Tfcompile.TensorId.builderWithPrototype(prototype:builderResult.id).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.id = value
                }
                builderResult.hasId = true
                return self
            }
            @discardableResult
            public func clearId() -> Tensorflow.Tfcompile.Feed.Builder {
                idBuilder_ = nil
                builderResult.hasId = false
                builderResult.id = nil
                return self
            }
            public var shape:Tensorflow.TensorShapeProto! {
                get {
                    if shapeBuilder_ != nil {
                        builderResult.shape = shapeBuilder_.getMessage()
                    }
                    return builderResult.shape
                }
                set (value) {
                    builderResult.hasShape = true
                    builderResult.shape = value
                }
            }
            public var hasShape:Bool {
                get {
                    return builderResult.hasShape
                }
            }
            fileprivate var shapeBuilder_:Tensorflow.TensorShapeProto.Builder! {
                didSet {
                    builderResult.hasShape = true
                }
            }
            public func getShapeBuilder() -> Tensorflow.TensorShapeProto.Builder {
                if shapeBuilder_ == nil {
                    shapeBuilder_ = Tensorflow.TensorShapeProto.Builder()
                    builderResult.shape = shapeBuilder_.getMessage()
                    if shape != nil {
                        try! shapeBuilder_.mergeFrom(other: shape)
                    }
                }
                return shapeBuilder_
            }
            @discardableResult
            public func setShape(_ value:Tensorflow.TensorShapeProto!) -> Tensorflow.Tfcompile.Feed.Builder {
                self.shape = value
                return self
            }
            @discardableResult
            public func mergeShape(value:Tensorflow.TensorShapeProto) throws -> Tensorflow.Tfcompile.Feed.Builder {
                if builderResult.hasShape {
                    builderResult.shape = try Tensorflow.TensorShapeProto.builderWithPrototype(prototype:builderResult.shape).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.shape = value
                }
                builderResult.hasShape = true
                return self
            }
            @discardableResult
            public func clearShape() -> Tensorflow.Tfcompile.Feed.Builder {
                shapeBuilder_ = nil
                builderResult.hasShape = false
                builderResult.shape = nil
                return self
            }
            /// Optional name for generated code.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.Tfcompile.Feed.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.Tfcompile.Feed.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfcompile.Feed.Builder {
                builderResult = Tensorflow.Tfcompile.Feed()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfcompile.Feed.Builder {
                return try Tensorflow.Tfcompile.Feed.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfcompile.Feed {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfcompile.Feed {
                let returnMe:Tensorflow.Tfcompile.Feed = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfcompile.Feed) throws -> Tensorflow.Tfcompile.Feed.Builder {
                if other == Tensorflow.Tfcompile.Feed() {
                    return self
                }
                if (other.hasId) {
                    try mergeId(value: other.id)
                }
                if (other.hasShape) {
                    try mergeShape(value: other.shape)
                }
                if other.hasName {
                    name = other.name
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Feed.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Feed.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.Tfcompile.TensorId.Builder = Tensorflow.Tfcompile.TensorId.Builder()
                        if hasId {
                            try subBuilder.mergeFrom(other: id)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        id = subBuilder.buildPartial()

                    case 18:
                        let subBuilder:Tensorflow.TensorShapeProto.Builder = Tensorflow.TensorShapeProto.Builder()
                        if hasShape {
                            try subBuilder.mergeFrom(other: shape)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        shape = subBuilder.buildPartial()

                    case 26:
                        name = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Feed.Builder {
                let resultDecodedBuilder = Tensorflow.Tfcompile.Feed.Builder()
                if let jsonValueId = jsonMap["id"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.id = try Tensorflow.Tfcompile.TensorId.Builder.decodeToBuilder(jsonMap:jsonValueId).build()

                }
                if let jsonValueShape = jsonMap["shape"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.shape = try Tensorflow.TensorShapeProto.Builder.decodeToBuilder(jsonMap:jsonValueShape).build()

                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfcompile.Feed.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfcompile.Feed.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Fetch represents a single fetch tensor in the graph, which corresponds to an
    /// output argument for the generated function.
    final public class Fetch : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfcompile.Fetch, rhs: Tensorflow.Tfcompile.Fetch) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:Tensorflow.Tfcompile.TensorId!
        public fileprivate(set) var hasId:Bool = false
        /// Optional name for generated code.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeMessage(fieldNumber: 1, value:id)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 2, value:name)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                if let varSizeid = id?.computeMessageSize(fieldNumber: 1) {
                    serialize_size += varSizeid
                }
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfcompile.Fetch.Builder {
            return Tensorflow.Tfcompile.Fetch.classBuilder() as! Tensorflow.Tfcompile.Fetch.Builder
        }
        public func getBuilder() -> Tensorflow.Tfcompile.Fetch.Builder {
            return classBuilder() as! Tensorflow.Tfcompile.Fetch.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Fetch.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Fetch.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfcompile.Fetch.Builder {
            return try Tensorflow.Tfcompile.Fetch.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfcompile.Fetch) throws -> Tensorflow.Tfcompile.Fetch.Builder {
            return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = try id.encode()
            }
            if hasName {
                jsonMap["name"] = name
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Fetch {
            return try Tensorflow.Tfcompile.Fetch.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfcompile.Fetch {
            return try Tensorflow.Tfcompile.Fetch.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id {\n"
                if let outDescId = id {
                    output += try outDescId.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    if let hashValueid = id?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueid
                    }
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfcompile.Fetch"
        }
        override public func className() -> String {
            return "Tensorflow.Tfcompile.Fetch"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfcompile.Fetch = Tensorflow.Tfcompile.Fetch()
            public func getMessage() -> Tensorflow.Tfcompile.Fetch {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:Tensorflow.Tfcompile.TensorId! {
                get {
                    if idBuilder_ != nil {
                        builderResult.id = idBuilder_.getMessage()
                    }
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            fileprivate var idBuilder_:Tensorflow.Tfcompile.TensorId.Builder! {
                didSet {
                    builderResult.hasId = true
                }
            }
            public func getIdBuilder() -> Tensorflow.Tfcompile.TensorId.Builder {
                if idBuilder_ == nil {
                    idBuilder_ = Tensorflow.Tfcompile.TensorId.Builder()
                    builderResult.id = idBuilder_.getMessage()
                    if id != nil {
                        try! idBuilder_.mergeFrom(other: id)
                    }
                }
                return idBuilder_
            }
            @discardableResult
            public func setId(_ value:Tensorflow.Tfcompile.TensorId!) -> Tensorflow.Tfcompile.Fetch.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func mergeId(value:Tensorflow.Tfcompile.TensorId) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                if builderResult.hasId {
                    builderResult.id = try Tensorflow.Tfcompile.TensorId.builderWithPrototype(prototype:builderResult.id).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.id = value
                }
                builderResult.hasId = true
                return self
            }
            @discardableResult
            public func clearId() -> Tensorflow.Tfcompile.Fetch.Builder {
                idBuilder_ = nil
                builderResult.hasId = false
                builderResult.id = nil
                return self
            }
            /// Optional name for generated code.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Tensorflow.Tfcompile.Fetch.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Tensorflow.Tfcompile.Fetch.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfcompile.Fetch.Builder {
                builderResult = Tensorflow.Tfcompile.Fetch()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfcompile.Fetch.Builder {
                return try Tensorflow.Tfcompile.Fetch.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfcompile.Fetch {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfcompile.Fetch {
                let returnMe:Tensorflow.Tfcompile.Fetch = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfcompile.Fetch) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                if other == Tensorflow.Tfcompile.Fetch() {
                    return self
                }
                if (other.hasId) {
                    try mergeId(value: other.id)
                }
                if other.hasName {
                    name = other.name
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder:Tensorflow.Tfcompile.TensorId.Builder = Tensorflow.Tfcompile.TensorId.Builder()
                        if hasId {
                            try subBuilder.mergeFrom(other: id)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        id = subBuilder.buildPartial()

                    case 18:
                        name = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                let resultDecodedBuilder = Tensorflow.Tfcompile.Fetch.Builder()
                if let jsonValueId = jsonMap["id"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.id = try Tensorflow.Tfcompile.TensorId.Builder.decodeToBuilder(jsonMap:jsonValueId).build()

                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfcompile.Fetch.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfcompile.Fetch.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Config represents configuration information for tfcompile.
    final public class Config : GeneratedMessage {

        public static func == (lhs: Tensorflow.Tfcompile.Config, rhs: Tensorflow.Tfcompile.Config) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.feed == rhs.feed)
            fieldCheck = fieldCheck && (lhs.fetch == rhs.fetch)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var feed:Array<Tensorflow.Tfcompile.Feed>  = Array<Tensorflow.Tfcompile.Feed>()
        public fileprivate(set) var fetch:Array<Tensorflow.Tfcompile.Fetch>  = Array<Tensorflow.Tfcompile.Fetch>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementFeed in feed {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementFeed)
            }
            for oneElementFetch in fetch {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementFetch)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementFeed in feed {
                serialize_size += oneElementFeed.computeMessageSize(fieldNumber: 1)
            }
            for oneElementFetch in fetch {
                serialize_size += oneElementFetch.computeMessageSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.Tfcompile.Config.Builder {
            return Tensorflow.Tfcompile.Config.classBuilder() as! Tensorflow.Tfcompile.Config.Builder
        }
        public func getBuilder() -> Tensorflow.Tfcompile.Config.Builder {
            return classBuilder() as! Tensorflow.Tfcompile.Config.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Config.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.Tfcompile.Config.Builder()
        }
        public func toBuilder() throws -> Tensorflow.Tfcompile.Config.Builder {
            return try Tensorflow.Tfcompile.Config.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.Tfcompile.Config) throws -> Tensorflow.Tfcompile.Config.Builder {
            return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !feed.isEmpty {
                var jsonArrayFeed:Array<Dictionary<String,Any>> = []
                for oneValueFeed in feed {
                    let ecodedMessageFeed = try oneValueFeed.encode()
                    jsonArrayFeed.append(ecodedMessageFeed)
                }
                jsonMap["feed"] = jsonArrayFeed
            }
            if !fetch.isEmpty {
                var jsonArrayFetch:Array<Dictionary<String,Any>> = []
                for oneValueFetch in fetch {
                    let ecodedMessageFetch = try oneValueFetch.encode()
                    jsonArrayFetch.append(ecodedMessageFetch)
                }
                jsonMap["fetch"] = jsonArrayFetch
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Config {
            return try Tensorflow.Tfcompile.Config.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.Tfcompile.Config {
            return try Tensorflow.Tfcompile.Config.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var feedElementIndex:Int = 0
            for oneElementFeed in feed {
                output += "\(indent) feed[\(feedElementIndex)] {\n"
                output += try oneElementFeed.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                feedElementIndex += 1
            }
            var fetchElementIndex:Int = 0
            for oneElementFetch in fetch {
                output += "\(indent) fetch[\(fetchElementIndex)] {\n"
                output += try oneElementFetch.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                fetchElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementFeed in feed {
                    hashCode = (hashCode &* 31) &+ oneElementFeed.hashValue
                }
                for oneElementFetch in fetch {
                    hashCode = (hashCode &* 31) &+ oneElementFetch.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.Tfcompile.Config"
        }
        override public func className() -> String {
            return "Tensorflow.Tfcompile.Config"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.Tfcompile.Config = Tensorflow.Tfcompile.Config()
            public func getMessage() -> Tensorflow.Tfcompile.Config {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Each feed is a positional input argument for the generated function.  The
            /// order of each entry matches the order of each input argument.
            public var feed:Array<Tensorflow.Tfcompile.Feed> {
                get {
                    return builderResult.feed
                }
                set (value) {
                    builderResult.feed = value
                }
            }
            @discardableResult
            public func setFeed(_ value:Array<Tensorflow.Tfcompile.Feed>) -> Tensorflow.Tfcompile.Config.Builder {
                self.feed = value
                return self
            }
            @discardableResult
            public func clearFeed() -> Tensorflow.Tfcompile.Config.Builder {
                builderResult.feed.removeAll(keepingCapacity: false)
                return self
            }
            /// Each fetch is a positional output argument for the generated function.  The
            /// order of each entry matches the order of each output argument.
            public var fetch:Array<Tensorflow.Tfcompile.Fetch> {
                get {
                    return builderResult.fetch
                }
                set (value) {
                    builderResult.fetch = value
                }
            }
            @discardableResult
            public func setFetch(_ value:Array<Tensorflow.Tfcompile.Fetch>) -> Tensorflow.Tfcompile.Config.Builder {
                self.fetch = value
                return self
            }
            @discardableResult
            public func clearFetch() -> Tensorflow.Tfcompile.Config.Builder {
                builderResult.fetch.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.Tfcompile.Config.Builder {
                builderResult = Tensorflow.Tfcompile.Config()
                return self
            }
            override public func clone() throws -> Tensorflow.Tfcompile.Config.Builder {
                return try Tensorflow.Tfcompile.Config.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.Tfcompile.Config {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.Tfcompile.Config {
                let returnMe:Tensorflow.Tfcompile.Config = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.Tfcompile.Config) throws -> Tensorflow.Tfcompile.Config.Builder {
                if other == Tensorflow.Tfcompile.Config() {
                    return self
                }
                if !other.feed.isEmpty  {
                     builderResult.feed += other.feed
                }
                if !other.fetch.isEmpty  {
                     builderResult.fetch += other.fetch
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Config.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Config.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Tensorflow.Tfcompile.Feed.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        feed.append(subBuilder.buildPartial())

                    case 18:
                        let subBuilder = Tensorflow.Tfcompile.Fetch.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        fetch.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.Tfcompile.Config.Builder {
                let resultDecodedBuilder = Tensorflow.Tfcompile.Config.Builder()
                if let jsonValueFeed = jsonMap["feed"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayFeed:Array<Tensorflow.Tfcompile.Feed> = []
                    for oneValueFeed in jsonValueFeed {
                        let messageFromStringFeed = try Tensorflow.Tfcompile.Feed.Builder.decodeToBuilder(jsonMap:oneValueFeed).build()

                        jsonArrayFeed.append(messageFromStringFeed)
                    }
                    resultDecodedBuilder.feed = jsonArrayFeed
                }
                if let jsonValueFetch = jsonMap["fetch"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayFetch:Array<Tensorflow.Tfcompile.Fetch> = []
                    for oneValueFetch in jsonValueFetch {
                        let messageFromStringFetch = try Tensorflow.Tfcompile.Fetch.Builder.decodeToBuilder(jsonMap:oneValueFetch).build()

                        jsonArrayFetch.append(messageFromStringFetch)
                    }
                    resultDecodedBuilder.fetch = jsonArrayFetch
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.Tfcompile.Config.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.Tfcompile.Config.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.Tfcompile.TensorId: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfcompile.TensorId> {
        var mergedArray = Array<Tensorflow.Tfcompile.TensorId>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.TensorId? {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfcompile.TfcompileRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.TensorId {
        return try Tensorflow.Tfcompile.TensorId.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "nodeName": return self.nodeName
        case "outputIndex": return self.outputIndex
        default: return nil
        }
    }
}
extension Tensorflow.Tfcompile.TensorId.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "nodeName": return self.nodeName
            case "outputIndex": return self.outputIndex
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "nodeName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nodeName = newSubscriptValue
            case "outputIndex":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.outputIndex = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.Tfcompile.Feed: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfcompile.Feed> {
        var mergedArray = Array<Tensorflow.Tfcompile.Feed>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Feed? {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfcompile.TfcompileRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Feed {
        return try Tensorflow.Tfcompile.Feed.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "shape": return self.shape
        case "name": return self.name
        default: return nil
        }
    }
}
extension Tensorflow.Tfcompile.Feed.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "shape": return self.shape
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Tfcompile.TensorId else {
                    return
                }
                self.id = newSubscriptValue
            case "shape":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.TensorShapeProto else {
                    return
                }
                self.shape = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.Tfcompile.Fetch: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfcompile.Fetch> {
        var mergedArray = Array<Tensorflow.Tfcompile.Fetch>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Fetch? {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfcompile.TfcompileRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Fetch {
        return try Tensorflow.Tfcompile.Fetch.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "name": return self.name
        default: return nil
        }
    }
}
extension Tensorflow.Tfcompile.Fetch.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Tensorflow.Tfcompile.TensorId else {
                    return
                }
                self.id = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension Tensorflow.Tfcompile.Config: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.Tfcompile.Config> {
        var mergedArray = Array<Tensorflow.Tfcompile.Config>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Config? {
        return try Tensorflow.Tfcompile.Config.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.Tfcompile.TfcompileRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.Tfcompile.Config {
        return try Tensorflow.Tfcompile.Config.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "feed": return self.feed
        case "fetch": return self.fetch
        default: return nil
        }
    }
}
extension Tensorflow.Tfcompile.Config.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "feed": return self.feed
            case "fetch": return self.fetch
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "feed":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.Tfcompile.Feed> else {
                    return
                }
                self.feed = newSubscriptValue
            case "fetch":
                guard let newSubscriptValue = newSubscriptValue as? Array<Tensorflow.Tfcompile.Fetch> else {
                    return
                }
                self.fetch = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
