/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "reader_base.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Tensorflow { }

public extension Tensorflow {
    public struct ReaderBaseRoot {
        public static let `default` = ReaderBaseRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// For serializing and restoring the state of ReaderBase, see
    /// reader_base.h for details.
    final public class ReaderBaseState : GeneratedMessage {

        public static func == (lhs: Tensorflow.ReaderBaseState, rhs: Tensorflow.ReaderBaseState) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasWorkStarted == rhs.hasWorkStarted) && (!lhs.hasWorkStarted || lhs.workStarted == rhs.workStarted)
            fieldCheck = fieldCheck && (lhs.hasWorkFinished == rhs.hasWorkFinished) && (!lhs.hasWorkFinished || lhs.workFinished == rhs.workFinished)
            fieldCheck = fieldCheck && (lhs.hasNumRecordsProduced == rhs.hasNumRecordsProduced) && (!lhs.hasNumRecordsProduced || lhs.numRecordsProduced == rhs.numRecordsProduced)
            fieldCheck = fieldCheck && (lhs.hasCurrentWork == rhs.hasCurrentWork) && (!lhs.hasCurrentWork || lhs.currentWork == rhs.currentWork)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var workStarted:Int64 = Int64(0)
        public fileprivate(set) var hasWorkStarted:Bool = false

        public fileprivate(set) var workFinished:Int64 = Int64(0)
        public fileprivate(set) var hasWorkFinished:Bool = false

        public fileprivate(set) var numRecordsProduced:Int64 = Int64(0)
        public fileprivate(set) var hasNumRecordsProduced:Bool = false

        public fileprivate(set) var currentWork:Data = Data()
        public fileprivate(set) var hasCurrentWork:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasWorkStarted {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:workStarted)
            }
            if hasWorkFinished {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:workFinished)
            }
            if hasNumRecordsProduced {
                try codedOutputStream.writeInt64(fieldNumber: 3, value:numRecordsProduced)
            }
            if hasCurrentWork {
                try codedOutputStream.writeData(fieldNumber: 4, value:currentWork)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasWorkStarted {
                serialize_size += workStarted.computeInt64Size(fieldNumber: 1)
            }
            if hasWorkFinished {
                serialize_size += workFinished.computeInt64Size(fieldNumber: 2)
            }
            if hasNumRecordsProduced {
                serialize_size += numRecordsProduced.computeInt64Size(fieldNumber: 3)
            }
            if hasCurrentWork {
                serialize_size += currentWork.computeDataSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Tensorflow.ReaderBaseState.Builder {
            return Tensorflow.ReaderBaseState.classBuilder() as! Tensorflow.ReaderBaseState.Builder
        }
        public func getBuilder() -> Tensorflow.ReaderBaseState.Builder {
            return classBuilder() as! Tensorflow.ReaderBaseState.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.ReaderBaseState.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Tensorflow.ReaderBaseState.Builder()
        }
        public func toBuilder() throws -> Tensorflow.ReaderBaseState.Builder {
            return try Tensorflow.ReaderBaseState.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Tensorflow.ReaderBaseState) throws -> Tensorflow.ReaderBaseState.Builder {
            return try Tensorflow.ReaderBaseState.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasWorkStarted {
                jsonMap["workStarted"] = "\(workStarted)"
            }
            if hasWorkFinished {
                jsonMap["workFinished"] = "\(workFinished)"
            }
            if hasNumRecordsProduced {
                jsonMap["numRecordsProduced"] = "\(numRecordsProduced)"
            }
            if hasCurrentWork {
                jsonMap["currentWork"] = currentWork.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.ReaderBaseState {
            return try Tensorflow.ReaderBaseState.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Tensorflow.ReaderBaseState {
            return try Tensorflow.ReaderBaseState.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasWorkStarted {
                output += "\(indent) workStarted: \(workStarted) \n"
            }
            if hasWorkFinished {
                output += "\(indent) workFinished: \(workFinished) \n"
            }
            if hasNumRecordsProduced {
                output += "\(indent) numRecordsProduced: \(numRecordsProduced) \n"
            }
            if hasCurrentWork {
                output += "\(indent) currentWork: \(currentWork) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasWorkStarted {
                    hashCode = (hashCode &* 31) &+ workStarted.hashValue
                }
                if hasWorkFinished {
                    hashCode = (hashCode &* 31) &+ workFinished.hashValue
                }
                if hasNumRecordsProduced {
                    hashCode = (hashCode &* 31) &+ numRecordsProduced.hashValue
                }
                if hasCurrentWork {
                    hashCode = (hashCode &* 31) &+ currentWork.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Tensorflow.ReaderBaseState"
        }
        override public func className() -> String {
            return "Tensorflow.ReaderBaseState"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Tensorflow.ReaderBaseState = Tensorflow.ReaderBaseState()
            public func getMessage() -> Tensorflow.ReaderBaseState {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var workStarted:Int64 {
                get {
                    return builderResult.workStarted
                }
                set (value) {
                    builderResult.hasWorkStarted = true
                    builderResult.workStarted = value
                }
            }
            public var hasWorkStarted:Bool {
                get {
                    return builderResult.hasWorkStarted
                }
            }
            @discardableResult
            public func setWorkStarted(_ value:Int64) -> Tensorflow.ReaderBaseState.Builder {
                self.workStarted = value
                return self
            }
            @discardableResult
            public func clearWorkStarted() -> Tensorflow.ReaderBaseState.Builder{
                builderResult.hasWorkStarted = false
                builderResult.workStarted = Int64(0)
                return self
            }
            public var workFinished:Int64 {
                get {
                    return builderResult.workFinished
                }
                set (value) {
                    builderResult.hasWorkFinished = true
                    builderResult.workFinished = value
                }
            }
            public var hasWorkFinished:Bool {
                get {
                    return builderResult.hasWorkFinished
                }
            }
            @discardableResult
            public func setWorkFinished(_ value:Int64) -> Tensorflow.ReaderBaseState.Builder {
                self.workFinished = value
                return self
            }
            @discardableResult
            public func clearWorkFinished() -> Tensorflow.ReaderBaseState.Builder{
                builderResult.hasWorkFinished = false
                builderResult.workFinished = Int64(0)
                return self
            }
            public var numRecordsProduced:Int64 {
                get {
                    return builderResult.numRecordsProduced
                }
                set (value) {
                    builderResult.hasNumRecordsProduced = true
                    builderResult.numRecordsProduced = value
                }
            }
            public var hasNumRecordsProduced:Bool {
                get {
                    return builderResult.hasNumRecordsProduced
                }
            }
            @discardableResult
            public func setNumRecordsProduced(_ value:Int64) -> Tensorflow.ReaderBaseState.Builder {
                self.numRecordsProduced = value
                return self
            }
            @discardableResult
            public func clearNumRecordsProduced() -> Tensorflow.ReaderBaseState.Builder{
                builderResult.hasNumRecordsProduced = false
                builderResult.numRecordsProduced = Int64(0)
                return self
            }
            public var currentWork:Data {
                get {
                    return builderResult.currentWork
                }
                set (value) {
                    builderResult.hasCurrentWork = true
                    builderResult.currentWork = value
                }
            }
            public var hasCurrentWork:Bool {
                get {
                    return builderResult.hasCurrentWork
                }
            }
            @discardableResult
            public func setCurrentWork(_ value:Data) -> Tensorflow.ReaderBaseState.Builder {
                self.currentWork = value
                return self
            }
            @discardableResult
            public func clearCurrentWork() -> Tensorflow.ReaderBaseState.Builder{
                builderResult.hasCurrentWork = false
                builderResult.currentWork = Data()
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Tensorflow.ReaderBaseState.Builder {
                builderResult = Tensorflow.ReaderBaseState()
                return self
            }
            override public func clone() throws -> Tensorflow.ReaderBaseState.Builder {
                return try Tensorflow.ReaderBaseState.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Tensorflow.ReaderBaseState {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Tensorflow.ReaderBaseState {
                let returnMe:Tensorflow.ReaderBaseState = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Tensorflow.ReaderBaseState) throws -> Tensorflow.ReaderBaseState.Builder {
                if other == Tensorflow.ReaderBaseState() {
                    return self
                }
                if other.hasWorkStarted {
                    workStarted = other.workStarted
                }
                if other.hasWorkFinished {
                    workFinished = other.workFinished
                }
                if other.hasNumRecordsProduced {
                    numRecordsProduced = other.numRecordsProduced
                }
                if other.hasCurrentWork {
                    currentWork = other.currentWork
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.ReaderBaseState.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ReaderBaseState.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        workStarted = try codedInputStream.readInt64()

                    case 16:
                        workFinished = try codedInputStream.readInt64()

                    case 24:
                        numRecordsProduced = try codedInputStream.readInt64()

                    case 34:
                        currentWork = try codedInputStream.readData()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Tensorflow.ReaderBaseState.Builder {
                let resultDecodedBuilder = Tensorflow.ReaderBaseState.Builder()
                if let jsonValueWorkStarted = jsonMap["workStarted"] as? String {
                    resultDecodedBuilder.workStarted = Int64(jsonValueWorkStarted)!
                } else if let jsonValueWorkStarted = jsonMap["workStarted"] as? Int {
                    resultDecodedBuilder.workStarted = Int64(jsonValueWorkStarted)
                }
                if let jsonValueWorkFinished = jsonMap["workFinished"] as? String {
                    resultDecodedBuilder.workFinished = Int64(jsonValueWorkFinished)!
                } else if let jsonValueWorkFinished = jsonMap["workFinished"] as? Int {
                    resultDecodedBuilder.workFinished = Int64(jsonValueWorkFinished)
                }
                if let jsonValueNumRecordsProduced = jsonMap["numRecordsProduced"] as? String {
                    resultDecodedBuilder.numRecordsProduced = Int64(jsonValueNumRecordsProduced)!
                } else if let jsonValueNumRecordsProduced = jsonMap["numRecordsProduced"] as? Int {
                    resultDecodedBuilder.numRecordsProduced = Int64(jsonValueNumRecordsProduced)
                }
                if let jsonValueCurrentWork = jsonMap["currentWork"] as? String {
                    resultDecodedBuilder.currentWork = Data(base64Encoded:jsonValueCurrentWork, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Tensorflow.ReaderBaseState.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Tensorflow.ReaderBaseState.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Tensorflow.ReaderBaseState: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Tensorflow.ReaderBaseState> {
        var mergedArray = Array<Tensorflow.ReaderBaseState>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Tensorflow.ReaderBaseState? {
        return try Tensorflow.ReaderBaseState.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(data: data, extensionRegistry:Tensorflow.ReaderBaseRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Tensorflow.ReaderBaseState {
        return try Tensorflow.ReaderBaseState.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "workStarted": return self.workStarted
        case "workFinished": return self.workFinished
        case "numRecordsProduced": return self.numRecordsProduced
        case "currentWork": return self.currentWork
        default: return nil
        }
    }
}
extension Tensorflow.ReaderBaseState.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "workStarted": return self.workStarted
            case "workFinished": return self.workFinished
            case "numRecordsProduced": return self.numRecordsProduced
            case "currentWork": return self.currentWork
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "workStarted":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.workStarted = newSubscriptValue
            case "workFinished":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.workFinished = newSubscriptValue
            case "numRecordsProduced":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.numRecordsProduced = newSubscriptValue
            case "currentWork":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.currentWork = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
