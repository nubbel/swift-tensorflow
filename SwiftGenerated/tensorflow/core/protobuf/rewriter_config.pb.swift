// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/protobuf/rewriter_config.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_AutoParallelOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AutoParallelOptions"

  public var enable: Bool = false

  public var numReplicas: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enable)
      case 2: try decoder.decodeSingularInt32Field(value: &self.numReplicas)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 1)
    }
    if self.numReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.numReplicas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_RewriterConfig: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RewriterConfig"

  public var optimizeTensorLayout: Bool {
    get {return _storage._optimizeTensorLayout}
    set {_uniqueStorage()._optimizeTensorLayout = newValue}
  }

  public var disableModelPruning: Bool {
    get {return _storage._disableModelPruning}
    set {_uniqueStorage()._disableModelPruning = newValue}
  }

  public var constantFolding: Bool {
    get {return _storage._constantFolding}
    set {_uniqueStorage()._constantFolding = newValue}
  }

  public var memoryOptimization: Tensorflow_RewriterConfig.MemOptType {
    get {return _storage._memoryOptimization}
    set {_uniqueStorage()._memoryOptimization = newValue}
  }

  public var autoParallel: Tensorflow_AutoParallelOptions {
    get {return _storage._autoParallel ?? Tensorflow_AutoParallelOptions()}
    set {_uniqueStorage()._autoParallel = newValue}
  }
  /// Returns true if `autoParallel` has been explicitly set.
  public var hasAutoParallel: Bool {return _storage._autoParallel != nil}
  /// Clears the value of `autoParallel`. Subsequent reads from it will return its default value.
  public mutating func clearAutoParallel() {_storage._autoParallel = nil}

  /// If non-empty, will use this as an alternative way to specify a list of
  /// optimizations to turn on and the order of the optimizations.
  public var optimizers: [String] {
    get {return _storage._optimizers}
    set {_uniqueStorage()._optimizers = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum MemOptType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Fully disabled
    case noMemOpt // = 0

    /// Driven by manual annotations
    case manual // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .noMemOpt
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noMemOpt
      case 1: self = .manual
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .noMemOpt: return 0
      case .manual: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._optimizeTensorLayout)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._disableModelPruning)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._constantFolding)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._memoryOptimization)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._autoParallel)
        case 100: try decoder.decodeRepeatedStringField(value: &_storage._optimizers)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._optimizeTensorLayout != false {
        try visitor.visitSingularBoolField(value: _storage._optimizeTensorLayout, fieldNumber: 1)
      }
      if _storage._disableModelPruning != false {
        try visitor.visitSingularBoolField(value: _storage._disableModelPruning, fieldNumber: 2)
      }
      if _storage._constantFolding != false {
        try visitor.visitSingularBoolField(value: _storage._constantFolding, fieldNumber: 3)
      }
      if _storage._memoryOptimization != .noMemOpt {
        try visitor.visitSingularEnumField(value: _storage._memoryOptimization, fieldNumber: 4)
      }
      if let v = _storage._autoParallel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._optimizers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._optimizers, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_AutoParallelOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
    2: .standard(proto: "num_replicas"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_AutoParallelOptions) -> Bool {
    if self.enable != other.enable {return false}
    if self.numReplicas != other.numReplicas {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_RewriterConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optimize_tensor_layout"),
    2: .standard(proto: "disable_model_pruning"),
    3: .standard(proto: "constant_folding"),
    4: .standard(proto: "memory_optimization"),
    5: .standard(proto: "auto_parallel"),
    100: .same(proto: "optimizers"),
  ]

  fileprivate class _StorageClass {
    var _optimizeTensorLayout: Bool = false
    var _disableModelPruning: Bool = false
    var _constantFolding: Bool = false
    var _memoryOptimization: Tensorflow_RewriterConfig.MemOptType = .noMemOpt
    var _autoParallel: Tensorflow_AutoParallelOptions? = nil
    var _optimizers: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _optimizeTensorLayout = source._optimizeTensorLayout
      _disableModelPruning = source._disableModelPruning
      _constantFolding = source._constantFolding
      _memoryOptimization = source._memoryOptimization
      _autoParallel = source._autoParallel
      _optimizers = source._optimizers
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_RewriterConfig) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._optimizeTensorLayout != other_storage._optimizeTensorLayout {return false}
        if _storage._disableModelPruning != other_storage._disableModelPruning {return false}
        if _storage._constantFolding != other_storage._constantFolding {return false}
        if _storage._memoryOptimization != other_storage._memoryOptimization {return false}
        if _storage._autoParallel != other_storage._autoParallel {return false}
        if _storage._optimizers != other_storage._optimizers {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_RewriterConfig.MemOptType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_MEM_OPT"),
    1: .same(proto: "MANUAL"),
  ]
}
