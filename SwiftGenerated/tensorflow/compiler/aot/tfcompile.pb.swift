/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/compiler/aot/tfcompile.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
/// index of a particular node in the graph.  If the output of the named node
/// feeds into other node(s), this corresponds to one or more edges.  Otherwise
/// it doesn't correspond to any existing edges at all, e.g. for output nodes.
public struct Tensorflow_Tfcompile_TensorId: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TensorId"

  public var nodeName: String = String()

  public var outputIndex: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.nodeName)
      case 2: try decoder.decodeSingularInt64Field(value: &self.outputIndex)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeName.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeName, fieldNumber: 1)
    }
    if self.outputIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.outputIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Feed represents a single feed tensor in the graph, which corresponds to an
/// input argument for the generated function.
public struct Tensorflow_Tfcompile_Feed: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Feed"

  public var id: Tensorflow_Tfcompile_TensorId {
    get {return _storage._id ?? Tensorflow_Tfcompile_TensorId()}
    set {_uniqueStorage()._id = newValue}
  }
  public var hasId: Bool {
    return _storage._id != nil
  }
  public mutating func clearId() {
    _storage._id = nil
  }

  public var shape: Tensorflow_TensorShapeProto {
    get {return _storage._shape ?? Tensorflow_TensorShapeProto()}
    set {_uniqueStorage()._shape = newValue}
  }
  public var hasShape: Bool {
    return _storage._shape != nil
  }
  public mutating func clearShape() {
    _storage._shape = nil
  }

  /// Optional name for generated code.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shape)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._shape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// Fetch represents a single fetch tensor in the graph, which corresponds to an
/// output argument for the generated function.
public struct Tensorflow_Tfcompile_Fetch: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Fetch"

  public var id: Tensorflow_Tfcompile_TensorId {
    get {return _storage._id ?? Tensorflow_Tfcompile_TensorId()}
    set {_uniqueStorage()._id = newValue}
  }
  public var hasId: Bool {
    return _storage._id != nil
  }
  public mutating func clearId() {
    _storage._id = nil
  }

  /// Optional name for generated code.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// Config represents configuration information for tfcompile.
public struct Tensorflow_Tfcompile_Config: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Config"

  /// Each feed is a positional input argument for the generated function.  The
  /// order of each entry matches the order of each input argument.
  public var feed: [Tensorflow_Tfcompile_Feed] = []

  /// Each fetch is a positional output argument for the generated function.  The
  /// order of each entry matches the order of each output argument.
  public var fetch: [Tensorflow_Tfcompile_Fetch] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.feed)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.fetch)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feed, fieldNumber: 1)
    }
    if !self.fetch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fetch, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tfcompile"

extension Tensorflow_Tfcompile_TensorId: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_name"),
    2: .standard(proto: "output_index"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfcompile_TensorId) -> Bool {
    if self.nodeName != other.nodeName {return false}
    if self.outputIndex != other.outputIndex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfcompile_Feed: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "shape"),
    3: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _id: Tensorflow_Tfcompile_TensorId? = nil
    var _shape: Tensorflow_TensorShapeProto? = nil
    var _name: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _shape = source._shape
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfcompile_Feed) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._shape != other_storage._shape {return false}
        if _storage._name != other_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfcompile_Fetch: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _id: Tensorflow_Tfcompile_TensorId? = nil
    var _name: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfcompile_Fetch) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._name != other_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfcompile_Config: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feed"),
    2: .same(proto: "fetch"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfcompile_Config) -> Bool {
    if self.feed != other.feed {return false}
    if self.fetch != other.fetch {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
