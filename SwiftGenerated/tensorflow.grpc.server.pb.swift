/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow/core/protobuf/worker_service.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Tensorflow_Grpc_WorkerServiceServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Tensorflow_Grpc_WorkerServiceProvider {
  func getstatus(request : Tensorflow_GetStatusRequest, session : Tensorflow_Grpc_WorkerServiceGetStatusSession) throws -> Tensorflow_GetStatusResponse
  func createworkersession(request : Tensorflow_CreateWorkerSessionRequest, session : Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession) throws -> Tensorflow_CreateWorkerSessionResponse
  func registergraph(request : Tensorflow_RegisterGraphRequest, session : Tensorflow_Grpc_WorkerServiceRegisterGraphSession) throws -> Tensorflow_RegisterGraphResponse
  func deregistergraph(request : Tensorflow_DeregisterGraphRequest, session : Tensorflow_Grpc_WorkerServiceDeregisterGraphSession) throws -> Tensorflow_DeregisterGraphResponse
  func rungraph(request : Tensorflow_RunGraphRequest, session : Tensorflow_Grpc_WorkerServiceRunGraphSession) throws -> Tensorflow_RunGraphResponse
  func cleanupgraph(request : Tensorflow_CleanupGraphRequest, session : Tensorflow_Grpc_WorkerServiceCleanupGraphSession) throws -> Tensorflow_CleanupGraphResponse
  func cleanupall(request : Tensorflow_CleanupAllRequest, session : Tensorflow_Grpc_WorkerServiceCleanupAllSession) throws -> Tensorflow_CleanupAllResponse
  func recvtensor(request : Tensorflow_RecvTensorRequest, session : Tensorflow_Grpc_WorkerServiceRecvTensorSession) throws -> Tensorflow_RecvTensorResponse
  func logging(request : Tensorflow_LoggingRequest, session : Tensorflow_Grpc_WorkerServiceLoggingSession) throws -> Tensorflow_LoggingResponse
  func tracing(request : Tensorflow_TracingRequest, session : Tensorflow_Grpc_WorkerServiceTracingSession) throws -> Tensorflow_TracingResponse
}

/// Common properties available in each service session.
internal class Tensorflow_Grpc_WorkerServiceSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// GetStatus (Unary)
internal class Tensorflow_Grpc_WorkerServiceGetStatusSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_GetStatusRequest(serializedData:requestData)
        let replyMessage = try self.provider.getstatus(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CreateWorkerSession (Unary)
internal class Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CreateWorkerSessionRequest(serializedData:requestData)
        let replyMessage = try self.provider.createworkersession(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RegisterGraph (Unary)
internal class Tensorflow_Grpc_WorkerServiceRegisterGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RegisterGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.registergraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// DeregisterGraph (Unary)
internal class Tensorflow_Grpc_WorkerServiceDeregisterGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_DeregisterGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.deregistergraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RunGraph (Unary)
internal class Tensorflow_Grpc_WorkerServiceRunGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RunGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.rungraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CleanupGraph (Unary)
internal class Tensorflow_Grpc_WorkerServiceCleanupGraphSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CleanupGraphRequest(serializedData:requestData)
        let replyMessage = try self.provider.cleanupgraph(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CleanupAll (Unary)
internal class Tensorflow_Grpc_WorkerServiceCleanupAllSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_CleanupAllRequest(serializedData:requestData)
        let replyMessage = try self.provider.cleanupall(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RecvTensor (Unary)
internal class Tensorflow_Grpc_WorkerServiceRecvTensorSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_RecvTensorRequest(serializedData:requestData)
        let replyMessage = try self.provider.recvtensor(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Logging (Unary)
internal class Tensorflow_Grpc_WorkerServiceLoggingSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_LoggingRequest(serializedData:requestData)
        let replyMessage = try self.provider.logging(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Tracing (Unary)
internal class Tensorflow_Grpc_WorkerServiceTracingSession : Tensorflow_Grpc_WorkerServiceSession {
  private var provider : Tensorflow_Grpc_WorkerServiceProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Tensorflow_Grpc_WorkerServiceProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Tensorflow_TracingRequest(serializedData:requestData)
        let replyMessage = try self.provider.tracing(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Tensorflow_Grpc_WorkerServiceServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Tensorflow_Grpc_WorkerServiceProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Tensorflow_Grpc_WorkerServiceProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Tensorflow_Grpc_WorkerServiceProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/tensorflow.grpc.WorkerService/GetStatus":
          try Tensorflow_Grpc_WorkerServiceGetStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CreateWorkerSession":
          try Tensorflow_Grpc_WorkerServiceCreateWorkerSessionSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RegisterGraph":
          try Tensorflow_Grpc_WorkerServiceRegisterGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/DeregisterGraph":
          try Tensorflow_Grpc_WorkerServiceDeregisterGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RunGraph":
          try Tensorflow_Grpc_WorkerServiceRunGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CleanupGraph":
          try Tensorflow_Grpc_WorkerServiceCleanupGraphSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/CleanupAll":
          try Tensorflow_Grpc_WorkerServiceCleanupAllSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/RecvTensor":
          try Tensorflow_Grpc_WorkerServiceRecvTensorSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/Logging":
          try Tensorflow_Grpc_WorkerServiceLoggingSession(handler:handler, provider:provider).run(queue:queue)
        case "/tensorflow.grpc.WorkerService/Tracing":
          try Tensorflow_Grpc_WorkerServiceTracingSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
