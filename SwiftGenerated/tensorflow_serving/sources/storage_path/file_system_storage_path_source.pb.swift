/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// Config proto for FileSystemStoragePathSource.
public struct Tensorflow_Serving_FileSystemStoragePathSourceConfig: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FileSystemStoragePathSourceConfig"

  /// The servables to monitor for new versions, and aspire.
  public var servables: [Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor] = []

  /// A single servable name/base_path pair to monitor.
  /// DEPRECATED: Use 'servables' instead.
  /// TODO(b/30898016): Stop using these fields, and ultimately remove them here.
  public var servableName: String = String()

  public var basePath: String = String()

  /// How long to wait between file-system polling to look for children of
  /// 'base_path', in seconds.
  ///
  /// For testing use only: a negative value disables the polling thread.
  public var fileSystemPollWaitSeconds: Int64 = 0

  /// If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
  /// fail if, for any configured servables, the file system doesn't currently
  /// contain at least one version under the base path.
  /// (Otherwise, it will emit a warning and keep pinging the file system to
  /// check for a version to appear later.)
  public var failIfZeroVersionsAtStartup: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The policy to define how many versions of the servable should be
  /// served at the same time.
  public enum VersionPolicy: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Only serve the latest version that exists in the base path.
    /// This is the default behavior.
    case latestVersion // = 0

    /// Serves all the versions that exist in the base path.
    case allVersions // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .latestVersion
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .latestVersion
      case 1: self = .allVersions
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .latestVersion: return 0
      case .allVersions: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A servable name and base path to look for versions of the servable.
  public struct ServableToMonitor: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Serving_FileSystemStoragePathSourceConfig.protoMessageName + ".ServableToMonitor"

    /// The servable name to supply in aspired-versions callback calls. Child
    /// paths of 'base_path' are considered to be versions of this servable.
    public var servableName: String = String()

    /// The path to monitor, i.e. look for child paths of the form base_path/123.
    public var basePath: String = String()

    /// The policy to determines the number of versions of the servable to be
    /// served at the same time.
    public var versionPolicy: Tensorflow_Serving_FileSystemStoragePathSourceConfig.VersionPolicy = Tensorflow_Serving_FileSystemStoragePathSourceConfig.VersionPolicy.latestVersion

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.servableName)
        case 2: try decoder.decodeSingularStringField(value: &self.basePath)
        case 3: try decoder.decodeSingularEnumField(value: &self.versionPolicy)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.servableName.isEmpty {
        try visitor.visitSingularStringField(value: self.servableName, fieldNumber: 1)
      }
      if !self.basePath.isEmpty {
        try visitor.visitSingularStringField(value: self.basePath, fieldNumber: 2)
      }
      if self.versionPolicy != Tensorflow_Serving_FileSystemStoragePathSourceConfig.VersionPolicy.latestVersion {
        try visitor.visitSingularEnumField(value: self.versionPolicy, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.servableName)
      case 2: try decoder.decodeSingularStringField(value: &self.basePath)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fileSystemPollWaitSeconds)
      case 4: try decoder.decodeSingularBoolField(value: &self.failIfZeroVersionsAtStartup)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.servables)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.servableName.isEmpty {
      try visitor.visitSingularStringField(value: self.servableName, fieldNumber: 1)
    }
    if !self.basePath.isEmpty {
      try visitor.visitSingularStringField(value: self.basePath, fieldNumber: 2)
    }
    if self.fileSystemPollWaitSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.fileSystemPollWaitSeconds, fieldNumber: 3)
    }
    if self.failIfZeroVersionsAtStartup != false {
      try visitor.visitSingularBoolField(value: self.failIfZeroVersionsAtStartup, fieldNumber: 4)
    }
    if !self.servables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.servables, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.serving"

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "servables"),
    1: .standard(proto: "servable_name"),
    2: .standard(proto: "base_path"),
    3: .standard(proto: "file_system_poll_wait_seconds"),
    4: .standard(proto: "fail_if_zero_versions_at_startup"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig) -> Bool {
    if self.servables != other.servables {return false}
    if self.servableName != other.servableName {return false}
    if self.basePath != other.basePath {return false}
    if self.fileSystemPollWaitSeconds != other.fileSystemPollWaitSeconds {return false}
    if self.failIfZeroVersionsAtStartup != other.failIfZeroVersionsAtStartup {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.VersionPolicy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LATEST_VERSION"),
    1: .same(proto: "ALL_VERSIONS"),
  ]
}

extension Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "servable_name"),
    2: .standard(proto: "base_path"),
    3: .standard(proto: "version_policy"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Serving_FileSystemStoragePathSourceConfig.ServableToMonitor) -> Bool {
    if self.servableName != other.servableName {return false}
    if self.basePath != other.basePath {return false}
    if self.versionPolicy != other.versionPolicy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
