/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.xla.Literal');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.xla.Shape');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xla.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xla.Literal.repeatedFields_, null);
};
goog.inherits(proto.xla.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xla.Literal.displayName = 'proto.xla.Literal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xla.Literal.repeatedFields_ = [2,4,5,6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xla.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.xla.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xla.Literal} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xla.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.xla.Shape.toObject(includeInstance, f),
    predsList: jspb.Message.getField(msg, 2),
    u8s: msg.getU8s_asB64(),
    s32sList: jspb.Message.getField(msg, 4),
    s64sList: jspb.Message.getField(msg, 5),
    u32sList: jspb.Message.getField(msg, 6),
    u64sList: jspb.Message.getField(msg, 7),
    f32sList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    f64sList: jspb.Message.getRepeatedFloatingPointField(msg, 9),
    tupleLiteralsList: jspb.Message.toObjectList(msg.getTupleLiteralsList(),
    proto.xla.Literal.toObject, includeInstance),
    f16s: msg.getF16s_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xla.Literal}
 */
proto.xla.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xla.Literal;
  return proto.xla.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xla.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xla.Literal}
 */
proto.xla.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xla.Shape;
      reader.readMessage(value,proto.xla.Shape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 2:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setPredsList(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setU8s(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setS32sList(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setS64sList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setU32sList(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setU64sList(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setF32sList(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setF64sList(value);
      break;
    case 10:
      var value = new proto.xla.Literal;
      reader.readMessage(value,proto.xla.Literal.deserializeBinaryFromReader);
      msg.addTupleLiterals(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setF16s(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xla.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xla.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xla.Literal} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xla.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xla.Shape.serializeBinaryToWriter
    );
  }
  f = message.getPredsList();
  if (f.length > 0) {
    writer.writePackedBool(
      2,
      f
    );
  }
  f = message.getU8s_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getS32sList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getS64sList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getU32sList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getU64sList();
  if (f.length > 0) {
    writer.writePackedUint64(
      7,
      f
    );
  }
  f = message.getF32sList();
  if (f.length > 0) {
    writer.writePackedFloat(
      8,
      f
    );
  }
  f = message.getF64sList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
  f = message.getTupleLiteralsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.xla.Literal.serializeBinaryToWriter
    );
  }
  f = message.getF16s_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional Shape shape = 1;
 * @return {?proto.xla.Shape}
 */
proto.xla.Literal.prototype.getShape = function() {
  return /** @type{?proto.xla.Shape} */ (
    jspb.Message.getWrapperField(this, proto.xla.Shape, 1));
};


/** @param {?proto.xla.Shape|undefined} value */
proto.xla.Literal.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xla.Literal.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xla.Literal.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bool preds = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.xla.Literal.prototype.getPredsList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<boolean>} value */
proto.xla.Literal.prototype.setPredsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addPreds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xla.Literal.prototype.clearPredsList = function() {
  this.setPredsList([]);
};


/**
 * optional bytes u8s = 3;
 * @return {string}
 */
proto.xla.Literal.prototype.getU8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes u8s = 3;
 * This is a type-conversion wrapper around `getU8s()`
 * @return {string}
 */
proto.xla.Literal.prototype.getU8s_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getU8s()));
};


/**
 * optional bytes u8s = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getU8s()`
 * @return {!Uint8Array}
 */
proto.xla.Literal.prototype.getU8s_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getU8s()));
};


/** @param {!(string|Uint8Array)} value */
proto.xla.Literal.prototype.setU8s = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated int32 s32s = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getS32sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setS32sList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addS32s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.xla.Literal.prototype.clearS32sList = function() {
  this.setS32sList([]);
};


/**
 * repeated int64 s64s = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getS64sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setS64sList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addS64s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.xla.Literal.prototype.clearS64sList = function() {
  this.setS64sList([]);
};


/**
 * repeated uint32 u32s = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getU32sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setU32sList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addU32s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.xla.Literal.prototype.clearU32sList = function() {
  this.setU32sList([]);
};


/**
 * repeated uint64 u64s = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getU64sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setU64sList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addU64s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.xla.Literal.prototype.clearU64sList = function() {
  this.setU64sList([]);
};


/**
 * repeated float f32s = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getF32sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setF32sList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addF32s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.xla.Literal.prototype.clearF32sList = function() {
  this.setF32sList([]);
};


/**
 * repeated double f64s = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xla.Literal.prototype.getF64sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/** @param {!Array.<number>} value */
proto.xla.Literal.prototype.setF64sList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xla.Literal.prototype.addF64s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.xla.Literal.prototype.clearF64sList = function() {
  this.setF64sList([]);
};


/**
 * repeated Literal tuple_literals = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xla.Literal>}
 */
proto.xla.Literal.prototype.getTupleLiteralsList = function() {
  return /** @type{!Array.<!proto.xla.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xla.Literal, 10));
};


/** @param {!Array.<!proto.xla.Literal>} value */
proto.xla.Literal.prototype.setTupleLiteralsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.xla.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xla.Literal}
 */
proto.xla.Literal.prototype.addTupleLiterals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.xla.Literal, opt_index);
};


proto.xla.Literal.prototype.clearTupleLiteralsList = function() {
  this.setTupleLiteralsList([]);
};


/**
 * optional bytes f16s = 11;
 * @return {string}
 */
proto.xla.Literal.prototype.getF16s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes f16s = 11;
 * This is a type-conversion wrapper around `getF16s()`
 * @return {string}
 */
proto.xla.Literal.prototype.getF16s_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getF16s()));
};


/**
 * optional bytes f16s = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getF16s()`
 * @return {!Uint8Array}
 */
proto.xla.Literal.prototype.getF16s_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getF16s()));
};


/** @param {!(string|Uint8Array)} value */
proto.xla.Literal.prototype.setF16s = function(value) {
  jspb.Message.setField(this, 11, value);
};


