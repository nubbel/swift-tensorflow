/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.compare_test.Medium');
goog.provide('proto.compare_test.Medium.GroupA');
goog.provide('proto.compare_test.Medium.GroupA.GroupB');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.compare_test.Small');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compare_test.Medium = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.compare_test.Medium.repeatedFields_, null);
};
goog.inherits(proto.compare_test.Medium, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compare_test.Medium.displayName = 'proto.compare_test.Medium';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.compare_test.Medium.repeatedFields_ = [1,2,3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compare_test.Medium.prototype.toObject = function(opt_includeInstance) {
  return proto.compare_test.Medium.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compare_test.Medium} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compare_test.Medium.toObject = function(includeInstance, msg) {
  var f, obj = {
    int32sList: jspb.Message.getField(msg, 1),
    smallsList: jspb.Message.toObjectList(msg.getSmallsList(),
    proto.compare_test.Small.toObject, includeInstance),
    groupAList: jspb.Message.toObjectList(msg.getGroupAList(),
    proto.compare_test.Medium.GroupA.toObject, includeInstance),
    floatsList: jspb.Message.getRepeatedFloatingPointField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compare_test.Medium}
 */
proto.compare_test.Medium.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compare_test.Medium;
  return proto.compare_test.Medium.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compare_test.Medium} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compare_test.Medium}
 */
proto.compare_test.Medium.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addInt32s(value);
      break;
    case 2:
      var value = new proto.compare_test.Small;
      reader.readMessage(value,proto.compare_test.Small.deserializeBinaryFromReader);
      msg.addSmalls(value);
      break;
    case 3:
      var value = new proto.compare_test.Medium.GroupA;
      reader.readGroup(3, value,proto.compare_test.Medium.GroupA.deserializeBinaryFromReader);
      msg.addGroupA(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addFloats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compare_test.Medium.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compare_test.Medium.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compare_test.Medium} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compare_test.Medium.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInt32sList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = message.getSmallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.compare_test.Small.serializeBinaryToWriter
    );
  }
  f = message.getGroupAList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      3,
      f,
      proto.compare_test.Medium.GroupA.serializeBinaryToWriter
    );
  }
  f = message.getFloatsList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compare_test.Medium.GroupA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.compare_test.Medium.GroupA.repeatedFields_, null);
};
goog.inherits(proto.compare_test.Medium.GroupA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compare_test.Medium.GroupA.displayName = 'proto.compare_test.Medium.GroupA';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.compare_test.Medium.GroupA.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compare_test.Medium.GroupA.prototype.toObject = function(opt_includeInstance) {
  return proto.compare_test.Medium.GroupA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compare_test.Medium.GroupA} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compare_test.Medium.GroupA.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupBList: jspb.Message.toObjectList(msg.getGroupBList(),
    proto.compare_test.Medium.GroupA.GroupB.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compare_test.Medium.GroupA}
 */
proto.compare_test.Medium.GroupA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compare_test.Medium.GroupA;
  return proto.compare_test.Medium.GroupA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compare_test.Medium.GroupA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compare_test.Medium.GroupA}
 */
proto.compare_test.Medium.GroupA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.compare_test.Medium.GroupA.GroupB;
      reader.readGroup(4, value,proto.compare_test.Medium.GroupA.GroupB.deserializeBinaryFromReader);
      msg.addGroupB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compare_test.Medium.GroupA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compare_test.Medium.GroupA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compare_test.Medium.GroupA} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compare_test.Medium.GroupA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupBList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      4,
      f,
      proto.compare_test.Medium.GroupA.GroupB.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compare_test.Medium.GroupA.GroupB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compare_test.Medium.GroupA.GroupB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compare_test.Medium.GroupA.GroupB.displayName = 'proto.compare_test.Medium.GroupA.GroupB';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compare_test.Medium.GroupA.GroupB.prototype.toObject = function(opt_includeInstance) {
  return proto.compare_test.Medium.GroupA.GroupB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compare_test.Medium.GroupA.GroupB} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compare_test.Medium.GroupA.GroupB.toObject = function(includeInstance, msg) {
  var f, obj = {
    strings: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compare_test.Medium.GroupA.GroupB}
 */
proto.compare_test.Medium.GroupA.GroupB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compare_test.Medium.GroupA.GroupB;
  return proto.compare_test.Medium.GroupA.GroupB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compare_test.Medium.GroupA.GroupB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compare_test.Medium.GroupA.GroupB}
 */
proto.compare_test.Medium.GroupA.GroupB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compare_test.Medium.GroupA.GroupB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compare_test.Medium.GroupA.GroupB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compare_test.Medium.GroupA.GroupB} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compare_test.Medium.GroupA.GroupB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required string strings = 5;
 * @return {string}
 */
proto.compare_test.Medium.GroupA.GroupB.prototype.getStrings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.compare_test.Medium.GroupA.GroupB.prototype.setStrings = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.compare_test.Medium.GroupA.GroupB.prototype.clearStrings = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Medium.GroupA.GroupB.prototype.hasStrings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated group GroupB = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.compare_test.Medium.GroupA.GroupB>}
 */
proto.compare_test.Medium.GroupA.prototype.getGroupBList = function() {
  return /** @type{!Array.<!proto.compare_test.Medium.GroupA.GroupB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.compare_test.Medium.GroupA.GroupB, 1));
};


/** @param {!Array.<!proto.compare_test.Medium.GroupA.GroupB>} value */
proto.compare_test.Medium.GroupA.prototype.setGroupBList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.compare_test.Medium.GroupA.GroupB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.compare_test.Medium.GroupA.GroupB}
 */
proto.compare_test.Medium.GroupA.prototype.addGroupB = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.compare_test.Medium.GroupA.GroupB, opt_index);
};


proto.compare_test.Medium.GroupA.prototype.clearGroupBList = function() {
  this.setGroupBList([]);
};


/**
 * repeated int32 int32s = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.compare_test.Medium.prototype.getInt32sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.compare_test.Medium.prototype.setInt32sList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.compare_test.Medium.prototype.addInt32s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.compare_test.Medium.prototype.clearInt32sList = function() {
  this.setInt32sList([]);
};


/**
 * repeated Small smalls = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.compare_test.Small>}
 */
proto.compare_test.Medium.prototype.getSmallsList = function() {
  return /** @type{!Array.<!proto.compare_test.Small>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.compare_test.Small, 2));
};


/** @param {!Array.<!proto.compare_test.Small>} value */
proto.compare_test.Medium.prototype.setSmallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.compare_test.Small=} opt_value
 * @param {number=} opt_index
 * @return {!proto.compare_test.Small}
 */
proto.compare_test.Medium.prototype.addSmalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.compare_test.Small, opt_index);
};


proto.compare_test.Medium.prototype.clearSmallsList = function() {
  this.setSmallsList([]);
};


/**
 * repeated group GroupA = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.compare_test.Medium.GroupA>}
 */
proto.compare_test.Medium.prototype.getGroupAList = function() {
  return /** @type{!Array.<!proto.compare_test.Medium.GroupA>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.compare_test.Medium.GroupA, 3));
};


/** @param {!Array.<!proto.compare_test.Medium.GroupA>} value */
proto.compare_test.Medium.prototype.setGroupAList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.compare_test.Medium.GroupA=} opt_value
 * @param {number=} opt_index
 * @return {!proto.compare_test.Medium.GroupA}
 */
proto.compare_test.Medium.prototype.addGroupA = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.compare_test.Medium.GroupA, opt_index);
};


proto.compare_test.Medium.prototype.clearGroupAList = function() {
  this.setGroupAList([]);
};


/**
 * repeated float floats = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.compare_test.Medium.prototype.getFloatsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array.<number>} value */
proto.compare_test.Medium.prototype.setFloatsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.compare_test.Medium.prototype.addFloats = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.compare_test.Medium.prototype.clearFloatsList = function() {
  this.setFloatsList([]);
};


