/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.RewriterConfig');
goog.provide('proto.tensorflow.RewriterConfig.MemOptType');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.tensorflow.AutoParallelOptions');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.RewriterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.RewriterConfig.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.RewriterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.RewriterConfig.displayName = 'proto.tensorflow.RewriterConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.RewriterConfig.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.RewriterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.RewriterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.RewriterConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.RewriterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    optimizeTensorLayout: jspb.Message.getFieldWithDefault(msg, 1, false),
    disableModelPruning: jspb.Message.getFieldWithDefault(msg, 2, false),
    constantFolding: jspb.Message.getFieldWithDefault(msg, 3, false),
    memoryOptimization: jspb.Message.getFieldWithDefault(msg, 4, 0),
    autoParallel: (f = msg.getAutoParallel()) && proto.tensorflow.AutoParallelOptions.toObject(includeInstance, f),
    optimizersList: jspb.Message.getField(msg, 100)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.RewriterConfig}
 */
proto.tensorflow.RewriterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.RewriterConfig;
  return proto.tensorflow.RewriterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.RewriterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.RewriterConfig}
 */
proto.tensorflow.RewriterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptimizeTensorLayout(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableModelPruning(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConstantFolding(value);
      break;
    case 4:
      var value = /** @type {!proto.tensorflow.RewriterConfig.MemOptType} */ (reader.readEnum());
      msg.setMemoryOptimization(value);
      break;
    case 5:
      var value = new proto.tensorflow.AutoParallelOptions;
      reader.readMessage(value,proto.tensorflow.AutoParallelOptions.deserializeBinaryFromReader);
      msg.setAutoParallel(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.addOptimizers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.RewriterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.RewriterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.RewriterConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.RewriterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptimizeTensorLayout();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisableModelPruning();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConstantFolding();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMemoryOptimization();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAutoParallel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tensorflow.AutoParallelOptions.serializeBinaryToWriter
    );
  }
  f = message.getOptimizersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      100,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.RewriterConfig.MemOptType = {
  NO_MEM_OPT: 0,
  MANUAL: 1
};

/**
 * optional bool optimize_tensor_layout = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.RewriterConfig.prototype.getOptimizeTensorLayout = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.tensorflow.RewriterConfig.prototype.setOptimizeTensorLayout = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool disable_model_pruning = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.RewriterConfig.prototype.getDisableModelPruning = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.tensorflow.RewriterConfig.prototype.setDisableModelPruning = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool constant_folding = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.RewriterConfig.prototype.getConstantFolding = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.tensorflow.RewriterConfig.prototype.setConstantFolding = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional MemOptType memory_optimization = 4;
 * @return {!proto.tensorflow.RewriterConfig.MemOptType}
 */
proto.tensorflow.RewriterConfig.prototype.getMemoryOptimization = function() {
  return /** @type {!proto.tensorflow.RewriterConfig.MemOptType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.tensorflow.RewriterConfig.MemOptType} value */
proto.tensorflow.RewriterConfig.prototype.setMemoryOptimization = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional AutoParallelOptions auto_parallel = 5;
 * @return {?proto.tensorflow.AutoParallelOptions}
 */
proto.tensorflow.RewriterConfig.prototype.getAutoParallel = function() {
  return /** @type{?proto.tensorflow.AutoParallelOptions} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.AutoParallelOptions, 5));
};


/** @param {?proto.tensorflow.AutoParallelOptions|undefined} value */
proto.tensorflow.RewriterConfig.prototype.setAutoParallel = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.tensorflow.RewriterConfig.prototype.clearAutoParallel = function() {
  this.setAutoParallel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.RewriterConfig.prototype.hasAutoParallel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string optimizers = 100;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.tensorflow.RewriterConfig.prototype.getOptimizersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 100));
};


/** @param {!Array.<string>} value */
proto.tensorflow.RewriterConfig.prototype.setOptimizersList = function(value) {
  jspb.Message.setField(this, 100, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tensorflow.RewriterConfig.prototype.addOptimizers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 100, value, opt_index);
};


proto.tensorflow.RewriterConfig.prototype.clearOptimizersList = function() {
  this.setOptimizersList([]);
};


