/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.tfprof.TFGraphNodeProto');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.tensorflow.TensorShapeProto');
goog.require('proto.tensorflow.tfprof.TFProfTensorProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.tfprof.TFGraphNodeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.tfprof.TFGraphNodeProto.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.tfprof.TFGraphNodeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.tfprof.TFGraphNodeProto.displayName = 'proto.tensorflow.tfprof.TFGraphNodeProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.tfprof.TFGraphNodeProto.repeatedFields_ = [10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.tfprof.TFGraphNodeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.tfprof.TFGraphNodeProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    tensorValue: (f = msg.getTensorValue()) && proto.tensorflow.tfprof.TFProfTensorProto.toObject(includeInstance, f),
    execMicros: jspb.Message.getField(msg, 2),
    requestedBytes: jspb.Message.getField(msg, 3),
    parameters: jspb.Message.getField(msg, 4),
    floatOps: jspb.Message.getField(msg, 13),
    devicesList: jspb.Message.getField(msg, 10),
    totalExecMicros: jspb.Message.getField(msg, 6),
    totalRequestedBytes: jspb.Message.getField(msg, 7),
    totalParameters: jspb.Message.getField(msg, 8),
    totalFloatOps: jspb.Message.getField(msg, 14),
    shapesList: jspb.Message.toObjectList(msg.getShapesList(),
    proto.tensorflow.TensorShapeProto.toObject, includeInstance),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.tensorflow.tfprof.TFGraphNodeProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.tfprof.TFGraphNodeProto}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.tfprof.TFGraphNodeProto;
  return proto.tensorflow.tfprof.TFGraphNodeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.tfprof.TFGraphNodeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.tfprof.TFGraphNodeProto}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 15:
      var value = new proto.tensorflow.tfprof.TFProfTensorProto;
      reader.readMessage(value,proto.tensorflow.tfprof.TFProfTensorProto.deserializeBinaryFromReader);
      msg.setTensorValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExecMicros(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestedBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParameters(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFloatOps(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addDevices(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalExecMicros(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalRequestedBytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalParameters(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalFloatOps(value);
      break;
    case 11:
      var value = new proto.tensorflow.TensorShapeProto;
      reader.readMessage(value,proto.tensorflow.TensorShapeProto.deserializeBinaryFromReader);
      msg.addShapes(value);
      break;
    case 12:
      var value = new proto.tensorflow.tfprof.TFGraphNodeProto;
      reader.readMessage(value,proto.tensorflow.tfprof.TFGraphNodeProto.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.tfprof.TFGraphNodeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.tfprof.TFGraphNodeProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.tfprof.TFGraphNodeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTensorValue();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.tensorflow.tfprof.TFProfTensorProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getShapesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.tensorflow.TensorShapeProto.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.tensorflow.tfprof.TFGraphNodeProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TFProfTensorProto tensor_value = 15;
 * @return {?proto.tensorflow.tfprof.TFProfTensorProto}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getTensorValue = function() {
  return /** @type{?proto.tensorflow.tfprof.TFProfTensorProto} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.tfprof.TFProfTensorProto, 15));
};


/** @param {?proto.tensorflow.tfprof.TFProfTensorProto|undefined} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setTensorValue = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearTensorValue = function() {
  this.setTensorValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasTensorValue = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int64 exec_micros = 2;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getExecMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setExecMicros = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearExecMicros = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasExecMicros = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 requested_bytes = 3;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getRequestedBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setRequestedBytes = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearRequestedBytes = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasRequestedBytes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 parameters = 4;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getParameters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setParameters = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearParameters = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 float_ops = 13;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getFloatOps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setFloatOps = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearFloatOps = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasFloatOps = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated string devices = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getDevicesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 10));
};


/** @param {!Array.<string>} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setDevicesList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.addDevices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};


/**
 * optional int64 total_exec_micros = 6;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getTotalExecMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setTotalExecMicros = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearTotalExecMicros = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasTotalExecMicros = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 total_requested_bytes = 7;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getTotalRequestedBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setTotalRequestedBytes = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearTotalRequestedBytes = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasTotalRequestedBytes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 total_parameters = 8;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getTotalParameters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setTotalParameters = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearTotalParameters = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasTotalParameters = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 total_float_ops = 14;
 * @return {number}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getTotalFloatOps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setTotalFloatOps = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearTotalFloatOps = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.hasTotalFloatOps = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated tensorflow.TensorShapeProto shapes = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.TensorShapeProto>}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getShapesList = function() {
  return /** @type{!Array.<!proto.tensorflow.TensorShapeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.TensorShapeProto, 11));
};


/** @param {!Array.<!proto.tensorflow.TensorShapeProto>} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setShapesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.tensorflow.TensorShapeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.TensorShapeProto}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.addShapes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.tensorflow.TensorShapeProto, opt_index);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearShapesList = function() {
  this.setShapesList([]);
};


/**
 * repeated TFGraphNodeProto children = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.tfprof.TFGraphNodeProto>}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.tensorflow.tfprof.TFGraphNodeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.tfprof.TFGraphNodeProto, 12));
};


/** @param {!Array.<!proto.tensorflow.tfprof.TFGraphNodeProto>} value */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.tensorflow.tfprof.TFGraphNodeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.tfprof.TFGraphNodeProto}
 */
proto.tensorflow.tfprof.TFGraphNodeProto.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.tensorflow.tfprof.TFGraphNodeProto, opt_index);
};


proto.tensorflow.tfprof.TFGraphNodeProto.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


