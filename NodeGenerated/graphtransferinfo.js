/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.GraphTransferInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.ConstNodeInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.Destination');
goog.provide('proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.NodeInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.NodeInput');
goog.provide('proto.tensorflow.GraphTransferInfo.NodeInputInfo');
goog.provide('proto.tensorflow.GraphTransferInfo.NodeOutputInfo');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');

goog.forwardDeclare('proto.tensorflow.DataType');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.displayName = 'proto.tensorflow.GraphTransferInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeInfoList: jspb.Message.toObjectList(msg.getNodeInfoList(),
    proto.tensorflow.GraphTransferInfo.NodeInfo.toObject, includeInstance),
    constNodeInfoList: jspb.Message.toObjectList(msg.getConstNodeInfoList(),
    proto.tensorflow.GraphTransferInfo.ConstNodeInfo.toObject, includeInstance),
    nodeInputInfoList: jspb.Message.toObjectList(msg.getNodeInputInfoList(),
    proto.tensorflow.GraphTransferInfo.NodeInputInfo.toObject, includeInstance),
    nodeOutputInfoList: jspb.Message.toObjectList(msg.getNodeOutputInfoList(),
    proto.tensorflow.GraphTransferInfo.NodeOutputInfo.toObject, includeInstance),
    graphInputNodeInfoList: jspb.Message.toObjectList(msg.getGraphInputNodeInfoList(),
    proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.toObject, includeInstance),
    graphOutputNodeInfoList: jspb.Message.toObjectList(msg.getGraphOutputNodeInfoList(),
    proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.toObject, includeInstance),
    destination: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo}
 */
proto.tensorflow.GraphTransferInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo;
  return proto.tensorflow.GraphTransferInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo}
 */
proto.tensorflow.GraphTransferInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.GraphTransferInfo.NodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.NodeInfo.deserializeBinaryFromReader);
      msg.addNodeInfo(value);
      break;
    case 2:
      var value = new proto.tensorflow.GraphTransferInfo.ConstNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.ConstNodeInfo.deserializeBinaryFromReader);
      msg.addConstNodeInfo(value);
      break;
    case 3:
      var value = new proto.tensorflow.GraphTransferInfo.NodeInputInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.NodeInputInfo.deserializeBinaryFromReader);
      msg.addNodeInputInfo(value);
      break;
    case 4:
      var value = new proto.tensorflow.GraphTransferInfo.NodeOutputInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.NodeOutputInfo.deserializeBinaryFromReader);
      msg.addNodeOutputInfo(value);
      break;
    case 5:
      var value = new proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.deserializeBinaryFromReader);
      msg.addGraphInputNodeInfo(value);
      break;
    case 6:
      var value = new proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.deserializeBinaryFromReader);
      msg.addGraphOutputNodeInfo(value);
      break;
    case 7:
      var value = /** @type {!proto.tensorflow.GraphTransferInfo.Destination} */ (reader.readEnum());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.GraphTransferInfo.NodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getConstNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.GraphTransferInfo.ConstNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getNodeInputInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tensorflow.GraphTransferInfo.NodeInputInfo.serializeBinaryToWriter
    );
  }
  f = message.getNodeOutputInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tensorflow.GraphTransferInfo.NodeOutputInfo.serializeBinaryToWriter
    );
  }
  f = message.getGraphInputNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getGraphOutputNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.GraphTransferInfo.Destination = {
  NOP: 0,
  HEXAGON: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.NodeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.NodeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.NodeInput.displayName = 'proto.tensorflow.GraphTransferInfo.NodeInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.NodeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInput} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outputPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInput}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.NodeInput;
  return proto.tensorflow.GraphTransferInfo.NodeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInput}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.NodeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInput} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.NodeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOutputPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 output_port = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.getOutputPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInput.prototype.setOutputPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.NodeInfo.displayName = 'proto.tensorflow.GraphTransferInfo.NodeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    typeName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    socOpId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    paddingId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    inputCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    outputCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.NodeInfo;
  return proto.tensorflow.GraphTransferInfo.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSocOpId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaddingId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSocOpId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPaddingId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getInputCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOutputCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 node_id = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type_name = 3;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setTypeName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 soc_op_id = 4;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getSocOpId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setSocOpId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 padding_id = 5;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getPaddingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setPaddingId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 input_count = 6;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getInputCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setInputCount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 output_count = 7;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.getOutputCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInfo.prototype.setOutputCount = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.ConstNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.ConstNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.ConstNodeInfo.displayName = 'proto.tensorflow.GraphTransferInfo.ConstNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.ConstNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shapeList: jspb.Message.getField(msg, 3),
    data: msg.getData_asB64(),
    dtype: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.ConstNodeInfo;
  return proto.tensorflow.GraphTransferInfo.ConstNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.ConstNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 node_id = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated int64 shape = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional bytes data = 4;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional DataType dtype = 5;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferInfo.ConstNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.NodeInputInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.NodeInputInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.NodeInputInfo.displayName = 'proto.tensorflow.GraphTransferInfo.NodeInputInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.NodeInputInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInputInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeInputList: jspb.Message.toObjectList(msg.getNodeInputList(),
    proto.tensorflow.GraphTransferInfo.NodeInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInputInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.NodeInputInfo;
  return proto.tensorflow.GraphTransferInfo.NodeInputInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInputInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInputInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = new proto.tensorflow.GraphTransferInfo.NodeInput;
      reader.readMessage(value,proto.tensorflow.GraphTransferInfo.NodeInput.deserializeBinaryFromReader);
      msg.addNodeInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.NodeInputInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInputInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNodeInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.GraphTransferInfo.NodeInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated NodeInput node_input = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInput>}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.getNodeInputList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.NodeInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.NodeInput, 2));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInput>} value */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.setNodeInputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInput}
 */
proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.addNodeInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.GraphTransferInfo.NodeInput, opt_index);
};


proto.tensorflow.GraphTransferInfo.NodeInputInfo.prototype.clearNodeInputList = function() {
  this.setNodeInputList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.NodeOutputInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.NodeOutputInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.NodeOutputInfo.displayName = 'proto.tensorflow.GraphTransferInfo.NodeOutputInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.NodeOutputInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxByteSizeList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.NodeOutputInfo;
  return proto.tensorflow.GraphTransferInfo.NodeOutputInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setMaxByteSizeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.NodeOutputInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxByteSizeList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int32 max_byte_size = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.getMaxByteSizeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.setMaxByteSizeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.addMaxByteSize = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferInfo.NodeOutputInfo.prototype.clearMaxByteSizeList = function() {
  this.setMaxByteSizeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.displayName = 'proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shapeList: jspb.Message.getField(msg, 2),
    dtype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo;
  return proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 shape = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional DataType dtype = 3;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.displayName = 'proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shapeList: jspb.Message.getField(msg, 2),
    dtype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo;
  return proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 shape = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional DataType dtype = 3;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated NodeInfo node_info = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.NodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.NodeInfo, 1));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.GraphTransferInfo.NodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeInfoList = function() {
  this.setNodeInfoList([]);
};


/**
 * repeated ConstNodeInfo const_node_info = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.ConstNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getConstNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.ConstNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.ConstNodeInfo, 2));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.ConstNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setConstNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.ConstNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addConstNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.GraphTransferInfo.ConstNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearConstNodeInfoList = function() {
  this.setConstNodeInfoList([]);
};


/**
 * repeated NodeInputInfo node_input_info = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInputInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeInputInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.NodeInputInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.NodeInputInfo, 3));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.NodeInputInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeInputInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.NodeInputInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.NodeInputInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeInputInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.GraphTransferInfo.NodeInputInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeInputInfoList = function() {
  this.setNodeInputInfoList([]);
};


/**
 * repeated NodeOutputInfo node_output_info = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.NodeOutputInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeOutputInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.NodeOutputInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.NodeOutputInfo, 4));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.NodeOutputInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeOutputInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.NodeOutputInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeOutputInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tensorflow.GraphTransferInfo.NodeOutputInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeOutputInfoList = function() {
  this.setNodeOutputInfoList([]);
};


/**
 * repeated GraphInputNodeInfo graph_input_node_info = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getGraphInputNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo, 5));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setGraphInputNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addGraphInputNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tensorflow.GraphTransferInfo.GraphInputNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearGraphInputNodeInfoList = function() {
  this.setGraphInputNodeInfoList([]);
};


/**
 * repeated GraphOutputNodeInfo graph_output_node_info = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getGraphOutputNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo, 6));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setGraphOutputNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addGraphOutputNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.GraphTransferInfo.GraphOutputNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearGraphOutputNodeInfoList = function() {
  this.setGraphOutputNodeInfoList([]);
};


/**
 * optional Destination destination = 7;
 * @return {!proto.tensorflow.GraphTransferInfo.Destination}
 */
proto.tensorflow.GraphTransferInfo.prototype.getDestination = function() {
  return /** @type {!proto.tensorflow.GraphTransferInfo.Destination} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.tensorflow.GraphTransferInfo.Destination} value */
proto.tensorflow.GraphTransferInfo.prototype.setDestination = function(value) {
  jspb.Message.setField(this, 7, value);
};


