/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.graph_explorer.Graph');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('proto.graph_explorer.Edge');
goog.require('proto.graph_explorer.Node');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph_explorer.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graph_explorer.Graph.repeatedFields_, null);
};
goog.inherits(proto.graph_explorer.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.graph_explorer.Graph.displayName = 'proto.graph_explorer.Graph';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graph_explorer.Graph.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph_explorer.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.graph_explorer.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph_explorer.Graph} msg The msg instance to transform.
 * @return {!Object}
 */
proto.graph_explorer.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeList: jspb.Message.toObjectList(msg.getNodeList(),
    proto.graph_explorer.Node.toObject, includeInstance),
    edgeList: jspb.Message.toObjectList(msg.getEdgeList(),
    proto.graph_explorer.Edge.toObject, includeInstance),
    nodeAttrMap: (f = msg.getNodeAttrMap()) ? f.toObject(includeInstance, undefined) : [],
    metanodeAttrMap: (f = msg.getMetanodeAttrMap()) ? f.toObject(includeInstance, undefined) : [],
    edgeAttrMap: (f = msg.getEdgeAttrMap()) ? f.toObject(includeInstance, undefined) : [],
    graphAttrMap: (f = msg.getGraphAttrMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph_explorer.Graph}
 */
proto.graph_explorer.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph_explorer.Graph;
  return proto.graph_explorer.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph_explorer.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph_explorer.Graph}
 */
proto.graph_explorer.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graph_explorer.Node;
      reader.readMessage(value,proto.graph_explorer.Node.deserializeBinaryFromReader);
      msg.addNode(value);
      break;
    case 2:
      var value = new proto.graph_explorer.Edge;
      reader.readMessage(value,proto.graph_explorer.Edge.deserializeBinaryFromReader);
      msg.addEdge(value);
      break;
    case 3:
      var value = msg.getNodeAttrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 4:
      var value = msg.getMetanodeAttrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 5:
      var value = msg.getEdgeAttrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 6:
      var value = msg.getGraphAttrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph_explorer.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph_explorer.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph_explorer.Graph} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.graph_explorer.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.graph_explorer.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.graph_explorer.Edge.serializeBinaryToWriter
    );
  }
  f = message.getNodeAttrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMetanodeAttrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getEdgeAttrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getGraphAttrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * repeated Node node = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.graph_explorer.Node>}
 */
proto.graph_explorer.Graph.prototype.getNodeList = function() {
  return /** @type{!Array.<!proto.graph_explorer.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph_explorer.Node, 1));
};


/** @param {!Array.<!proto.graph_explorer.Node>} value */
proto.graph_explorer.Graph.prototype.setNodeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.graph_explorer.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph_explorer.Node}
 */
proto.graph_explorer.Graph.prototype.addNode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.graph_explorer.Node, opt_index);
};


proto.graph_explorer.Graph.prototype.clearNodeList = function() {
  this.setNodeList([]);
};


/**
 * repeated Edge edge = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.graph_explorer.Edge>}
 */
proto.graph_explorer.Graph.prototype.getEdgeList = function() {
  return /** @type{!Array.<!proto.graph_explorer.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph_explorer.Edge, 2));
};


/** @param {!Array.<!proto.graph_explorer.Edge>} value */
proto.graph_explorer.Graph.prototype.setEdgeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.graph_explorer.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph_explorer.Edge}
 */
proto.graph_explorer.Graph.prototype.addEdge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.graph_explorer.Edge, opt_index);
};


proto.graph_explorer.Graph.prototype.clearEdgeList = function() {
  this.setEdgeList([]);
};


/**
 * map<string, string> node_attr = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.graph_explorer.Graph.prototype.getNodeAttrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.graph_explorer.Graph.prototype.clearNodeAttrMap = function() {
  this.getNodeAttrMap().clear();
};


/**
 * map<string, string> metanode_attr = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.graph_explorer.Graph.prototype.getMetanodeAttrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.graph_explorer.Graph.prototype.clearMetanodeAttrMap = function() {
  this.getMetanodeAttrMap().clear();
};


/**
 * map<string, string> edge_attr = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.graph_explorer.Graph.prototype.getEdgeAttrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.graph_explorer.Graph.prototype.clearEdgeAttrMap = function() {
  this.getEdgeAttrMap().clear();
};


/**
 * map<string, string> graph_attr = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.graph_explorer.Graph.prototype.getGraphAttrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.graph_explorer.Graph.prototype.clearGraphAttrMap = function() {
  this.getGraphAttrMap().clear();
};


