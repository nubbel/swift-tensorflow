/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.xla.SessionComputation');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('proto.xla.ComputationHandle');
goog.require('proto.xla.OperationRequest');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xla.SessionComputation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xla.SessionComputation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xla.SessionComputation.displayName = 'proto.xla.SessionComputation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xla.SessionComputation.prototype.toObject = function(opt_includeInstance) {
  return proto.xla.SessionComputation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xla.SessionComputation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xla.SessionComputation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    computationHandle: (f = msg.getComputationHandle()) && proto.xla.ComputationHandle.toObject(includeInstance, f),
    requestsMap: (f = msg.getRequestsMap()) ? f.toObject(includeInstance, proto.xla.OperationRequest.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xla.SessionComputation}
 */
proto.xla.SessionComputation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xla.SessionComputation;
  return proto.xla.SessionComputation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xla.SessionComputation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xla.SessionComputation}
 */
proto.xla.SessionComputation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.xla.ComputationHandle;
      reader.readMessage(value,proto.xla.ComputationHandle.deserializeBinaryFromReader);
      msg.setComputationHandle(value);
      break;
    case 3:
      var value = msg.getRequestsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.xla.OperationRequest.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xla.SessionComputation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xla.SessionComputation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xla.SessionComputation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xla.SessionComputation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComputationHandle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xla.ComputationHandle.serializeBinaryToWriter
    );
  }
  f = message.getRequestsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.xla.OperationRequest.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xla.SessionComputation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xla.SessionComputation.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ComputationHandle computation_handle = 2;
 * @return {?proto.xla.ComputationHandle}
 */
proto.xla.SessionComputation.prototype.getComputationHandle = function() {
  return /** @type{?proto.xla.ComputationHandle} */ (
    jspb.Message.getWrapperField(this, proto.xla.ComputationHandle, 2));
};


/** @param {?proto.xla.ComputationHandle|undefined} value */
proto.xla.SessionComputation.prototype.setComputationHandle = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xla.SessionComputation.prototype.clearComputationHandle = function() {
  this.setComputationHandle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xla.SessionComputation.prototype.hasComputationHandle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<int64, OperationRequest> requests = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.xla.OperationRequest>}
 */
proto.xla.SessionComputation.prototype.getRequestsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.xla.OperationRequest>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.xla.OperationRequest));
};


proto.xla.SessionComputation.prototype.clearRequestsMap = function() {
  this.getRequestsMap().clear();
};


