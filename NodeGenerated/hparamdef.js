/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.HParamDef');
goog.provide('proto.tensorflow.HParamDef.BoolList');
goog.provide('proto.tensorflow.HParamDef.BytesList');
goog.provide('proto.tensorflow.HParamDef.FloatList');
goog.provide('proto.tensorflow.HParamDef.HParamType');
goog.provide('proto.tensorflow.HParamDef.Int64List');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.HParamDef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.displayName = 'proto.tensorflow.HParamDef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.toObject = function(includeInstance, msg) {
  var f, obj = {
    hparamMap: (f = msg.getHparamMap()) ? f.toObject(includeInstance, proto.tensorflow.HParamDef.HParamType.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef}
 */
proto.tensorflow.HParamDef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef;
  return proto.tensorflow.HParamDef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef}
 */
proto.tensorflow.HParamDef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getHparamMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.HParamDef.HParamType.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHparamMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.HParamDef.HParamType.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef.BytesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.HParamDef.BytesList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.HParamDef.BytesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.BytesList.displayName = 'proto.tensorflow.HParamDef.BytesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.HParamDef.BytesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.BytesList.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.BytesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef.BytesList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.BytesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: msg.getValueList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef.BytesList}
 */
proto.tensorflow.HParamDef.BytesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef.BytesList;
  return proto.tensorflow.HParamDef.BytesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef.BytesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef.BytesList}
 */
proto.tensorflow.HParamDef.BytesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.BytesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.BytesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef.BytesList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.BytesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.tensorflow.HParamDef.BytesList.prototype.getValueList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getValueList()`
 * @return {!Array.<string>}
 */
proto.tensorflow.HParamDef.BytesList.prototype.getValueList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getValueList()));
};


/**
 * repeated bytes value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.tensorflow.HParamDef.BytesList.prototype.getValueList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValueList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.tensorflow.HParamDef.BytesList.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.tensorflow.HParamDef.BytesList.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tensorflow.HParamDef.BytesList.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef.FloatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.HParamDef.FloatList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.HParamDef.FloatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.FloatList.displayName = 'proto.tensorflow.HParamDef.FloatList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.HParamDef.FloatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.FloatList.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.FloatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef.FloatList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.FloatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef.FloatList}
 */
proto.tensorflow.HParamDef.FloatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef.FloatList;
  return proto.tensorflow.HParamDef.FloatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef.FloatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef.FloatList}
 */
proto.tensorflow.HParamDef.FloatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.FloatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.FloatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef.FloatList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.FloatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.HParamDef.FloatList.prototype.getValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.tensorflow.HParamDef.FloatList.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.HParamDef.FloatList.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tensorflow.HParamDef.FloatList.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef.Int64List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.HParamDef.Int64List.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.HParamDef.Int64List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.Int64List.displayName = 'proto.tensorflow.HParamDef.Int64List';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.HParamDef.Int64List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.Int64List.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.Int64List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef.Int64List} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.Int64List.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef.Int64List}
 */
proto.tensorflow.HParamDef.Int64List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef.Int64List;
  return proto.tensorflow.HParamDef.Int64List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef.Int64List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef.Int64List}
 */
proto.tensorflow.HParamDef.Int64List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.Int64List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.Int64List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef.Int64List} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.Int64List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.HParamDef.Int64List.prototype.getValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.tensorflow.HParamDef.Int64List.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.HParamDef.Int64List.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tensorflow.HParamDef.Int64List.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef.BoolList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.HParamDef.BoolList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.HParamDef.BoolList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.BoolList.displayName = 'proto.tensorflow.HParamDef.BoolList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.HParamDef.BoolList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.BoolList.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.BoolList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef.BoolList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.BoolList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef.BoolList}
 */
proto.tensorflow.HParamDef.BoolList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef.BoolList;
  return proto.tensorflow.HParamDef.BoolList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef.BoolList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef.BoolList}
 */
proto.tensorflow.HParamDef.BoolList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.BoolList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.BoolList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef.BoolList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.BoolList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool value = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.tensorflow.HParamDef.BoolList.prototype.getValueList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<boolean>} value */
proto.tensorflow.HParamDef.BoolList.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.tensorflow.HParamDef.BoolList.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tensorflow.HParamDef.BoolList.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.HParamDef.HParamType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.HParamDef.HParamType.oneofGroups_);
};
goog.inherits(proto.tensorflow.HParamDef.HParamType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.HParamDef.HParamType.displayName = 'proto.tensorflow.HParamDef.HParamType';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tensorflow.HParamDef.HParamType.oneofGroups_ = [[1,2,3,7,4,5,6,8]];

/**
 * @enum {number}
 */
proto.tensorflow.HParamDef.HParamType.KindCase = {
  KIND_NOT_SET: 0,
  INT64_VALUE: 1,
  FLOAT_VALUE: 2,
  BYTES_VALUE: 3,
  BOOL_VALUE: 7,
  INT64_LIST: 4,
  FLOAT_LIST: 5,
  BYTES_LIST: 6,
  BOOL_LIST: 8
};

/**
 * @return {proto.tensorflow.HParamDef.HParamType.KindCase}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getKindCase = function() {
  return /** @type {proto.tensorflow.HParamDef.HParamType.KindCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.HParamDef.HParamType.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.HParamDef.HParamType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HParamDef.HParamType} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.HParamDef.HParamType.toObject = function(includeInstance, msg) {
  var f, obj = {
    int64Value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    floatValue: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    bytesValue: msg.getBytesValue_asB64(),
    boolValue: jspb.Message.getFieldWithDefault(msg, 7, false),
    int64List: (f = msg.getInt64List()) && proto.tensorflow.HParamDef.Int64List.toObject(includeInstance, f),
    floatList: (f = msg.getFloatList()) && proto.tensorflow.HParamDef.FloatList.toObject(includeInstance, f),
    bytesList: (f = msg.getBytesList()) && proto.tensorflow.HParamDef.BytesList.toObject(includeInstance, f),
    boolList: (f = msg.getBoolList()) && proto.tensorflow.HParamDef.BoolList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HParamDef.HParamType}
 */
proto.tensorflow.HParamDef.HParamType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.HParamDef.HParamType;
  return proto.tensorflow.HParamDef.HParamType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HParamDef.HParamType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HParamDef.HParamType}
 */
proto.tensorflow.HParamDef.HParamType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Value(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 4:
      var value = new proto.tensorflow.HParamDef.Int64List;
      reader.readMessage(value,proto.tensorflow.HParamDef.Int64List.deserializeBinaryFromReader);
      msg.setInt64List(value);
      break;
    case 5:
      var value = new proto.tensorflow.HParamDef.FloatList;
      reader.readMessage(value,proto.tensorflow.HParamDef.FloatList.deserializeBinaryFromReader);
      msg.setFloatList(value);
      break;
    case 6:
      var value = new proto.tensorflow.HParamDef.BytesList;
      reader.readMessage(value,proto.tensorflow.HParamDef.BytesList.deserializeBinaryFromReader);
      msg.setBytesList(value);
      break;
    case 8:
      var value = new proto.tensorflow.HParamDef.BoolList;
      reader.readMessage(value,proto.tensorflow.HParamDef.BoolList.deserializeBinaryFromReader);
      msg.setBoolList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.HParamType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.HParamDef.HParamType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HParamDef.HParamType} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.HParamDef.HParamType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getInt64List();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tensorflow.HParamDef.Int64List.serializeBinaryToWriter
    );
  }
  f = message.getFloatList();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tensorflow.HParamDef.FloatList.serializeBinaryToWriter
    );
  }
  f = message.getBytesList();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tensorflow.HParamDef.BytesList.serializeBinaryToWriter
    );
  }
  f = message.getBoolList();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tensorflow.HParamDef.BoolList.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 int64_value = 1;
 * @return {number}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.HParamDef.HParamType.prototype.setInt64Value = function(value) {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearInt64Value = function() {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasInt64Value = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float float_value = 2;
 * @return {number}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getFloatValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.tensorflow.HParamDef.HParamType.prototype.setFloatValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearFloatValue = function() {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes bytes_value = 3;
 * @return {string}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBytesValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bytes_value = 3;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.tensorflow.HParamDef.HParamType.prototype.setBytesValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearBytesValue = function() {
  jspb.Message.setOneofField(this, 3, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.tensorflow.HParamDef.HParamType.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 7, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 7, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Int64List int64_list = 4;
 * @return {?proto.tensorflow.HParamDef.Int64List}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getInt64List = function() {
  return /** @type{?proto.tensorflow.HParamDef.Int64List} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.HParamDef.Int64List, 4));
};


/** @param {?proto.tensorflow.HParamDef.Int64List|undefined} value */
proto.tensorflow.HParamDef.HParamType.prototype.setInt64List = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearInt64List = function() {
  this.setInt64List(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasInt64List = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FloatList float_list = 5;
 * @return {?proto.tensorflow.HParamDef.FloatList}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getFloatList = function() {
  return /** @type{?proto.tensorflow.HParamDef.FloatList} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.HParamDef.FloatList, 5));
};


/** @param {?proto.tensorflow.HParamDef.FloatList|undefined} value */
proto.tensorflow.HParamDef.HParamType.prototype.setFloatList = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearFloatList = function() {
  this.setFloatList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasFloatList = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BytesList bytes_list = 6;
 * @return {?proto.tensorflow.HParamDef.BytesList}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBytesList = function() {
  return /** @type{?proto.tensorflow.HParamDef.BytesList} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.HParamDef.BytesList, 6));
};


/** @param {?proto.tensorflow.HParamDef.BytesList|undefined} value */
proto.tensorflow.HParamDef.HParamType.prototype.setBytesList = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearBytesList = function() {
  this.setBytesList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasBytesList = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BoolList bool_list = 8;
 * @return {?proto.tensorflow.HParamDef.BoolList}
 */
proto.tensorflow.HParamDef.HParamType.prototype.getBoolList = function() {
  return /** @type{?proto.tensorflow.HParamDef.BoolList} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.HParamDef.BoolList, 8));
};


/** @param {?proto.tensorflow.HParamDef.BoolList|undefined} value */
proto.tensorflow.HParamDef.HParamType.prototype.setBoolList = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.tensorflow.HParamDef.HParamType.oneofGroups_[0], value);
};


proto.tensorflow.HParamDef.HParamType.prototype.clearBoolList = function() {
  this.setBoolList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.HParamDef.HParamType.prototype.hasBoolList = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, HParamType> hparam = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.HParamDef.HParamType>}
 */
proto.tensorflow.HParamDef.prototype.getHparamMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tensorflow.HParamDef.HParamType>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tensorflow.HParamDef.HParamType));
};


proto.tensorflow.HParamDef.prototype.clearHparamMap = function() {
  this.getHparamMap().clear();
};


