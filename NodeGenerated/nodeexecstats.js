/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.NodeExecStats');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.tensorflow.AllocationDescription');
goog.require('proto.tensorflow.AllocatorMemoryUsed');
goog.require('proto.tensorflow.MemoryStats');
goog.require('proto.tensorflow.NodeOutput');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.NodeExecStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.NodeExecStats.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.NodeExecStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.NodeExecStats.displayName = 'proto.tensorflow.NodeExecStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.NodeExecStats.repeatedFields_ = [6,7,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.NodeExecStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.NodeExecStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.NodeExecStats} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.NodeExecStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allStartMicros: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opStartRelMicros: jspb.Message.getFieldWithDefault(msg, 3, 0),
    opEndRelMicros: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allEndRelMicros: jspb.Message.getFieldWithDefault(msg, 5, 0),
    memoryList: jspb.Message.toObjectList(msg.getMemoryList(),
    proto.tensorflow.AllocatorMemoryUsed.toObject, includeInstance),
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.tensorflow.NodeOutput.toObject, includeInstance),
    timelineLabel: jspb.Message.getFieldWithDefault(msg, 8, ""),
    scheduledMicros: jspb.Message.getFieldWithDefault(msg, 9, 0),
    threadId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    referencedTensorList: jspb.Message.toObjectList(msg.getReferencedTensorList(),
    proto.tensorflow.AllocationDescription.toObject, includeInstance),
    memoryStats: (f = msg.getMemoryStats()) && proto.tensorflow.MemoryStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.NodeExecStats}
 */
proto.tensorflow.NodeExecStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.NodeExecStats;
  return proto.tensorflow.NodeExecStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.NodeExecStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.NodeExecStats}
 */
proto.tensorflow.NodeExecStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllStartMicros(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpStartRelMicros(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpEndRelMicros(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllEndRelMicros(value);
      break;
    case 6:
      var value = new proto.tensorflow.AllocatorMemoryUsed;
      reader.readMessage(value,proto.tensorflow.AllocatorMemoryUsed.deserializeBinaryFromReader);
      msg.addMemory(value);
      break;
    case 7:
      var value = new proto.tensorflow.NodeOutput;
      reader.readMessage(value,proto.tensorflow.NodeOutput.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineLabel(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScheduledMicros(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreadId(value);
      break;
    case 11:
      var value = new proto.tensorflow.AllocationDescription;
      reader.readMessage(value,proto.tensorflow.AllocationDescription.deserializeBinaryFromReader);
      msg.addReferencedTensor(value);
      break;
    case 12:
      var value = new proto.tensorflow.MemoryStats;
      reader.readMessage(value,proto.tensorflow.MemoryStats.deserializeBinaryFromReader);
      msg.setMemoryStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.NodeExecStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.NodeExecStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.NodeExecStats} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.NodeExecStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllStartMicros();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOpStartRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOpEndRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAllEndRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.AllocatorMemoryUsed.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tensorflow.NodeOutput.serializeBinaryToWriter
    );
  }
  f = message.getTimelineLabel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getScheduledMicros();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getThreadId();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getReferencedTensorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.tensorflow.AllocationDescription.serializeBinaryToWriter
    );
  }
  f = message.getMemoryStats();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tensorflow.MemoryStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.tensorflow.NodeExecStats.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.NodeExecStats.prototype.setNodeName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 all_start_micros = 2;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllStartMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllStartMicros = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 op_start_rel_micros = 3;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpStartRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpStartRelMicros = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 op_end_rel_micros = 4;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpEndRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpEndRelMicros = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 all_end_rel_micros = 5;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllEndRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllEndRelMicros = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated AllocatorMemoryUsed memory = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.AllocatorMemoryUsed>}
 */
proto.tensorflow.NodeExecStats.prototype.getMemoryList = function() {
  return /** @type{!Array.<!proto.tensorflow.AllocatorMemoryUsed>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.AllocatorMemoryUsed, 6));
};


/** @param {!Array.<!proto.tensorflow.AllocatorMemoryUsed>} value */
proto.tensorflow.NodeExecStats.prototype.setMemoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.AllocatorMemoryUsed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AllocatorMemoryUsed}
 */
proto.tensorflow.NodeExecStats.prototype.addMemory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.AllocatorMemoryUsed, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearMemoryList = function() {
  this.setMemoryList([]);
};


/**
 * repeated NodeOutput output = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.NodeOutput>}
 */
proto.tensorflow.NodeExecStats.prototype.getOutputList = function() {
  return /** @type{!Array.<!proto.tensorflow.NodeOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NodeOutput, 7));
};


/** @param {!Array.<!proto.tensorflow.NodeOutput>} value */
proto.tensorflow.NodeExecStats.prototype.setOutputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tensorflow.NodeOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeOutput}
 */
proto.tensorflow.NodeExecStats.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tensorflow.NodeOutput, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearOutputList = function() {
  this.setOutputList([]);
};


/**
 * optional string timeline_label = 8;
 * @return {string}
 */
proto.tensorflow.NodeExecStats.prototype.getTimelineLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.tensorflow.NodeExecStats.prototype.setTimelineLabel = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 scheduled_micros = 9;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getScheduledMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setScheduledMicros = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 thread_id = 10;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getThreadId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setThreadId = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * repeated AllocationDescription referenced_tensor = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.AllocationDescription>}
 */
proto.tensorflow.NodeExecStats.prototype.getReferencedTensorList = function() {
  return /** @type{!Array.<!proto.tensorflow.AllocationDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.AllocationDescription, 11));
};


/** @param {!Array.<!proto.tensorflow.AllocationDescription>} value */
proto.tensorflow.NodeExecStats.prototype.setReferencedTensorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.tensorflow.AllocationDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AllocationDescription}
 */
proto.tensorflow.NodeExecStats.prototype.addReferencedTensor = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.tensorflow.AllocationDescription, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearReferencedTensorList = function() {
  this.setReferencedTensorList([]);
};


/**
 * optional MemoryStats memory_stats = 12;
 * @return {?proto.tensorflow.MemoryStats}
 */
proto.tensorflow.NodeExecStats.prototype.getMemoryStats = function() {
  return /** @type{?proto.tensorflow.MemoryStats} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.MemoryStats, 12));
};


/** @param {?proto.tensorflow.MemoryStats|undefined} value */
proto.tensorflow.NodeExecStats.prototype.setMemoryStats = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.tensorflow.NodeExecStats.prototype.clearMemoryStats = function() {
  this.setMemoryStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.NodeExecStats.prototype.hasMemoryStats = function() {
  return jspb.Message.getField(this, 12) != null;
};


