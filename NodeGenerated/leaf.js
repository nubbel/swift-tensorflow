/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.boosted_trees.trees.Leaf');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.tensorflow.boosted_trees.trees.SparseVector');
goog.require('proto.tensorflow.boosted_trees.trees.Vector');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.boosted_trees.trees.Leaf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.boosted_trees.trees.Leaf.oneofGroups_);
};
goog.inherits(proto.tensorflow.boosted_trees.trees.Leaf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.boosted_trees.trees.Leaf.displayName = 'proto.tensorflow.boosted_trees.trees.Leaf';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tensorflow.boosted_trees.trees.Leaf.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tensorflow.boosted_trees.trees.Leaf.LeafCase = {
  LEAF_NOT_SET: 0,
  VECTOR: 1,
  SPARSE_VECTOR: 2
};

/**
 * @return {proto.tensorflow.boosted_trees.trees.Leaf.LeafCase}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.getLeafCase = function() {
  return /** @type {proto.tensorflow.boosted_trees.trees.Leaf.LeafCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.boosted_trees.trees.Leaf.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.boosted_trees.trees.Leaf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.boosted_trees.trees.Leaf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.boosted_trees.trees.Leaf.toObject = function(includeInstance, msg) {
  var f, obj = {
    vector: (f = msg.getVector()) && proto.tensorflow.boosted_trees.trees.Vector.toObject(includeInstance, f),
    sparseVector: (f = msg.getSparseVector()) && proto.tensorflow.boosted_trees.trees.SparseVector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.boosted_trees.trees.Leaf}
 */
proto.tensorflow.boosted_trees.trees.Leaf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.boosted_trees.trees.Leaf;
  return proto.tensorflow.boosted_trees.trees.Leaf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.boosted_trees.trees.Leaf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.boosted_trees.trees.Leaf}
 */
proto.tensorflow.boosted_trees.trees.Leaf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.boosted_trees.trees.Vector;
      reader.readMessage(value,proto.tensorflow.boosted_trees.trees.Vector.deserializeBinaryFromReader);
      msg.setVector(value);
      break;
    case 2:
      var value = new proto.tensorflow.boosted_trees.trees.SparseVector;
      reader.readMessage(value,proto.tensorflow.boosted_trees.trees.SparseVector.deserializeBinaryFromReader);
      msg.setSparseVector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.boosted_trees.trees.Leaf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.boosted_trees.trees.Leaf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.boosted_trees.trees.Leaf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tensorflow.boosted_trees.trees.Vector.serializeBinaryToWriter
    );
  }
  f = message.getSparseVector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tensorflow.boosted_trees.trees.SparseVector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector vector = 1;
 * @return {?proto.tensorflow.boosted_trees.trees.Vector}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.getVector = function() {
  return /** @type{?proto.tensorflow.boosted_trees.trees.Vector} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.boosted_trees.trees.Vector, 1));
};


/** @param {?proto.tensorflow.boosted_trees.trees.Vector|undefined} value */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.setVector = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.boosted_trees.trees.Leaf.oneofGroups_[0], value);
};


proto.tensorflow.boosted_trees.trees.Leaf.prototype.clearVector = function() {
  this.setVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.hasVector = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SparseVector sparse_vector = 2;
 * @return {?proto.tensorflow.boosted_trees.trees.SparseVector}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.getSparseVector = function() {
  return /** @type{?proto.tensorflow.boosted_trees.trees.SparseVector} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.boosted_trees.trees.SparseVector, 2));
};


/** @param {?proto.tensorflow.boosted_trees.trees.SparseVector|undefined} value */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.setSparseVector = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.tensorflow.boosted_trees.trees.Leaf.oneofGroups_[0], value);
};


proto.tensorflow.boosted_trees.trees.Leaf.prototype.clearSparseVector = function() {
  this.setSparseVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.boosted_trees.trees.Leaf.prototype.hasSparseVector = function() {
  return jspb.Message.getField(this, 2) != null;
};


