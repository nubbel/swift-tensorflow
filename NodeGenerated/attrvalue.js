/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.tensorflow.AttrValue');
goog.provide('proto.tensorflow.AttrValue.ListValue');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.tensorflow.NameAttrList');
goog.require('proto.tensorflow.TensorProto');
goog.require('proto.tensorflow.TensorShapeProto');

goog.forwardDeclare('proto.tensorflow.DataType');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.AttrValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.AttrValue.oneofGroups_);
};
goog.inherits(proto.tensorflow.AttrValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.AttrValue.displayName = 'proto.tensorflow.AttrValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tensorflow.AttrValue.oneofGroups_ = [[2,3,4,5,6,7,8,1,10,9]];

/**
 * @enum {number}
 */
proto.tensorflow.AttrValue.ValueCase = {
  VALUE_NOT_SET: 0,
  S: 2,
  I: 3,
  F: 4,
  B: 5,
  TYPE: 6,
  SHAPE: 7,
  TENSOR: 8,
  LIST: 1,
  FUNC: 10,
  PLACEHOLDER: 9
};

/**
 * @return {proto.tensorflow.AttrValue.ValueCase}
 */
proto.tensorflow.AttrValue.prototype.getValueCase = function() {
  return /** @type {proto.tensorflow.AttrValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.AttrValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.AttrValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.AttrValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AttrValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.AttrValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: msg.getS_asB64(),
    i: jspb.Message.getFieldWithDefault(msg, 3, 0),
    f: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    b: jspb.Message.getFieldWithDefault(msg, 5, false),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    shape: (f = msg.getShape()) && proto.tensorflow.TensorShapeProto.toObject(includeInstance, f),
    tensor: (f = msg.getTensor()) && proto.tensorflow.TensorProto.toObject(includeInstance, f),
    list: (f = msg.getList()) && proto.tensorflow.AttrValue.ListValue.toObject(includeInstance, f),
    func: (f = msg.getFunc()) && proto.tensorflow.NameAttrList.toObject(includeInstance, f),
    placeholder: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AttrValue}
 */
proto.tensorflow.AttrValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.AttrValue;
  return proto.tensorflow.AttrValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AttrValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AttrValue}
 */
proto.tensorflow.AttrValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setI(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setB(value);
      break;
    case 6:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = new proto.tensorflow.TensorShapeProto;
      reader.readMessage(value,proto.tensorflow.TensorShapeProto.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 8:
      var value = new proto.tensorflow.TensorProto;
      reader.readMessage(value,proto.tensorflow.TensorProto.deserializeBinaryFromReader);
      msg.setTensor(value);
      break;
    case 1:
      var value = new proto.tensorflow.AttrValue.ListValue;
      reader.readMessage(value,proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 10:
      var value = new proto.tensorflow.NameAttrList;
      reader.readMessage(value,proto.tensorflow.NameAttrList.deserializeBinaryFromReader);
      msg.setFunc(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceholder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.AttrValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.AttrValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AttrValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.AttrValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tensorflow.TensorShapeProto.serializeBinaryToWriter
    );
  }
  f = message.getTensor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tensorflow.TensorProto.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter
    );
  }
  f = message.getFunc();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.tensorflow.NameAttrList.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.AttrValue.ListValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.AttrValue.ListValue.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.AttrValue.ListValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.AttrValue.ListValue.displayName = 'proto.tensorflow.AttrValue.ListValue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.AttrValue.ListValue.repeatedFields_ = [2,3,4,5,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.AttrValue.ListValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.AttrValue.ListValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AttrValue.ListValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.tensorflow.AttrValue.ListValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    sList: msg.getSList_asB64(),
    iList: jspb.Message.getField(msg, 3),
    fList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    bList: jspb.Message.getField(msg, 5),
    typeList: jspb.Message.getField(msg, 6),
    shapeList: jspb.Message.toObjectList(msg.getShapeList(),
    proto.tensorflow.TensorShapeProto.toObject, includeInstance),
    tensorList: jspb.Message.toObjectList(msg.getTensorList(),
    proto.tensorflow.TensorProto.toObject, includeInstance),
    funcList: jspb.Message.toObjectList(msg.getFuncList(),
    proto.tensorflow.NameAttrList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AttrValue.ListValue}
 */
proto.tensorflow.AttrValue.ListValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.AttrValue.ListValue;
  return proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AttrValue.ListValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AttrValue.ListValue}
 */
proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addS(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setIList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setFList(value);
      break;
    case 5:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setBList(value);
      break;
    case 6:
      var value = /** @type {!Array.<!proto.tensorflow.DataType>} */ (reader.readPackedEnum());
      msg.setTypeList(value);
      break;
    case 7:
      var value = new proto.tensorflow.TensorShapeProto;
      reader.readMessage(value,proto.tensorflow.TensorShapeProto.deserializeBinaryFromReader);
      msg.addShape(value);
      break;
    case 8:
      var value = new proto.tensorflow.TensorProto;
      reader.readMessage(value,proto.tensorflow.TensorProto.deserializeBinaryFromReader);
      msg.addTensor(value);
      break;
    case 9:
      var value = new proto.tensorflow.NameAttrList;
      reader.readMessage(value,proto.tensorflow.NameAttrList.deserializeBinaryFromReader);
      msg.addFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.AttrValue.ListValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AttrValue.ListValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getIList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getFList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getBList();
  if (f.length > 0) {
    writer.writePackedBool(
      5,
      f
    );
  }
  f = message.getTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tensorflow.TensorShapeProto.serializeBinaryToWriter
    );
  }
  f = message.getTensorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.tensorflow.TensorProto.serializeBinaryToWriter
    );
  }
  f = message.getFuncList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.tensorflow.NameAttrList.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bytes s = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getSList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes s = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getSList()`
 * @return {!Array.<string>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getSList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getSList()));
};


/**
 * repeated bytes s = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getSList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.tensorflow.AttrValue.ListValue.prototype.setSList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.tensorflow.AttrValue.ListValue.prototype.addS = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearSList = function() {
  this.setSList([]);
};


/**
 * repeated int64 i = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getIList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setIList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.AttrValue.ListValue.prototype.addI = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearIList = function() {
  this.setIList([]);
};


/**
 * repeated float f = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getFList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array.<number>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setFList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.AttrValue.ListValue.prototype.addF = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearFList = function() {
  this.setFList([]);
};


/**
 * repeated bool b = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getBList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<boolean>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setBList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.tensorflow.AttrValue.ListValue.prototype.addB = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearBList = function() {
  this.setBList([]);
};


/**
 * repeated DataType type = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.DataType>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getTypeList = function() {
  return /** @type {!Array.<!proto.tensorflow.DataType>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<!proto.tensorflow.DataType>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setTypeList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.tensorflow.DataType} value
 * @param {number=} opt_index
 */
proto.tensorflow.AttrValue.ListValue.prototype.addType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearTypeList = function() {
  this.setTypeList([]);
};


/**
 * repeated TensorShapeProto shape = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.TensorShapeProto>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getShapeList = function() {
  return /** @type{!Array.<!proto.tensorflow.TensorShapeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.TensorShapeProto, 7));
};


/** @param {!Array.<!proto.tensorflow.TensorShapeProto>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setShapeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tensorflow.TensorShapeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.TensorShapeProto}
 */
proto.tensorflow.AttrValue.ListValue.prototype.addShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tensorflow.TensorShapeProto, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * repeated TensorProto tensor = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.TensorProto>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getTensorList = function() {
  return /** @type{!Array.<!proto.tensorflow.TensorProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.TensorProto, 8));
};


/** @param {!Array.<!proto.tensorflow.TensorProto>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setTensorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.tensorflow.TensorProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.TensorProto}
 */
proto.tensorflow.AttrValue.ListValue.prototype.addTensor = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tensorflow.TensorProto, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearTensorList = function() {
  this.setTensorList([]);
};


/**
 * repeated NameAttrList func = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.tensorflow.NameAttrList>}
 */
proto.tensorflow.AttrValue.ListValue.prototype.getFuncList = function() {
  return /** @type{!Array.<!proto.tensorflow.NameAttrList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NameAttrList, 9));
};


/** @param {!Array.<!proto.tensorflow.NameAttrList>} value */
proto.tensorflow.AttrValue.ListValue.prototype.setFuncList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.tensorflow.NameAttrList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NameAttrList}
 */
proto.tensorflow.AttrValue.ListValue.prototype.addFunc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.tensorflow.NameAttrList, opt_index);
};


proto.tensorflow.AttrValue.ListValue.prototype.clearFuncList = function() {
  this.setFuncList([]);
};


/**
 * optional bytes s = 2;
 * @return {string}
 */
proto.tensorflow.AttrValue.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes s = 2;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.tensorflow.AttrValue.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.tensorflow.AttrValue.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/** @param {!(string|Uint8Array)} value */
proto.tensorflow.AttrValue.prototype.setS = function(value) {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearS = function() {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 i = 3;
 * @return {number}
 */
proto.tensorflow.AttrValue.prototype.getI = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.AttrValue.prototype.setI = function(value) {
  jspb.Message.setOneofField(this, 3, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearI = function() {
  jspb.Message.setOneofField(this, 3, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasI = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float f = 4;
 * @return {number}
 */
proto.tensorflow.AttrValue.prototype.getF = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.tensorflow.AttrValue.prototype.setF = function(value) {
  jspb.Message.setOneofField(this, 4, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearF = function() {
  jspb.Message.setOneofField(this, 4, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasF = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool b = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.AttrValue.prototype.getB = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.tensorflow.AttrValue.prototype.setB = function(value) {
  jspb.Message.setOneofField(this, 5, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearB = function() {
  jspb.Message.setOneofField(this, 5, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasB = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DataType type = 6;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.AttrValue.prototype.getType = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.AttrValue.prototype.setType = function(value) {
  jspb.Message.setOneofField(this, 6, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearType = function() {
  jspb.Message.setOneofField(this, 6, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TensorShapeProto shape = 7;
 * @return {?proto.tensorflow.TensorShapeProto}
 */
proto.tensorflow.AttrValue.prototype.getShape = function() {
  return /** @type{?proto.tensorflow.TensorShapeProto} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.TensorShapeProto, 7));
};


/** @param {?proto.tensorflow.TensorShapeProto|undefined} value */
proto.tensorflow.AttrValue.prototype.setShape = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasShape = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TensorProto tensor = 8;
 * @return {?proto.tensorflow.TensorProto}
 */
proto.tensorflow.AttrValue.prototype.getTensor = function() {
  return /** @type{?proto.tensorflow.TensorProto} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.TensorProto, 8));
};


/** @param {?proto.tensorflow.TensorProto|undefined} value */
proto.tensorflow.AttrValue.prototype.setTensor = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearTensor = function() {
  this.setTensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasTensor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ListValue list = 1;
 * @return {?proto.tensorflow.AttrValue.ListValue}
 */
proto.tensorflow.AttrValue.prototype.getList = function() {
  return /** @type{?proto.tensorflow.AttrValue.ListValue} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.AttrValue.ListValue, 1));
};


/** @param {?proto.tensorflow.AttrValue.ListValue|undefined} value */
proto.tensorflow.AttrValue.prototype.setList = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearList = function() {
  this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NameAttrList func = 10;
 * @return {?proto.tensorflow.NameAttrList}
 */
proto.tensorflow.AttrValue.prototype.getFunc = function() {
  return /** @type{?proto.tensorflow.NameAttrList} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.NameAttrList, 10));
};


/** @param {?proto.tensorflow.NameAttrList|undefined} value */
proto.tensorflow.AttrValue.prototype.setFunc = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearFunc = function() {
  this.setFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasFunc = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string placeholder = 9;
 * @return {string}
 */
proto.tensorflow.AttrValue.prototype.getPlaceholder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.tensorflow.AttrValue.prototype.setPlaceholder = function(value) {
  jspb.Message.setOneofField(this, 9, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};


proto.tensorflow.AttrValue.prototype.clearPlaceholder = function() {
  jspb.Message.setOneofField(this, 9, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.AttrValue.prototype.hasPlaceholder = function() {
  return jspb.Message.getField(this, 9) != null;
};


