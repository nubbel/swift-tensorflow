/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.compare_test.Large');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.compare_test.Medium');
goog.require('proto.compare_test.Small');
goog.require('proto.compare_test.WithMap');

goog.forwardDeclare('proto.compare_test.Enum');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compare_test.Large = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.compare_test.Large.repeatedFields_, null);
};
goog.inherits(proto.compare_test.Large, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compare_test.Large.displayName = 'proto.compare_test.Large';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.compare_test.Large.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compare_test.Large.prototype.toObject = function(opt_includeInstance) {
  return proto.compare_test.Large.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compare_test.Large} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compare_test.Large.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getField(msg, 1),
    int64: jspb.Message.getField(msg, 2),
    pb_float: jspb.Message.getOptionalFloatingPointField(msg, 3),
    bool: jspb.Message.getField(msg, 4),
    pb_enum: jspb.Message.getField(msg, 5),
    int64sList: jspb.Message.getField(msg, 6),
    medium: (f = msg.getMedium()) && proto.compare_test.Medium.toObject(includeInstance, f),
    small: (f = msg.getSmall()) && proto.compare_test.Small.toObject(includeInstance, f),
    pb_double: jspb.Message.getOptionalFloatingPointField(msg, 9),
    withMap: (f = msg.getWithMap()) && proto.compare_test.WithMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compare_test.Large}
 */
proto.compare_test.Large.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compare_test.Large;
  return proto.compare_test.Large.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compare_test.Large} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compare_test.Large}
 */
proto.compare_test.Large.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    case 5:
      var value = /** @type {!proto.compare_test.Enum} */ (reader.readEnum());
      msg.setEnum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addInt64s(value);
      break;
    case 7:
      var value = new proto.compare_test.Medium;
      reader.readMessage(value,proto.compare_test.Medium.deserializeBinaryFromReader);
      msg.setMedium(value);
      break;
    case 8:
      var value = new proto.compare_test.Small;
      reader.readMessage(value,proto.compare_test.Small.deserializeBinaryFromReader);
      msg.setSmall(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 10:
      var value = new proto.compare_test.WithMap;
      reader.readMessage(value,proto.compare_test.WithMap.deserializeBinaryFromReader);
      msg.setWithMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compare_test.Large.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compare_test.Large.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compare_test.Large} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compare_test.Large.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {!proto.compare_test.Enum} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getInt64sList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      6,
      f
    );
  }
  f = message.getMedium();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.compare_test.Medium.serializeBinaryToWriter
    );
  }
  f = message.getSmall();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.compare_test.Small.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getWithMap();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.compare_test.WithMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional string string_ = 1;
 * @return {string}
 */
proto.compare_test.Large.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.compare_test.Large.prototype.setString = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.compare_test.Large.prototype.clearString = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 int64_ = 2;
 * @return {number}
 */
proto.compare_test.Large.prototype.getInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.compare_test.Large.prototype.setInt64 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.compare_test.Large.prototype.clearInt64 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float float_ = 3;
 * @return {number}
 */
proto.compare_test.Large.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.compare_test.Large.prototype.setFloat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.compare_test.Large.prototype.clearFloat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_ = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.compare_test.Large.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.compare_test.Large.prototype.setBool = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.compare_test.Large.prototype.clearBool = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasBool = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Enum enum_ = 5;
 * @return {!proto.compare_test.Enum}
 */
proto.compare_test.Large.prototype.getEnum = function() {
  return /** @type {!proto.compare_test.Enum} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.compare_test.Enum} value */
proto.compare_test.Large.prototype.setEnum = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.compare_test.Large.prototype.clearEnum = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasEnum = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated int64 int64s = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.compare_test.Large.prototype.getInt64sList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<number>} value */
proto.compare_test.Large.prototype.setInt64sList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.compare_test.Large.prototype.addInt64s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.compare_test.Large.prototype.clearInt64sList = function() {
  this.setInt64sList([]);
};


/**
 * optional Medium medium = 7;
 * @return {?proto.compare_test.Medium}
 */
proto.compare_test.Large.prototype.getMedium = function() {
  return /** @type{?proto.compare_test.Medium} */ (
    jspb.Message.getWrapperField(this, proto.compare_test.Medium, 7));
};


/** @param {?proto.compare_test.Medium|undefined} value */
proto.compare_test.Large.prototype.setMedium = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.compare_test.Large.prototype.clearMedium = function() {
  this.setMedium(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasMedium = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Small small = 8;
 * @return {?proto.compare_test.Small}
 */
proto.compare_test.Large.prototype.getSmall = function() {
  return /** @type{?proto.compare_test.Small} */ (
    jspb.Message.getWrapperField(this, proto.compare_test.Small, 8));
};


/** @param {?proto.compare_test.Small|undefined} value */
proto.compare_test.Large.prototype.setSmall = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.compare_test.Large.prototype.clearSmall = function() {
  this.setSmall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasSmall = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double double_ = 9;
 * @return {number}
 */
proto.compare_test.Large.prototype.getDouble = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.compare_test.Large.prototype.setDouble = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.compare_test.Large.prototype.clearDouble = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional WithMap with_map = 10;
 * @return {?proto.compare_test.WithMap}
 */
proto.compare_test.Large.prototype.getWithMap = function() {
  return /** @type{?proto.compare_test.WithMap} */ (
    jspb.Message.getWrapperField(this, proto.compare_test.WithMap, 10));
};


/** @param {?proto.compare_test.WithMap|undefined} value */
proto.compare_test.Large.prototype.setWithMap = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.compare_test.Large.prototype.clearWithMap = function() {
  this.setWithMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compare_test.Large.prototype.hasWithMap = function() {
  return jspb.Message.getField(this, 10) != null;
};


